<?xml version="1.0" ?>
<cherrytree>
	<node custom_icon_id="0" foreground="" is_bold="False" name="信息" prog_lang="custom-colors" readonly="False" tags="" unique_id="1">
		<rich_text>
仓库网站： </rich_text>
		<rich_text link="webs http://172.16.11.162/gitweb-fast/gitweb-quicl/">http://172.16.11.162/gitweb-fast/gitwesettb-quicl/</rich_text>
		<rich_text>
</rich_text>
		<rich_text scale="h1">Gerrit</rich_text>
		<rich_text> Code Review : </rich_text>
		<rich_text link="webs http://172.16.11.162:8081/#/q/is:starred">http ://172.16.11.162:8081/#/q/is:starred</rich_text>
		<rich_text>
OpenGrok:</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/">http://172.16.12.204:8080/source/</rich_text>
		<rich_text>
TelWeb: https://172.16.12.62/teleweb/
Alm: alm.tclcom.com:7001/im
Wiki:</rich_text>
		<rich_text link="webs http://172.16.11.152/mediawiki/index.php/%E9%A6%96%E9%A1%B5">http://172.16.11.152/mediawiki/index.php/%E9%A6%96%E9%A1%B5</rich_text>
		<rich_text>
WareHouse </rich_text>
		<rich_text link="webs http://apex.tcl-ta.com:7777/pls/apps/f?p=209:1:4854222045353703311::NO">http://apex.tcl-ta.com:7777/pls/apps/f?p=209:1:4854222045353703311::NO</rich_text>
		<rich_text>

</rich_text>
		<rich_text weight="heavy">高通</rich_text>
		<rich_text>：</rich_text>
		<rich_text link="webs https://createpoint.qti.qualcomm.com/dashboard/">https://createpoint.qti.qualcomm.com/dashboard/</rich_text>
		<rich_text>
查看CR ， 上面首页 -&gt; software Code -&gt; Release History
</rich_text>
		<rich_text link="webs https://createpoint.qti.qualcomm.com/dashboard/public/landing">https://createpoint.qti.qualcomm.com/dashboard/public/landing</rich_text>
		<rich_text>
b
</rich_text>
		<rich_text link="webs http://172.24.61.28/msgm/index.php?r=index/index">http://172.24.61.28/msgm/index.php?r=index/index</rich_text>
		<rich_text> msgn

BuildId 路径
</rich_text>
		<rich_text foreground="#000000">/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/">n8996</rich_text>
		<rich_text foreground="#000000">/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/device/">device</rich_text>
		<rich_text foreground="#000000">/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/device/tct/">tct</rich_text>
		<rich_text foreground="#000000">/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/device/tct/common/">common</rich_text>
		<rich_text foreground="#000000">/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/device/tct/common/Build_Info.txt">Build_Info.txt</rich_text>
		<rich_text>

当高通给我一个新的build后， 可以在case的页面进入这个工程，然后进入diff，与基线比较，然后下载文件

注册代号 : 2906
</rich_text>
		<rich_text link="webs https://chipcode.qti.qualcomm.com/">https://chipcode.qti.qualcomm.com/</rich_text>
		<rich_text>


集成Service : </rich_text>
		<rich_text link="webs http://172.16.12.98:8000/">http://172.16.12.98:8000/</rich_text>
		<rich_text>

Bugzilla : </rich_text>
		<rich_text link="webs http://bugzilla.tcl-ta.com/">http://bugzilla.tcl-ta.com/</rich_text>
		<rich_text>
代码提交步骤：
1.clone修改的代码所对应的仓库
2. 比对修改，如果有新文件添加上来，要用git add添加
3. 运行submit_gui.py 启动提交的图形化界面
4. 在终端根据提示来push代码

onetouchFeedback: </rich_text>
		<rich_text link="webs http://172.24.147.30/feedBackIssus/index">http://172.24.147.30/feedBackIssus/index</rich_text>
		<rich_text>
JrdLogger: </rich_text>
		<rich_text link="webs http://172.24.147.30:8081/usertest/index">http://172.24.147.30:8081/usertest/index</rich_text>
		<rich_text>

git clone git@172.16.11.162:quicl/platform/frameworks/base.git -b m8976
vendor/tct-source/apps/SuperShot.git

platform/packages/apps/Settings.git

ALM </rich_text>
		<rich_text link="webs http://alm.tclcom.com:7001/im">http://alm.tclcom.com:7001/im</rich_text>
		<rich_text> 
EP </rich_text>
		<rich_text link="webs http://ep.tclcom.com/Pages/default.aspx">http://ep.tclcom.com/Pages/default.aspx</rich_text>
		<rich_text>
TCL NETDISK </rich_text>
		<rich_text link="webs http://netdisk.tcl-mobile.com/index.php">http://netdisk.tcl-mobile.com/index.php</rich_text>
		<rich_text>
Wiki </rich_text>
		<rich_text link="webs http://172.16.11.152/mediawiki/index.php/%E9%A6%96%E9%A1%B5">http://172.16.11.152/mediawiki/index.php/%E9%A6%96%E9%A1%B5</rich_text>
		<rich_text>


下第三方软件
</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/">m8976</rich_text>
		<rich_text>/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/custo_wimdata_ng/">custo_wimdata_ng</rich_text>
		<rich_text>/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/custo_wimdata_ng/wcustores/">wcustores</rich_text>
		<rich_text>/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/custo_wimdata_ng/wcustores/App/">App</rich_text>
		<rich_text>/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/custo_wimdata_ng/wcustores/App/common/">common</rich_text>
		<rich_text>/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/custo_wimdata_ng/wcustores/App/common/Unremoveable/">Unremoveable</rich_text>
		<rich_text>/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/custo_wimdata_ng/wcustores/App/common/Unremoveable/ThirdParty/">ThirdParty</rich_text>
		<rich_text>/  

Genetic app 仓库 tree&gt;snapshot
</rich_text>
		<rich_text link="webs http://172.16.11.162/gitweb-fast/gitweb-genericapp/?p=Gallery2.git;a=tree;h=refs/heads/Gallery_Rel3_03;hb=refs/heads/Gallery_Rel3_03">http://172.16.11.162/gitweb-fast/gitweb-genericapp/</rich_text>
		<rich_text>

版本变更查询
</rich_text>
		<rich_text link="webs http://172.16.12.98:8000/home/?prj=mercury-tcl&amp;button=changelist">http://172.16.12.98:8000/home/?prj=mercury-tcl&amp;button=changelist</rich_text>
		<rich_text>

ipv6Test
id:ipv6test07
psw:nb@607

*#3228# 查看版本号
###666#可重新启用谷歌应用

BuildInfo : device/tct/common/Build_info.txt
</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/">Avengers</rich_text>
		<rich_text foreground="#000000">/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/amss_8953/">amss_8953</rich_text>
		<rich_text foreground="#000000">/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/amss_8953/MSM8953.LA.2.0/">MSM8953.LA.2.0</rich_text>
		<rich_text foreground="#000000">/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/amss_8953/MSM8953.LA.2.0/common/">common</rich_text>
		<rich_text foreground="#000000">/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/amss_8953/MSM8953.LA.2.0/common/build/">build</rich_text>
		<rich_text foreground="#000000">/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/amss_8953/MSM8953.LA.2.0/common/build/Ver_Info.txt">Ver_Info.txt</rich_text>
		<rich_text>
hexiaoqin -&gt; 


adb root 后请再运行以下命令
adb shell setenforce 0

再使用adb disable-verity

构建black版本
</rich_text>
		<rich_text link="webs http://172.16.11.170">http://172.16.11.170</rich_text>
		<rich_text>

搜索 idol4s_black

</rich_text>
		<rich_text link="webs http://www.wolai66.com/">http://www.wolai66.com/</rich_text>
		<rich_text>

Sim卡申请系统： </rich_text>
		<rich_text link="webs http://wenda.tcl-mobile.com/sim/">http://wenda.tcl-mobile.com/sim/</rich_text>
		<rich_text>

unlock 
adb reboot bootloader
fastboot oem unlock

变更查询系统
</rich_text>
		<rich_text link="webs http://172.16.12.98:8000">http://172.16.12.98:8000</rich_text>
		<rich_text>

远程终端 remmina
172.16.46.4
username: 93736
密码:93736
domain: SAGEMWIRELESS@wangjie
 
 
 

unable to connect to RDP server 172.16.46.4 
删除.freedp


rps 量产版本
rds 

GAPP信息MSGM
</rich_text>
		<rich_text link="webs http://172.24.61.28/msgm/index.php?r=index/index">http://172.24.61.28/msgm/index.php?r=index/index</rich_text>
		<rich_text>


</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/">xref</rich_text>
		<rich_text>: /</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/">m8976</rich_text>
		<rich_text>/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/vendor/">vendor</rich_text>
		<rich_text>/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/vendor/tctalone/">tctalone</rich_text>
		<rich_text>/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/vendor/tctalone/TctAppPackage/">TctAppPackage</rich_text>
		<rich_text>/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/vendor/tctalone/TctAppPackage/Launcher/">Launcher</rich_text>
		<rich_text>/



Android M 8996平台分支已经创建，下载方式如下：
Android:
repo init -u </rich_text>
		<rich_text link="webs http://moz-txt-link-abbreviated">git@172.16.11.162:quicl/manifests</rich_text>
		<rich_text> -m m8996.xml

AMSS:
git clone </rich_text>
		<rich_text link="webs http://moz-txt-link-abbreviated">git@172.16.11.162:quicl/amss_8996.git</rich_text>
		<rich_text> -b m8996

fstab.com 修改去掉disable-verity


/data/nisc/wifi/wpa_supplicant.conf
	ssid=&quot;Linksys-2015&quot;
	psk=&quot;funccert&quot;
	key_mgmt=WPA-PSK


提交代码abondon掉，在终端使用git reset &lt;前一个Commit ID&gt; 即可


/m8996/custo_wimdata_ng/ 一些翻译什么的


</rich_text>
		<rich_text link="webs http://epas2.tclcom.com/FlowCenter/MyApplication.aspx">http://epas2.tclcom.com/FlowCenter/MyApplication.aspx</rich_text>
		<rich_text>


</rich_text>
		<rich_text scale="h2" weight="heavy">vertu/tron</rich_text>
		<rich_text>
</rich_text>
		<rich_text link="webs http://172.16.11.152/mediawiki/index.php/Vertu/Tron">http://172.16.11.152/mediawiki/index.php/Vertu/Tron</rich_text>
		<rich_text>
公共FR 1862334 ， 提交common
</rich_text>
		<rich_text link="webs https://172.16.12.63/#/dashboard/self">https://172.16.12.63/#/dashboard/self</rich_text>
		<rich_text>
repo init -u git@172.16.11.162:quicl/platform/manifest.git -b Vertu/Tron
repo sync

git clone git@172.16.11.162:quicl/platform/frameworks/base.git -b Vertu/Tron

  1. 代码从 172.16.11.162 下载，
  2. 提交到</rich_text>
		<rich_text foreground="#00478B">时选择产品为 Tron，如果是 Vertu Defect类型的 BUG，JIRA ID为必填项。
  3. 按照给出 的提示，提交。</rich_text>
		<rich_text>
  
  sudo adb reboot edl 
  
  
  
</rich_text>
		<rich_text weight="heavy">root</rich_text>
		<rich_text>
</rich_text>
		<rich_text scale="h2">pc$TCT&amp;nb</rich_text>
		<rich_text>

</rich_text>
		<rich_text link="webs http://172.16.11.152/mediawiki/index.php/Adb_authentication_without_confirmation">http://172.16.11.152/mediawiki/index.php/Adb_authentication_without_confirmation</rich_text>
		<rich_text>

在线时序图
</rich_text>
		<rich_text link="webs http://echoma.github.io/text_sequence_diagram/">http://echoma.github.io/text_sequence_diagram/</rich_text>
		<rich_text>




 Mtp连接读取的是MediaProvider的数据，由于MediaProvider的数据库被未知因素给修改  ，直接删除了MediaProvider数据库中父路径，导致了这个问题。而任何App都可以对MediaProvider进行修改，所以无法找到到底是 谁进行了删除的操作。
 
前面的提交是为了提高MediaProvider数据库的健壮性，希望出现这样数据库异常的时候通过 重启能够恢复。方式就是检查到父路径被异常删除的话，就清楚相应的子路径，MediaScanner再后面再重新生成MediaProvider数据。但 是这会导致一个问题，就是从文件系统中插入的MediaProvider数据会丢失用户添加的额外字段的数据。由于这些数据都是通过应用代码动态添加，删 除以后无法再从文件系统获取，所以不可避免的出现数据的丢失。
 
对比小米5,  华为Mate s ，我自己写了APP删除MedaiProvider数据库中的父路径以后重启，同样也不能够恢复。


</rich_text>
		<rich_text link="webs http://172.16.11.152/mediawiki/index.php/London">http://172.16.11.152/mediawiki/index.php/London</rich_text>
		<rich_text>


代码在线转换网址
</rich_text>
		<rich_text link="webs http://www.planetb.ca/syntax-highlight-word">http://www.planetb.ca/syntax-highlight-word</rich_text>
		<rich_text>


MountService
</rich_text>
		<rich_text foreground="#cc7832">case </rich_text>
		<rich_text>VoldResponseCod@wangjie
 
 
 e.VOLUME_STATE_CHANGED: {
    </rich_text>
		<rich_text foreground="#cc7832">if </rich_text>
		<rich_text>(cooked.</rich_text>
		<rich_text foreground="#9876aa">length </rich_text>
		<rich_text>!= </rich_text>
		<rich_text foreground="#6897bb">3</rich_text>
		<rich_text>) </rich_text>
		<rich_text foreground="#cc7832">break;
    final </rich_text>
		<rich_text>VolumeInfo vol = </rich_text>
		<rich_text foreground="#9876aa">mVolumes</rich_text>
		<rich_text>.get(cooked[</rich_text>
		<rich_text foreground="#6897bb">1</rich_text>
		<rich_text>])</rich_text>
		<rich_text foreground="#cc7832">;
    if </rich_text>
		<rich_text>(vol != </rich_text>
		<rich_text foreground="#cc7832">null</rich_text>
		<rich_text>) {
        </rich_text>
		<rich_text foreground="#cc7832">final int </rich_text>
		<rich_text>oldState = vol.</rich_text>
		<rich_text foreground="#9876aa">state</rich_text>
		<rich_text foreground="#cc7832">;
        final int </rich_text>
		<rich_text>newState = Integer.</rich_text>
		<rich_text style="italic">parseInt</rich_text>
		<rich_text>(cooked[</rich_text>
		<rich_text foreground="#6897bb">2</rich_text>
		<rich_text>])</rich_text>
		<rich_text foreground="#cc7832">;
        </rich_text>
		<rich_text>vol.</rich_text>
		<rich_text foreground="#9876aa">state </rich_text>
		<rich_text>= newState</rich_text>
		<rich_text foreground="#cc7832">;
        </rich_text>
		<rich_text>onVolumeStateChangedLocked(vol</rich_text>
		<rich_text foreground="#cc7832">, </rich_text>
		<rich_text>oldState</rich_text>
		<rich_text foreground="#cc7832">, </rich_text>
		<rich_text>newState)</rich_text>
		<rich_text foreground="#cc7832">;
    </rich_text>
		<rich_text>}
    </rich_text>
		<rich_text foreground="#cc7832">break;
</rich_text>
		<rich_text>}


Abort message: 'FORTIFY:           FD_SET: file descriptor &gt;= FD_SETSIZE'
 
root cause:  Email 问题造成 Fd 泄漏

 
    </rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/">xref</rich_text>
		<rich_text>: /</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/Tron/">Tron</rich_text>
		<rich_text>/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/Tron/packages/">packages</rich_text>
		<rich_text>/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/Tron/packages/apps/">apps</rich_text>
		<rich_text>/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/Tron/packages/apps/UnifiedEmail/">UnifiedEmail</rich_text>
		<rich_text>/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/Tron/packages/apps/UnifiedEmail/src/">src</rich_text>
		<rich_text>/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/Tron/packages/apps/UnifiedEmail/src/com/">com</rich_text>
		<rich_text>/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/Tron/packages/apps/UnifiedEmail/src/com/android/">android</rich_text>
		<rich_text>/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/Tron/packages/apps/UnifiedEmail/src/com/android/mail/">mail</rich_text>
		<rich_text>/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/Tron/packages/apps/UnifiedEmail/src/com/android/mail/compose/">compose</rich_text>
		<rich_text>/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/Tron/packages/apps/UnifiedEmail/src/com/android/mail/compose/ComposeActivity.java">ComposeActivity.java</rich_text>
		<rich_text>493        </rich_text>
		<rich_text weight="heavy">if</rich_text>
		<rich_text> (</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=action&amp;project=Tron">action</rich_text>
		<rich_text> == COMPOSE) {
494            </rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=intent&amp;project=Tron">intent</rich_text>
		<rich_text>.</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setFlags&amp;project=Tron">setFlags</rich_text>
		<rich_text>(</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Intent&amp;project=Tron">Intent</rich_text>
		<rich_text>.</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=FLAG_ACTIVITY_NEW_DOCUMENT&amp;project=Tron">FLAG_ACTIVITY_NEW_DOCUMENT</rich_text>
		<rich_text> | </rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Intent&amp;project=Tron">Intent</rich_text>
		<rich_text>.</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=FLAG_ACTIVITY_MULTIPLE_TASK&amp;project=Tron">FLAG_ACTIVITY_MULTIPLE_TASK</rich_text>
		<rich_text>);
495        } </rich_text>
		<rich_text weight="heavy">else</rich_text>
		<rich_text> </rich_text>
		<rich_text weight="heavy">if</rich_text>
		<rich_text> (</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=message&amp;project=Tron">message</rich_text>
		<rich_text> != </rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=Tron">null</rich_text>
		<rich_text>) { 写一封新邮件,startactivity 使用的flag是multiTask，也就是说，每点击创建新的邮件，都会创建task。Monkey在跑的时候创建了n个邮件的task， 而对应的开的</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/Tron/packages/apps/Email/src/main/java/com/android/email/activity/ComposeActivityEmail.java">ComposeActivityEmail.java </rich_text>
		<rich_text> 

 的 “插入快速语” 会创建很多个fd , 最终导致fd 超过1024， 进程崩溃
 
 
需要Email应用根据需要修改</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/Tron/packages/apps/UnifiedEmail/src/com/android/mail/compose/ComposeActivity.java">ComposeActivity.java</rich_text>
		<rich_text> 代码。


/* [BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu, 2016/08/11, Defect-2545868  recover database after reboot */ 
solution2553354 callback问题


RE: 答复: 答复: Simba6T / 集成GAPP apk
  </rich_text>
		<rich_text justification="left"></rich_text>
		<rich_text>
</rich_text>
		<rich_text foreground="#1F497D"> </rich_text>
		<rich_text>

这个跟MediaScanner没有关系，直接拔出OTG的时候文件已经被破坏了， 这个现象华为P9、小米5都会出现，而如果通过正常弹出就不会出现。这种热插拔直接破坏数据是很常见的现象。

但是我看了下ES文件管理器能够做到，热插拔的情况下还能够很好的保存数据。
所以建议FileManager参考一下ES管理器的实现方式。 

 文档分享
 </rich_text>
		<rich_text link="webs http://spsrv01:8082/SWDC/Documents/Forms/AllItems.aspx?RootFolder=%2fSWDC%2fDocuments%2fFramework&amp;FolderCTID=0x012000423B619BC76D2148B55C8EC9CF9C59D5">http://spsrv01:8082/SWDC/Documents/Forms/AllItems.aspx?RootFolder=%2fSWDC%2fDocuments%2fFramework&amp;FolderCTID=0x012000423B619BC76D2148B55C8EC9CF9C59D5</rich_text>
		<rich_text>
 
 
 GAPP代码
 git clone git@172.16.11.162:genericapp/JrdSoundRecord.git  -b SoundRecorder_Rel4_04
 
 
 
 
 
 getView().setOnKeyListener(</rich_text>
		<rich_text foreground="#000080">new</rich_text>
		<rich_text>View.OnKeyListener(){
</rich_text>
		<rich_text foreground="#808000">@Override
</rich_text>
		<rich_text foreground="#000080">publicboolean</rich_text>
		<rich_text>onKey(Viewv,</rich_text>
		<rich_text foreground="#000080">int</rich_text>
		<rich_text>keyCode,KeyEventevent){
</rich_text>
		<rich_text foreground="#000080">if</rich_text>
		<rich_text>(keyCode==KeyEvent.</rich_text>
		<rich_text foreground="#660e7a">KEYCODE_BACK</rich_text>
		<rich_text>){
</rich_text>
		<rich_text foreground="#000080">returntrue</rich_text>
		<rich_text>;
}
</rich_text>
		<rich_text foreground="#000080">returnfalse</rich_text>
		<rich_text>;
}
});

 
 </rich_text>
		<rich_text link="webs http://moz-txt-link-freetext">http://172.16.11.152/mediawiki/index.php/BlackBerry_/_Mercury</rich_text>
		<rich_text>
 
 
git clone git@172.16.11.162:avengers/codeaurora_msm8953/platform/frameworks/base.git -b bb/develop/tcl/jdm/app

./fastboot flash  system /home/huzhengyu/WORK_DIRECTORY/mercury20161116/out/target/product/bbry_qc8953/system.img 


repo init -u </rich_text>
		<rich_text link="webs http://ssh://git@172.16.34.202:22/avengers/codeaurora/blackberry/manifest_jdm_8953"> ssh://git@172.16.11.162:22/avengers/codeaurora/blackberry/manifest_jdm_8953</rich_text>
		<rich_text> -b bb/develop/tcl/jdm/app -gall； repo sync -j4； source build/envsetup.sh  ;   lunch bbry_qc8953_sfi-userdebug ;     make -j4

repo init -u </rich_text>
		<rich_text link="webs http://ssh://git@172.16.34.202:22/avengers/codeaurora/blackberry/manifest_jdm_8953"> ssh://git@172.16.11.162:22/avengers/codeaurora/blackberry/manifest_jdm_8953</rich_text>
		<rich_text> -b bb/develop/tcl/jdm/app -gall； repo sync -j4； source build/envsetup.sh  ;   lunch bbry_qc8953_sfi-user ;     make -j4


</rich_text>
		<rich_text foreground="#000000">3475093</rich_text>
		<rich_text>
</rich_text>
		<rich_text link="webs http://mailto:honghong.wang@jrdcom.com?subject=Defect:3475093">Wang Honghong (honghong.wang)</rich_text>
		<rich_text>, 2016-11-17 16:13:45:Dear
 
在v2R10_9上验证OK


</rich_text>
		<table char_offset="5062" col_max="1000" col_min="40">
			<row>
				<cell>Module</cell>
				<cell>Project Team Member</cell>
				<cell>Gapp Owner</cell>
			</row>
			<row>
				<cell>Launcher</cell>
				<cell>Ying Yubin, Qiu Guoqiang</cell>
				<cell>He xiaoqing　</cell>
			</row>
			<row>
				<cell>System UI</cell>
				<cell>Zhuang Wen</cell>
				<cell>Qiu Guoqiang</cell>
			</row>
			<row>
				<cell>Lock Screen</cell>
				<cell>Sun Jianguang</cell>
				<cell>Qiu Guoqiang</cell>
			</row>
			<row>
				<cell>Call</cell>
				<cell>Yu Bo</cell>
				<cell>Liu qiang</cell>
			</row>
			<row>
				<cell>Messaging</cell>
				<cell>Cao Chen, Chen Caixia</cell>
				<cell>Liu qiang</cell>
			</row>
			<row>
				<cell>Contacts</cell>
				<cell>Huan Song</cell>
				<cell>Liu qiang</cell>
			</row>
			<row>
				<cell>Gallery</cell>
				<cell>Jiang Tao</cell>
				<cell>Wang ping</cell>
			</row>
			<row>
				<cell>Mix</cell>
				<cell>Ding Yi, Chen Chuanjun</cell>
				<cell>Wang ping</cell>
			</row>
			<row>
				<cell>File Manager</cell>
				<cell>Hu Zhengyu</cell>
				<cell>Qi songling</cell>
			</row>
			<row>
				<cell>click me</cell>
				<cell>click me</cell>
				<cell>click me</cell>
			</row>
		</table>
		<node custom_icon_id="0" foreground="" is_bold="False" name="tmp" prog_lang="custom-colors" readonly="False" tags="" unique_id="148">
			<rich_text>01-01 17:32:50.106  1406  2764 I ActivityManager: START u0 {act=android.intent.action.SEND typ=text/plain flg=0xb080001 cmp=rainhu.com.demostore/.activity.TestActivity clip={te
xt/plain T:BlackBerry} (has extras)} from uid 1000 on display 0




map：9.40.2  占用103326KB
adb shell dumpsys meminfo -p com.blackberry.calendar
calendar:1.4.0.11740  占用50480 provider占用：3912



12-29 18:39:16.331  6597  6597 D eSEPowerManagerServer: loading eseservice
12-29 18:39:16.331  6597  6597 D QSEECOMAPI: QSEECom_get_handle sb_length = 0x400
12-29 18:39:16.332  6597  6597 D QSEECOMAPI: App is not loaded in QSEE
12-29 18:39:16.332  6597  6597 E QSEECOMAPI: Error::Cannot open the file /system/etc/firmware/eseservice.mdt errno = 2
12-29 18:39:16.332  6597  6597 E QSEECOMAPI: Error::Loading image failed with ret = -1
12-29 18:39:16.332  6597  6597 E eSEPowerManagerServer: loading eseservice failed
12-29 18:39:16.332  6597  6597 D eSEPowerManagerServer: IeSEPowerManager is starting
--------- beginning of crash
12-29 18:39:16.335  6597  6598 F libc    : Fatal signal 11 (SIGSEGV), code 1, fault addr 0xffffffffffffe8 in tid 6598 (Binder:6597_1)
12-29 18:39:16.336   413   413 W         : debuggerd: handling request: pid=6597 uid=1000 gid=1027 tid=6598
12-29 18:39:16.337   413   413 W         : Failed to open /proc/6598/exe No such file or directory
12-29 18:39:16.340  6599  6599 D         : Starting BBRY crash monitor thread.
12-29 18:39:16.349     0     0 I [2016-12-29 18:39:16 GMT+8]init: Service 'esepmdaemon' (pid 6597) exited with status 0
12-29 18:39:16.349     0     0 I [2016-12-29 18:39:16 GMT+8]init: Service 'esepmdaemon' (pid 6597) killing any children in process group
12-29 18:39:16.349     0     0 I [2016-12-29 18:39:16 GMT+8]init: Delaying service 'esepmdaemon' start for '60' secs
12-29 18:39:16.341  6599  6599 I auditd  : type=1400 audit(0.0:3385): avc: denied { read } for comm=&quot;debuggerd64&quot; name=&quot;core&quot; dev=&quot;dm-0&quot; ino=358337 scontext=u:r:debuggerd:s0 tcontext=u:object_r:coredump_data_file:s0 tclass=dir permissive=1
12-29 18:39:16.341  6599  6599 I debuggerd64: type=1400 audit(0.0:3385): avc: denied { read } for name=&quot;core&quot; dev=&quot;dm-0&quot; ino=358337 scontext=u:r:debuggerd:s0 tcontext=u:object_r:coredump_data_file:s0 tclass=dir permissive=1
12-29 18:39:16.341  6599  6599 I auditd  : type=1400 audit(0.0:3386): avc: denied { open } for comm=&quot;debuggerd64&quot; path=&quot;/data/core&quot; dev=&quot;dm-0&quot; ino=358337 scontext=u:r:debuggerd:s0 tcontext=u:object_r:coredump_data_file:s0 tclass=dir permissive=1
12-29 18:39:16.341  6599  6599 I debuggerd64: type=1400 audit(0.0:3386): avc: denied { open } for path=&quot;/data/core&quot; dev=&quot;dm-0&quot; ino=358337 scontext=u:r:debuggerd:s0 tcontext=u:object_r:coredump_data_file:s0 tclass=dir permissive=1
12-29 18:39:16.353  6599  6599 I CRITICAL_PROCESS_MONITOR: tombstone=/data/tombstones/tombstone_05 pid=6597
12-29 18:39:16.353  6599  6599 D CRITICAL_PROCESS_MONITOR: Creating thread to find coredump
12-29 18:39:16.353  6599  6599 E         : debuggerd: ptrace attach failed: No such process
12-29 18:39:16.356   413   413 W         : debuggerd: resuming target 6597




--------- beginning of crash
12-27 11:26:21.853 15470 15471 F libc    : Fatal signal 11 (SIGSEGV), code 1, fault addr 0xe8 in tid 15471 (Binder:15470_1)
12-27 11:26:21.854   415   415 W         : debuggerd: handling request: pid=15470 uid=1000 gid=1027 tid=15471
12-27 11:26:21.855   415   415 W         : Failed to open /proc/15471/exe No such file or directory
12-27 11:26:21.868     0     0 I [2016-12-27 11:26:21 GMT+8]init: Service 'esepmdaemon' (pid 15470) exited with status 0
12-27 11:26:21.868     0     0 I [2016-12-27 11:26:21 GMT+8]init: Service 'esepmdaemon' (pid 15470) killing any children in process group
12-27 11:26:21.869     0     0 I [2016-12-27 11:26:21 GMT+8]init: Delaying service 'esepmdaemon' start for '28' secs





android.intent.action.LAUNCHER_D_TAP
  /bb_master_aospn-msm8953-tcl/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarKeyguardViewManager.java
  (lei.liu2 &lt;lei.liu2@jrdcom.com&gt;)
    109 | private IntentFilter mLauncherDoubleTapFilter = new IntentFilter(&quot;android.intent.action.LAUNCHER_D_TAP&quot;);
    112 | if (&quot;android.intent.action.LAUNCHER_D_TAP&quot;.equals(intent.getAction())) {


intent.action.EXTREMELY_MODE_THRESHOLD
  /bb_master_aospn-msm8953-tcl/packages/apps/Settings/src/com/android/settings/LowMemoryStorage.java
  (huzhengyu &lt;zhengyu.hu@tcl.com&gt;)
    93 | filter.addAction(&quot;</rich_text>
			<rich_text weight="heavy">intent.action.EXTREMELY_MODE_THRESHOLD</rich_text>
			<rich_text>&quot;);
  /bb_master_aospn-msm8953-tcl/frameworks/base/services/core/java/com/android/server/storage/DeviceStorageMonitorService.java
  (huzhengyu &lt;zhengyu.hu@tcl.com&gt;)
    881 | mExtremeModeIntent = new Intent(&quot;intent.action.</rich_text>
			<rich_text weight="heavy">EXTREMELY_MODE_THRESHOLD</rich_text>
			<rich_text>&quot;);

</rich_text>
			<rich_text weight="heavy">com.tct.EXTREMELY_MODE_THRESHOLD</rich_text>
			<rich_text>


android.intent.action.CLOSE_SUGGESTION_WINDOW
  /bb_master_aospn-msm8953-tcl/frameworks/base/services/core/java/com/android/server/InputMethodManagerService.java
  (yubin.ying &lt;yubin.ying@tcl.com&gt;)
    3258 | intent.setAction(&quot;android.intent.action.CLOSE_SUGGESTION_WINDOW&quot;);
  /bb_master_aospn-msm8953-tcl/frameworks/base/core/java/android/widget/Editor.java
  (yubin.ying &lt;yubin.ying@tcl.com&gt;)
    3523 | filter.addAction(&quot;android.intent.action.CLOSE_SUGGESTION_WINDOW&quot;);
    
    

android.intent.action.ACTION_SWITCH_RADIO_FOR_SVC_LOST
  /bb_master_aospn-msm8953-tcl/frameworks/opt/telephony/src/java/com/android/internal/telephony/ServiceStateTracker.java
  (mimullin &lt;mimullin@blackberry.com&gt; - 1641161)
    517 | protected static final String ACTION_SWITCH_RADIO_FOR_SVC_LOST = &quot;android.intent.action.ACTION_SWITCH_RADIO_FOR_SVC_LOST&quot;;
    
 








</rich_text>
			<rich_text foreground="#000000">run cts -m CtsProviderTestCases -t  android.provider.cts.MediaStore_FilesTest#testCaseSensitivity</rich_text>
			<rich_text>




12-31 19:59:30.024  1455  2711 D ActivityTrigger: ActivityTrigger activityPauseTrigger 
12-31 19:59:30.042   425  2409 E ANDR-PERF-MPCTL: Invalid profile no. 0, total profiles 0 only
12-31 19:59:30.086  1455  1503 D NetworkPolicy: no need to update restrict data rules for uid 10002
12-31 19:59:30.086  1455  1503 D NetworkPolicy: no need to update restrict power rules for uid 10002
12-31 19:59:30.088   672  1739 I AudioPolicyManagerCustom: FLAG None hence request for a primary output
12-31 19:59:30.089  3113  3113 W InputMethodService: Window size has been changed. This may cause jankiness of resizing window: -1 -&gt; -2
12-31 19:59:30.091   672  1738 D compress_voip: voice_extn_compress_voip_out_get_parameters: enter
12-31 19:59:30.092  6400  6400 D AudioTrack: Client defaulted notificationFrames to 192 for frameCount 192
12-31 19:59:30.101  1917  1917 I BBRY_InterruptionManager: removeNotification
12-31 19:59:30.105  6138  6138 I MicroDetector: Keeping mic open: false
12-31 19:59:30.106  6138  6235 I MicroRecognitionRunner: Stopping hotword detection.
12-31 19:59:30.107  6138  7079 I AudioController: internalShutdown
12-31 19:59:30.107  6400  8332 W System.err: java.lang.ClassNotFoundException: com.qualcomm.qti.smartsearch.SmartMatch
12-31 19:59:30.107  6138  8319 I DeviceStateChecker: DeviceStateChecker cancelled
12-31 19:59:30.107  6400  8332 W System.err: 	at java.lang.Class.classForName(Native Method)
12-31 19:59:30.107  6138  7079 I MicrophoneInputStream: mic_close com.google.android.apps.gsa.speech.audio.ag@9a01b2d
12-31 19:59:30.107  6400  8332 W System.err: 	at java.lang.Class.forName(Class.java:400)
12-31 19:59:30.107  6400  8332 W System.err: 	at java.lang.Class.forName(Class.java:326)
12-31 19:59:30.107  6138  6972 E AudioRecord-JNI: Error -4 during AudioRecord native read
12-31 19:59:30.108  6400  8332 W System.err: 	at com.android.dialer.database.DialerDatabaseHelper.initMultiLanguageSearch(DialerDatabaseHelper.java:426)
12-31 19:59:30.108  6400  8332 W System.err: 	at com.android.dialer.database.DialerDatabaseHelper.updateSmartDialDatabase(DialerDatabaseHelper.java:1045)
12-31 19:59:30.108  6400  8332 W System.err: 	at com.android.dialer.database.DialerDatabaseHelper$SmartDialUpdateAsyncTask.doInBackground(DialerDatabaseHelper.java:709)
12-31 19:59:30.108  6400  8332 W System.err: 	at android.os.AsyncTask$2.call(AsyncTask.java:304)
12-31 19:59:30.108  6400  8332 W System.err: 	at java.util.concurrent.FutureTask.run(FutureTask.java:237)
12-31 19:59:30.108  6400  8332 W System.err: 	at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:243)
12-31 19:59:30.108  6400  8332 W System.err: 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1133)
12-31 19:59:30.108  6400  8332 W System.err: 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:607)
12-31 19:59:30.108  6400  8332 W System.err: 	at java.lang.Thread.run(Thread.java:761)
12-31 19:59:30.108  6400  8332 W System.err: Caused by: java.lang.ClassNotFoundException: Didn't find class &quot;com.qualcomm.qti.smartsearch.SmartMatch&quot; on path: DexPathList[[zip file &quot;/system/priv-app/Dialer/Dialer.apk&quot;],nativeLibraryDirectories=[/system/priv-app/Dialer/lib/arm64, /system/lib64, /vendor/lib64, /system/lib64, /vendor/lib64]]
12-31 19:59:30.109  6400  8332 W System.err: 	at dalvik.system.BaseDexClassLoader.findClass(BaseDexClassLoader.java:56)
12-31 19:59:30.109  6400  8332 W System.err: 	at java.lang.ClassLoader.loadClass(ClassLoader.java:380)
12-31 19:59:30.109  6400  8332 W System.err: 	at java.lang.ClassLoader.loadClass(ClassLoader.java:312)
12-31 19:59:30.109  6400  8332 W System.err: 	... 12 more
12-31 19:59:30.117  6400  6400 D ImsClient: register(): com.android.dialer.DialtactsActivity@6f5ba2b
12-31 19:59:30.119  6400  6400 D ImsClient: bind(): com.android.dialer.DialtactsActivity@6f5ba2b
12-31 19:59:30.121  6400  6400 D ImsPresence: addListener(): com.android.dialer.contactinfo.BB_PhoneSingleNumberPresenceWrapper$PresenceListenerInternal@c62d61c
12-31 19:59:30.121  6400  6400 D BB_PhoneSingleNumberPresenceWrapper: configured presence
12-31 19:59:30.121  6400  6400 D ImsClient: register(): com.android.dialer.DialtactsActivity@6f5ba2b
12-31 19:59:30.123  6400  6400 D ImsClient: bind(): com.android.dialer.DialtactsActivity@6f5ba2b
12-31 19:59:30.125   672  8322 D audio_hw_primary: in_set_parameters: enter: kvpairs=routing=0
12-31 19:59:30.126   672  8322 D audio_hw_primary: in_standby: enter: stream (0xf520d540) usecase(16: audio-record)
12-31 19:59:30.126  6400  6400 D ImsPresence: addListener(): com.android.dialer.contactinfo.BB_PhonePresenceWrapper$PresenceListenerInternal@8510020
12-31 19:59:30.126  6400  6400 D BB_PhonePresenceWrapper: configured presence
12-31 19:59:30.133  1455  1590 I Telecom : CallsManager: maybeShowWifiCallNotification
12-31 19:59:30.137  1455  1590 I Telecom : CallsManager: wfc is not provisioned
12-31 19:59:30.156  6400  6400 D DialpadFragment: Displaying normal Dialer UI.
12-31 19:59:30.158  2086  4388 D BBRYImsConfigImpl: OMADM SVC MASK is in effect
12-31 19:59:30.158  2086  4388 D BBRYImsConfigImpl: getProvisionedInt: OMADM SVC Mask is in effect. item = 11 omadm svc = 10903
12-31 19:59:30.159  2086  4388 I BBRY_RIL_HOOK: bbryRilGetImsConfig: configId 903
12-31 19:59:30.159  2086  4388 V QC_RIL_OEM_HOOK: sendRilOemHookMsg: Outgoing Data is 514f454d484f4f4b2d01090090000000870300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
12-31 19:59:30.160  2197  2197 D QcrilMsgTunnelIfaceManager: handleMessage what = 1
12-31 19:59:30.160  2197  2197 D QcrilMsgTunnelSocket: [1113] &gt; OEM_HOOK_RAW[514f454d484f4f4b2d01090090000000870300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
12-31 19:59:30.168  2197  2216 D QcrilMsgTunnelSocket: readRilMessage: Buffer = [B@7f9ece9 HexData = [0000000059040000000000000100000001]
12-31 19:59:30.168  2197  2216 D QcrilMsgTunnelSocket: Rcvd SOLICITED response with 16 bytes data for SUB0
12-31 19:59:30.168  2197  2216 D QcrilMsgTunnelSocket: [1113] &lt; OEM_HOOK_RAW [01]
12-31 19:59:30.168  2197  2197 D QcrilMsgTunnelIfaceManager: handleMessage what = 2
12-31 19:59:30.169  2086  4388 D QC_RIL_OEM_HOOK: sendOemRilRequestRaw returns value = 1
12-31 19:59:30.169  2086  4388 I BBRY_RIL_HOOK: QCRIL_BBEXT_IMS_GET_CONFIGURATION completed
12-31 19:59:30.169  2086  4388 D BBRYImsConfigImpl: getMasterValue client_provisioning_video 10903 ril= 903 value= 1
12-31 19:59:30.171  6400  6400 D DialpadFragment: Registering IMS Client
12-31 19:59:30.181  6400  6400 D DialpadFragment: Displaying normal Dialer UI.
12-31 19:59:30.184  2086  2186 D BBRYImsConfigImpl: OMADM SVC MASK is in effect
12-31 19:59:30.184  2086  2186 D BBRYImsConfigImpl: getProvisionedInt: OMADM SVC Mask is in effect. item = 11 omadm svc = 10903
12-31 19:59:30.184  2086  2186 I BBRY_RIL_HOOK: bbryRilGetImsConfig: configId 903
12-31 19:59:30.184   672  8322 D audio_hw_primary: disable_audio_route: reset and update mixer path: audio-record
12-31 19:59:30.184  2086  2186 V QC_RIL_OEM_HOOK: sendRilOemHookMsg: Outgoing Data is 514f454d484f4f4b2d01090090000000870300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
12-31 19:59:30.185  2197  2197 D QcrilMsgTunnelIfaceManager: handleMessage what = 1
12-31 19:59:30.185  2197  2197 D QcrilMsgTunnelSocket: [1114] &gt; OEM_HOOK_RAW[514f454d484f4f4b2d01090090000000870300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]
12-31 19:59:30.186   672  8322 V msm8916_platform: platform_sound_trigger_usecase_needs_event:usecase_id[16] no need to raise event.
12-31 19:59:30.186   672  8322 D soundtrigger: audio_extn_sound_trigger_update_stream_status: uc_id 16 of type 1 for Event 2, with Raise=0
12-31 19:59:30.186   672  8322 D hardware_info: hw_info_append_hw_type : device_name = voice-rec-mic
12-31 19:59:30.186   672  8322 D audio_hw_primary: disable_snd_device: snd_device(85: voice-rec-mic)
12-31 19:59:30.186   672  8322 D msm8916_platform: platform_can_split_snd_device: snd_device(85) num devices(0) new_snd_devices(0)
12-31 19:59:30.189   672  8322 I soundtrigger: audio_extn_sound_trigger_update_device_status: device 0x55 of type 1 for Event 0, with Raise=1
12-31 19:59:30.189   672  8322 D sound_trigger_platform: platform_stdev_check_and_update_concurrency: concurrency active 0, tx 0, rx 0, concurrency session_allowed 1
12-31 19:59:30.191   672  1617 I SoundTriggerHwService::Module: void android::SoundTriggerHwService::Module::onCallbackEvent(const sp&lt;android::SoundTriggerHwService::CallbackEvent&gt; &amp;) mClient == 0
12-31 19:59:30.192  6138  8320 I MicroRecognitionRunner: Detection finished
12-31 19:59:30.193  2197  2216 D QcrilMsgTunnelSocket: readRilMessage: Buffer = [B@7f9ece9 HexData = [000000005a040000000000000100000001]
12-31 19:59:30.193  2197  2216 D QcrilMsgTunnelSocket: Rcvd SOLICITED response with 16 bytes data for SUB0
12-31 19:59:30.193  2197  2216 D QcrilMsgTunnelSocket: [1114] &lt; OEM_HOOK_RAW [01]
12-31 19:59:30.194  2197  2197 D QcrilMsgTunnelIfaceManager: handleMessage what = 2
12-31 19:59:30.196   672  1739 D audio_hw_primary: adev_close_input_stream: enter:stream_handle(0xf520d540)
12-31 19:59:30.197  2086  2186 D QC_RIL_OEM_HOOK: sendOemRilRequestRaw returns value = 1
12-31 19:59:30.197   672  1739 D audio_hw_primary: in_standby: enter: stream (0xf520d540) usecase(16: audio-record)
12-31 19:59:30.197  2086  2186 I BBRY_RIL_HOOK: QCRIL_BBEXT_IMS_GET_CONFIGURATION completed
12-31 19:59:30.197  2086  2186 D BBRYImsConfigImpl: getMasterValue client_provisioning_video 10903 ril= 903 value= 1
12-31 19:59:30.199  1455  1465 I art     : Background partial concurrent mark sweep GC freed 93411(5MB) AllocSpace objects, 3(60KB) LOS objects, 33% free, 19MB/29MB, paused 2.077ms total 125.048ms
12-31 19:59:30.201  6400  6400 V DialpadFragment: Dialpad.onResume,52: qloc,0 dtwd,0 hptc,0 fdin,26 hnt,26 bes,0 ,0 
12-31 19:59:30.224  1455  1531 D WindowManager: [BatteryCenter] Enforcement operations  brightness:1.0 time:0 ms
12-31 19:59:30.226  6400  6400 W ViewRootImpl[DialtactsActivity]: Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=158, metaState=0, flags=0x68, repeatCount=0, eventTime=1720280, downTime=1720214, deviceId=5, source=0x101 }
12-31 19:59:30.226  6400  6400 W ViewRootImpl[DialtactsActivity]: Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=158, metaState=0, flags=0x68, repeatCount=0, eventTime=1720280, downTime=1720214, deviceId=5, source=0x101 }
12-31 19:59:30.226  6400  6400 W ViewRootImpl[DialtactsActivity]: Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=158, metaState=0, flags=0x68, repeatCount=0, eventTime=1720280, downTime=1720214, deviceId=5, source=0x101 }
12-31 19:59:30.227  6400  6400 W ViewRootImpl[DialtactsActivity]: Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=158, metaState=0, flags=0x68, repeatCount=0, eventTime=1720280, downTime=1720214, deviceId=5, source=0x101 }
12-31 19:59:30.227  6400  6400 W ViewRootImpl[DialtactsActivity]: Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=158, metaState=0, flags=0x68, repeatCount=0, eventTime=1720280, downTime=1720214, deviceId=5, source=0x101 }
12-31 19:59:30.227  6400  6400 W ViewRootImpl[DialtactsActivity]: Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=158, metaState=0, flags=0x68, repeatCount=0, eventTime=1720280, downTime=1720214, deviceId=5, source=0x101 }
12-31 19:59:30.227  6400  6400 W ViewRootImpl[DialtactsActivity]: Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=158, metaState=0, flags=0x68, repeatCount=0, eventTime=1720280, downTime=1720214, deviceId=5, source=0x101 }
12-31 19:59:30.227  6400  6400 W ViewRootImpl[DialtactsActivity]: Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=158, metaState=0, flags=0x68, repeatCount=0, eventTime=1720280, downTime=1720214, deviceId=5, source=0x101 }
12-31 19:59:30.227  6400  6400 W ViewRootImpl[DialtactsActivity]: Cancelling event due to no window focus: KeyEvent { action=ACTION_UP, keyCode=KEYCODE_BACK, scanCode=158, metaState=0, flags=0x68, repeatCount=0, eventTime=1720280, downTime=1720214, deviceId=5, source=0x101 }
12-31 19:59:30.228  6400  6400 D ImsClient: onServiceConnected(): ComponentInfo{com.blackberry.cellular.ims.daemon/com.blackberry.cellular.ims.daemon.ImsDaemon}
12-31 19:59:30.228  6400  6400 D ImsClient: onServiceConnected(): ComponentInfo{com.blackberry.cellular.ims.daemon/com.blackberry.cellular.ims.daemon.ImsDaemon}
12-31 19:59:30.229  2304  2417 V apiDDT  : EventBuilder.getReservedAttributes()  - # Total Reserved Attributes=6
12-31 19:59:30.230  2304  2417 V apiDDT  : TimedEventBuilder.getReservedAttributes()  - # Total Reserved Attributes=9
12-31 19:59:30.230  2304  2417 D apiDDT  : EventBuilder - Completed setReservedAttributesOnEvent
12-31 19:59:30.230  2304  2417 D apiDDT  : TimedEventBuilder  - Completed build
12-31 19:59:30.230  2304  2417 I DataMinerService: {
12-31 19:59:30.230  2304  2417 I DataMinerService:     &quot;BgVersion&quot;: &quot;6.4.31.21.arm64&quot;,
12-31 19:59:30.230  2304  2417 I DataMinerService:     &quot;KeyboardOpenTime&quot;: &quot;0&quot;,
12-31 19:59:30.230  2304  2417 I DataMinerService:     &quot;EventPath&quot;: &quot;com.google.android.googlequicksearchbox&quot;,
12-31 19:59:30.230  2304  2417 I DataMinerService:     &quot;UserInteractionTime&quot;: &quot;5521&quot;,
12-31 19:59:30.230  2304  2417 I DataMinerService:     &quot;FgPackage&quot;: &quot;com.android.dialer&quot;,
12-31 19:59:30.230  2304  2417 I DataMinerService:     &quot;ResumeTime&quot;: &quot;147&quot;,
12-31 19:59:30.230  2304  2417 I DataMinerService:     &quot;BgPackage&quot;: &quot;com.google.android.googlequicksearchbox&quot;,
12-31 19:59:30.230  2304  2417 I DataMinerService:     &quot;LandscapeTime&quot;: &quot;0&quot;,
12-31 19:59:30.230  2304  2417 I DataMinerService:     &quot;BgComponent&quot;: &quot;com.google.android.googlequicksearchbox\/com.google.android.apps.gsa.searchnow.SearchNowActivity&quot;,
12-31 19:59:30.230  2304  2417 I DataMinerService:     &quot;FgVersion&quot;: &quot;3.00.00&quot;,
12-31 19:59:30.230  2304  2417 I DataMinerService:     &quot;FgComponent&quot;: &quot;com.android.dialer\/.DialtactsActivity&quot;,
12-31 19:59:30.230  2304  2417 I DataMinerService:     &quot;ForegroundTime&quot;: &quot;5521&quot;,
12-31 19:59:30.230  2304  2417 I DataMinerService:     &quot;appname&quot;: &quot;com_blackberry_dm&quot;,
12-31 19:59:30.230  2304  2417 I DataMinerService:     &quot;appversion&quot;: &quot;1.0&quot;,
12-31 19:59:30.230  2304  2417 I DataMinerService:     &quot;eventid&quot;: &quot;onApplicationForeground&quot;
12-31 19:59:30.230  2304  2417 I DataMinerService: }
12-31 19:59:30.230  2304  2417 D apiDDT  : About to send Event with appname:com_blackberry_dm appversion:1.0
12-31 19:59:30.230  2086  2999 E PhoneInterfaceManager: [PhoneIntfMgr] getIccId: No UICC
12-31 19:59:30.231  2304  2417 D DataMinerService: Sent event
12-31 19:59:30.233  2733  8066 D telemetry: queueEvent
12-31 19:59:30.234  2304  2806 D apiDDT  : Sent Event with appname:com_blackberry_dm Result: 1
12-31 19:59:30.238  6400  6400 D DialpadFragment: ServiceState updated to: 1 1 voice home data home null null null null null null  Unknown Unknown Unexpected CSS not supported -1 -1 RoamInd=-1 DefRoamInd=-1 EmergOnly=true IsDataRoamingFromRegistration=false mRilImsRadioTechnology=0
12-31 19:59:30.240  6138  6138 W IInputConnectionWrapper: reportFullscreenMode on inexistent InputConnection
12-31 19:59:30.240  6138  6138 W IInputConnectionWrapper: finishComposingText on inactive InputConnection
12-31 19:59:30.252  6400  6400 D ImsClient: setActive(): true
12-31 19:59:30.253  2537  6441 D ImsEventManager: (6441)[CLIENT] register()
12-31 19:59:30.253  2537  2537 D ImsDaemon: connect(): Adding 1 clients
12-31 19:59:30.253  2537  2537 D ImsDaemon: connect(): binder instance: 121595999
12-31 19:59:30.254  2537  2537 D ImsDaemon: connect(): Total = 2
12-31 19:59:30.254  6400  6400 D ImsPresence: onBindingChanged()
12-31 19:59:30.258  6400  6400 D ImsPresence: onStatusChanged(): com.blackberry.cellular.ims.framework.ImsStatus {
12-31 19:59:30.258  6400  6400 D ImsPresence:   availability = null
12-31 19:59:30.258  6400  6400 D ImsPresence:   capabilities = [VOICE, VIDEO, PRESENCE]
12-31 19:59:30.258  6400  6400 D ImsPresence:   provisioning = [VOICE, VIDEO, PRESENCE]
12-31 19:59:30.258  6400  6400 D ImsPresence: }
12-31 19:59:30.258  6400  6400 D ImsSession: onBindingChanged()
12-31 19:59:30.261  6400  6400 D ImsSession: onStatusChanged(): com.blackberry.cellular.ims.framework.ImsStatus {
12-31 19:59:30.261  6400  6400 D ImsSession:   availability = null
12-31 19:59:30.261  6400  6400 D ImsSession:   capabilities = [VOICE, VIDEO, PRESENCE]
12-31 19:59:30.261  6400  6400 D ImsSession:   provisioning = [VOICE, VIDEO, PRESENCE]
12-31 19:59:30.261  6400  6400 D ImsSession: }
12-31 19:59:30.262  6400  6400 D DialpadFragment: onStatusChanged(): supports Presence? true
12-31 19:59:30.270  6400  6400 D ImsClient: setActive(): true
12-31 19:59:30.270  2537  6441 D ImsEventManager: (6441)[CLIENT] register()
12-31 19:59:30.271  2537  2537 D ImsDaemon: connect(): Adding 1 clients
12-31 19:59:30.271  2537  2537 D ImsDaemon: connect(): binder instance: 41323332
12-31 19:59:30.271  2537  2537 D ImsDaemon: connect(): Total = 3
12-31 19:59:30.271  6400  6400 D ImsPresence: onBindingChanged()
12-31 19:59:30.274  6400  6400 D ImsPresence: onStatusChanged(): com.blackberry.cellular.ims.framework.ImsStatus {
12-31 19:59:30.274  6400  6400 D ImsPresence:   availability = null
12-31 19:59:30.274  6400  6400 D ImsPresence:   capabilities = [VOICE, VIDEO, PRESENCE]
12-31 19:59:30.274  6400  6400 D ImsPresence:   provisioning = [VOICE, VIDEO, PRESENCE]
12-31 19:59:30.274  6400  6400 D ImsPresence: }
12-31 19:59:30.274  6400  6400 D ImsSession: onBindingChanged()
12-31 19:59:30.278  6400  6400 D ImsSession: onStatusChanged(): com.blackberry.cellular.ims.framework.ImsStatus {
12-31 19:59:30.278  6400  6400 D ImsSession:   availability = null
12-31 19:59:30.278  6400  6400 D ImsSession:   capabilities = [VOICE, VIDEO, PRESENCE]
12-31 19:59:30.278  6400  6400 D ImsSession:   provisioning = [VOICE, VIDEO, PRESENCE]
12-31 19:59:30.278  6400  6400 D ImsSession: }
12-31 19:59:30.295  1455  1531 I WindowManager: Destroying surface Surface(name=InputMethod) called by com.android.server.wm.WindowStateAnimator.destroySurface:2014 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:881 com.android.server.wm.WindowState.destroyOrSaveSurface:2073 com.android.server.wm.WindowSurfacePlacer.performSurfacePlacementInner:429 com.android.server.wm.WindowSurfacePlacer.performSurfacePlacementLoop:232 com.android.server.wm.WindowSurfacePlacer.performSurfacePlacement:180 com.android.server.wm.WindowManagerService$H.handleMessage:8143 android.os.Handler.dispatchMessage:102 
12-31 19:59:30.354  4855  4855 D com.blackberry.ddt.ui.DropBoxBroadcastReceiver: Entry tag system_app_strictmode, time 3570350
12-31 19:59:30.360  2559  8336 D com.blackberry.ddt.ui.DropBoxEventService: Intent android.intent.action.DROPBOX_ENTRY_ADDED received
12-31 19:59:30.360  2559  8336 D com.blackberry.ddt.ui.DropBoxEventService: Entry tag system_app_strictmode, time 3570350
12-31 19:59:30.370  2559  8336 I com.blackberry.ddt.ui.DropBoxEventService: Unknown tag system_app_strictmode received
12-31 19:59:30.370  2559  8336 D com.blackberry.ddt.ui.DropBoxEventService: Ignore tag system_app_strictmode
12-31 19:59:30.872  6138  6138 W SearchService: Abort, client detached.
12-31 19:59:30.881  1455  1473 W ActivityManager: Finishing task with all activities already finished
12-31 19:59:30.881  1455  1473 W ActivityManager: Duplicate finish request for ActivityRecord{23f3536 u0 com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity t57 f}
12-31 19:59:30.892  6138  6138 E NowRemoteClient: skipping logEndstates, service is null
12-31 19:59:30.899  6138  6138 I art     : Starting a blocking GC Explicit
12-31 19:59:30.978  6138  6138 I art     : Explicit concurrent mark sweep GC freed 13819(1018KB) AllocSpace objects, 6(776KB) LOS objects, 22% free, 28MB/36MB, paused 510us total 78.262ms
12-31 19:59:30.981  6138  6147 E DataBuffer: Internal data leak within a DataBuffer object detected!  Be sure to explicitly call release() on all DataBuffer extending objects when you are done with them. (Owner:size=0)
12-31 19:59:30.983  6138  6138 I art     : Starting a blocking GC Explicit
12-31 19:59:31.050  6138  6138 I art     : Explicit concurrent mark sweep GC freed 5030(312KB) AllocSpace objects, 8(5MB) LOS objects, 25% free, 22MB/29MB, paused 612us total 66.073ms
12-31 19:59:31.071  1455  2236 I WindowManager: Destroying surface Surface(name=com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity) called by com.android.server.wm.WindowStateAnimator.destroySurface:2014 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:881 com.android.server.wm.WindowState.removeLocked:1449 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2493 com.android.server.wm.WindowManagerService.removeWindowLocked:2451 com.android.server.wm.WindowManagerService.removeWindowLocked:2320 com.android.server.wm.WindowManagerService.removeWindow:2315 com.android.server.wm.Session.remove:193 
12-31 19:59:31.074  6138  6138 E NowDoodleController: Failed to receive DoodleData
12-31 19:59:31.074  6138  6138 E NowDoodleController: java.util.concurrent.CancellationException: Task was cancelled.
12-31 19:59:31.074  6138  6138 E NowDoodleController: 	at com.google.common.util.concurrent.c.cn(AbstractFuture.java:2047)
12-31 19:59:31.074  6138  6138 E NowDoodleController: 	at com.google.common.util.concurrent.c.get(AbstractFuture.java:453)
12-31 19:59:31.074  6138  6138 E NowDoodleController: 	at com.google.common.util.concurrent.k.get(AbstractFuture.java:81)
12-31 19:59:31.074  6138  6138 E NowDoodleController: 	at com.google.common.util.concurrent.bs.n(Uninterruptibles.java:143)
12-31 19:59:31.074  6138  6138 E NowDoodleController: 	at com.google.common.util.concurrent.aq.l(Futures.java:1175)
12-31 19:59:31.074  6138  6138 E NowDoodleController: 	at com.google.common.util.concurrent.aq$2.run(Futures.java:1125)
12-31 19:59:31.074  6138  6138 E NowDoodleController: 	at com.google.android.apps.gsa.shared.util.concurrent.a.ak$1.run(TaskRunnerImpl.java:287)
12-31 19:59:31.074  6138  6138 E NowDoodleController: 	at android.os.Handler.handleCallback(Handler.java:751)
12-31 19:59:31.074  6138  6138 E NowDoodleController: 	at android.os.Handler.dispatchMessage(Handler.java:95)
12-31 19:59:31.074  6138  6138 E NowDoodleController: 	at android.os.Looper.loop(Looper.java:154)
12-31 19:59:31.074  6138  6138 E NowDoodleController: 	at android.app.ActivityThread.main(ActivityThread.java:6082)
12-31 19:59:31.074  6138  6138 E NowDoodleController: 	at java.lang.reflect.Method.invoke(Native Method)
12-31 19:59:31.074  6138  6138 E NowDoodleController: 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:905)
12-31 19:59:31.074  6138  6138 E NowDoodleController: 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:767)
12-31 19:59:31.079   513   513 W SurfaceFlinger: couldn't log to binary event log: overflow.
12-31 19:59:31.087  6138  8341 I System  : BlackBerryJCA ServiceList: method / alg: Mac : HmacSHA1
12-31 19:59:31.087  6138  8341 I System  : BlackBerryJCA ServiceList: OS: props: {java.io.tmpdir=/data/user/0/com.google.android.googlequicksearchbox/cache, </rich_text>
			<rich_text link="webs http.agent=Dalvik/2.1.0">http.agent=Dalvik/2.1.0</rich_text>
			<rich_text> (Linux; U; Android 7.0; BBB100-3 Build/NRD90M), user.home=}
12-31 19:59:31.087  6138  8341 I System  : BlackBerryJCA ServiceList: checkProvider: BlackBerryJCA version 1.0
12-31 19:59:31.088  6138  8341 I System  : BlackBerryJCA getServices: method / alg: Mac : HmacSHA1 missed, went to : GmsCore_OpenSSL
12-31 19:59:31.088  6138  8341 I System  : BlackBerryJCA ServiceList: method / alg: Mac : HmacSHA1
12-31 19:59:31.088  6138  8341 I System  : BlackBerryJCA ServiceList: OS: props: {java.io.tmpdir=/data/user/0/com.google.android.googlequicksearchbox/cache, </rich_text>
			<rich_text link="webs http.agent=Dalvik/2.1.0">http.agent=Dalvik/2.1.0</rich_text>
			<rich_text> (Linux; U; Android 7.0; BBB100-3 Build/NRD90M), user.home=}
12-31 19:59:31.088  6138  8341 I System  : BlackBerryJCA ServiceList: checkProvider: BlackBerryJCA version 1.0
12-31 19:59:31.088  6138  8341 I System  : BlackBerryJCA getServices: method / alg: Mac : HmacSHA1 missed, went to : GmsCore_OpenSSL
12-31 19:59:31.835   758   758 I MSM-irqbalance: Decided to move IRQ3 from CPU1 [P:0] to CPU6 [P:1] (banned)
12-31 19:59:31.836   758   758 I MSM-irqbalance: Decided to move IRQ5 from CPU1 [P:0] to CPU5 [P:1] (banned)
12-31 19:59:31.836   758   758 I MSM-irqbalance: Decided to move IRQ5 from CPU2 [P:0] to CPU7 [P:1] (banned)
12-31 19:59:31.837   758   758 I MSM-irqbalance: Decided to move IRQ3 from CPU2 [P:0] to CPU4 [P:1] (banned)
12-31 19:59:31.838   758   758 I MSM-irqbalance: Decided to move IRQ3 from CPU3 [P:0] to CPU6 [P:1] (banned)
12-31 19:59:31.838   758   758 I MSM-irqbalance: Decided to move IRQ5 from CPU3 [P:0] to CPU5 [P:1] (banned)
12-31 19:59:31.839   758   758 I MSM-irqbalance: Decided to move IRQ3 from CPU0 [P:0] to CPU7 [P:1] (banned)
12-31 19:59:31.839   758   758 I MSM-irqbalance: Decided to move IRQ5 from CPU0 [P:0] to CPU4 [P:1] (banned)


ACTIVITY MANAGER ACTIVITIES (dumpsys activity activities)
Display #0 (activities from top to bottom):
  Stack #1:
  mFullscreen=true
  mBounds=null
    Task id #46
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{1f07e05 #46 A=com.google.android.googlequicksearchbox U=0 StackId=1 sz=1}
      userId=0 effectiveUid=u0a38 mCallingUid=u0a38 mUserSetupComplete=true mCallingPackage=com.google.android.googlequicksearchbox
      affinity=com.google.android.googlequicksearchbox
      intent={act=android.search.action.GLOBAL_SEARCH cat=[com.google.android.googlequicksearchbox.category.SEARCH_WIDGET] flg=0x10008000 cmp=com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity}
      realActivity=com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity
      autoRemoveRecents=false isPersistable=true numFullscreen=1 taskType=0 mTaskToReturnTo=0
      rootWasReset=false mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{d87f7ad u0 com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity t46}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=null lastThumbnailFile=/data/system_ce/0/recent_images/46_task_thumbnail.png
      stackId=1
      hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE isResizeable=true firstActiveTime=2590268 lastActiveTime=2590268 (inactive for 2s)
      * Hist #0: ActivityRecord{d87f7ad u0 com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity t46}
          packageName=com.google.android.googlequicksearchbox processName=com.google.android.googlequicksearchbox:search
          launchedFromUid=10038 launchedFromPackage=com.google.android.googlequicksearchbox userId=0
          app=ProcessRecord{4c43e61 6138:com.google.android.googlequicksearchbox:search/u0a38}
          Intent { flg=0x14408000 cmp=com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity (has extras) }
          frontOfTask=true task=TaskRecord{1f07e05 #46 A=com.google.android.googlequicksearchbox U=0 StackId=1 sz=1}
          taskAffinity=com.google.android.googlequicksearchbox
          realActivity=com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity
          baseDir=/system/priv-app/Velvet/Velvet.apk
          dataDir=/data/user/0/com.google.android.googlequicksearchbox
          stateNotNeeded=false componentSpecified=true mActivityType=0
          compat={420dpi} labelRes=0x7f0b025c icon=0x7f030003 theme=0x7f110228
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.5}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=ff4285f4
          launchFailed=false launchCount=1 lastLaunchTime=-2s329ms
          haveState=false icicle=null
          state=RESUMED stopped=false delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=true sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_NOT_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=2
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=true lastVisibleTime=-2s207ms
          connections=[ConnectionRecord{856f08e u0 CR com.google.android.googlequicksearchbox/com.google.android.apps.gsa.search.core.service.SearchService:@34e889}]
          resizeMode=RESIZE_MODE_RESIZEABLE
    Task id #44
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{c73dd41 #44 A=com.android.dialer U=0 StackId=1 sz=1}
      userId=0 effectiveUid=u0a16 mCallingUid=u0a25 mUserSetupComplete=true mCallingPackage=com.blackberry.blackberrylauncher
      affinity=com.android.dialer
      intent={act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.android.dialer/.DialtactsActivity}
      origActivity=com.android.dialer/.DialtactsActivity
      realActivity=com.android.dialer/.DialtactsActivity
      autoRemoveRecents=false isPersistable=true numFullscreen=1 taskType=0 mTaskToReturnTo=1
      rootWasReset=true mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{c5e00ba u0 com.android.dialer/.DialtactsActivity t44}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=android.graphics.Bitmap@6c58486 lastThumbnailFile=/data/system_ce/0/recent_images/44_task_thumbnail.png
      stackId=1
      hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE isResizeable=true firstActiveTime=2569463 lastActiveTime=2569463 (inactive for 23s)
      * Hist #0: ActivityRecord{c5e00ba u0 com.android.dialer/.DialtactsActivity t44}
          packageName=com.android.dialer processName=com.android.dialer
          launchedFromUid=10025 launchedFromPackage=com.blackberry.blackberrylauncher userId=0
          app=ProcessRecord{9bec2 6400:com.android.dialer/u0a16}
          Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.android.dialer/.DialtactsActivity }
          frontOfTask=true task=TaskRecord{c73dd41 #44 A=com.android.dialer U=0 StackId=1 sz=1}
          taskAffinity=com.android.dialer
          realActivity=com.android.dialer/.DialtactsActivity
          baseDir=/system/priv-app/Dialer/Dialer.apk
          dataDir=/data/user/0/com.android.dialer
          stateNotNeeded=false componentSpecified=true mActivityType=0
          compat={420dpi} labelRes=0x7f0c02b1 icon=0x7f030001 theme=0x7f0d018e
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.5}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=ff0288d1
          launchFailed=false launchCount=0 lastLaunchTime=-1m19s5ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=11560]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=2
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-24s470ms
          connections=[]
          resizeMode=RESIZE_MODE_RESIZEABLE

    Running activities (most recent first):
      TaskRecord{1f07e05 #46 A=com.google.android.googlequicksearchbox U=0 StackId=1 sz=1}
        Run #1: ActivityRecord{d87f7ad u0 com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity t46}
      TaskRecord{c73dd41 #44 A=com.android.dialer U=0 StackId=1 sz=1}
        Run #0: ActivityRecord{c5e00ba u0 com.android.dialer/.DialtactsActivity t44}

    mResumedActivity: ActivityRecord{d87f7ad u0 com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity t46}
    mLastPausedActivity: ActivityRecord{7562746 u0 com.google.android.googlequicksearchbox/.SearchActivity t47 f}

    mLastNoHistoryActivity: ActivityRecord{7562746 u0 com.google.android.googlequicksearchbox/.SearchActivity t47 f}

  Stack #0:
  mFullscreen=true
  mBounds=null
    Task id #38
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{ff34beb #38 I=com.blackberry.blackberrylauncher/.MainActivity U=0 StackId=0 sz=1}
      userId=0 effectiveUid=u0a25 mCallingUid=1000 mUserSetupComplete=true mCallingPackage=android
      intent={act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x10000100 cmp=com.blackberry.blackberrylauncher/.MainActivity}
      realActivity=com.blackberry.blackberrylauncher/.MainActivity
      autoRemoveRecents=false isPersistable=true numFullscreen=1 taskType=1 mTaskToReturnTo=0
      rootWasReset=false mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{f1c0aac u0 com.blackberry.blackberrylauncher/.MainActivity t38}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=null lastThumbnailFile=/data/system_ce/0/recent_images/38_task_thumbnail.png
      stackId=0
      hasBeenVisible=true mResizeMode=RESIZE_MODE_UNRESIZEABLE isResizeable=false firstActiveTime=2589842 lastActiveTime=2589842 (inactive for 2s)
      * Hist #0: ActivityRecord{f1c0aac u0 com.blackberry.blackberrylauncher/.MainActivity t38}
          packageName=com.blackberry.blackberrylauncher processName=com.blackberry.blackberrylauncher
          launchedFromUid=0 launchedFromPackage=null userId=0
          app=ProcessRecord{a5a36f5 2715:com.blackberry.blackberrylauncher/u0a25}
          Intent { act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x10000100 cmp=com.blackberry.blackberrylauncher/.MainActivity }
          frontOfTask=true task=TaskRecord{ff34beb #38 I=com.blackberry.blackberrylauncher/.MainActivity U=0 StackId=0 sz=1}
          taskAffinity=null
          realActivity=com.blackberry.blackberrylauncher/.MainActivity
          baseDir=/system/priv-app/BlackBerryLauncher/BlackBerryLauncher.apk
          dataDir=/data/user/0/com.blackberry.blackberrylauncher
          stateNotNeeded=false componentSpecified=false mActivityType=1
          compat={420dpi} labelRes=0x7f0b01b8 icon=0x7f0200e2 theme=0x7f0e0039
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.5}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=ffffffff
          launchFailed=false launchCount=0 lastLaunchTime=-11m47s791ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=5844]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_NOT_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=2
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=HOME_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-22s768ms
          resizeMode=RESIZE_MODE_UNRESIZEABLE

    Running activities (most recent first):
      TaskRecord{ff34beb #38 I=com.blackberry.blackberrylauncher/.MainActivity U=0 StackId=0 sz=1}
        Run #0: ActivityRecord{f1c0aac u0 com.blackberry.blackberrylauncher/.MainActivity t38}

    mLastPausedActivity: ActivityRecord{f1c0aac u0 com.blackberry.blackberrylauncher/.MainActivity t38}

  mFocusedActivity: ActivityRecord{d87f7ad u0 com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity t46}
  mFocusedStack=ActivityStack{79cf027 stackId=1, 2 tasks} mLastFocusedStack=ActivityStack{79cf027 stackId=1, 2 tasks}
  mSleepTimeout=false
  mCurTaskIdForUser={0=47}
  mUserStackInFront={}
  mActivityContainers={0=ActivtyContainer{0}A, 1=ActivtyContainer{1}A}
  mLockTaskModeState=NONE mLockTaskPackages (userId:packages)=
    0:[]
 mLockTaskModeTasks[]





















12-20 21:48:47.019  2205  2256 I am_pss  : [9686,10076,com.android.chrome,81401856,62996480,4521984]
12-20 21:48:47.020  3474  4136 D SubscriptionController: [getPhoneId]- invalid subId return=-1
12-20 21:48:47.023  3474  3486 D QtiSubscriptionController: getPhoneId, received dummy subId 2147483643
12-20 21:48:47.027  3474  4136 D QtiSubscriptionController: getPhoneId, received dummy subId 2147483643
12-20 21:48:47.029  3474  3486 D QtiSubscriptionController: getPhoneId, received dummy subId 2147483643
12-20 21:48:47.030  4338  4772 W Herrevad: Invalid mccmnc 
12-20 21:48:47.031  3474  4951 D QtiSubscriptionController: getPhoneId, received dummy subId 2147483643
12-20 21:48:47.033  3474  4943 D QtiSubscriptionController: getPhoneId, received dummy subId 2147483643
12-20 21:48:47.034  4338  4772 W Herrevad: Invalid mccmnc 
12-20 21:48:47.036  3474  4135 D QtiSubscriptionController: getPhoneId, received dummy subId 2147483643
12-20 21:48:47.039  3474  3486 D QtiSubscriptionController: getPhoneId, received dummy subId 2147483643
12-20 21:48:47.043  3474  4951 D QtiSubscriptionController: getPhoneId, received dummy subId 2147483643
12-20 21:48:47.044  2205  4615 W NetworkIdentity: Active mobile network without subscriber!


    void notifyAppVisibilityChanged(ArraySet&lt;AppWindowToken&gt; openingApps) {

        final boolean wasMinimized = mMinimizedDock;

        checkMinimizeChanged(false /* animate */);
    
        if(wasMinimized &amp;&amp; mMinimizedDock &amp;&amp; containAppInDockedState(openingApps)){
            mService.showRecentApps(true);
        }
    }

 21:50:20.010   532   532 I sf_frame_dur: [,602,6,3,2,0,0,4]
12-20 21:50:20.748  1744  1744 I MSM-irqbalance: Decided to move IRQ5 from CPU1 [P:0] to CPU4 [P:1] (banned)
12-20 21:50:20.751  1744  1744 I MSM-irqbalance: Decided to move IRQ5 from CPU2 [P:0] to CPU7 [P:1] (banned)
12-20 21:50:20.754  1744  1744 I MSM-irqbalance: Decided to move IRQ5 from CPU3 [P:0] to CPU6 [P:1] (banned)
12-20 21:50:20.756  1744  1744 I MSM-irqbalance: Decided to move IRQ3 from CPU3 [P:0] to CPU5 [P:1] (banned)
12-20 21:50:20.758  1744  1744 I MSM-irqbalance: Decided to move IRQ5 from CPU0 [P:0] to CPU4 [P:1] (banned)
12-20 21:50:20.760  1744  1744 I MSM-irqbalance: Decided to move IRQ3 from CPU0 [P:0] to CPU7 [P:1] (banned)
12-20 21:50:22.510  1679  1899 W RILQ    : (0/1679): RIL[0] qcril_event_queue: RID 0 MID 0 Queued event QCRIL_EVT_QMI_NAS_HANDLE_INDICATIONS (40 bytes)(obj 0x7f86414940)
12-20 21:50:22.511  1679  1842 W RILQ    : (0/1679): RIL[0][event] qcril_event_main: 1 items on queue
12-20 21:50:22.512  1679  1842 W RILQ    : (0/1679): RIL[0][event] qcril_event_main: RID 0 MID 0 De-queued event QCRIL_EVT_QMI_NAS_HANDLE_INDICATIONS (655396)(obj 0x7f86414940)
12-20 21:50:22.512  1679  1842 W RILQ    : (0/1679): RIL[0][event] qcril_process_event: RIL &lt;--- QCRIL_EVT_QMI_NAS_HANDLE_INDICATIONS(655396), RID 0, MID 0 --- AMSS
12-20 21:50:22.513  1679  1842 I RILQ    : (0/1679): RIL[0][event] qcril_execute_event: Dispatching event/android request..
12-20 21:50:22.513  1679  1842 I RILQ    : (0/1679): RIL[0][event] qcril_qmi_nas_unsolicited_indication_cb_helper: invoked msg 0x51
12-20 21:50:22.514  1679  1842 I RILQ    : (0/1679): RIL[0][event] qcril_qmi_nas_is_considered_registered: .. cache valid 1
12-20 21:50:22.514  1679  1842 I RILQ    : (0/1679): RIL[0][event] qcril_qmi_nas_sig_info_ind_conv_qmi2ril: validity sign info GSM 0, WCDMA 1, TDSCDMA 0, 1x 0, HRPD 0, LTE 0
12-20 21:50:22.515  1679  1842 I RILQ    : (0/1679): RIL[0][event] qcril_qmi_nas_is_considered_registered: .. cache valid 1
12-20 21:50:22.515  1679  1842 I RILQ    : (0/1679): RIL[0][event] qcril_qmi_nas_unsolicited_indication_cb_helper: .. operational state 3
12-20 21:50:22.516  1679  1842 I RILQ    : (0/1679): RIL[0][event] qcril_process_event: Exit QCRIL_EVT_QMI_NAS_HANDLE_INDICATIONS, err_no 0
12-20 21:50:22.516  1679  1842 W RILQ    : (0/1679): RIL[0][event] qcril_event_main: Waiting...
12-20 21:50:22.695  6064  6064 I wpa_supplicant: nl80211: Drv Event 33 (NL80211_CMD_TRIGGER_SCAN) received for wlan0
12-20 21:50:22.704  2205  3936 D ConnectivityService: getNetworkForWork - retrieved Work Network for uid [ 1000 ]: null ]
12-20 21:50:22.706  2205  3541 D ConnectivityService: getNetworkForWork - retrieved Work Network for uid [ 1000 ]: null ]
12-20 21:50:22.767  7983  7996 D ContentProvider: getUriWithoutUserId : content://com.tct.endusertest.bdpush/pushinfo
12-20 21:50:22.767  7983  7996 D Uri     : isHierarchical ssi :7
12-20 21:50:22.807  2205  3907 D ConnectivityService: getNetworkForWork - retrieved Work Network for uid [ 1000 ]: null ]
12-20 21:50:22.807  2205  4057 D ConnectivityService: getNetworkForWork - retrieved Work Network for uid [ 1000 ]: null ]
12-20 21:50:22.809  2205  4050 D ConnectivityService: getNetworkForWork - retrieved Work Network for uid [ 1000 ]: null ]
12-20 21:50:22.836  3474  3487 D SubscriptionController: [getPhoneId]- invalid subId return=-1
12-20 21:50:22.839  7861  7898 D TelephonyManager: getCellLocation returning null due to NullPointerException java.lang.NullPointerException: Attempt to invoke virtual method 'boolean android.os.Bundle.isEmpty()' on a null object reference
12-20 21:50:23.000  1658  2074 D audio_hw_spkr_prot: spkr_calibration_thread: wsa speaker idle 13,minimum time 1800
12-20 21:50:25.227  6064  6064 I wpa_supplicant: nl80211: Drv Event 34 (NL80211_CMD_NEW_SCAN_RESULTS) received for wlan0
12-20 21:50:25.228  6064  6064 I wpa_supplicant: nl80211: Drv Event 32 (NL80211_CMD_GET_SCAN) sent
12-20 21:50:25.230  6064  6064 I wpa_supplicant: nl80211: Kernel(16) - Filtered(0) - Duplicated(0) = Received scan results (16 BSSes)
12-20 21:50:25.262  2205  3075 D WifiQualifiedNetworkSelector:: ==========start qualified Network Selection==========
12-20 21:50:25.263  2205  3075 D WifiQualifiedNetworkSelector:: Switch network under connection is not allowed
12-20 21:50:25.263  2205  3075 D WifiQualifiedNetworkSelector:: Quit qualified Network Selection since it is not forced and current network is qualified already
12-20 21:50:25.311  2205  3876 D ConnectivityService: getNetworkForWork - retrieved Work Network for uid [ 1000 ]: null ]
12-20 21:50:25.314  2205  2229 D ConnectivityService: getNetworkForWork - retrieved Work Network for uid [ 1000 ]: null ]
12-20 21:50:25.316  2205  3906 D ConnectivityService: getNetworkForWork - retrieved Work Network for uid [ 1000 ]: null ]
12-20 21:50:25.318  2205  4050 D ConnectivityService: getNetworkForWork - retrieved Work Network for uid [ 1000 ]: null ]



12-20 21:51:22.833  4338 13585 I System  : BlackBerryJCA OS: getService: method / alg: MessageDigest : SHA-256 : GmsCore_OpenSSL: MessageDigest.SHA-256 -&gt; com.google.android.gms.org.conscrypt.OpenSSLMessageDigestJDK$SHA256
12-20 21:51:22.833  4338 13585 I System  :   aliases: [SHA256, 2.16.840.1.101.3.4.2.1]
12-20 21:51:22.839  1677  2787 D Netd    : Didn't find work nework for 10076
12-20 21:51:22.842  1677  2784 D Netd    : Didn't find work nework for 10076
12-20 21:51:22.842  1677  2784 D Netd    : Didn't find work nework for 10076
12-20 21:51:22.877  2205  2256 I am_pss  : [4338,10015,com.google.android.gms,54444032,47345664,20480]
12-20 21:51:22.906  1677  2787 D Netd    : Didn't find work nework for 10076
12-20 21:51:23.000  1658  2074 D audio_hw_spkr_prot: spkr_calibration_thread: wsa speaker idle 7,minimum time 1800
12-20 21:51:23.027  2205  2256 I am_pss  : [3760,10015,com.google.android.gms.persistent,45952000,38912000,20480]
12-20 21:51:23.276  2205  3847 D ConnectivityService: getNetworkForWork - retrieved Work Network for uid [ 10015 ]: null ]
12-20 21:51:23.325  4338 13585 I System  : BlackBerryJCA OS: getService: method / alg: MessageDigest : SHA-256 : GmsCore_OpenSSL: MessageDigest.SHA-256 -&gt; com.google.android.gms.org.conscrypt.OpenSSLMessageDigestJDK$SHA256
12-20 21:51:23.325  4338 13585 I System  :   aliases: [SHA256, 2.16.840.1.101.3.4.2.1]
12-20 21:51:23.645  4338 13585 I System  : BlackBerryJCA OS: getService: method / alg: MessageDigest : SHA-256 : GmsCore_OpenSSL: MessageDigest.SHA-256 -&gt; com.google.android.gms.org.conscrypt.OpenSSLMessageDigestJDK$SHA256
12-20 21:51:23.645  4338 13585 I System  :   aliases: [SHA256, 2.16.840.1.101.3.4.2.1]
12-20 21:51:26.069  1744  1744 I MSM-irqbalance: Decided to move IRQ5 from CPU1 [P:0] to CPU4 [P:1] (banned)
12-20 21:51:26.071  1744  1744 I MSM-irqbalance: Decided to move IRQ5 from CPU2 [P:0] to CPU7 [P:1] (banned)
12-20 21:51:26.072  1744  1744 I MSM-irqbalance: Decided to move IRQ5 from CPU3 [P:0] to CPU6 [P:1] (banned)
12-20 21:51:26.074  1744  1744 I MSM-irqbalance: Decided to move IRQ3 from CPU0 [P:0] to CPU5 [P:1] (banned)
12-20 21:51:26.076  1744  1744 I MSM-irqbalance: Decided to move IRQ5 from CPU0 [P:0] to CPU4 [P:1] (banned)
12-20 21:51:26.515  1679  1899 W RILQ    : (0/1679): RIL[0] qcril_event_queue: RID 0 MID 0 Queued event QCRIL_EVT_QMI_NAS_HANDLE_INDICATIONS (40 bytes)(obj 0x7f86414940)
12-20 21:51:26.516  1679  1842 W RILQ    : (0/1679): RIL[0][event] qcril_event_main: 1 items on queue
12-20 21:51:26.516  1679  1842 W RILQ    : (0/1679): RIL[0][event] qcril_event_main: RID 0 MID 0 De-queued event QCRIL_EVT_QMI_NAS_HANDLE_INDICATIONS (655396)(obj 0x7f86414940)
12-20 21:51:26.517  1679  1842 W RILQ    : (0/1679): RIL[0][event] qcril_process_event: RIL &lt;--- QCRIL_EVT_QMI_NAS_HANDLE_INDICATIONS(655396), RID 0, MID 0 --- AMSS
12-20 21:51:26.517  1679  1842 I RILQ    : (0/1679): RIL[0][event] qcril_execute_event: Dispatching event/android request..
12-20 21:51:26.518  1679  1842 I RILQ    : (0/1679): RIL[0][event] qcril_qmi_nas_unsolicited_indication_cb_helper: invoked msg 0x51
12-20 21:51:26.518  1679  1842 I RILQ    : (0/1679): RIL[0][event] qcril_qmi_nas_is_considered_registered: .. cache valid 1
12-20 21:51:26.519  1679  1842 I RILQ    : (0/1679): RIL[0][event] qcril_qmi_nas_sig_info_ind_conv_qmi2ril: validity sign info GSM 0, WCDMA 1, TDSCDMA 0, 1x 0, HRPD 0, LTE 0
12-20 21:51:26.519  1679  1842 I RILQ    : (0/1679): RIL[0][event] qcril_qmi_nas_is_considered_registered: .. cache valid 1
12-20 21:51:26.520  1679  1842 I RILQ    : (0/1679): RIL[0][event] qcril_qmi_nas_unsolicited_indication_cb_helper: .. operational state 3
12-20 21:51:26.520  1679  1842 I RILQ    : (0/1679): RIL[0][event] qcril_process_event: Exit QCRIL_EVT_QMI_NAS_HANDLE_INDICATIONS, err_no 0
12-20 21:51:26.521  1679  1842 W RILQ    : (0/1679): RIL[0][event] qcril_event_main: Waiting...
12-20 21:51:28.161  6064  6064 I wpa_supplicant: nl80211: Drv Event 33 (NL80211_CMD_TRIGGER_SCAN) received for wlan0
12-20 21:51:30.783  6064  6064 I wpa_supplicant: nl80211: Drv Event 34 (NL80211_CMD_NEW_SCAN_RESULTS) received for wlan0
12-20 21:51:30.784  6064  6064 I wpa_supplicant: nl80211: Drv Event 32 (NL80211_CMD_GET_SCAN) sent
12-20 21:51:30.786  6064  6064 I wpa_supplicant: nl80211: Kernel(40) - Filtered(0) - Duplicated(0) = Received scan results (40 BSSes)
12-20 21:51:30.839  2205  3075 D WifiQualifiedNetworkSelector:: ==========start qualified Network Selection==========


12-20 13:48:03.735 D/RILJ    ( 3252): ACK_WAKE_LOCK_TIMEOUT
12-20 13:51:10.150 I/art     (15821): Thread[3,tid=15827,WaitingInMainSignalCatcherLoop,Thread*=0x7faea4f400,peer=0x32c0c160,&quot;Signal Catcher&quot;]: reacting to signal 3










09-29 09:57:48.594  5417  5417 E Recorder: initAndStartMediaRecorder RuntimeException: java.lang.RuntimeException: start failed.
09-29 09:57:48.594  5417  5417 W System.err: java.lang.RuntimeException: start failed.
09-29 09:57:48.594  5417  5417 W System.err: 	at android.media.MediaRecorder.start(Native Method)
09-29 09:57:48.594  5417  5417 W System.err: 	at com.tct.soundrecorder.Recorder.initAndStartMediaRecorder(Recorder.java:284)
09-29 09:57:48.595  5417  5417 W System.err: 	at com.tct.soundrecorder.Recorder.startRecording(Recorder.java:165)
09-29 09:57:48.595  5417  5417 W System.err: 	at com.tct.soundrecorder.SoundRecorderService.record(SoundRecorderService.java:604)
09-29 09:57:48.595  5417  5417 W System.err: 	at com.tct.soundrecorder.SoundRecorder.onClickRecordButton(SoundRecorder.java:1515)
09-29 09:57:48.595  5417  5417 W System.err: 	at com.tct.soundrecorder.SoundRecorder.onClick(SoundRecorder.java:430)
09-29 09:57:48.595  5417  5417 W System.err: 	at android.view.View.performClick(View.java:5265)
09-29 09:57:48.595  5417  5417 W System.err: 	at android.view.View$PerformClick.run(View.java:21291)
09-29 09:57:48.595  5417  5417 W System.err: 	at android.os.Handler.handleCallback(Handler.java:739)
09-29 09:57:48.595  5417  5417 W System.err: 	at android.os.Handler.dispatchMessage(Handler.java:95)
09-29 09:57:48.595  5417  5417 W System.err: 	at android.os.Looper.loop(Looper.java:148)
09-29 09:57:48.595  5417  5417 W System.err: 	at android.app.ActivityThread.main(ActivityThread.java:5475)
09-29 09:57:48.595  5417  5417 W System.err: 	at java.lang.reflect.Method.invoke(Native Method)
09-29 09:57:48.596  5417  5417 W System.err: 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)


09-29 10:11:29.355  6572  7050 E CAM2PORT_AndCamAgntImp: RuntimeException during CameraAction[OPEN_CAMERA] at CameraState[1]
09-29 10:11:29.355  6572  7050 E CAM2PORT_AndCamAgntImp: java.lang.RuntimeException: Unknown camera error
09-29 10:11:29.355  6572  7050 E CAM2PORT_AndCamAgntImp: 	at android.hardware.Camera.&lt;init&gt;(Camera.java:459)
09-29 10:11:29.355  6572  7050 E CAM2PORT_AndCamAgntImp: 	at android.hardware.Camera.openLegacy(Camera.java:424)
09-29 10:11:29.355  6572  7050 E CAM2PORT_AndCamAgntImp: 	at com.android.ex.camera2.portability.AndroidCameraAgentImpl$CameraHandler.handleMessage(AndroidCameraAgentImpl.java:398)
09-29 10:11:29.355  6572  7050 E CAM2PORT_AndCamAgntImp: 	at android.os.Handler.dispatchMessage(Handler.java:102)
09-29 10:11:29.355  6572  7050 E CAM2PORT_AndCamAgntImp: 	at android.os.Looper.loop(Looper.java:148)
09-29 10:11:29.355  6572  7050 E CAM2PORT_AndCamAgntImp: 	at android.os.HandlerThread.run(HandlerThread.java:61)
09-29 10:11:29.359  6572  6572 D CAM_Storage: External storage state=mounted
09-29 10:11:29.360  6572  6572 I CAM_PermissionsUtil: Permission android.permission.READ_EXTERNAL_STORAGE, checkSelfPermission 0
09-29 10:11:29.360  6572  6572 I CAM_PermissionsUtil: Permission android.permission.WRITE_EXTERNAL_STORAGE, checkSelfPermission 0
09-29 10:11:29.360  6572  6572 V CAM_CameraActivity: ignoring storage callback after activity pause



09-29 17:16:39.735  1467  1551 I WindowManager: Destroying surface Surface(name=com.android.multiwindowplayground/com.android.multiwindowplayground.MainActivity) called by com.android.server.wm.WindowStateAnimator.destroyDeferredSurfaceLocked:922 com.android.server.wm.WindowStateAnimator.destroyPreservedSurfaceLocked:674 com.android.server.wm.WindowManagerService.destroyPreservedSurfaceLocked:8717 com.android.server.wm.WindowAnimator.animateLocked:792 com.android.server.wm.WindowAnimator.-wrap0:-1 com.android.server.wm.WindowAnimator$1.doFrame:140 android.view.Choreographer$CallbackRecord.run:869 android.view.Choreographer.doCallbacks:683 
09-29 17:16:40.880  1467  8257 I WindowManager: Failed to capture screenshot of Token{ccb91e3 ActivityRecord{ebe9612 u0 com.android.multiwindowplayground/.MainActivity t51}} appWin=Window{cb4b9d3 u0 com.android.multiwindowplayground/com.android.multiwindowplayground.MainActivity} drawState=4
09-29 17:16:40.921 13486 13486 D MainActivity: onMultiWindowModeChanged: false
09-29 17:16:40.925 13486 13486 D MainActivity: onStop
09-29 17:16:45.400  1467  1502 I WindowManager: Destroying surface Surface(name=com.android.multiwindowplayground/com.android.multiwindowplayground.MainActivity) called by com.android.server.wm.WindowStateAnimator.destroySurface:2026 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:893 com.android.server.wm.WindowState.destroySavedSurface:2085 com.android.server.wm.AppWindowToken.destroySavedSurfaces:506 com.android.server.wm.WindowManagerService.updateRotationUncheckedLocked:6743 com.android.server.wm.WindowManagerService.updateRotationUnchecked:6601 com.android.server.wm.WindowManagerService.updateRotation:6563 com.android.server.policy.PhoneWindowManager.updateRotation:7381 




  Window #8 Window{7a130ce u0 StatusBar}:
    mDisplayId=0 stackId=0 mSession=Session{5565452 1808:u0a10031} mClient=android.os.BinderProxy@fbb01c9
    mOwnerUid=10031 mShowToOwnerOnly=false package=com.android.systemui appop=NONE
    mAttrs=WM.LayoutParams{(0,0)(fillx63) gr=#30 sim=#10 ty=2000 fl=#81840048 fmt=-3 vsysui=0x600}
    Requested w=1080 h=63 mLayoutSeq=1036
    mHasSurface=true mShownPosition=[0,0] isReadyForDisplay()=true hasSavedSurface()=false mWindowRemovalAllowed=false
    WindowStateAnimator{a1820ed StatusBar}:
      Surface: shown=true layer=161000 alpha=1.0 rect=(0.0,0.0) 1080.0 x 63.0
    mLastFreezeDuration=+534ms
  Window #7 Window{45fbbf1 u0 KeyguardScrim}:
    mDisplayId=0 stackId=0 mSession=Session{ecf810a 1456:1000} mClient=android.view.ViewRootImpl$W@56ca3d6
    mOwnerUid=1000 mShowToOwnerOnly=false package=android appop=NONE
    mAttrs=WM.LayoutParams{(0,0)(fillxfill) sim=#10 ty=2029 fl=#1110900 pfl=0x1 fmt=-3 or=5 vsysui=0x3610000}
    Requested w=1080 h=1620 mLayoutSeq=36
    mHasSurface=false mShownPosition=[0,0] isReadyForDisplay()=false hasSavedSurface()=false mWindowRemovalAllowed=false
    WindowStateAnimator{f7b3304 KeyguardScrim}:
  Window #6 Window{8542a08 u0 com.blackberry.productivityedge}:
    mDisplayId=0 stackId=0 mSession=Session{f664c25 3368:u0a10024} mClient=android.os.BinderProxy@80993ab
    mOwnerUid=10024 mShowToOwnerOnly=true package=com.blackberry.productivityedge appop=SYSTEM_ALERT_WINDOW
    mAttrs=WM.LayoutParams{(0,446)(wrapx323) gr=#35 sim=#20 ty=2003 fl=#1000028 pfl=0x40 fmt=-3 sysuil=true}
    Requested w=21 h=323 mLayoutSeq=1036
    mHasSurface=true mShownPosition=[1059,509] isReadyForDisplay()=true hasSavedSurface()=false mWindowRemovalAllowed=false
    WindowStateAnimator{5cb7317 }:
      Surface: shown=true layer=111000 alpha=1.0 rect=(1059.0,509.0) 21.0 x 323.0
    mLastFreezeDuration=+46s921ms
  Window #5 Window{1343971 u0 DockedStackDivider}:
    mDisplayId=0 stackId=0 mSession=Session{5565452 1808:u0a10031} mClient=android.os.BinderProxy@7760b18
    mOwnerUid=10031 mShowToOwnerOnly=false package=com.android.systemui appop=NONE
    mAttrs=WM.LayoutParams{(0,0)(fillx126) sim=#20 ty=2034 fl=#21840028 pfl=0x40 fmt=-3 vsysui=0x700}
    Requested w=1079 h=126 mLayoutSeq=1036
    mPolicyVisibility=false mPolicyVisibilityAfterAnim=false mAppOpVisibility=true mAttachedHidden=false
    mHasSurface=false mShownPosition=[0,0] isReadyForDisplay()=false hasSavedSurface()=false mWindowRemovalAllowed=false
    WindowStateAnimator{6012b96 DockedStackDivider}:
      mShownAlpha=0.0 mAlpha=1.0 mLastAlpha=0.0
  Window #4 Window{9effd5e u0 com.google.android.music/com.android.music.activitymanagement.TopLevelActivity}:
    mDisplayId=0 stackId=1 mSession=Session{a066ad2 9998:u0a10061} mClient=android.os.BinderProxy@2a9e699
    mOwnerUid=10061 mShowToOwnerOnly=true package=com.google.android.music appop=NONE
    mAttrs=WM.LayoutParams{(0,0)(fillxfill) sim=#120 ty=1 fl=#81810100 pfl=0x20000 wanim=0x1030465 vsysui=0x700 needsMenuKey=2}
    Requested w=1080 h=1620 mLayoutSeq=1036
    mHasSurface=true mShownPosition=[0,0] isReadyForDisplay()=true hasSavedSurface()=false mWindowRemovalAllowed=false
    WindowStateAnimator{1568ab1 com.google.android.music/com.android.music.activitymanagement.TopLevelActivity}:
      Surface: shown=true layer=21020 alpha=1.0 rect=(0.0,0.0) 1080.0 x 1620.0
  Window #3 Window{6b5fdb6 u0 com.google.android.deskclock/com.android.deskclock.DeskClock}:
    mDisplayId=0 stackId=1 mSession=Session{4132bdb 9453:u0a10046} mClient=android.os.BinderProxy@eb0d151
    mOwnerUid=10046 mShowToOwnerOnly=true package=com.google.android.deskclock appop=NONE
    mAttrs=WM.LayoutParams{(0,0)(fillxfill) sim=#20 ty=1 fl=#8d810100 pfl=0x20000 wanim=0x1030465 vsysui=0x700 needsMenuKey=2}
    Requested w=1080 h=1620 mLayoutSeq=600
    mHasSurface=false mShownPosition=[0,1781] isReadyForDisplay()=false hasSavedSurface()=false mWindowRemovalAllowed=false
    WindowStateAnimator{cd5d958 com.google.android.deskclock/com.android.deskclock.DeskClock}:
      mShownAlpha=0.0 mAlpha=1.0 mLastAlpha=0.0
      mGlobalScale=1.0 mDsDx=1.0 mDtDx=0.0 mDsDy=0.0 mDtDy=1.0
  Window #2 Window{9dd4acf u0 com.blackberry.blackberrylauncher/com.blackberry.blackberrylauncher.MainActivity}:
    mDisplayId=0 stackId=0 mSession=Session{1d85d30 2665:u0a10025} mClient=android.os.BinderProxy@6092f2e
    mOwnerUid=10025 mShowToOwnerOnly=true package=com.blackberry.blackberrylauncher appop=NONE
    mAttrs=WM.LayoutParams{(0,0)(fillxfill) sim=#123 ty=1 fl=#81110100 fmt=-2 wanim=0x1030465 vsysui=0x700 needsMenuKey=2}
    Requested w=1080 h=1620 mLayoutSeq=1009
    mHasSurface=true mShownPosition=[0,0] isReadyForDisplay()=false hasSavedSurface()=false mWindowRemovalAllowed=false
    WindowStateAnimator{bf22e3b com.blackberry.blackberrylauncher/com.blackberry.blackberrylauncher.MainActivity}:
      Surface: shown=false layer=21010 alpha=1.0 rect=(0.0,0.0) 1080.0 x 1620.0
    mAnimatingExit=false mRemoveOnExit=false mDestroying=true mRemoved=false
    mWallpaperX=0.0 mWallpaperY=0.5
  Window #1 Window{263f71e u0 com.android.systemui/com.android.systemui.recents.RecentsActivity}:
    mDisplayId=0 stackId=0 mSession=Session{5565452 1808:u0a10031} mClient=android.os.BinderProxy@a6eaf59
    mOwnerUid=10031 mShowToOwnerOnly=true package=com.android.systemui appop=NONE
    mAttrs=WM.LayoutParams{(0,0)(fillxfill) sim=#120 ty=1 fl=#81910100 pfl=0x24040 fmt=-3 vsysui=0x700 needsMenuKey=2}
    Requested w=1080 h=1620 mLayoutSeq=783
    mHasSurface=false mShownPosition=[0,0] isReadyForDisplay()=false hasSavedSurface()=false mWindowRemovalAllowed=false
    
    
    
    
    
    
    
    
    
    
    
    
    WindowStateAnimator{6170cca com.android.systemui/com.android.systemui.recents.RecentsActivity}:
      mShownAlpha=1.0 mAlpha=1.0 mLastAlpha=0.0
  Window #0 Window{fc2272c u0 com.android.systemui.ImageWallpaper}:
    mDisplayId=0 stackId=0 mSession=Session{5565452 1808:u0a10031} mClient=android.os.BinderProxy@4d27edf
    mOwnerUid=10031 mShowToOwnerOnly=true package=com.android.systemui appop=NONE
    mAttrs=WM.LayoutParams{(0,0)(1243x1620) gr=#800033 ty=2013 fl=#318 fmt=2 wanim=0x10302f2}
    Requested w=1243 h=1620 mLayoutSeq=1017
    mIsImWindow=false mIsWallpaper=true mIsFloatingLayer=true mWallpaperVisible=false
    mHasSurface=true mShownPosition=[0,0] isReadyForDisplay()=false hasSavedSurface()=false mWindowRemovalAllowed=false
    WindowStateAnimator{6472035 com.android.systemui.ImageWallpaper}:
      Surface: shown=false layer=21000 alpha=1.0 rect=(0.0,0.0) 1243.0 x 1620.0
    mLastFreezeDuration=+1m49s723ms
    
    
    
    
    
    
    
    
    
    
    
            public final static int BB_SETTINGPROVIDER_CREATE = 0;
        public final static int BB_SETTINGPROVIDER_UPDATE = 1;
        
        private Handler mUpdateHandler = new Handler(){

            @Override
            public void handleMessage(Message msg){
                switch(msg.what){
                    case BB_SETTINGPROVIDER_CREATE:
                        int userId = msg.arg1;
                        // mBlackberrySettingsProvider = new BlackberrySettingsProvider(getContext(), userId);
                       UpgradeController upgrader = new UpgradeController(userId);
                        upgrader.upgradeIfNeededLocked();
                        break;
                    case BB_SETTINGPROVIDER_UPDATE:
                        int oldBbVersion = msg.arg1;
                        int newBbVersion = msg.arg2;
                        //mBlackberrySettingsProvider.onUpgrade(oldBbVersion, newBbVersion);
                        break;
                    default:
                        break;
                }
            }
        };



            // Upgrade the settings to the latest version.

                // Message msg = Message.obtain();
                // msg.arg1 = userId;
                // msg.what =  BB_SETTINGPROVIDER_CREATE;
                // mUpdateHandler.sendMessage(msg);
                
                
                
                
                
                
                
   BbRecentsView是黑莓Recents的界面, 原生的是跳转到TaskStackView
   onBusEvent(LaunchNextTaskRequestEvent event)
                
                
   DialpadFragment  
   
   if (resId == R.id.dialpad_floating_action_button) {

            if (isConfigAvailableNetwork) {
               //  Log.i(&quot;hzy&quot;,&quot;call 1&quot;);
                dialAfterNetworkCheck();
            } else {
               //  Log.i(&quot;hzy&quot;,&quot;call 2&quot;);
                view.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);
                // start:BBRY_ANDROID
                mPresenceWrapper.stopMonitoringAllNumbers();
                // end:BBRY_ANDROID
                handleDialButtonPressed();
            }
        // start:BBRY_ANDROID
        }
                
        DialpadFragment#handleDialButtonPressed   
        
        
       DialerUtils.startActivityWithErrorToast(getActivity(), intent);
        





    mStackId=0
    mDeferDetach=false
    mFullscreen=false
    mBounds=[0,854][1080,1620]
      taskId=50
        mFullscreen=true
        mBounds=[0,0][1080,1620]
        mdr=false
        appTokens=[AppWindowToken{108935a token=Token{aa9d56f ActivityRecord{79cc04e u0 com.blackberry.blackberrylauncher/.MainActivity t50}}}]
        mTempInsetBounds=[0,0][0,0]
          Activity #0 AppWindowToken{108935a token=Token{aa9d56f ActivityRecord{79cc04e u0 com.blackberry.blackberrylauncher/.MainActivity t50}}}
          windows=[Window{2ed58bb u0 com.blackberry.blackberrylauncher/com.blackberry.blackberrylauncher.MainActivity}]
          windowType=2 hidden=false hasVisible=true
          app=true voiceInteraction=false
          allAppWindows=[Window{2ed58bb u0 com.blackberry.blackberrylauncher/com.blackberry.blackberrylauncher.MainActivity}]
          task={taskId=50 appTokens=[AppWindowToken{108935a token=Token{aa9d56f ActivityRecord{79cc04e u0 com.blackberry.blackberrylauncher/.MainActivity t50}}}] mdr=false}
           appFullscreen=true requestedOrientation=1
          hiddenRequested=false clientHidden=false reportedDrawn=true reportedVisible=true
          numInterestingWindows=1 numDrawnWindows=1 inPendingTransaction=false allDrawn=true (animator=true)
          startingData=null removed=false firstWindowDrawn=true mIsExiting=false





    mDeferDetach=false
    mFullscreen=false
    mBounds=[0,854][1080,1620]
      taskId=50
        mFullscreen=true
        mBounds=[0,0][1080,1620]
        mdr=false
        appTokens=[AppWindowToken{108935a token=Token{aa9d56f ActivityRecord{79cc04e u0 com.blackberry.blackberrylauncher/.MainActivity t50}}}]
        mTempInsetBounds=[0,0][0,0]
          Activity #0 AppWindowToken{108935a token=Token{aa9d56f ActivityRecord{79cc04e u0 com.blackberry.blackberrylauncher/.MainActivity t50}}}
          windows=[Window{2ed58bb u0 com.blackberry.blackberrylauncher/com.blackberry.blackberrylauncher.MainActivity}]
          windowType=2 hidden=false hasVisible=true
          app=true voiceInteraction=false
          allAppWindows=[Window{2ed58bb u0 com.blackberry.blackberrylauncher/com.blackberry.blackberrylauncher.MainActivity}]
          task={taskId=50 appTokens=[AppWindowToken{108935a token=Token{aa9d56f ActivityRecord{79cc04e u0 com.blackberry.blackberrylauncher/.MainActivity t50}}}] mdr=false}
           appFullscreen=true requestedOrientation=1
          hiddenRequested=false clientHidden=false reportedDrawn=true reportedVisible=true
          numInterestingWindows=1 numDrawnWindows=1 inPendingTransaction=false allDrawn=true (animator=true)
          startingData=null removed=false firstWindowDrawn=true mIsExiting=false





没问题的：

    type   |  handle  | hint | flag | tr | blnd |   format    |     source crop (l,t,r,b)      |          frame         | name 
-----------+----------+------+------+----+------+-------------+--------------------------------+------------------------+------
      GLES | 7fa4c61420 | 0002 | 0000 | 00 | 0100 | RGBx_8888   |    0.0,    0.0, 1080.0, 1620.0 |    0,    0, 1080, 1620 | com.android.systemui.ImageWallpaper
      GLES | 7fa4c614e0 | 0002 | 0000 | 00 | 0105 | RGBA_8888   |    0.0,    0.0, 1080.0, 1620.0 |    0,    0, 1080, 1620 | com.blackberry.blackberrylauncher/com.blackberry.blackberrylauncher.MainActivity
      GLES | 7fa881a060 | 0002 | 0000 | 00 | 0100 | RGBA_8888   |    0.0,    0.0, 1080.0,   63.0 |    0,    0, 1080,   63 | com.android.dialer/com.android.dialer.DialtactsActivity
      GLES | 7fa4c620e0 | 0002 | 0000 | 00 | 0105 | RGBA_8888   |    0.0,    0.0, 1080.0,  126.0 |    0,   13, 1080,  139 | DockedStackDivider
      GLES | 7fa4c624a0 | 0002 | 0000 | 00 | 0105 | RGBA_8888   |    0.0,    0.0,   21.0,  323.0 | 1059,  509, 1080,  832 | 
      GLES | 7fa881a000 | 0002 | 0000 | 00 | 0105 | RGBA_8888   |    0.0,    0.0, 1080.0,   63.0 |    0,    0, 1080,   63 | StatusBar
      GLES | 7fa4c61780 | 0002 | 0000 | 00 | 0105 | RGBA_8888   |    0.0,    0.0, 1080.0, 1620.0 |    0,    0, 1080, 1620 | 
 FB TARGET | 7fa8e1adc0 | 0000 | 0000 | 00 | 0105 | RGBA_8888   |    0.0,    0.0, 1080.0, 1620.0 |    0,    0, 1080, 1620 | HWC_FRAMEBUFFER_TARGET



    type   |  handle  | hint | flag | tr | blnd |   format    |     source crop (l,t,r,b)      |          frame         | name 
-----------+----------+------+------+----+------+-------------+--------------------------------+------------------------+------
      GLES | 7fa821a060 | 0002 | 0000 | 00 | 0100 | RGBx_8888   |    0.0,    0.0, 1080.0, 1620.0 |    0,    0, 1080, 1620 | com.android.systemui.ImageWallpaper
      GLES | 7fa821a1e0 | 0002 | 0000 | 00 | 0105 | RGBA_8888   |    0.0,    0.0, 1080.0, 1620.0 |    0,    0, 1080, 1620 | com.blackberry.blackberrylauncher/com.blackberry.blackberrylauncher.MainActivity
      GLES | 7fa4674660 | 0002 | 0000 | 00 | 0100 | RGBA_8888   |    0.0,    0.0, 1080.0,   63.0 |    0,    0, 1080,   63 | com.android.dialer/com.android.dialer.DialtactsActivity
      GLES | 7fa821a2a0 | 0002 | 0000 | 00 | 0105 | RGBA_8888   |    0.0,    0.0, 1080.0,  126.0 |    0,   13, 1080,  139 | DockedStackDivider
      GLES | 7fa821a000 | 0002 | 0000 | 00 | 0105 | RGBA_8888   |    0.0,    0.0,   21.0,  323.0 | 1059,  509, 1080,  832 | 
       HWC | 7fa821a180 | 0002 | 0000 | 00 | 0105 | RGBA_8888   |    0.0,    0.0, 1080.0,   63.0 |    0,    0, 1080,   63 | StatusBar
 FB TARGET | 7fa881adc0 | 0000 | 0000 | 00 | 0105 | RGBA_8888   |    0.0,    0.0, 1080.0, 1620.0 |    0,    0, 1080, 1620 | HWC_FRAMEBUFFER_TARGET




</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/packages/apps/ContactsCommon/src/com/android/contacts/common/widget/SelectPhoneAccountDialogFragment.java">SelectPhoneAccountDialogFragment</rich_text>
			<rich_text>




点击拨打后弹出的Log
11-25 15:36:53.689  1441  1441 I Telecom : InCallController: onCanAddCallChanged : false: PCR.oR@A2k
11-25 15:36:53.691  1441  1441 I Telecom : InCallController: defaultDialer: null: PCR.oR@A2k
11-25 15:36:53.691  1441  1441 I Telecom : InCallController: defaultDialer: null: PCR.oR@A2k
11-25 15:36:53.691  1441  1441 I Telecom : CarSwappingInCallServiceConnection: carmodechange: false =&gt; false: PCR.oR@A2k
11-25 15:36:53.691  1441  1441 I Telecom : EmergencyInCallServiceConnection: Attempting to bind to InCall ComponentInfo{com.android.dialer/com.android.incallui.InCallServiceImpl}, with Intent { act=android.telecom.InCallService cmp=com.android.dialer/com.android.incallui.InCallServiceImpl (has extras) }: PCR.oR@A2k
11-25 15:36:53.695  1441  1441 I Telecom : InCallWakeLockController: Releasing full wake lock: PCR.oR@A2k
11-25 15:36:53.743  4625  4625 I InCall  : ProximitySensor - ProximitySensor{keybrd=0, dpad=0, offhook=0, hor=0, ui=0, aud=EARPIECE}
11-25 15:36:53.747  4625  4625 I InCall  : ProximitySensor - Proximity wake lock already released
11-25 15:36:53.751  4625  4625 I InCall  : InCallPresenter - Phone switching state: NO_CALLS -&gt; NO_CALLS
11-25 15:36:53.767  1441  1441 I Telecom : InCallController: onConnected to ComponentInfo{com.android.dialer/com.android.incallui.InCallServiceImpl}: ICSBC.oSC@A2o
11-25 15:36:53.767  1441  1441 I Telecom : InCallController: Adding 1 calls to InCallService after onConnected: ComponentInfo{com.android.dialer/com.android.incallui.InCallServiceImpl}: ICSBC.oSC@A2o
11-25 15:36:53.785  4625  4625 I InCall  : BB_FloatingActiveInCallHomeService - onStartCommand cancel
11-25 15:36:53.790  4625  4625 I InCall  : CallList - onUpdate - [Call_6, SELECT_PHONE_ACCOUNT, [Capabilities:], children:[], parent:null, conferenceable:[], videoState:Audio Only, mSessionModificationState:0, VideoSettings:(CameraDir:-1), mIsActivSub:false]
11-25 15:36:53.790  4625  4625 I InCall  : InCallPresenter - Start in call UI
11-25 15:36:53.790  4625  4625 I InCall  : InCallPresenter - Showing InCallActivity
11-25 15:36:53.794  1441  2489 I ActivityManager: START u0 {act=android.intent.action.MAIN flg=0x10040000 cmp=com.android.dialer/com.android.incallui.InCallActivity (has extras)} from uid 10016 on display 0
11-25 15:36:53.797  1441  1441 I Telecom : InCallController: Sending updateCall [TC@7, SELECT_PHONE_ACCOUNT, null, tel:****, A, childs(0), has_parent(false), [Capabilities:], [Properties:]] ==&gt; [TC@7, parent:null, children:[]]: NOCBIR.oR@A2s
11-25 15:36:53.798  1441  1441 I Telecom : InCallController: Components updated: [ComponentInfo{com.android.dialer/com.android.incallui.InCallServiceImpl}]: NOCBIR.oR@A2s
11-25 15:36:53.812  4625  4625 I InCall  : InCallPresenter - Phone switching state: NO_CALLS -&gt; WAITING_FOR_ACCOUNT
11-25 15:36:53.815  4625  4625 I InCall  : InCallPresenter - setBoundAndWaitingForOutgoingCall: false
11-25 15:36:53.850  4625  4625 I InCall  : BB_FloatingActiveInCallHomeService - onStartCommand cancel
11-25 15:36:53.867  4625  4625 I InCall  : hzy - show dialog
11-25 15:36:53.889  4625  4625 I InCall  : InCallPresenter - UI Initialized
11-25 15:36:53.891  4625  4625 I InCall  : InCallPresenter - Phone switching state: WAITING_FOR_ACCOUNT -&gt; WAITING_FOR_ACCOUNT
11-25 15:36:53.915  4625  4625 I InCall  : InCallActivity - onResume()...
11-25 15:36:53.927  4625  4625 D ImsClient: register(): com.android.incallui.InCallActivity@ec29ed8
11-25 15:36:53.928  4625  4625 D ImsClient: bind(): com.android.incallui.InCallActivity@ec29ed8
11-25 15:36:53.934  4625  4625 I InCall  : ProximitySensor - ProximitySensor{keybrd=0, dpad=0, offhook=0, hor=0, ui=1, aud=EARPIECE}
11-25 15:36:53.934  4625  4625 I InCall  : ProximitySensor - Proximity wake lock already released
11-25 15:36:54.044  4625  4625 I InCall  : BB_FloatingActiveInCallHomeService - onStartCommand cancel
11-25 15:36:54.046  4625  4625 I InCall  : BB_FloatingActiveInCallHomeService - onStartCommand cancel
11-25 15:36:54.105  1441  1508 I ActivityManager: Displayed com.android.dialer/com.android.incallui.InCallActivity: +261ms
11-25 15:36:54.112  2244  2307 I DataMinerService:     &quot;Component&quot;: &quot;com.android.dialer\/com.android.incallui.InCallActivity&quot;,
11-25 15:36:54.113  2244  2307 I DataMinerService:     &quot;FgComponent&quot;: &quot;com.android.dialer\/com.android.incallui.InCallActivity&quot;,



从Recent切到这个Activity
11-25 15:37:38.062  1441  2574 I ActivityManager: START u0 {act=android.intent.action.MAIN flg=0x10940000 cmp=com.android.dialer/com.android.incallui.InCallActivity (has extras)} from uid 10016 on display 0
11-25 15:37:38.226  4625  4625 D InCall-EcidClient: ECID AOSP VERSION: 3.6.0.1
11-25 15:37:38.226  4625  4625 D InCall-EcidClient: ECID AOSP VERSION: 3.6.0.1
11-25 15:37:38.227  4625  4625 I InCall  : BB_CallStateLabelHelper - getCallStateLabelFromState: 2, 0, 0, false, null, 
11-25 15:37:38.227  4625  4625 I InCall  : BB_CallStateLabelHelper - BB_CallStateLabelHelper [0, 0, false, false, true, true, false, false, false, false, false, null, null]
11-25 15:37:38.239  4625  4625 I InCall  : InCallPresenter - UI Initialized
11-25 15:37:38.241  4625  4625 I InCall  : InCallPresenter - UI Initialized, but no calls left.  shut down.
11-25 15:37:38.241  4625  4625 I InCall  : InCallPresenter - Hide in call UI: true
11-25 15:37:38.244  4625  4625 I InCall  : InCallActivity - finish().  Dialog showing: false
11-25 15:37:38.251  4625  4625 W InCall  : VideoCallPresenter - onUiShowing, received for non-active video call
11-25 15:37:38.310  4625  4625 W InCall  : VideoCallPresenter - onUiShowing, received for non-active video call
11-25 15:37:38.316  4625  4625 I InCall  : InCallPresenter - UI Destroyed
11-25 15:37:38.316  4625  4625 I InCall  : InCallPresenter - attemptCleanup? true






11-25 15:12:31.412  4625  4625 D ImsClient: unbind(): com.android.incallui.InCallActivity@bfcc2b2
11-25 15:12:31.424  4625  4625 I InCall  : ProximitySensor - ProximitySensor{keybrd=0, dpad=0, offhook=0, hor=0, ui=0, aud=EARPIECE}
11-25 15:12:31.424  4625  4625 I InCall  : ProximitySensor - Proximity wake lock already released
11-25 15:12:31.443  1441  1554 I Telecom : Event: Call TC@4: REQUEST_DISCONNECT, null: ICA.dC(InCall package: com.android.dialer)@AnU
11-25 15:12:31.447  1441  1554 I Telecom : CallsManager: setCallState SELECT_PHONE_ACCOUNT -&gt; DISCONNECTED, call: [TC@4, SELECT_PHONE_ACCOUNT, null, tel:***, A, childs(0), has_parent(false), [Capabilities:], [Properties:]]: ICA.dC(InCall package: com.android.dialer)@AnU
11-25 15:12:31.447  1441  1554 I Telecom : Event: Call TC@4: SET_DISCONNECTED, disconnected set explicitly&gt; DisconnectCause [ Code: (CANCELED) Label: () Description: () Reason: () Tone: (-1) ]: ICA.dC(InCall package: com.android.dialer)@AnU
11-25 15:12:31.448  1441  1554 I Telecom : InCallController: onCanAddCallChanged : true: ICA.dC(InCall package: com.android.dialer)@AnU
11-25 15:12:31.449  1441  1554 I Telecom : InCallController: Sending updateCall [TC@4, DISCONNECTED, null, tel:***, A, childs(0), has_parent(false), [Capabilities:], [Properties:]] ==&gt; [TC@4, parent:null, children:[]]: ICA.dC(InCall package: com.android.dialer)@AnU
11-25 15:12:31.449  1441  1554 I Telecom : InCallController: Components updated: [ComponentInfo{com.android.dialer/com.android.incallui.InCallServiceImpl}]: ICA.dC(InCall package: com.android.dialer)@AnU
11-25 15:12:31.449  1441  1554 I Telecom : ViceNotificationImpl: onCallStateChanged newState = 7: ICA.dC(InCall package: com.android.dialer)@AnU
11-25 15:12:31.451  4625  4625 I InCall  : BB_FloatingActiveInCallHomeService - onStartCommand cancel
11-25 15:12:31.457  1441  1554 E ActivityManager: 	at com.android.server.telecom.InCallAdapter.disconnectCall(InCallAdapter.java:172)
11-25 15:12:31.457  1441  1554 E ActivityManager: 	at com.android.internal.telecom.IInCallAdapter$Stub.onTransact(IInCallAdapter.java:79)
11-25 15:12:31.467  1441  1554 I Telecom : TelecomWakeLock: WakeLock already released with id: 26: ICA.dC(InCall package: com.android.dialer)@AnU
11-25 15:12:31.468  1441  1554 I Telecom : InCallWakeLockController: Releasing full wake lock: ICA.dC(InCall package: com.android.dialer)@AnU
11-25 15:12:31.469  1441  1554 I Telecom : Event: Call TC@4: DESTROYED, null: ICA.dC(InCall package: com.android.dialer)@AnU
11-25 15:12:31.469  1441  1554 I Telecom : InCallController: onCallRemoved: [TC@4, DISCONNECTED, null, tel:***, A, childs(0), has_parent(false), [Capabilities:], [Properties:]]: ICA.dC(InCall package: com.android.dialer)@AnU
11-25 15:12:31.469  1441  1554 I Telecom : ProximitySensorManager: All calls removed, resetting proximity sensor to default state: ICA.dC(InCall package: com.android.dialer)@AnU
11-25 15:12:31.470  1441  1554 I Telecom : TelecomWakeLock: WakeLock already released with id: 32: ICA.dC(InCall package: com.android.dialer)@AnU
11-25 15:12:31.470  1441  1554 I Telecom : TelecomWakeLock: WakeLock already released with id: 26: ICA.dC(InCall package: com.android.dialer)@AnU
11-25 15:12:31.470  1441  1554 I Telecom : InCallWakeLockController: Releasing full wake lock: ICA.dC(InCall package: com.android.dialer)@AnU
11-25 15:12:31.490  4625  4625 I InCall  : CallList - onDisconnect: [Call_3, DISCONNECTED, [Capabilities:], children:[], parent:null, conferenceable:[], videoState:Audio Only, mSessionModificationState:0, VideoSettings:(CameraDir:-1), mIsActivSub:false]
11-25 15:12:31.493  4625  4625 I InCall  : InCallPresenter - isVzW = false
11-25 15:12:31.501  4625  4625 I InCall  : InCallPresenter - Phone switching state: WAITING_FOR_ACCOUNT -&gt; INCALL
11-25 15:12:31.508  4625  4625 I InCall  : InCallCsRedialHandler - onDisconnect
11-25 15:12:31.508  4625  4625 I InCall  : InCallCsRedialHandler - checkForCsRetry failCause: -1
11-25 15:12:31.508  4625  4625 W InCall  : InCallMessageController - onDisconnect: null Extras
11-25 15:12:31.509  4625  4625 I InCall  : CallList - onUpdate - [Call_3, DISCONNECTED, [Capabilities:], children:[], parent:null, conferenceable:[], videoState:Audio Only, mSessionModificationState:0, VideoSettings:(CameraDir:-1), mIsActivSub:false]
11-25 15:12:31.509  4625  4625 I InCall  : InCallPresenter - Phone switching state: INCALL -&gt; INCALL
11-25 15:12:31.513  2244  2307 I DataMinerService:     &quot;BgComponent&quot;: &quot;com.android.dialer\/com.android.incallui.InCallActivity&quot;,
11-25 15:12:31.519  4625  4625 I InCall  : InCallLowBatteryListener - onDetailsChanged call = [Call_3, DISCONNECTED, [Capabilities:], children:[], parent:null, conferenceable:[], videoState:Audio Only, mSessionModificationState:0, VideoSettings:(CameraDir:-1), mIsActivSub:false] details = [pa: null, hdl: tel:***, caps: [Capabilities:], props: [Properties:]]
11-25 15:12:31.519  4625  4625 I InCall  : InCallLowBatteryListener - onDetailsChanged: no primary call.Clear the map/dismiss low battery alert
11-25 15:12:31.532  4625  4625 W InCall  : CallList - Removing call not previously disconnected Call_3
11-25 15:12:31.532  4625  4625 I InCall  : InCallPresenter - Hide in call UI: true
11-25 15:12:31.534  4625  4625 I InCall  : InCallActivity - finish().  Dialog showing: false
11-25 15:12:31.540  4625  4625 I InCall  : InCallPresenter - attemptCleanup? false
11-25 15:12:31.540  4625  4625 I InCall  : InCallPresenter - Phone switching state: INCALL -&gt; NO_CALLS
11-25 15:12:31.543  4625  4625 I InCall  : BB_FloatingActiveInCallHomeService - onStartCommand cancel
11-25 15:12:31.543  4625  4625 I InCall  : InCallPresenter - Phone switching state: NO_CALLS -&gt; NO_CALLS
11-25 15:12:31.546  4625  4625 I InCall  : BB_FloatingActiveInCallHomeService - onStartCommand cancel
11-25 15:12:31.546  4625  4625 I InCall  : BB_FloatingActiveInCallHomeService - onStartCommand cancel
11-25 15:12:31.546  4625  4625 I InCall  : InCallPresenter - Phone switching state: NO_CALLS -&gt; NO_CALLS
11-25 15:12:31.552  4625  4625 I InCall  : InCallPresenter - UI Destroyed
11-25 15:12:31.553  4625  4625 I InCall  : InCallPresenter - Phone switching state: NO_CALLS -&gt; NO_CALLS
11-25 15:12:31.555  4625  4625 I InCall  : InCallPresenter - attemptCleanup? false
11-25 15:12:31.644  4625  4625 I InCall  : BB_FloatingActiveInCallHomeService - onStartCommand cancel
11-25 15:12:31.649  4625  4625 I InCall  : BB_FloatingActiveInCallHomeService - onStartCommand cancel
11-25 15:12:31.649  4625  4625 I InCall  : BB_FloatingActiveInCallHomeService - onStartCommand cancel
11-25 15:12:31.649  4625  4625 I InCall  : BB_FloatingActiveInCallHomeService - onStartCommand cancel
11-25 15:12:31.847  1441  1508 I WindowManager: Destroying surface Surface(name=com.android.dialer/com.android.incallui.InCallActivity) called by com.android.server.wm.WindowStateAnimator.destroySurface:2014 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:881 com.android.server.wm.WindowState.removeLocked:1449 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2493 com.android.server.wm.AppWindowToken.destroySurfaces:365 com.android.server.wm.WindowStateAnimator.finishExit:565 com.android.server.wm.AppWindowAnimator.stepAnimationLocked:427 com.android.server.wm.WindowAnimator.updateAppWindowsLocked:176 
11-25 15:12:31.857  1441  1508 I WindowManager: Destroying surface Surface(name=com.android.dialer/com.android.incallui.InCallActivity) called by com.android.server.wm.WindowStateAnimator.destroySurface:2014 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:881 com.android.server.wm.WindowState.destroyOrSaveSurface:2073 com.android.server.wm.AppWindowToken.destroySurfaces:363 com.android.server.wm.WindowStateAnimator.finishExit:565 com.android.server.wm.AppWindowAnimator.stepAnimationLocked:427 com.android.server.wm.WindowAnimator.updateAppWindowsLocked:176 com.android.server.wm.WindowAnimator.animateLocked:678 
11-25 15:12:33.471  1441  1441 I Telecom : EmergencyInCallServiceConnection: Disconnect forced!: ICA.dC-&gt;ICC.oCR@AnU_1
11-25 15:12:33.477  4625  4625 I InCall  : InCallPresenter - setBoundAndWaitingForOutgoingCall: false
11-25 15:12:33.478  4625  4625 I InCall  : InCallPresenter - Phone switching state: NO_CALLS -&gt; NO_CALLS
11-25 15:12:33.482  4625  4625 I InCall  : InCallPresenter - attemptCleanup? true
11-25 15:12:33.485  4625  4625 I InCall  : ProximitySensor - Proximity wake lock already released




12-31 22:50:41.895  1450  1718 D VoldConnector: SND -&gt; {21 volume shutdown}
12-31 22:50:41.897  1450  1719 D VoldConnector: RCV &lt;- {651 emulated 5}
12-31 22:50:42.645  1450  1719 D VoldConnector: RCV &lt;- {651 emulated 0}
12-31 22:50:42.646  1450  1719 D VoldConnector: RCV &lt;- {651 emulated 8}
12-31 22:50:42.646  1450  1719 D VoldConnector: RCV &lt;- {659 emulated}
12-31 22:50:42.646  1450  1719 D VoldConnector: RCV &lt;- {651 public:179,65 5}
12-31 22:50:42.648  1450  1509 E VoldConnector: Calling thread android.fg is holding 0xe894d19
12-31 22:50:42.648  1450  1509 E VoldConnector: java.lang.Throwable
12-31 22:50:42.648  1450  1509 E VoldConnector: 	at com.android.server.NativeDaemonConnector.executeForList(NativeDaemonConnector.java:455)
12-31 22:50:42.648  1450  1509 E VoldConnector: 	at com.android.server.NativeDaemonConnector.execute(NativeDaemonConnector.java:401)
12-31 22:50:42.648  1450  1509 E VoldConnector: 	at com.android.server.NativeDaemonConnector.execute(NativeDaemonConnector.java:396)
12-31 22:50:42.648  1450  1509 E VoldConnector: 	at com.android.server.MountService.getEfsStorageStat(MountService.java:4044)
12-31 22:50:42.648  1450  1509 E VoldConnector: 	at com.android.server.MountService.onVolumeStateChangedLocked(MountService.java:1432)
12-31 22:50:42.648  1450  1509 E VoldConnector: 	at com.android.server.MountService.onEventLocked(MountService.java:1138)
12-31 22:50:42.648  1450  1509 E VoldConnector: 	at com.android.server.MountService.onEvent(MountService.java:1058)
12-31 22:50:42.648  1450  1509 E VoldConnector: 	at com.android.server.NativeDaemonConnector.handleMessage(NativeDaemonConnector.java:150)
12-31 22:50:42.648  1450  1509 E VoldConnector: 	at android.os.Handler.dispatchMessage(Handler.java:98)
12-31 22:50:42.648  1450  1509 E VoldConnector: 	at android.os.Looper.loop(Looper.java:154)
12-31 22:50:42.648  1450  1509 E VoldConnector: 	at android.os.HandlerThread.run(HandlerThread.java:61)
12-31 22:50:42.648  1450  1509 E VoldConnector: 	at com.android.server.ServiceThread.run(ServiceThread.java:46)
12-31 22:50:42.649  1450  1509 D VoldConnector: SND -&gt; {22 efs stat /mnt/media_rw/53B2-1BDD}
12-31 22:50:43.324  1450  1719 D VoldConnector: RCV &lt;- {651 public:179,65 0}
12-31 22:50:43.325  1450  1719 D VoldConnector: RCV &lt;- {651 public:179,65 8}
12-31 22:50:43.325  1450  1719 D VoldConnector: RCV &lt;- {659 public:179,65}
12-31 22:50:43.325  1450  1719 D VoldConnector: RCV &lt;- {649 disk:179,64}
12-31 22:50:43.325  1450  1719 D VoldConnector: RCV &lt;- {200 21 Command succeeded}
12-31 22:50:43.325  1450  1719 D VoldConnector: RCV &lt;- {200 22 3}
12-31 22:50:43.325  1450  1718 E VoldConnector: NDC Command {21 volume shutdown} took too long (1431ms)
12-31 22:50:43.325  1450  1509 E VoldConnector: NDC Command {22 efs stat /mnt/media_rw/53B2-1BDD} took too long (676ms)
12-31 22:50:43.345  1450  1509 E VoldConnector: Calling thread android.fg is holding 0xe894d19
12-31 22:50:43.345  1450  1509 E VoldConnector: java.lang.Throwable
12-31 22:50:43.345  1450  1509 E VoldConnector: 	at com.android.server.NativeDaemonConnector.executeForList(NativeDaemonConnector.java:455)
12-31 22:50:43.345  1450  1509 E VoldConnector: 	at com.android.server.NativeDaemonConnector.execute(NativeDaemonConnector.java:401)
12-31 22:50:43.345  1450  1509 E VoldConnector: 	at com.android.server.NativeDaemonConnector.execute(NativeDaemonConnector.java:396)
12-31 22:50:43.345  1450  1509 E VoldConnector: 	at com.android.server.MountService.lockEfsStorage(MountService.java:3994)
12-31 22:50:43.345  1450  1509 E VoldConnector: 	at com.android.server.MountService.onVolumeStateChangedLocked(MountService.java:1445)
12-31 22:50:43.345  1450  1509 E VoldConnector: 	at com.android.server.MountService.onEventLocked(MountService.java:1138)
12-31 22:50:43.345  1450  1509 E VoldConnector: 	at com.android.server.MountService.onEvent(MountService.java:1058)
12-31 22:50:43.345  1450  1509 E VoldConnector: 	at com.android.server.NativeDaemonConnector.handleMessage(NativeDaemonConnector.java:150)
12-31 22:50:43.345  1450  1509 E VoldConnector: 	at android.os.Handler.dispatchMessage(Handler.java:98)
12-31 22:50:43.345  1450  1509 E VoldConnector: 	at android.os.Looper.loop(Looper.java:154)
12-31 22:50:43.345  1450  1509 E VoldConnector: 	at android.os.HandlerThread.run(HandlerThread.java:61)
12-31 22:50:43.345  1450  1509 E VoldConnector: 	at com.android.server.ServiceThread.run(ServiceThread.java:46)
12-31 22:50:43.345  1450  1509 D VoldConnector: SND -&gt; {23 efs lock /mnt/media_rw/53B2-1BDD}
12-31 22:50:43.347  1450  1719 D VoldConnector: RCV &lt;- {200 23 0}
12-31 22:50:43.348  1450  1509 E VoldConnector: NDC event {651 public:179,65 5} took too long: 700ms



格式化失败
=====
huzhengyu@51187-26-1:~/CodeSubmit/product$ adb logcat | grep -E &quot;Vold|EFS&quot;
12-31 20:08:51.388   407   407 I vold    : Vold 3.0 (the awakening) firing up
12-31 20:08:52.503   407   414 D VoldCryptCmdListener: cryptfs mountdefaultencrypted
12-31 20:09:08.461  1442  1710 D VoldConnector: SND -&gt; {2 asec list}
12-31 20:09:08.461  1442  1711 D VoldConnector: RCV &lt;- {200 2 asec operation succeeded}
12-31 20:09:09.364  1442  1710 D VoldConnector: SND -&gt; {3 volume reset}
12-31 20:09:09.365  1442  1711 D VoldConnector: RCV &lt;- {651 emulated 7}
12-31 20:09:09.365  1442  1711 D VoldConnector: RCV &lt;- {659 emulated}
12-31 20:09:09.365  1442  1711 D VoldConnector: RCV &lt;- {650 emulated 2 &quot;&quot; &quot;&quot;}
12-31 20:09:09.366  1442  1711 D VoldConnector: RCV &lt;- {651 emulated 0}
12-31 20:09:09.366  1442  1711 D VoldConnector: RCV &lt;- {651 public:179,65 7}
12-31 20:09:09.366  1442  1711 D VoldConnector: RCV &lt;- {659 public:179,65}
12-31 20:09:09.366  1442  1711 D VoldConnector: RCV &lt;- {649 disk:179,64}
12-31 20:09:09.366  1442  1711 D VoldConnector: RCV &lt;- {640 disk:179,64 7}
12-31 20:09:09.367  1442  1711 D VoldConnector: RCV &lt;- {641 disk:179,64 3975151616}
12-31 20:09:09.367  1442  1711 D VoldConnector: RCV &lt;- {642 disk:179,64 }
12-31 20:09:09.367  1442  1711 D VoldConnector: RCV &lt;- {644 disk:179,64 /sys//devices/soc/7864900.sdhci/mmc_host/mmc1/mmc1:59b4/block/mmcblk1}
12-31 20:09:09.579  1442  1711 D VoldConnector: RCV &lt;- {650 public:179,65 0 &quot;disk:179,64&quot; &quot;&quot;}
12-31 20:09:09.579  1442  1711 D VoldConnector: RCV &lt;- {651 public:179,65 0}
12-31 20:09:09.580  1442  1711 D VoldConnector: RCV &lt;- {643 disk:179,64}
12-31 20:09:09.580  1442  1711 D VoldConnector: RCV &lt;- {200 3 Command succeeded}
12-31 20:09:09.580  1442  1710 D VoldConnector: SND -&gt; {4 volume user_added 0 0}
12-31 20:09:09.580  1442  1711 D VoldConnector: RCV &lt;- {200 4 Command succeeded}
12-31 20:09:09.581  1442  1710 D VoldConnector: SND -&gt; {5 volume user_added 10 10}
12-31 20:09:09.581  1442  1711 D VoldConnector: RCV &lt;- {200 5 Command succeeded}
12-31 20:09:09.581  1442  1710 D VoldConnector: SND -&gt; {6 volume user_added 11 11}
12-31 20:09:09.582  1442  1711 D VoldConnector: RCV &lt;- {200 6 Command succeeded}
12-31 20:09:09.582  1442  1710 D VoldConnector: SND -&gt; {7 volume user_added 18 18}
12-31 20:09:09.583  1442  1711 D VoldConnector: RCV &lt;- {200 7 Command succeeded}
12-31 20:09:10.728  1442  1710 D VoldConnector: SND -&gt; {8 volume mount emulated 3 -1}
12-31 20:09:10.730  1442  1711 D VoldConnector: RCV &lt;- {651 emulated 1}
12-31 20:09:10.734  1442  1711 D VoldConnector: RCV &lt;- {656 emulated /data/media}
12-31 20:09:10.734  1442  1711 D VoldConnector: RCV &lt;- {655 emulated /storage/emulated}
12-31 20:09:10.781  1442  1711 D VoldConnector: RCV &lt;- {651 emulated 2}
12-31 20:09:10.781  1442  1711 D VoldConnector: RCV &lt;- {200 8 Command succeeded}
12-31 20:09:10.782  1442  1710 D VoldConnector: SND -&gt; {9 volume mount public:179,65 2 0}
12-31 20:09:10.783  1442  1711 D VoldConnector: RCV &lt;- {651 public:179,65 1}
12-31 20:09:10.861  1442  1711 D VoldConnector: RCV &lt;- {652 public:179,65 vfat}
12-31 20:09:10.862  1442  1711 D VoldConnector: RCV &lt;- {653 public:179,65 8056-0FF1}
12-31 20:09:10.862  1442  1711 D VoldConnector: RCV &lt;- {654 public:179,65 }
12-31 20:09:10.862  1442  1711 D VoldConnector: RCV &lt;- {656 public:179,65 /mnt/media_rw/8056-0FF1}
12-31 20:09:10.862  1442  1711 D VoldConnector: RCV &lt;- {655 public:179,65 /storage/8056-0FF1}
12-31 20:09:11.015   407   413 I Vold    : Filesystem check completed OK
12-31 20:09:11.074  1442  1711 D VoldConnector: RCV &lt;- {651 public:179,65 2}
12-31 20:09:11.075  1442  1711 D VoldConnector: RCV &lt;- {200 9 Command succeeded}
12-31 20:10:25.409  2402  2637 I chatty  : uid=1000(system) VoldConnector expire 38 lines
12-31 20:10:28.760   407   413 I Vold    : Filesystem check completed OK
12-31 20:10:31.658   407   414 D VoldCryptCmdListener: cryptfs getpw
12-31 20:10:31.660   407   414 D VoldCryptCmdListener: cryptfs clearpw
12-31 20:10:32.776  2402  2423 D VoldConnector: SND -&gt; {10 volume user_started 0}
12-31 20:10:32.779  2402  2637 D VoldConnector: RCV &lt;- {200 10 Command succeeded}
12-31 20:10:55.442   407   414 D VoldCryptCmdListener: cryptfs getpwtype
12-31 20:10:56.516  4325  4325 I EFS     : SecuritySettings#addSDcardEncryptionSwitchPreference userId  : 0
12-31 20:10:56.517  4325  4325 I EFS     : sdcardPath:/storage/8056-0FF1
12-31 20:10:56.523  4325  4325 I EFS     : sdcardInternalPath:/mnt/media_rw/8056-0FF1
12-31 20:10:56.524  2402  3541 I EFS     : MountService#getEfsStorageStat , path : /mnt/media_rw/8056-0FF1
12-31 20:10:56.524  2402  3541 D VoldConnector: SND -&gt; {11 efs stat /mnt/media_rw/8056-0FF1}
12-31 20:10:56.527  2402  2637 D VoldConnector: RCV &lt;- {200 11 2}
12-31 20:10:56.529  4325  4325 I EFS     : sdcard Status:2
12-31 20:10:56.529  4325  4325 I EFS     : sdcard locked
12-31 20:10:56.604   407   414 D VoldCryptCmdListener: cryptfs getpwtype
12-31 20:10:56.841   407   414 D VoldCryptCmdListener: cryptfs getpwtype
12-31 20:11:03.211  2402  3481 D VoldConnector: SND -&gt; {12 appfuse mount 10009 5502 MtpDocumentsProvider}
12-31 20:11:03.218  2402  2637 D VoldConnector: RCV &lt;- {200 12 AppFuse command succeeded}
12-31 20:11:06.914   407   414 D VoldCryptCmdListener: cryptfs getpwtype
12-31 20:11:13.171  4325  4325 I EFS     : SecuritySettings#addSDcardEncryptionSwitchPreference userId  : 0
12-31 20:11:13.172  4325  4325 I EFS     : sdcardPath:/storage/8056-0FF1
12-31 20:11:13.177  4325  4325 I EFS     : sdcardInternalPath:/mnt/media_rw/8056-0FF1
12-31 20:11:13.178  2402  3452 I EFS     : MountService#getEfsStorageStat , path : /mnt/media_rw/8056-0FF1
12-31 20:11:13.178  2402  3452 D VoldConnector: SND -&gt; {13 efs stat /mnt/media_rw/8056-0FF1}
12-31 20:11:13.180  2402  2637 D VoldConnector: RCV &lt;- {200 13 2}
12-31 20:11:13.181  4325  4325 I EFS     : sdcard Status:2
12-31 20:11:13.181  4325  4325 I EFS     : sdcard locked
12-31 20:11:13.297   407   414 D VoldCryptCmdListener: cryptfs getpwtype
12-31 20:11:13.977  4325  4325 I EFS     : underEncrypt
12-31 20:11:13.979  4325  4325 I EFS     : sdcardInternalPath:/mnt/media_rw/8056-0FF1
12-31 20:11:13.982  2402  2881 I EFS     : MountService#getEfsStorageStat , path : /mnt/media_rw/8056-0FF1
12-31 20:11:13.984  2402  2881 D VoldConnector: SND -&gt; {14 efs stat /mnt/media_rw/8056-0FF1}
12-31 20:11:13.985  2402  2637 D VoldConnector: RCV &lt;- {200 14 2}
12-31 20:11:13.986  4325  4325 I EFS     : sdcard Status:2
12-31 20:11:13.987  2402  3572 I EFS     : LockSettingService:default_password
12-31 20:11:13.988  2402  2414 I EFS     : MountService#unlockEfsStorage , storagePath:/mnt/media_rw/8056-0FF1 password:default_password
12-31 20:11:13.988  2402  2414 D VoldConnector: SND -&gt; {15 efs unlock /mnt/media_rw/8056-0FF1 [scrubbed]}
12-31 20:11:14.098   407   413 I EFS     : Secure storage /mnt/media_rw/8056-0FF1 unlocked
12-31 20:11:14.098  2402  2637 D VoldConnector: RCV &lt;- {200 15 0}
12-31 20:11:31.446  2402  2415 I EFS     : MountService#lockEfsStorage , storagePath:/mnt/media_rw/8056-0FF1
12-31 20:11:31.446  2402  2415 D VoldConnector: SND -&gt; {16 efs lock /mnt/media_rw/8056-0FF1}
12-31 20:11:31.449   407   413 I EFS     : Secure storage /mnt/media_rw/8056-0FF1 locked
12-31 20:11:31.450  2402  2637 D VoldConnector: RCV &lt;- {200 16 0}
12-31 20:11:31.451  2402  2415 I EFS     : MountService#removeEfsStorage, storagePath:/mnt/media_rw/8056-0FF1
12-31 20:11:31.451  2402  2415 D VoldConnector: SND -&gt; {17 efs remove /mnt/media_rw/8056-0FF1}
12-31 20:11:31.452   407   413 I EFS     : Secure storage /mnt/media_rw/8056-0FF1 removed
12-31 20:11:31.452  2402  2637 D VoldConnector: RCV &lt;- {200 17 0}
12-31 20:11:31.455  2402  2415 D VoldConnector: SND -&gt; {18 volume partition disk:179,64 public}
12-31 20:11:31.456  2402  2637 D VoldConnector: RCV &lt;- {651 public:179,65 5}
12-31 20:11:31.456  2402  2446 I EFS     : sdcard unmount
12-31 20:11:31.456  2402  2446 I EFS     : isNotShutDown
12-31 20:11:31.457  2402  2446 I EFS     : MountService#getEfsStorageStat , path : /mnt/media_rw/8056-0FF1
12-31 20:11:31.457  2402  2446 E VoldConnector: Calling thread android.fg is holding 0xbffe9df
12-31 20:11:31.457  2402  2446 E VoldConnector: java.lang.Throwable
12-31 20:11:31.457  2402  2446 E VoldConnector: 	at com.android.server.NativeDaemonConnector.executeForList(NativeDaemonConnector.java:455)
12-31 20:11:31.457  2402  2446 E VoldConnector: 	at com.android.server.NativeDaemonConnector.execute(NativeDaemonConnector.java:401)
12-31 20:11:31.457  2402  2446 E VoldConnector: 	at com.android.server.NativeDaemonConnector.execute(NativeDaemonConnector.java:396)
12-31 20:11:31.457  2402  2446 E VoldConnector: 	at com.android.server.MountService.getEfsStorageStat(MountService.java:4075)
12-31 20:11:31.457  2402  2446 E VoldConnector: 	at com.android.server.MountService.onVolumeStateChangedLocked(MountService.java:1462)
12-31 20:11:31.457  2402  2446 E VoldConnector: 	at com.android.server.MountService.onEventLocked(MountService.java:1168)
12-31 20:11:31.457  2402  2446 E VoldConnector: 	at com.android.server.MountService.onEvent(MountService.java:1088)
12-31 20:11:31.457  2402  2446 E VoldConnector: 	at com.android.server.NativeDaemonConnector.handleMessage(NativeDaemonConnector.java:150)
12-31 20:11:31.457  2402  2446 E VoldConnector: 	at android.os.Handler.dispatchMessage(Handler.java:98)
12-31 20:11:31.457  2402  2446 E VoldConnector: 	at android.os.Looper.loop(Looper.java:154)
12-31 20:11:31.457  2402  2446 E VoldConnector: 	at android.os.HandlerThread.run(HandlerThread.java:61)
12-31 20:11:31.457  2402  2446 E VoldConnector: 	at com.android.server.ServiceThread.run(ServiceThread.java:46)
12-31 20:11:31.458  2402  2446 D VoldConnector: SND -&gt; {19 efs stat /mnt/media_rw/8056-0FF1}
12-31 20:11:54.500  2402  2637 D VoldConnector: RCV &lt;- {651 public:179,65 0}
12-31 20:11:54.500  2402  2637 D VoldConnector: RCV &lt;- {651 public:179,65 8}
12-31 20:11:54.500  2402  2637 D VoldConnector: RCV &lt;- {659 public:179,65}
12-31 20:11:55.845   407   413 E EFS     : Can't open key storage file
12-31 20:11:55.845  2402  2637 D VoldConnector: RCV &lt;- {400 18 Command failed}
12-31 20:11:55.845   407   413 E EFS     : Unable to read crypto header from /data/misc/vold/.keys.560cef7bfa5d05825f9ec565ef4bc5c4d8d98d24c5d5b300d605d948b296be518ed578c7d799a3e50ca27ffd0be5fe9cd4b8dc1e0023033bc24537da2b79cc88
12-31 20:11:55.845  2402  2415 E VoldConnector: NDC Command {18 volume partition disk:179,64 public} took too long (24391ms)
12-31 20:11:55.845  2402  2637 D VoldConnector: RCV &lt;- {200 19 -1}
12-31 20:11:55.846  2402  2446 E VoldConnector: NDC Command {19 efs stat /mnt/media_rw/8056-0FF1} took too long (24388ms)
12-31 20:11:55.846  2402  2446 I EFS     : sdcard need lock
12-31 20:11:55.847  2402  2446 I EFS     : LockSettingService:default_password
12-31 20:11:55.847  2402  2446 I EFS     : curentPassword:default_password
12-31 20:11:55.861  2402  2446 I EFS     : eject time : 24
12-31 20:11:55.861  2402  2446 E VoldConnector: NDC event {651 public:179,65 5} took too long: 24406ms
12-31 20:11:55.863  2402  2446 E VoldConnector: NDC event {651 public:179,65 0} processed too late: 1363ms
12-31 20:11:55.863  2402  2446 E VoldConnector: NDC event {651 public:179,65 8} processed too late: 1362ms
12-31 20:11:55.863  2402  2446 E VoldConnector: NDC event {659 public:179,65} processed too late: 1363ms


</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="代码注释规范" prog_lang="custom-colors" readonly="False" tags="" unique_id="43">
			<rich_text>*[BUGFIX]-Add-BEGIN by TCTNB.WQF, 2012/7/7, reason*/
/*[BUGFIX]-Add-END by TCTNB.WQF*/
改动类型包括 BUGFIX,FEATURE,PLATFORM 分别代表 Bug 修正,新功能添加,平台功能修正



                /*[BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu, 2016/03/22, Defect-1841161*/
                
                                /*[BUGFIX]-Add-END by TCTNB.zhengyu.hu */
                    Log.e(TAG,&quot;tatalSpace value need re-config here&quot;);
                    
                    
                    
 
  * ==========================================================================
 *     Modifications on Features list / Changes Request / Problems Report
 * --------------------------------------------------------------------------
 *    date   |       author         |         Key          |     comment
 * ----------|----------------------|----------------------|-----------------
 * 04/01/2016|     zhengyu.hu       |     defect-1876719   |  sdcard unmount
 * ----------|----------------------|----------------------|-----------------
 
 
     /*[BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu, 2016/04/01, Defect-1876719*/
    KillProcessesUsingPath(getPath());
    /*[BUGFIX]-Add-END by TCTNB.zhengyu.hu */
    
    Mod Del
    
              
    //Fr 2967516 Mod-BEGIN by zhengyu.hu 2016/09/21


   /*[Feature]-Add-BEGIN by zhengyu.hu 20161213  EFS Storage Task-3713154*/



            if(vol.getInternalPath() != null){
                int stat = getEfsStorageStat();
                if(stat == 3){
                   //unlock stat when eject sdcard 
                   lockEfsStorage(vol.getInternalPath().toString());
                }
            }

</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="black版本制作" prog_lang="custom-colors" readonly="False" tags="" unique_id="48">
			<rich_text>构建black版本 </rich_text>
			<rich_text link="webs http://172.16.11.170">http://172.16.11.170</rich_text>
			<rich_text>  搜索 idol4s_black

manifests.git仓库应该记录整个工程不同版本的信息

如果修改的是platform/frameworks/base.git 这个仓库
首先通过 git clone git@172.16.11.162:quicl/platform/frameworks/base.git -b m8976 
 -m 后面跟 xxxx.xml
 
 下载完以后修改相应代码
 如果有添加文件 git add .
 然后git commit -am &quot;comment&quot;
用 git format-patch -1 制作patch
然后将生成的patch放在 frameworks/base/xxxx.patch 压缩成zip 

注意需要构建black版本的基础版本，如果是old的版本如4A1K， 需要在manifest.git搜索4A1K之前的版本好如4A1J ，</rich_text>
			<rich_text link="webs http://tree root">[manifests.git]</rich_text>
			<rich_text> / ver / </rich_text>
			<rich_text link="webs http://ver/idol4s">idol4s</rich_text>
			<rich_text> / </rich_text>
			<rich_text link="webs http://ver/idol4s/idol4s_m8976_v4A1K_0.xml">idol4s_m8976_v4A1K_0.xml</rich_text>
			<rich_text>

找到&lt;project name=&quot;platform/frameworks/base&quot; path=&quot;frameworks/base&quot; revision=&quot;4576fc072bbb76d986291d85d8494881e6f466cc&quot;/&gt;

找到revision ID

然后通过在之前clone代码中git reset --hard 4576fc072bbb76d986291d85d8494881e6f466cc 来还原到这个版本，再制作patch



unlock
开发者模式打开oem unlock
adb reboot bootloader
fastboot oem unlock


部分单卡版本无法注册网络
需要刷对应的study参数
在Teleweb上刷下面三个
study -&gt; _emea_ca.tar
RAWPROGRAM -&gt; replace p
PATCH  -&gt; replace z

@liujun
    这个问题出现子啊1D2C这个版本真的好奇怪，那个时候的代码是在热插拔SD的时候会把相应使用这个SD的进程给杀掉，而不是插入的时候。
    目前现拔出时候杀进程的代码已经移除掉了，而是在sd卡挂在的时候进行检测，如果发现sd卡无法顺利挂在上，把相应的目录unmount掉，照理说要出现这个问题的话应该，建议在新版本测试一下，谢谢！

/* [BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu, 2016/09/21, Defect-2545868  recover MediaProvider database after reboot */


</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="关于如何抓取Log" prog_lang="custom-colors" readonly="False" tags="" unique_id="14">
			<rich_text weight="heavy">1.Logcat分别是main, radio, system, events</rich_text>
			<rich_text>
adb logcat -v time &gt; logcat.txt //默认是-b main -b system
adb logcat -v time -b main //main log
adb logcat -v time -b radio  // radio log
adb logcat -v time -b system //system log
adb logcat -v time -b events

</rich_text>
			<rich_text weight="heavy">2.anr log</rich_text>
			<rich_text>
adb pull /data/anr

</rich_text>
			<rich_text weight="heavy">3.tombstone log</rich_text>
			<rich_text>
adb pull /data/tombstones

</rich_text>
			<rich_text weight="heavy">4.core log</rich_text>
			<rich_text>
adb pull /data/log/core

</rich_text>
			<rich_text weight="heavy">5.开机log</rich_text>
			<rich_text>
adb shell dmesg &gt; dmesg.txt

</rich_text>
			<rich_text weight="heavy">6.logcatch</rich_text>
			<rich_text>
adb pull /data/logcatch

</rich_text>
			<rich_text weight="heavy">7.qxdm log</rich_text>
			<rich_text>
adb pull /sdcard/logs

</rich_text>
			<rich_text weight="heavy">8.hprof log</rich_text>
			<rich_text>
分析app的java heap
  1/ sudo adb shell am dumpheap com.google.android.apps.maps /data/local/tmp/googlemap.hprof
      sudo adb pull /data/local/tmp/googlemap.hprof

</rich_text>
			<rich_text weight="heavy">9.bugreport</rich_text>
			<rich_text>
  adb bugreport &gt; bugreport.txt
  
</rich_text>
			<rich_text weight="heavy">10.kernel log</rich_text>
			<rich_text>
   cat proc/kmsg &gt; kmsg.txt

11. adb shell dumpstate //各类信息，比如进程信息，内存信息，进程是否异常，kernel的log等
      adb shell dumpcrash
      adb shell dumpsys //查询所有service的状态


adb shell dumpsys power 
adb shell dumpsys top





关于如何提取/data/tombstones/目录下的文件, 以下方式供参考：
tombstones会在进程crash的时候记录信息

1.首先查看/data/tombstones目录下有哪些 tombstone_xx的文件，如tombstone_00， tombstone_01..
2.
Windows：
adb pull /data/tombstones/&lt; 具体第一步查看到的文件名&gt;   d:\&lt;具体第一步查看到的文件名&gt;
如adb pull /data/tombstones/tombstone_00   d:\tombstone_00
  adb pull /data/tombstones/tombstone_01   d:\tombstone_01
...



 Linux:
 adb pull /data/tombstones/&lt; 具体第一步查看到的文件名&gt;   ~/Desktop/&lt;具体第一步查看到的文件名&gt;
如adb pull /data/tombstones/tombstone_00    ~/Desktop/tombstone_00
  adb pull /data/tombstones/tombstone_01   ~/Desktop/tombstone_01
...


为了保险起见，建议抓取/data/anr目录下所有文件。抓取方式与上面类似
如在Linux中  adb pull /data/anr/traces.txt ~/Desktop/traces.txt


日志跑飞情况：
跑飞 log目前只会在关机过程中出现，是由于现在的关机速度太快，导致还没获取到platform_get_snd_device_name线程就已经停止工作


Could you provide the following logs:

adb root
adb shell
logcat -f /dev/kmsg&amp;cat /proc/kmsg &gt; /data/1.txt &amp; 

//open another teminal
</rich_text>
			<rich_text weight="heavy">
adb bugreport &gt;bugreport.txt </rich_text>
			<rich_text>
</rich_text>
			<rich_text weight="heavy">adb dumpstate &gt;dum关于 pstate.txt</rich_text>
			<rich_text>
</rich_text>
			<rich_text weight="heavy">adb top &gt;top.txt</rich_text>
			<rich_text>
</rich_text>
			<rich_text weight="heavy">adb logcat -b main -b system -b radio -b events -v time &gt;adblogcat.txt</rich_text>
			<rich_text>
</rich_text>
			<rich_text weight="heavy">
anr log (under directory of &quot;data/anr&quot;)
tombstone log (under directory of &quot;/data/tombstones/&quot;)


/home/huzhengyu/.thunderbird/062mnv8e.default/Mail/Local Folders
</rich_text>
			<rich_text>



how to dump the service.odex by it pc address, like that use add2line to extrace  the .so
1.  you can refer to the following uri：

http://www.cnblogs.com/ungshow/p/3511330.html

2.Get the map information of ths dex file: （here is .dex）
1)adb pull /data/dalvik-cache/arm/data@app@com.exceptionsample-1@base.apk@classes.dex .
2)arm-linux-androideabi-readelf.exe -s data@app@com.exceptionsample-1@base.apk@classes.dex &gt; elf.txt

From this elf.txt, we can get the below information:
Symbol table '.dynsym' contains 4 entries:
   Num: Value   Size           Type          Bind        Vis              Ndx   Name
     0: 00000000 0                NOTYPE  LOCAL  DEFAULT  UND 
     1: 00001000 0x2cb000  OBJECT   GLOBAL DEFAULT 4        oatdata
     2: 002cc000 0x18990c  OBJECT   GLOBAL DEFAULT 5         oatexec
     3: 00455908 4                OBJECT   GLOBAL DEFAULT 5         oatlastword
Here we can see the oatdata is begin from 0x00001000, so the head size is 0x00001000. 
offset of PC in the classes.dex = PC address(0xa5eea27c) – Start address of the dex code(a5a98000) – dex head size(0x00001000) = 0x45127C.


3.Get the oatdump and find the java code:
adb shell oatdump --oat-file=/data/dalvik-cache/arm/data@app@com.exceptionsample-1@base.apk@classes.dex &gt; oatdump.txt

Search the offset of PC in the classes.dex(45127C) from the oatdump.txt, we will get the below information, it’s clear issue happened while calling java.lang.String.length in function com.exceptionsample.MainActivity.ExceptionFunction():
  1: void com.exceptionsample.MainActivity.ExceptionFunction() (dex_method_idx=15266)




use the following command , you will find out &quot;system@framework@services.jar@classes.dex&quot;

# adb shell ls data/dalvik-cache/arm |grep -E &quot;services&quot;

. .....
system@framework@services.jar@classes.dex

//it should be the &quot;services.odex&quot; 's dex file.


1. Get the map information of ths dex file: （here is .dex）
1)adb pull /data/dalvik-cache/arm/system@framework@services.jar@classes.dex
2)arm-linux-androideabi-readelf -s system@framework@services.jar@classes.dex &gt; elf.txt


2.Get the oatdump and find the java code:

adb shell oatdump --oat-file=/data/dalvik-cache/arm/system@framework@services.jar@classes.dex &gt; oatdump.txt 

adb shell oatdump --oat-file=/system/framework/oat/arm64/services.odex &gt;dump.txt 


</rich_text>
			<rich_text weight="heavy">现在请帮忙提供一份dump信息：
adb shell dumpsys package | tee package
将package这支2文件</rich_text>
			<rich_text>



adb shell stop
adb shell setprop dalvik.vm.checkjni true
adb shell start
 
 //打印Kernel日志下面两种方法
adb logcat -b kernel 
adb shell dmesg  
walltime 正常情况下每过一分钟打印








</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="sdk 代理" prog_lang="custom-colors" readonly="False" tags="" unique_id="110">
			<rich_text>172.16.12.20
80

</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="安装busybox" prog_lang="custom-colors" readonly="False" tags="" unique_id="7">
			<rich_text>First do adb push busybox /data/local/busybox to copy the busybox into the android phone system then go to the android shell by doing adb shell. Get the superuser by typing su from you android phone grant superuser request then back to the shell and type
cd /data/local
chmod 755 busybox
./busybox
mount -o remount,rw -t yaffs2 /dev/block/mtdblock4 /system
mkdir /system/xbin
cp /data/local/busybox /system/xbin
cd /system/xbin
busybox --install .
mount -o ro,remount -t yaffs2 /dev/block/mtdblock4 /system
sync
reboot
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="命令脚本" prog_lang="custom-colors" readonly="False" tags="" unique_id="51">
			<rich_text>


 







 
 sudo adb 用的是
 /opt/bin/adb
 


 
 

 
 

</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Git命令" prog_lang="custom-colors" readonly="False" tags="" unique_id="42">
				<rich_text>git配置文件:  ~/.gitconfig
 
git add .                       _______把所有新增的文件加入git;
git commit –am “for test”       _______把改动先提交在本地git仓库;
git format-patch -1             _______把刚才本地提交的代码做成patch;
git format-patch 'commit id' -1 _______把指定的Commit做成patch;
zip test_patch.zip   device/tct/eos/0001_for_test.patch frameworks/base/0001-test.patch   _______把指定的patch 压缩成zip包，并包含相应的路径信息


huzhengyu@51187-26-1:~/idol4sm8976/frameworks/base/core$ git am ~/Desktop/01.patch 
Applying: add log for Defect 12168939
error: core/java/com/android/internal/app/ChooserActivity.java: does not match index
patch没有放对路径

huzhengyu@51187-26-1:~/idol4sm8976/frameworks/base/core$ git am ~/Desktop/frameworks/base/core/01.patch 
previous rebase directory /home/huzhengyu/idol4sm8976/frameworks/base/.git/rebase-apply still exists but mbox given.

git reset --soft 你想回到的那个CommitID （只消除commit）
git reset --hard 你想回到的那个CommitID (消除对应的代码和commit)

git log 

Commit #9
...

Commit #8
...


git reset --soft #8 就把#9的commit给去掉了


git fatal : not a git repository -&gt; git init bad default revision 'HEAD'  -&gt; 执行一次commit 之后就不会出现


应用aa.diff  的patch
1.放到仓库目录
2. git apply aa.diff



git cherry-pick  [commit-id]
git reset HEAD^ 返回上一个提交

有冲突

git add .
git reset
git difftool



查看某一个文件的提交记录
gitk ${filepath}

git log --author=&quot;huzhengyu&quot;
查看某人提交的代码

git log --grep &quot;multiwindow&quot;



git中的文件有三种状态： 已修改(modified) 已暂存（staged） 已提交（committed）
rebase原理
1.先把本地的未push的提交生成一个个patch
2.然后移除本地未上传的提交
3. 把服务器最新提交的提交全部拉下来
4.按修改顺序重新应用本地的提交

git log --oneline -4

970345c modify activity to fragment
bfa233f add toolbar
4b8c6ae update
0f0ed65 add butterknife

git rebase -i  970345c








</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="用Java代码使应用程序具有root权限" prog_lang="custom-colors" readonly="False" tags="" unique_id="23">
				<rich_text>

public static boolean runRootCommand( String command ){
    Process process = null;
    DataOutputStream os = null;
    try{
        process = Runtime.getRuntime().exec('su');
        os = new DataOutputStream(process.getOutputStream());
        os.writeBytes(command + &quot;\n&quot;);
        os.writeBytes(&quot;exit \n&quot;);
        os.flush();
        process.waitFor();
    }carch(Exception e){
        return false;
    }finally{
        try{
            if( os != null)
                    os.close();       
            process.destroy();
         }catch(Exception e){
            //nothing
         }
    }
    return true;
}</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Linux常用命令" prog_lang="custom-colors" readonly="False" tags="" unique_id="22">
				<rich_text>查看某个进程
ps -aux | grep program-name

找出进程PID
cd /proc/$PID/fd
ls -l
ls -al|wc -l fd目录下查看文件数量


查看网络状态
netstat -anp 所有监听端口及对应的进程

lsusb查看usb挂载的设备

deb包安装
sudo dpkg -i &lt;xxx.db&gt; 

cat log.txt | grep -E 'zhengyu|MediaScanner' &gt; greplog


 
 [mod]
 r:可读
 w:可写
 x：可执行

chown [用户名] [文件]  更改文件所有者
chgrp  [用户名] [文件]  更改用户组


 
 chmod [who] [opt] [mod] 文件 / 目录名
 [who]
 u: 表示文件所有者
 g: 表示同组用户
 o: 表示其他用户
 a：表示所有用户
 
 [opt]
 +: 添加爱某个权限
 -: 取消某个权限
 =: 赋予给定的权限，即取消原有的权限
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="dump" prog_lang="custom-colors" readonly="False" tags="" unique_id="146">
				<rich_text>adb shell dumpsys -l 

</rich_text>
				<rich_text scale="h2" weight="heavy">ActivityManagerService</rich_text>
				<rich_text>
adb shell dumpsys  activity -h
Activity manager dump options:
  [-a] [-c] [-p PACKAGE] [-h] [WHAT] ...
  WHAT may be one of:
    a[ctivities]: activity stack state
    r[recents]: recent activities state
    b[roadcasts] [PACKAGE_NAME] [history [-s]]: broadcast state
    broadcast-stats [PACKAGE_NAME]: aggregated broadcast statistics
    i[ntents] [PACKAGE_NAME]: pending intent state
    p[rocesses] [PACKAGE_NAME]: process state
    o[om]: out of memory management
    perm[issions]: URI permission grant state
    prov[iders] [COMP_SPEC ...]: content provider state
    provider [COMP_SPEC]: provider client-side state
    s[ervices] [COMP_SPEC ...]: service state
    as[sociations]: tracked app associations
    service [COMP_SPEC]: service client-side state
    package [PACKAGE_NAME]: all state related to given package
    all: dump all activities
    top: dump the top activity
  WHAT may also be a COMP_SPEC to dump activities.
  COMP_SPEC may be a component name (com.foo/.myApp),
    a partial substring in a component name, a
    hex object identifier.
  -a: include all available server state.
  -c: include client state.
  </rich_text>
				<rich_text weight="heavy">-p: limit output to given package.</rich_text>
				<rich_text> 
  --checkin: output checkin format, resetting data.
  --C: output checkin format, not resetting data.


</rich_text>
				<rich_text scale="h2" weight="heavy">WindowManagerService</rich_text>
				<rich_text>
adb shell dumpsys window -h                                                                                    
Window manager dump options:
  [-a] [-h] [cmd] ...
  cmd may be one of:
    l[astanr]: last ANR information
    p[policy]: policy state
    a[animator]: animator state
    s[essions]: active sessions
    surfaces: active surfaces (debugging enabled only)
    d[isplays]: active display contents
    t[okens]: token list
    w[indows]: window list
  cmd may also be a NAME to dump windows.  NAME may
    be a partial substring in a window name, a
    Window hex object identifier, or
    &quot;all&quot; for all windows, or
    &quot;visible&quot; for the visible windows.
    &quot;visible-apps&quot; for the visible app windows.
  -a: include all available server state.

</rich_text>
				<rich_text scale="h2" weight="heavy">PackageManagerService.java</rich_text>
				<rich_text>
adb shell dumpsys package -h                                                                               
Package manager dump options:
  [-h] [-f] [--checkin] [cmd] ...
    --checkin: dump for a checkin
    -f: print details of intent filters
    -h: print this help
  cmd may be one of:
    l[ibraries]: list known shared libraries
    f[eatures]: list device features
    k[eysets]: print known keysets
    r[esolvers] [activity|service|receiver|content]: dump intent resolvers
    perm[issions]: dump permissions
    permission [name ...]: dump declaration and use of given permission
    pref[erred]: print preferred package settings
    preferred-xml [--full]: print preferred package settings as xml
    prov[iders]: dump content providers
    p[ackages]: dump installed packages
    s[hared-users]: dump shared user IDs
    m[essages]: print collected runtime messages
    v[erifiers]: print package verifier info
    d[omain-preferred-apps]: print domains preferred apps
    i[ntent-filter-verifiers]|ifv: print intent filter verifier info
    version: print database version info
    write: write current settings now
    installs: details about install sessions
    check-permission &lt;permission&gt; &lt;package&gt; [&lt;user&gt;]: does pkg hold perm?
    dexopt: dump dexopt state
    &lt;package.name&gt;: info about given package


该命令用于打印出当前系统信息，默认打印出设备中所有service的信息，可以在命令后面加指定的service name.
有两种方法可以查看service list:
1. adb shell dumpsys
输出信息的开始部分就是所有运行的service，如下：
Currently running services:
SurfaceFlinger:
accessibility:
account:
activity:
alarm:
appwidget:
audio:
backup:
battery:
batteryinfo:
clipboard:
connectivity:
content:
cpuinfo:
device_policy:
devicestoragemonitor:
diskstats:
dropbox:
entropy:
hardware:
input_method:
iphonesubinfo:
isms:
location:
media.audio_flinger:
media.audio_policy:
media.camera:
media.player:
meminfo:
mount:
netstat:
network_management:
notification:
package:
permission:
phone:
power:
search:
sensorservice:
simphonebook:
statusbar:
telephony.registry:
throttle:
uimode:
usagestats:
 vibrator:
wallpaper:
wifi:
window:

2. adb shell service list
输出结果如下：
Found 49 services:
0       phone: [com.</rich_text>
				<rich_text link="webs http://lib.csdn.net/base/15">Android</rich_text>
				<rich_text>.internal.telephony.ITelephony]
1       iphonesubinfo: [com.android.internal.telephony.IPhoneSubInfo]
2       simphonebook: [com.android.internal.telephony.IIccPhoneBook]
3       isms: [com.android.internal.telephony.ISms]
4       diskstats: []
5       appwidget: [com.android.internal.appwidget.IAppWidgetService]
6       backup: [android.app.backup.IBackupManager]
7       uimode: [android.app.IUiModeManager]
8       audio: [android.media.IAudioService]
9       wallpaper: [android.app.IWallpaperManager]
10      dropbox: [com.android.internal.os.IDropBoxManagerService]
11      search: [android.app.ISearchManager]
12      location: [android.location.ILocationManager]
13      devicestoragemonitor: []
14      notification: [android.app.INotificationManager]
15      mount: [IMountService]
16      accessibility: [android.view.accessibility.IAccessibilityManager]
17      throttle: [android.net.IThrottleManager]
18      connectivity: [android.net.IConnectivityManager]
19      wifi: [android.net.wifi.IWifiManager]
20      network_management: [android.os.INetworkManagementService]
21      netstat: [android.os.INetStatService]
22      input_method: [com.android.internal.view.IInputMethodManager]
23      clipboard: [android.text.IClipboard]
24      statusbar: [com.android.internal.statusbar.IStatusBarService]
25      device_policy: [android.app.admin.IDevicePolicyManager]
26      window: [android.view.IWindowManager]
27      alarm: [android.app.IAlarmManager]
28      vibrator: [android.os.IVibratorService]
29      hardware: [android.os.IHardwareService]
30      battery: []
31      content: [android.content.IContentService]
32      account: [android.accounts.IAccountManager]
33      permission: [android.os.IPermissionController]
34      cpuinfo: []
35      meminfo: []
36      activity: [android.app.IActivityManager]
37      package: [android.content.pm.IPackageManager]
38      telephony.registry: [com.android.internal.telephony.ITelephonyRegistry]
39      usagestats: [com.android.internal.app.IUsageStats]
40      batteryinfo: [com.android.internal.app.IBatteryStats]
41      power: [android.os.IPowerManager]
42      entropy: []
43      sensorservice: [android.gui.SensorServer]
44      SurfaceFlinger: [android.ui.ISurfaceComposer]
45      media.audio_policy: [android.media.IAudioPolicyService]
46      media.camera: [android.hardware.ICameraService]
47      media.player: [android.media.IMediaPlayerService]
48      media.audio_flinger: [android.media.IAudioFlinger]
查询到运行的system service后，就可以在dumpsys后面加上service的名字，查看指定的service信息。
adb shell dumpsys activity
adb shell dumpsys cpuinfo
adb shell dumpsys battery
adb shell dumpsys window（最后部分可以看到分辨率的信息）
有些service能够接收额外的参数，我们可以使用-h查看帮助信息。
adb shell dumpsys package -h
adb shell dumpsys activity -h
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="adb命令" prog_lang="custom-colors" readonly="False" tags="" unique_id="179">
				<rich_text>2.命令行获取最大用户数量
pm get-max-users
pm create-user

3.pm、am命令源码在framework/base/cmds中
   pm list package 此时则显示所有已经安装的包名
   pm list package -f 同时显示APK文件所在的目录
   pm list permissions 查看所有已知的权限
   pm list features 列出所有硬件相关信息
   pm path {packageName} 列出指定包名的 associated文件（APK文件）
 
   pm install [-l] [-r] [-t] [-i Installer_package_name] [-s] [-f] PATH  
 PATH指的是APK文件绝对路进和文件名
   如 pm install /data/momo.apk
  -r : 安装一个已经安装的APK
  -I：指定安装的包名
  -s :安装到SDCard上
  -f :安装到内部Flash上
  
     pm uninstall 包名 ： 卸载APK
     pm getInstallLocation 得到缺省的安装位置
     pm setInstallLocation &lt;0|1|2&gt; 0：自动  1：内部Flash 2:扩展存储设备
     
4. am 命令


通过下面的方式可以判断setupWizards是否已经完成，0表示未完成，1表示完成
   </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setupWizardsDone&amp;project=m8976">setupWizardsDone</rich_text>
				<rich_text> = </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Settings&amp;project=m8976">Settings</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Secure&amp;project=m8976">Secure</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getInt&amp;project=m8976">getInt</rich_text>
				<rich_text>(        mContext.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getContentResolver&amp;project=m8976">getContentResolver</rich_text>
				<rich_text>(),</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=android&amp;project=m8976">android</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=provider&amp;project=m8976">provider</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Settings&amp;project=m8976">Settings</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Secure&amp;project=m8976">Secure</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=USER_SETUP_COMPLETE&amp;project=m8976">USER_SETUP_COMPLETE</rich_text>
				<rich_text>,0/*default*/);

5. adb shell service list 查看service


adb shell pm list packages  [-f com.hzy.abc]
可以列出手机安装的package， 后面加上-f以后会列出apk安装的位置


pm grant [应用包名] [权限名]


adb shell monkey -v -p your.package.name 500 //启动软件并触发500个事件
adb shell monkey -p your.package.name -v 500 --thyrottle 1000 -s 500



sudo adb shell  am  start -n  com.tct.securitycenter/.storageclearup.StorageClearUpActivity
Starting: Intent { cmp=com.tct.securitycenter/.storageclearup.StorageClearUpActivity }


adb shell am broadcast -a android.intent.action.BATTERY_CHANGED --ei temperature 300 --ei level 50



 adb device 提示no permission
 可以先尝试一下adb kill-server
 如果还是不行，需要将adb提权
 
sudo adb chown root:root adb
sudo adb chmod a+x adb
sudo adb chmod a+s adb
adb kill-server


adb sync -p


 adb shell content query --uri content://com.tct.gapp.middleman/com.tct.weather
 

adb shell wm size
adb shell dumpsys window displays
 
 
 sudo apt-get update
sudo apt-get install notepadqq           类似的，卸载命令如下：
sudo apt-get remove notepadqq
sudo add-apt-repository --remove ppa:notepadqq-team/notepadqq
 
启动应用
am start -n com.android.dialer/com.android.dialer.DialtactsActivity


 kill -3 &lt;system_server_pid&gt; 打印trace

 
 查看所有danguerous的权限
 adb shell pm list permissions -g -d


5. adb shell service list 查看service

 授予权限
 adb shell pm [grant| revoke] &lt;permission-name&gt; ...
 
 
Failed to fetch the lookup information of the device 00000004


adb shell dumpsys package rainhu.com.demostore -h
 adb shell pm list packages -f

adb shell dumpsys package d这会返回如下的认证条目信息：Package Name: com.example.myapp Domains: example.com </rich_text>
				<rich_text link="webs http://www.example.com">www.example.com</rich_text>
				<rich_text> Status: alwaysundefined —  app没有在manifest中启用链接自动验证功能。ask — app验证失败（会通过打开方式对话框询问用户）always — app通过了验证（点击这个域名总是打开这个app）never — app通过了验证，但是系统设置关闭了此功能。


截屏
adb shell screencap &lt;filename&gt;
adb shell screencap /sdcard/screen.png

录制视频
adb shell screenrecord [options] filename
adb shell screen --verbose /sdcard/demo.mp4

adb shell 所有能够使用的命令
adb shell ls /system/bin/



读取art配置文件

 adb shell cmd package dump-profiles com.android.cts.verifier
adb pull /data/misc/profman/com.android.cts.verifier.txt


  adb shell dmesg 将内核调试消息输出到屏幕
  
 
 发送广播
 adb shell am broadcast -a &quot;android.intent.action.REBOOT&quot; --ei &quot;nowait&quot; 1;








</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="android路径" prog_lang="custom-colors" readonly="False" tags="" unique_id="180">
				<rich_text> system/build.prop
数据库迁徙其实迁徙的是/data/media的路径 （相当与是/sdcard/）
将sdcard设为internal ， 就会变成primary， 一个系统只能有一个primary , 如果sdcard作为primary了， 内置存储就没有用了

/data/anr 存放anr路径
/data/app 第三方应用安装路径
/data/data/&lt;包名&gt;/ 存放应用数据
/data/media/&lt;UserId&gt;/ 以用户为单位存放共享数据 （为/storeage/emlated/0/的实际路径， /sdcard）
如果将内部存储设为internal并迁移数据，迁移的就是/data/media/的路径

/data/user/0/&lt;包名&gt;/ 存放与用户有关的应用数据
/data/system存放系统相关数据


sdcard挂载为internal以后，在路径/mnt/expand/&lt;hash&gt;/ 这个路径地位等同与/data
将sdcard设为内置以后并迁移， /data/media/的数据会迁移到/mnt/expand/&lt;hash&gt;/media这个路径中
如果移动app， 则是将/data/app/&lt;包名&gt;的数据移动到 /data/media/

此时所有的照片之类的数据都会存在/mnt/expand/&lt;hash&gt;/media下

</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="log" prog_lang="custom-colors" readonly="False" tags="" unique_id="202">
				<rich_text>adb logcat -v threadtime -b main -b events -b radio -b system -b crash &gt; logcat.txt

</rich_text>
				<rich_text weight="heavy">kernal log</rich_text>
				<rich_text>
adb root
adb shell cat /proc/kmsg &gt; klog.txt


adb command to catch logcat log and kernel log together to one log file:
logcat -f /dev/kmsg &amp; cat /proc/kmsg &gt; /data/log.txt &amp;

adb bugreport &gt; bugreport.txt //get Bugreport log.
adb dumpstate &gt;dumpstate.txt // get dumpstate log.
adb shell dumpsys &gt; dumpsys.txt // get dumpsys log.
adb shell procrank &gt; procrank.txt // get memory usage log.
adb shell cat /proc/meminfo &gt; meminfo.txt // get memory information log.
adb shell dumpsys meminfo &lt;pid of process&gt; &gt; meminfo.txt // get memory information log for
the process.
adb shell cat /proc/&lt;pid of process&gt;/maps &gt; maps.txt // get the process map information.
adb shell cat /proc/&lt;pid of process&gt;/status &gt; status.txt // get the status of the process.
adb shell cat /proc/$&lt;pid of process&gt;/task &gt; task.txt // get the task information of the process.
adb shell getprop &gt; android_getprop.txt

adb pull /data/anr .
adb pull /data/tombstones .


</rich_text>
				<rich_text weight="heavy"> get strace log:</rich_text>
				<rich_text>
adb shell strace -f -p &lt;pid&gt; &gt; strace.txt
adb shell strace -T -r -o /data/strace.txt &lt;app_name&gt;
adb shell strace -T -tt -w -C am start -n com.hgy.helloworld/.MainActivity &gt; strace.txt
adb shell strace -w -c am start -n com.hgy.helloworld/.MainActivity &gt; strace.txt
adb shell strace -e ptrace &lt;app_name&gt; // only trace the 'ptrace' system call.

</rich_text>
				<rich_text weight="heavy">hprof</rich_text>
				<rich_text>
adb shell am dumpheap &lt;pid of process&gt; /sdcard/heapdump_process.hprof

</rich_text>
				<rich_text weight="heavy">check which fd are in using:</rich_text>
				<rich_text>
adb shell lsof -p &lt;pid of process&gt;
adb shell lsof &gt;&gt; lsof.txt

</rich_text>
				<rich_text weight="heavy">get TCP dump:</rich_text>
				<rich_text>
adb shell tcpdump -i wlan0 -w /data/wlan.pcap
adb shell tcpdump -i any -s 0 -w /data/tcpdump.pcap

</rich_text>
				<rich_text weight="heavy">How to print call stack from Java, C and C++ code?</rich_text>
				<rich_text>
3.1 The below commands can help generate ANR trace log and Tombstone log:
adb shell kill -3 &lt;pid of process&gt; // get ANR trace log.
adb shell kill -6 &lt;pid of process&gt; // get Tombstone log.
adb shell debuggerd &lt;pid of process&gt; // get Tombstone log.




</rich_text>
				<rich_text weight="heavy">11-01 17:53:53.576 F/libc ( 1223): Fatal signal 11 (SIGSEGV), code 1, fault addr 0xdeadbaad in tid 1223 (system_server)</rich_text>
				<rich_text>
堆栈信息无法打出了，可以切换到userdebug版本

adb root
adb remount
adb shell

echo 1 &gt; /proc/sys/fs/suid_dumpable


</rich_text>
				<rich_text weight="heavy">打印堆栈</rich_text>
				<rich_text>
 Print the call stack in Java code:
Print the call stack in Java exception:
try {
...
} catch (RemoteException e) {
e.printStackTrace();
...
}
Another simple method to print the call stack:
Log.d(TAG, Log.getStackTraceString(new Throwable()));
We can also get the call stack with the function getStackTrace:
import android.util.Log;
...
StackTraceElement[] stackframes = Thread.currentThread().getStackTrace();
Log.e(&quot;Stacktrace *** &quot;, &quot;**********BEGIN**********&quot;);
for(int i=0; i &lt; stackframes.length; i++) {
Log.e(&quot;Stacktrace *** &quot;, stackframes[i].toString());
}
Log.e(&quot;Stacktrace *** &quot;, &quot;***********END***********&quot;);

3.3</rich_text>
				<rich_text weight="heavy"> Print the call stack in C++ code:</rich_text>
				<rich_text>
add the below code to print the call stack:
#include &lt;utils/CallStack.h&gt;
......
CallStack stack(LOG_TAG);

//另外看到一种
CallStack cs;
cs.update();
cs.dump(LOG_TAG);


Add the 'libutil' to your 'Android.mk' like below:
LOCAL_SHARED_LIBRARIES += libutils


</rich_text>
				<rich_text weight="heavy">3.4 Print the call stack in C code:</rich_text>
				<rich_text>
Wrapper Android C++ method into a C function in your C++ code 'dump_stack.cpp':
#include &lt;utils/CallStack.h&gt;
using namespace android;
extern &quot;C&quot; void dump_stack(const char* logtag)
{
CallStack stack(logtag);
}
Call this 'dump_stack' function in your C code:
extern void dump_stack(const char* logtag);
......
dump_stack(LOG_TAG);
......
Add the 'libutil' to your 'Android.mk' like below:
LOCAL_SHARED_LIBRARIES += libutils


定义在
/system/core/include/log/log.h

可以通过启用
#define LOG_NDEBUG 0


</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="shell" prog_lang="custom-colors" readonly="False" tags="" unique_id="209">
				<rich_text>#!/bin/bash
echo &quot;start test , please remove device lock firstly!&quot;
while true
do
   adb root;
   adb wait-for-device;
   adb shell am broadcast -a &quot;android.intent.action.REBOOT&quot; --ei &quot;nowait&quot; 1;
   adb devices &gt; a.txt;
   line_count=$(cat &quot;a.txt&quot; |wc -l);
   while (($line_count&gt;2))
   do
     adb devices &gt; a.txt;
     line_count=$(cat &quot;a.txt&quot; |wc -l);
   done 
   echo &quot;device is offline now. Waiting for another looper.&quot;;
   adb wait-for-device;
   sleep 50 ;
done
</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="学习大纲" prog_lang="custom-colors" readonly="False" tags="" unique_id="5">
			<rich_text>Wallpaper
MediaScanner
Vold
开机流程
Activity的四种启动模式在源码中的体现

MuitiWIndow
jit



</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="java 基础" prog_lang="custom-colors" readonly="False" tags="" unique_id="75">
				<rich_text>1. 接口的意义
2. 抽象的意义
3. 内部类的作用
4. 父类的静态方法能否被子类重写，为什么？
5. 举1～2个排序算法，并用Java实现
6. </rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Android基础" prog_lang="custom-colors" readonly="False" tags="" unique_id="185">
				<rich_text>1.Activity四种启动方式

2. handler

</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="应用在源码编译" prog_lang="custom-colors" readonly="False" tags="" unique_id="114">
			<rich_text>添加make文件

LOCAL_PATH:= $(call my-dir)

include $(CLEAR_VARS)
#LOCAL_STATIC_JAVA_LIBRARIES := \
#        android-support-v4 \
#        android-support-v7-appcompat \
#        android-support-v13

LOCAL_MODULE_TAGS := optional
LOCAL_CERTIFICATE := platform
LOCAL_SDK_VERSION := current  #for the error : The type android.os.Bundle cannot be found in source files, imported jack libs or the classpath

LOCAL_SRC_FILES := $(call all-java-files-under, src) #根据具体src文件确定

LOCAL_PACKAGE_NAME := MultiWindowDemo

#LOCAL_JNI_SHARED_LIBRARIES := libfmjni

#LOCAL_PROGUARD_ENABLED := disabled
#LOCAL_PRIVILEGED_MODULE := true

LOCAL_STATIC_JAVA_LIBRARIES += android-support-v7-appcompat
LOCAL_RESOURCE_DIR = $(LOCAL_PATH)/res frameworks/support/v7/appcompat/res

LOCAL_AAPT_FLAGS := --auto-add-overlay --extra-packages android.support.v7.appcompat

include $(BUILD_PACKAGE)

include $(call all-makefiles-under,$(LOCAL_PATH))




Building with Jack: out/target/common/obj/APPS/MultiWindowDemo_intermediates/with-local/classes.dex
ERROR: /home/huzhengyu/WORK_DIRECTORY/london20160822/packages/apps/android-MultiWindowPlayground-master/Application/src/main/java/com/android/multiwindowplayground/activities/AdjacentActivity.java:0: The type </rich_text>
			<rich_text weight="heavy">android.support.annotation.StringRes</rich_text>
			<rich_text> cannot be found in source files, imported jack libs or the classpath
ERROR: /home/huzhengyu/WORK_DIRECTORY/london20160822/packages/apps/android-MultiWindowPlayground-master/Application/src/main/java/com/android/multiwindowplayground/activities/AdjacentActivity.java:30: The hierarchy of the type AdjacentActivity is inconsistent
make: *** [out/target/common/obj/APPS/MultiWindowDemo_intermediates/with-local/classes.dex] Error 41

LOCAL_STATIC_JAVA_LIBRARIES := android-opt-datetimepicker
LOCAL_STATIC_JAVA_LIBRARIES += messageformat
LOCAL_STATIC_JAVA_LIBRARIES += android-support-design
LOCAL_STATIC_JAVA_LIBRARIES += android-support-v13
LOCAL_STATIC_JAVA_LIBRARIES += android-support-v4
LOCAL_STATIC_JAVA_LIBRARIES += android-support-v7-appcompat
LOCAL_STATIC_JAVA_LIBRARIES += android-support-v7-gridlayout
LOCAL_STATIC_JAVA_LIBRARIES += android-support-v7-recyclerview


make: Entering directory `/home/huzhengyu/WORK_DIRECTORY/london20160822'
target R.java/Manifest.java: MultiWindowDemo (out/target/common/obj/APPS/MultiWindowDemo_intermediates/src/R.stamp)
ERROR: resource directory './out/target/perso/simba6t/jrdResAssetsCust/packages/apps/android-MultiWindowPlayground-master/res' does not exist
要在AndroidManifest.xml同级目录编译



</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Ubuntu使用技巧" prog_lang="custom-colors" readonly="False" tags="" unique_id="56">
			<rich_text>更换源   /etc/apt/sources.list
sudo apt-get update
sudo apt-get upgrade


</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="shadowsocks 全局代理" prog_lang="custom-colors" readonly="False" tags="" unique_id="6">
				<rich_text>
</rich_text>
				<rich_text link="webs http://akakanch.com/archives/380">http://akakanch.com/archives/380</rich_text>
				<rich_text>

安装pip
$ sudo apt-get install python-pip python-dev build-essential 
$ sudo pip install --upgrade pip
 $ sudo pip install --upgrade virtualenv 

</rich_text>
				<rich_text foreground="#999999">Shell</rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>
为了方便管理生成的pac文件，我们在/home/目录下新建一个文件夹，命名为shadowsocks
</rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>
然后我们在刚刚建立的shadowsocks文件夹里面打开终端
用以下命令生成pac文件


genpac --proxy=&quot;SOCKS5 127.0.0.1:1080&quot; --gfwlist-proxy=&quot;SOCKS5 127.0.0.1:1080&quot; -o autoproxy.pac --gfwlist-url=&quot;</rich_text>
				<rich_text link="webs https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt&quot;">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt&quot;</rich_text>
				<rich_text>

然后设置系统网络代理未pac文件
</rich_text>
				<table char_offset="184" col_max="400" col_min="40">
					<row>
						<cell>1</cell>
						<cell>sudo pip install genpac</cell>
					</row>
					<row>
						<cell>点击这里</cell>
						<cell>点击这里</cell>
					</row>
				</table>
				<table char_offset="236" col_max="400" col_min="40">
					<row>
						<cell>12</cell>
						<cell>mkdir ~/shadowsockscd shadowsocks</cell>
					</row>
					<row>
						<cell>点击这里</cell>
						<cell>点击这里</cell>
					</row>
				</table>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Jekyll使用" prog_lang="custom-colors" readonly="False" tags="" unique_id="119">
				<rich_text>在_config.yml定义的变量 可以通过 {{site.&lt;变量名引用&gt;}}


环境搭建
#Ruby环境
#安装ruby2.0以上版本
#如果从源码编译
</rich_text>
				<rich_text foreground="#303336">sudo apt-get install libssl-dev</rich_text>
				<rich_text>
cd Ruby Directory
./configure
make 
sudo make install
sudo apt-get install ruby-dev

#安装jekyll
sudo gem install jekyll bundler


#进入jekyll工程运行
bundle exec jekyll serve

#如果还有一些依赖没有完成，执行
bundle install</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="英语" prog_lang="custom-colors" readonly="False" tags="" unique_id="130">
			<rich_text>反之亦然 vice-versa
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="APK重新签名" prog_lang="custom-colors" readonly="False" tags="" unique_id="142">
			<rich_text> Android的签名文件存放于系统源码的 build/target/product/security/目录下
    </rich_text>
			<rich_text justification="left"></rich_text>
			<rich_text>
    该目录下有 media.pk8、media.x509.pem、platform.pk8、platform.x509.pem、shared.pk8、shared.x509.pem、testkey.pk8、testkey.x509.pem等签名文件，不同的签名文件，对应不同的权限。Android默认的签名文件为testkey.pk8、testkey.x509.pem。
    (2) Android自带的签名工具为 signapk.jar， 可以在源码编译目录out中找到，具体路径为：out/host/linux-x86/framework/signapk.jar    以上APK具有系统权限，重新签名应该使用platform签名文件进行签名。
    签名方法：将对应权限的签名文件platform.pk8、platform.x509.pem， 签名工具 signapk.jar， 以及需要签名的apk（假设 old.apk） 放到同一目录下，打开linux终端（windows cmd也可以），进入该目录，进行重新签名：
    </rich_text>
			<rich_text link="webs https://mailsh.tct.tcl.com/owa/redir.aspx?C=U-ZxdqWKAUGCMKTmmzuoUOZlz_r84dMIQTrj8OSmlmTsDpP3FTjZOGWWGYQNObH6rpvyhVncOf8.&amp;URL=http%3a%2f%2flib.csdn.net%2fbase%2f17">Java</rich_text>
			<rich_text> -jar signapk.jar platform.x509.pem platform.pk8 old.apk new.apk
    重新生成的new.apk就可以安装在我们的Android设备上了。
    
    
java -jar signapk.jar platform.x509.pem platform.pk8 Launcher.apk signedLauncher.apk</rich_text>
			<encoded_png char_offset="60">iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAABHNCSVQICAgIfAhkiAAAAA1JREFUCJlj+P//PwMACPwC/oXNqzQAAAAASUVORK5CYII=</encoded_png>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="黑莓" prog_lang="custom-colors" readonly="False" tags="" unique_id="155">
			<rich_text link="webs https://10.65.180.38/#/home">https://10.65.180.38/#/home</rich_text>
			<rich_text>
</rich_text>
			<rich_text link="webs https://jira.bbqnx.net/secure/Dashboard.jspa">https://jira.bbqnx.net/secure/Dashboard.jspa</rich_text>
			<rich_text>
</rich_text>
			<rich_text link="webs http://172.16.34.202/gitweb-fast/gitweb-avengers/">http://172.16.34.202/gitweb-fast/gitweb-avengers/</rich_text>
			<rich_text>
用户名：zhu
密码：@eFafRey3T

</rich_text>
			<rich_text link="webs https://blackberry.watchdox.com/ngdox/oauth/up/signin/?client_id=com.watchdox.webapp&amp;email=zhengyu.hu@tcl.com&amp;locale=en-us&amp;redirect_uri=https:%2F%2Fblackberry.watchdox.com%2Finga%2Fprocess%2FeyJsb2NhdGlvbiI6Ii9uZ2RveC93b3Jrc3BhY2VzLzI2ODg5MS9JbmJveHxOQXxWZXJpem9ufFJlcXVpcmVtZW50cy8iLCJyZXR1cm5VcmkiOiIvbmdkb3gvYXV0aC9lbmRwb2ludC9vYXV0aCIsImVtYWlsIjoiemhlbmd5dS5odUB0Y2wuY29tIiwiY2xpZW50SWQiOiJjb20ud2F0Y2hkb3gud2ViYXBwIn0%253D&amp;remember=true&amp;response_type=code">https://blackberry.watchdox.com/ngdox/oauth/up/signin/?client_id=com.watchdox.webapp&amp;email=zhengyu.hu@tcl.com&amp;locale=en-us&amp;redirect_uri=https:%2F%2Fblackberry.watchdox.com%2Finga%2Fprocess%2FeyJsb2NhdGlvbiI6Ii9uZ2RveC93b3Jrc3BhY2VzLzI2ODg5MS9JbmJveHxOQXxWZXJpem9ufFJlcXVpcmVtZW50cy8iLCJyZXR1cm5VcmkiOiIvbmdkb3gvYXV0aC9lbmRwb2ludC9vYXV0aCIsImVtYWlsIjoiemhlbmd5dS5odUB0Y2wuY29tIiwiY2xpZW50SWQiOiJjb20ud2F0Y2hkb3gud2ViYXBwIn0%253D&amp;remember=true&amp;response_type=code</rich_text>
			<rich_text>


</rich_text>
			<rich_text foreground="#000000">对于Comment 2中的第一个问题，其实是系统输入法本身的问题，换成Baidu输入法和Sougou输入法就不会弹出</rich_text>
			<rich_text>。我猜测系统输入法没有很好的处理好Multi-window生命周期的问题，这个问题应该已经在Nexus7.1 所带的输入法上已经解决了。



git clone git@172.16.34.202:avengers/codeaurora_msm8953/device/qcom/common -b bb/master/aospn-msm8953-tcl
git add .
git commit
git config --local user.email Zhengyu.hu@tcl.com
git push ssh://zhu@10.65.181.194:29418/avengers/codeaurora_msm8953/device/qcom/common HEAD:refs/for/bb/master/aospn-msm8953-tcl</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Solution" prog_lang="custom-colors" readonly="False" tags="" unique_id="173">
			<rich_text foreground="#000000">2541989</rich_text>
			<rich_text> -&gt; 重启以后仍旧记住用户勾选的USB连接方式。，通过将值设到USB_PERSISTENT_CONFIG_PROPERTY来实现    ==》  test ok
2642692 -&gt; 删除了误添加的Patch 
</rich_text>
			<rich_text foreground="#000000">2546740   -&gt;  Android N原生仍旧有该行为</rich_text>
			<rich_text>

2553354 -&gt; Callback问题，待确认

2851808
2542016
2541979
2541968



</rich_text>
			<rich_text justification="left"></rich_text>
			<rich_text>

</rich_text>
			<table char_offset="209" col_max="1000" col_min="40">
				<row>
					<cell>Done</cell>
					<cell>          </cell>
					<cell>          </cell>
					<cell>          </cell>
					<cell>          </cell>
					<cell>          </cell>
				</row>
				<row>
					<cell>2541911</cell>
					<cell>Solution</cell>
					<cell>[Settings]The phone will reboot when click screen constantly in magnification gestures interface</cell>
					<cell>Active</cell>
					<cell>zhengyu</cell>
					<cell>done</cell>
				</row>
				<row>
					<cell>2541968</cell>
					<cell>Solution</cell>
					<cell>[USB driver]When four option is not selected, the name of the USB connection errors</cell>
					<cell>Active</cell>
					<cell>zhengyu</cell>
					<cell>done</cell>
				</row>
				<row>
					<cell>2541979</cell>
					<cell>Solution</cell>
					<cell>[Monkey]The device is not online with the phone screen is on </cell>
					<cell>Active</cell>
					<cell>zhengyu</cell>
					<cell>done</cell>
				</row>
				<row>
					<cell>2541989</cell>
					<cell>Solution</cell>
					<cell>[USB][APP]USB mode which customer chosed  is changed back to default mode after restart UE</cell>
					<cell>Active</cell>
					<cell>zhengyu</cell>
					<cell>done</cell>
				</row>
				<row>
					<cell>2546463</cell>
					<cell>Solution</cell>
					<cell>[Android6.0][Music][Monkey][Crash]CRASH: com.alcatel.music5</cell>
					<cell>Active</cell>
					<cell>zhengyu</cell>
					<cell>done</cell>
				</row>
				<row>
					<cell>2546467</cell>
					<cell>Solution</cell>
					<cell>[Monitor][Reboot][Monkey]The device reboot during Monkey system test</cell>
					<cell>Active</cell>
					<cell>zhengyu</cell>
					<cell>done</cell>
				</row>
				<row>
					<cell>2546510</cell>
					<cell>Solution</cell>
					<cell>[jrdlogger]com.android.mms Java (JE)</cell>
					<cell>Active</cell>
					<cell>zhengyu</cell>
					<cell>done</cell>
				</row>
				<row>
					<cell>2546693</cell>
					<cell>Solution</cell>
					<cell>[onetouch feedback]手机自动重启了</cell>
					<cell>Active</cell>
					<cell>zhengyu</cell>
					<cell>done</cell>
				</row>
				<row>
					<cell>2547748</cell>
					<cell>Solution</cell>
					<cell>[onetouch feedback][Setup Wizard]Only english language display  in setup wizard after factory reset.</cell>
					<cell>Active</cell>
					<cell>zhengyu</cell>
					<cell>相关代码已经提交</cell>
				</row>
				<row>
					<cell>2547801</cell>
					<cell>Solution</cell>
					<cell>[Monitor][SD card]It is failed to format a 32GB(or 64GB) Toshiba SD card as internal storage.</cell>
					<cell>Active</cell>
					<cell>zhengyu</cell>
					<cell>done</cell>
				</row>
				<row>
					<cell>2548004</cell>
					<cell>Solution</cell>
					<cell>[Monitor][Restart][Memory]Phone restarted when memory remaining is for about 50M</cell>
					<cell>Active</cell>
					<cell>zhengyu</cell>
					<cell>done</cell>
				</row>
				<row>
					<cell>2553334</cell>
					<cell>Solution</cell>
					<cell>[Force Close][Storage][System UI]System UI force close after plug out SD card during move data</cell>
					<cell>Active</cell>
					<cell>zhengyu</cell>
					<cell>add， waiting review</cell>
				</row>
				<row>
					<cell>2560537</cell>
					<cell>Solution</cell>
					<cell>[File manager]The new created and copied folder display as file on computer</cell>
					<cell>Active</cell>
					<cell>zhengyu</cell>
					<cell>done</cell>
				</row>
				<row>
					<cell>          </cell>
					<cell>          </cell>
					<cell>          </cell>
					<cell>          </cell>
					<cell>          </cell>
					<cell>          </cell>
				</row>
				<row>
					<cell>2671583</cell>
					<cell>Solution</cell>
					<cell>fix packagemanagerservice and mountservice death lock and prevent system server crash</cell>
					<cell>Active</cell>
					<cell>Framework</cell>
					<cell>done</cell>
				</row>
				<row>
					<cell>SPM Decision</cell>
					<cell>          </cell>
					<cell>          </cell>
					<cell>          </cell>
					<cell>          </cell>
					<cell>          </cell>
				</row>
				<row>
					<cell>2542005</cell>
					<cell>Solution</cell>
					<cell>[Storage]The MTP display phone storage’s free size not the same as file manager display free size </cell>
					<cell>Active</cell>
					<cell>zhengyu</cell>
					<cell>SPM确定是否调整MTP保留的存储大小，Android默认500MB </cell>
				</row>
				<row>
					<cell>2547788</cell>
					<cell>Solution</cell>
					<cell>Customize the Multi user feature</cell>
					<cell>Active</cell>
					<cell>zhengyu</cell>
					<cell>SPM确定是否要禁用多用户</cell>
				</row>
				<row>
					<cell>Inactive</cell>
					<cell>          </cell>
					<cell>          </cell>
					<cell>          </cell>
					<cell>          </cell>
					<cell>          </cell>
				</row>
				<row>
					<cell>2541986</cell>
					<cell>Solution</cell>
					<cell>[USB driver][MTP/PTP]Switch the MTP/PTP, poor performance</cell>
					<cell>inactive </cell>
					<cell>zhengyu</cell>
					<cell>inactive X 由高通patch引起，N上暂时没有这部分代码</cell>
				</row>
				<row>
					<cell>2542016</cell>
					<cell>Solution</cell>
					<cell>When storage is low, can not restart the phone successfully</cell>
					<cell>inactive </cell>
					<cell>zhengyu</cell>
					<cell>觉得不需要提交            http://172.16.11.162:8081/#/c/251922/             http://172.16.11.162:8081/#/c/228351/             http://172.16.11.162:8081/#/c/252695/</cell>
				</row>
				<row>
					<cell>2542021</cell>
					<cell>Solution</cell>
					<cell>[endurance][crash]Crash or Reboot found in camera moudle.</cell>
					<cell>inactive </cell>
					<cell>zhengyu</cell>
					<cell>inactive patchset的内容为low memory machnisim 代码，已经在fr中添加              </cell>
				</row>
				<row>
					<cell>2542045</cell>
					<cell>Solution</cell>
					<cell>[Stability][AndroidReboot][Navigation]com.android.phone:java.lang.RuntimeException</cell>
					<cell>inactive </cell>
					<cell>zhengyu</cell>
					<cell>inactive 代码发生变化，不需要提交</cell>
				</row>
				<row>
					<cell>2546505</cell>
					<cell>Solution</cell>
					<cell>[Monitor][Restart][Email]Device restart when exit email account</cell>
					<cell>inactive </cell>
					<cell>zhengyu</cell>
					<cell>X 不需要提交</cell>
				</row>
				<row>
					<cell>2546740</cell>
					<cell>Solution</cell>
					<cell>[Boot]Should not display 'Android is starting' after reboot.  Check on ON</cell>
					<cell>inactive </cell>
					<cell>zhengyu</cell>
					<cell>X 不需要提交 属               于原生设计</cell>
				</row>
				<row>
					<cell>2548018</cell>
					<cell>Solution</cell>
					<cell>The MTP display phone storage’s free size not the same as file manager display free size</cell>
					<cell>inactive </cell>
					<cell>zhengyu</cell>
					<cell>inactive  重复 2542005</cell>
				</row>
				<row>
					<cell>2553205</cell>
					<cell>Solution</cell>
					<cell>[Monitor][Restart][Filemanager+Storage]Phone restarted after format SD card as internal storage in Storage&amp;USB of settings</cell>
					<cell>inactive </cell>
					<cell>zhengyu</cell>
					<cell>inactive API变更，MountService.createNewUserDir  改为 createUserKey             不会再出现此问题。</cell>
				</row>
				<row>
					<cell>click me</cell>
					<cell>click me</cell>
					<cell>click me</cell>
					<cell>click me</cell>
					<cell>click me</cell>
					<cell>click me</cell>
				</row>
			</table>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="googlesearch" prog_lang="custom-colors" readonly="False" tags="" unique_id="198">
			<rich_text></rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="notokLog" prog_lang="custom-colors" readonly="False" tags="" unique_id="199">
				<rich_text>huzhengyu@51187-26-1:~$ adb shell dumpsys activity activities
ACTIVITY MANAGER ACTIVITIES (dumpsys activity activities)
Display #0 (activities from top to bottom):
  Stack #1:
  mFullscreen=true
  mBounds=null
    Task id #19
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{28d209d #19 A=com.google.android.googlequicksearchbox U=0 StackId=1 sz=1}
      userId=0 effectiveUid=u0a38 mCallingUid=u0a38 mUserSetupComplete=true mCallingPackage=com.google.android.googlequicksearchbox
      affinity=com.google.android.googlequicksearchbox
      intent={act=android.search.action.GLOBAL_SEARCH cat=[com.google.android.googlequicksearchbox.category.SEARCH_WIDGET] flg=0x10008000 cmp=com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity}
      realActivity=com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity
      autoRemoveRecents=false isPersistable=true numFullscreen=1 taskType=0 mTaskToReturnTo=0
      rootWasReset=false mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{791ea54 u0 com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity t19}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=null lastThumbnailFile=/data/system_ce/0/recent_images/19_task_thumbnail.png
      stackId=1
      hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE isResizeable=true firstActiveTime=1482740630188 lastActiveTime=1482740630188 (inactive for 8s)
      * Hist #0: ActivityRecord{791ea54 u0 com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity t19}
          packageName=com.google.android.googlequicksearchbox processName=com.google.android.googlequicksearchbox:search
          launchedFromUid=10038 launchedFromPackage=com.google.android.googlequicksearchbox userId=0
          app=ProcessRecord{4fc1e83 14398:com.google.android.googlequicksearchbox:search/u0a38}
          Intent { flg=0x14408000 cmp=com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity (has extras) }
          frontOfTask=true task=TaskRecord{28d209d #19 A=com.google.android.googlequicksearchbox U=0 StackId=1 sz=1}
          taskAffinity=com.google.android.googlequicksearchbox
          realActivity=com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity
          baseDir=/system/priv-app/Velvet/Velvet.apk
          dataDir=/data/user/0/com.google.android.googlequicksearchbox
          stateNotNeeded=false componentSpecified=true mActivityType=0
          compat={420dpi} labelRes=0x7f0b025c icon=0x7f030003 theme=0x7f110228
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.8}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=ff4285f4
          launchFailed=false launchCount=1 lastLaunchTime=-8s140ms
          haveState=false icicle=null
          state=RESUMED stopped=false delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=true sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_NOT_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=2
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=true lastVisibleTime=-7s967ms
          connections=[ConnectionRecord{cf39a52 u0 CR com.google.android.googlequicksearchbox/com.google.android.apps.gsa.search.core.service.SearchService:@87ecedd}]
          resizeMode=RESIZE_MODE_RESIZEABLE
    Task id #17
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{efb4581 #17 A=com.android.dialer U=0 StackId=1 sz=1}
      userId=0 effectiveUid=u0a18 mCallingUid=u0a24 mUserSetupComplete=true mCallingPackage=com.blackberry.blackberrylauncher
      affinity=com.android.dialer
      intent={act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.android.dialer/.DialtactsActivity}
      origActivity=com.android.dialer/.DialtactsActivity
      realActivity=com.android.dialer/.DialtactsActivity
      autoRemoveRecents=false isPersistable=true numFullscreen=1 taskType=0 mTaskToReturnTo=1
      rootWasReset=true mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{c3dc89e u0 com.android.dialer/.DialtactsActivity t17}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=android.graphics.Bitmap@c74e912 lastThumbnailFile=/data/system_ce/0/recent_images/17_task_thumbnail.png
      stackId=1
      hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE isResizeable=true firstActiveTime=1482740628529 lastActiveTime=1482740628529 (inactive for 9s)
      * Hist #0: ActivityRecord{c3dc89e u0 com.android.dialer/.DialtactsActivity t17}
          packageName=com.android.dialer processName=com.android.dialer
          launchedFromUid=10024 launchedFromPackage=com.blackberry.blackberrylauncher userId=0
          app=ProcessRecord{6659781 18170:com.android.dialer/u0a18}
          Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.android.dialer/.DialtactsActivity }
          frontOfTask=true task=TaskRecord{efb4581 #17 A=com.android.dialer U=0 StackId=1 sz=1}
          taskAffinity=com.android.dialer
          realActivity=com.android.dialer/.DialtactsActivity
          baseDir=/system/priv-app/Dialer/Dialer.apk
          dataDir=/data/user/0/com.android.dialer
          stateNotNeeded=false componentSpecified=true mActivityType=0
          compat={420dpi} labelRes=0x7f0c02b1 icon=0x7f030001 theme=0x7f0d018e
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.8}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=ff0288d1
          launchFailed=false launchCount=0 lastLaunchTime=-53s97ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=11560]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=2
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-10s827ms
          connections=[]
          resizeMode=RESIZE_MODE_RESIZEABLE
    Task id #13
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{e5d3267 #13 A=com.android.chrome U=0 StackId=1 sz=1}
      userId=0 effectiveUid=u0a65 mCallingUid=u0a65 mUserSetupComplete=true mCallingPackage=com.android.chrome
      affinity=com.android.chrome
      intent={act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x14002000 cmp=com.android.chrome/org.chromium.chrome.browser.ChromeTabbedActivity}
      realActivity=com.android.chrome/org.chromium.chrome.browser.ChromeTabbedActivity
      autoRemoveRecents=false isPersistable=true numFullscreen=1 taskType=0 mTaskToReturnTo=1
      rootWasReset=false mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{13638cc u0 com.android.chrome/org.chromium.chrome.browser.ChromeTabbedActivity t13}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=null lastThumbnailFile=/data/system_ce/0/recent_images/13_task_thumbnail.png
      stackId=1
      hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE isResizeable=true firstActiveTime=1451667447154 lastActiveTime=1451667447154 (inactive for 31073191s)
      * Hist #0: ActivityRecord{13638cc u0 com.android.chrome/org.chromium.chrome.browser.ChromeTabbedActivity t13}
          packageName=com.android.chrome processName=com.android.chrome
          launchedFromUid=10065 launchedFromPackage=com.android.chrome userId=0
          app=ProcessRecord{55be056 15003:com.android.chrome/u0a65}
          Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x14002000 cmp=com.android.chrome/org.chromium.chrome.browser.ChromeTabbedActivity (has extras) }
          frontOfTask=true task=TaskRecord{e5d3267 #13 A=com.android.chrome U=0 StackId=1 sz=1}
          taskAffinity=com.android.chrome
          realActivity=com.android.chrome/org.chromium.chrome.browser.ChromeTabbedActivity
          baseDir=/system/app/Chrome/Chrome.apk
          dataDir=/data/user/0/com.android.chrome
          stateNotNeeded=false componentSpecified=true mActivityType=0
          compat={420dpi} labelRes=0x7f0a0479 icon=0x7f030000 theme=0x7f0e018b
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.8}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=fff5f5f5
          launchFailed=false launchCount=0 lastLaunchTime=-9m27s6ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=3796]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=2
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-9m22s706ms
          connections=[]
          resizeMode=RESIZE_MODE_RESIZEABLE
    Task id #10
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{5b40814 #10 I=com.android.settings/.Settings$WifiSettingsActivity U=0 StackId=1 sz=1}
      userId=0 effectiveUid=1000 mCallingUid=u0a31 mUserSetupComplete=true mCallingPackage=com.android.systemui
      intent={act=android.settings.WIFI_SETTINGS flg=0x14000000 cmp=com.android.settings/.Settings$WifiSettingsActivity}
      realActivity=com.android.settings/.Settings$WifiSettingsActivity
      autoRemoveRecents=false isPersistable=true numFullscreen=1 taskType=0 mTaskToReturnTo=1
      rootWasReset=false mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{9cd0add u0 com.android.settings/.Settings$WifiSettingsActivity t10}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=null lastThumbnailFile=/data/system_ce/0/recent_images/10_task_thumbnail.png
      stackId=1
      hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE isResizeable=true firstActiveTime=1451667348121 lastActiveTime=1451667348121 (inactive for 31073290s)
      * Hist #0: ActivityRecord{9cd0add u0 com.android.settings/.Settings$WifiSettingsActivity t10}
          packageName=com.android.settings processName=com.android.settings
          launchedFromUid=10031 launchedFromPackage=com.android.systemui userId=0
          app=ProcessRecord{d09f0af 6270:com.android.settings/1000}
          Intent { act=android.settings.WIFI_SETTINGS flg=0x14000000 cmp=com.android.settings/.Settings$WifiSettingsActivity }
          frontOfTask=true task=TaskRecord{5b40814 #10 I=com.android.settings/.Settings$WifiSettingsActivity U=0 StackId=1 sz=1}
          taskAffinity=null
          realActivity=com.android.settings/.Settings$WifiSettingsActivity
          baseDir=/system/priv-app/Settings/Settings.apk
          dataDir=/data/user_de/0/com.android.settings
          stateNotNeeded=false componentSpecified=false mActivityType=0
          compat={420dpi} labelRes=0x7f0b03c9 icon=0x7f0200fe theme=0x7f0f01df
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.8}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=ff263238
          launchFailed=false launchCount=0 lastLaunchTime=-41m55s47ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=5448]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=0
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-9m32s953ms
          resizeMode=RESIZE_MODE_RESIZEABLE
    Task id #9
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{b95b8bd #9 A=com.android.settings U=0 StackId=1 sz=3}
      userId=0 effectiveUid=1000 mCallingUid=u0a31 mUserSetupComplete=true mCallingPackage=com.android.systemui
      affinity=com.android.settings
      intent={act=android.settings.SETTINGS flg=0x14000000 cmp=com.android.settings/.Settings}
      realActivity=com.android.settings/.Settings
      autoRemoveRecents=false isPersistable=true numFullscreen=3 taskType=0 mTaskToReturnTo=0
      rootWasReset=false mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{b86d409 u0 com.android.settings/.Settings t9}, ActivityRecord{8b2d4f7 u0 com.android.settings/.Settings$ManageApplicationsActivity t9}, ActivityRecord{959fc98 u0 com.android.settings/.SubSettings t9}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=null lastThumbnailFile=/data/system_ce/0/recent_images/9_task_thumbnail.png
      stackId=1
      hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE isResizeable=true firstActiveTime=1451663917119 lastActiveTime=1451663917119 (inactive for 31076721s)
      * Hist #2: ActivityRecord{959fc98 u0 com.android.settings/.SubSettings t9}
          packageName=com.android.settings processName=com.android.settings
          launchedFromUid=1000 launchedFromPackage=com.android.settings userId=0
          app=ProcessRecord{d09f0af 6270:com.android.settings/1000}
          Intent { act=android.intent.action.MAIN cmp=com.android.settings/.SubSettings (has extras) }
          frontOfTask=false task=TaskRecord{b95b8bd #9 A=com.android.settings U=0 StackId=1 sz=3}
          taskAffinity=com.android.settings
          realActivity=com.android.settings/.SubSettings
          baseDir=/system/priv-app/Settings/Settings.apk
          dataDir=/data/user_de/0/com.android.settings
          stateNotNeeded=false componentSpecified=true mActivityType=0
          compat={420dpi} labelRes=0x7f0b0282 icon=0x7f030000 theme=0x7f0f01df
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.8}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          resultTo=ActivityRecord{8b2d4f7 u0 com.android.settings/.Settings$ManageApplicationsActivity t9} resultWho=null resultCode=1
          taskDescription: iconFilename=null label=&quot;null&quot; color=ff263238
          launchFailed=false launchCount=0 lastLaunchTime=-42m0s551ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=4536]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_NOT_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=0
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-41m59s959ms
          resizeMode=RESIZE_MODE_RESIZEABLE
      * Hist #1: ActivityRecord{8b2d4f7 u0 com.android.settings/.Settings$ManageApplicationsActivity t9}
          packageName=com.android.settings processName=com.android.settings
          launchedFromUid=1000 launchedFromPackage=com.android.settings userId=0
          app=ProcessRecord{d09f0af 6270:com.android.settings/1000}
          Intent { flg=0x8000 cmp=com.android.settings/.Settings$ManageApplicationsActivity (has extras) }
          frontOfTask=false task=TaskRecord{b95b8bd #9 A=com.android.settings U=0 StackId=1 sz=3}
          taskAffinity=null
          realActivity=com.android.settings/.Settings$ManageApplicationsActivity
          baseDir=/system/priv-app/Settings/Settings.apk
          dataDir=/data/user_de/0/com.android.settings
          stateNotNeeded=false componentSpecified=true mActivityType=0
          compat={420dpi} labelRes=0x7f0b0688 icon=0x7f0200db theme=0x7f0f01df
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.8}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=ff263238
          launchFailed=false launchCount=0 lastLaunchTime=-42m56s836ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=3240]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_NOT_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=0
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-42m1s727ms
          resizeMode=RESIZE_MODE_RESIZEABLE
      * Hist #0: ActivityRecord{b86d409 u0 com.android.settings/.Settings t9}
          packageName=com.android.settings processName=com.android.settings
          launchedFromUid=10031 launchedFromPackage=com.android.systemui userId=0
          app=ProcessRecord{d09f0af 6270:com.android.settings/1000}
          Intent { act=android.settings.SETTINGS flg=0x14000000 cmp=com.android.settings/.Settings }
          frontOfTask=true task=TaskRecord{b95b8bd #9 A=com.android.settings U=0 StackId=1 sz=3}
          taskAffinity=com.android.settings
          realActivity=com.android.settings/.Settings
          baseDir=/system/priv-app/Settings/Settings.apk
          dataDir=/data/user_de/0/com.android.settings
          stateNotNeeded=false componentSpecified=false mActivityType=0
          compat={420dpi} labelRes=0x7f0b0283 icon=0x7f030000 theme=0x7f0f01df
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.8}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=ff263238
          launchFailed=false launchCount=0 lastLaunchTime=-42m59s357ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=1872]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=2
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-42m58s621ms
          resizeMode=RESIZE_MODE_RESIZEABLE
    Task id #8
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{c376eb2 #8 A=com.looklook.xinghongfei.looklook U=0 StackId=1 sz=1}
      userId=0 effectiveUid=u0a99 mCallingUid=2000 mUserSetupComplete=true mCallingPackage=null
      affinity=com.looklook.xinghongfei.looklook
      intent={act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.looklook.xinghongfei.looklook/.MainActivity}
      realActivity=com.looklook.xinghongfei.looklook/.MainActivity
      autoRemoveRecents=false isPersistable=true numFullscreen=1 taskType=0 mTaskToReturnTo=1
      rootWasReset=false mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{e550c04 u0 com.looklook.xinghongfei.looklook/.MainActivity t8}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=null lastThumbnailFile=/data/system_ce/0/recent_images/8_task_thumbnail.png
      stackId=1
      hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE isResizeable=true firstActiveTime=1451663747378 lastActiveTime=1451663747378 (inactive for 31076890s)
      * Hist #0: ActivityRecord{e550c04 u0 com.looklook.xinghongfei.looklook/.MainActivity t8}
          packageName=com.looklook.xinghongfei.looklook processName=com.looklook.xinghongfei.looklook
          launchedFromUid=2000 launchedFromPackage=null userId=0
          app=ProcessRecord{7008e03 14361:com.looklook.xinghongfei.looklook/u0a99}
          Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.looklook.xinghongfei.looklook/.MainActivity }
          frontOfTask=true task=TaskRecord{c376eb2 #8 A=com.looklook.xinghongfei.looklook U=0 StackId=1 sz=1}
          taskAffinity=com.looklook.xinghongfei.looklook
          realActivity=com.looklook.xinghongfei.looklook/.MainActivity
          baseDir=/data/app/com.looklook.xinghongfei.looklook-1/base.apk
          dataDir=/data/user/0/com.looklook.xinghongfei.looklook
          stateNotNeeded=false componentSpecified=true mActivityType=0
          compat={420dpi} labelRes=0x7f09002d icon=0x7f020058 theme=0x7f0b00d7
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.8}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=ff69f0ae
          launchFailed=false launchCount=0 lastLaunchTime=-43m25s115ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=3036]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=0
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-43m7s609ms
          resizeMode=RESIZE_MODE_RESIZEABLE
    Task id #2
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{fd39180 #2 A=com.android.wizard U=0 StackId=1 sz=4}
      userId=0 effectiveUid=2917 mCallingUid=u0a30 mUserSetupComplete=false mCallingPackage=com.google.android.setupwizard
      affinity=com.android.wizard
      intent={act=com.blackberry.oobe.AGREEMENT dat=oobe://com.blackberry.oobe.agreement flg=0x14000000 cmp=com.blackberry.oobe/.activities.OOBEAgreementActivity}
      realActivity=com.blackberry.oobe/.activities.OOBEAgreementActivity
      autoRemoveRecents=true isPersistable=true numFullscreen=4 taskType=0 mTaskToReturnTo=1
      rootWasReset=false mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{bbe22e1 u0 com.blackberry.oobe/.activities.OOBEAgreementActivity t2}, ActivityRecord{f6d4421 u0 com.blackberry.oobe/.activities.OOBEMarketingActivity t2}, ActivityRecord{ee0ed3a u0 com.blackberry.oobe/.activities.OOBECCLActivity t2}, ActivityRecord{45f979b u0 com.blackberry.oobe/.activities.OOBEAllSetActivity t2}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=null lastThumbnailFile=/data/system_ce/0/recent_images/2_task_thumbnail.png
      stackId=1
      hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE isResizeable=true firstActiveTime=1451649626266 lastActiveTime=1451649626266 (inactive for 31091012s)
      * Hist #3: ActivityRecord{45f979b u0 com.blackberry.oobe/.activities.OOBEAllSetActivity t2}
          packageName=com.blackberry.oobe processName=com.blackberry.oobe
          launchedFromUid=10030 launchedFromPackage=com.google.android.setupwizard userId=0
          app=ProcessRecord{c6a23b9 5120:com.blackberry.oobe/2917}
          Intent { act=com.blackberry.oobe.ALL_SET flg=0x4000000 cmp=com.blackberry.oobe/.activities.OOBEAllSetActivity (has extras) }
          frontOfTask=false task=TaskRecord{fd39180 #2 A=com.android.wizard U=0 StackId=1 sz=4}
          taskAffinity=com.android.wizard
          realActivity=com.blackberry.oobe/.activities.OOBEAllSetActivity
          baseDir=/system/priv-app/oobe/oobe.apk
          dataDir=/data/user/0/com.blackberry.oobe
          stateNotNeeded=false componentSpecified=false mActivityType=0
          compat={420dpi} labelRes=0x7f08001a icon=0x7f02000d theme=0x7f090004
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.6}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=fff5f5f5
          results=[ResultInfo{who=null, request=10000, result=0, data=null}]
          launchFailed=false launchCount=0 lastLaunchTime=-4h38m22s2ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=1688]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_NOT_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=0
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-4h38m21s351ms
          resizeMode=RESIZE_MODE_RESIZEABLE
      * Hist #2: ActivityRecord{ee0ed3a u0 com.blackberry.oobe/.activities.OOBECCLActivity t2}
          packageName=com.blackberry.oobe processName=com.blackberry.oobe
          launchedFromUid=10030 launchedFromPackage=com.google.android.setupwizard userId=0
          app=ProcessRecord{c6a23b9 5120:com.blackberry.oobe/2917}
          Intent { act=com.blackberry.oobe.CCL flg=0x4000000 cmp=com.blackberry.oobe/.activities.OOBECCLActivity (has extras) }
          frontOfTask=false task=TaskRecord{fd39180 #2 A=com.android.wizard U=0 StackId=1 sz=4}
          taskAffinity=com.android.wizard
          realActivity=com.blackberry.oobe/.activities.OOBECCLActivity
          baseDir=/system/priv-app/oobe/oobe.apk
          dataDir=/data/user/0/com.blackberry.oobe
          stateNotNeeded=false componentSpecified=false mActivityType=0
          compat={420dpi} labelRes=0x7f08001f icon=0x7f02000d theme=0x7f090004
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.6}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=fff5f5f5
          results=[ResultInfo{who=null, request=10000, result=0, data=null}]
          launchFailed=false launchCount=0 lastLaunchTime=-4h38m25s17ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=1908]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_NOT_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=0
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-4h38m24s340ms
          resizeMode=RESIZE_MODE_RESIZEABLE
      * Hist #1: ActivityRecord{f6d4421 u0 com.blackberry.oobe/.activities.OOBEMarketingActivity t2}
          packageName=com.blackberry.oobe processName=com.blackberry.oobe
          launchedFromUid=10030 launchedFromPackage=com.google.android.setupwizard userId=0
          app=ProcessRecord{c6a23b9 5120:com.blackberry.oobe/2917}
          Intent { act=com.blackberry.oobe.MARKETING flg=0x4000000 cmp=com.blackberry.oobe/.activities.OOBEMarketingActivity (has extras) }
          frontOfTask=false task=TaskRecord{fd39180 #2 A=com.android.wizard U=0 StackId=1 sz=4}
          taskAffinity=com.android.wizard
          realActivity=com.blackberry.oobe/.activities.OOBEMarketingActivity
          baseDir=/system/priv-app/oobe/oobe.apk
          dataDir=/data/user/0/com.blackberry.oobe
          stateNotNeeded=false componentSpecified=false mActivityType=0
          compat={420dpi} labelRes=0x7f08002b icon=0x7f02000d theme=0x7f090004
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.6}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=fff5f5f5
          results=[ResultInfo{who=null, request=10000, result=0, data=null}]
          launchFailed=false launchCount=0 lastLaunchTime=-4h38m26s337ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=1820]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_NOT_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=0
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-4h38m25s643ms
          resizeMode=RESIZE_MODE_RESIZEABLE
      * Hist #0: ActivityRecord{bbe22e1 u0 com.blackberry.oobe/.activities.OOBEAgreementActivity t2}
          packageName=com.blackberry.oobe processName=com.blackberry.oobe
          launchedFromUid=10030 launchedFromPackage=com.google.android.setupwizard userId=0
          app=ProcessRecord{c6a23b9 5120:com.blackberry.oobe/2917}
          Intent { act=com.blackberry.oobe.AGREEMENT dat=oobe://com.blackberry.oobe.agreement flg=0x14000000 cmp=com.blackberry.oobe/.activities.OOBEAgreementActivity (has extras) }
          frontOfTask=true task=TaskRecord{fd39180 #2 A=com.android.wizard U=0 StackId=1 sz=4}
          taskAffinity=com.android.wizard
          realActivity=com.blackberry.oobe/.activities.OOBEAgreementActivity
          baseDir=/system/priv-app/oobe/oobe.apk
          dataDir=/data/user/0/com.blackberry.oobe
          stateNotNeeded=false componentSpecified=false mActivityType=0
          compat={420dpi} labelRes=0x7f08000e icon=0x7f02000d theme=0x7f090004
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.6}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=fff5f5f5
          results=[ResultInfo{who=null, request=10000, result=0, data=null}]
          launchFailed=false launchCount=0 lastLaunchTime=-4h38m29s953ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=2076]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=2
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-4h38m29s601ms
          resizeMode=RESIZE_MODE_RESIZEABLE

    Running activities (most recent first):
      TaskRecord{28d209d #19 A=com.google.android.googlequicksearchbox U=0 StackId=1 sz=1}
        Run #11: ActivityRecord{791ea54 u0 com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity t19}
      TaskRecord{efb4581 #17 A=com.android.dialer U=0 StackId=1 sz=1}
        Run #10: ActivityRecord{c3dc89e u0 com.android.dialer/.DialtactsActivity t17}
      TaskRecord{e5d3267 #13 A=com.android.chrome U=0 StackId=1 sz=1}
        Run #9: ActivityRecord{13638cc u0 com.android.chrome/org.chromium.chrome.browser.ChromeTabbedActivity t13}
      TaskRecord{5b40814 #10 I=com.android.settings/.Settings$WifiSettingsActivity U=0 StackId=1 sz=1}
        Run #8: ActivityRecord{9cd0add u0 com.android.settings/.Settings$WifiSettingsActivity t10}
      TaskRecord{b95b8bd #9 A=com.android.settings U=0 StackId=1 sz=3}
        Run #7: ActivityRecord{959fc98 u0 com.android.settings/.SubSettings t9}
        Run #6: ActivityRecord{8b2d4f7 u0 com.android.settings/.Settings$ManageApplicationsActivity t9}
        Run #5: ActivityRecord{b86d409 u0 com.android.settings/.Settings t9}
      TaskRecord{c376eb2 #8 A=com.looklook.xinghongfei.looklook U=0 StackId=1 sz=1}
        Run #4: ActivityRecord{e550c04 u0 com.looklook.xinghongfei.looklook/.MainActivity t8}
      TaskRecord{fd39180 #2 A=com.android.wizard U=0 StackId=1 sz=4}
        Run #3: ActivityRecord{45f979b u0 com.blackberry.oobe/.activities.OOBEAllSetActivity t2}
        Run #2: ActivityRecord{ee0ed3a u0 com.blackberry.oobe/.activities.OOBECCLActivity t2}
        Run #1: ActivityRecord{f6d4421 u0 com.blackberry.oobe/.activities.OOBEMarketingActivity t2}
        Run #0: ActivityRecord{bbe22e1 u0 com.blackberry.oobe/.activities.OOBEAgreementActivity t2}

    mResumedActivity: ActivityRecord{791ea54 u0 com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity t19}
    mLastPausedActivity: ActivityRecord{bcc5c71 u0 com.google.android.googlequicksearchbox/.SearchActivity t20 f}

    mLastNoHistoryActivity: ActivityRecord{bcc5c71 u0 com.google.android.googlequicksearchbox/.SearchActivity t20 f}

  Stack #0:
  mFullscreen=true
  mBounds=null
    Task id #4
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{a29c3fe #4 I=com.blackberry.blackberrylauncher/.MainActivity U=0 StackId=0 sz=1}
      userId=0 effectiveUid=u0a24 mCallingUid=1000 mUserSetupComplete=true mCallingPackage=android
      intent={act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x13208000 cmp=com.blackberry.blackberrylauncher/.MainActivity}
      realActivity=com.blackberry.blackberrylauncher/.MainActivity
      autoRemoveRecents=false isPersistable=true numFullscreen=1 taskType=1 mTaskToReturnTo=0
      rootWasReset=true mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{daeaf03 u0 com.blackberry.blackberrylauncher/.MainActivity t4}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=null lastThumbnailFile=/data/system_ce/0/recent_images/4_task_thumbnail.png
      stackId=0
      hasBeenVisible=true mResizeMode=RESIZE_MODE_UNRESIZEABLE isResizeable=false firstActiveTime=1482740629734 lastActiveTime=1482740629734 (inactive for 8s)
      * Hist #0: ActivityRecord{daeaf03 u0 com.blackberry.blackberrylauncher/.MainActivity t4}
          packageName=com.blackberry.blackberrylauncher processName=com.blackberry.blackberrylauncher
          launchedFromUid=10030 launchedFromPackage=com.google.android.setupwizard userId=0
          app=ProcessRecord{a78c3fc 2751:com.blackberry.blackberrylauncher/u0a24}
          Intent { act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x13208000 cmp=com.blackberry.blackberrylauncher/.MainActivity }
          frontOfTask=true task=TaskRecord{a29c3fe #4 I=com.blackberry.blackberrylauncher/.MainActivity U=0 StackId=0 sz=1}
          taskAffinity=null
          realActivity=com.blackberry.blackberrylauncher/.MainActivity
          baseDir=/system/priv-app/BlackBerryLauncher/BlackBerryLauncher.apk
          dataDir=/data/user/0/com.blackberry.blackberrylauncher
          stateNotNeeded=false componentSpecified=true mActivityType=1
          compat={420dpi} labelRes=0x7f0b01b8 icon=0x7f0200e2 theme=0x7f0e0039
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.6}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=ffffffff
          launchFailed=false launchCount=0 lastLaunchTime=-4h37m55s260ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=154644]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=2
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=HOME_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-9s432ms
          resizeMode=RESIZE_MODE_UNRESIZEABLE

    Task id #7
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{1f4075f #7 A=com.android.systemui U=0 StackId=0 sz=1}
      userId=0 effectiveUid=u0a31 mCallingUid=u0a31 mUserSetupComplete=true mCallingPackage=com.android.systemui
      affinity=com.android.systemui
      intent={flg=0x10804000 cmp=com.android.systemui/.recents.RecentsActivity}
      realActivity=com.android.systemui/.recents.RecentsActivity
      autoRemoveRecents=false isPersistable=false numFullscreen=1 taskType=2 mTaskToReturnTo=1
      rootWasReset=false mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{cd6082b u0 com.android.systemui/.recents.RecentsActivity t7}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=null lastThumbnailFile=/data/system_ce/0/recent_images/7_task_thumbnail.png
      stackId=0
      hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE isResizeable=true firstActiveTime=1482740221743 lastActiveTime=1482740221743 (inactive for 416s)
      * Hist #0: ActivityRecord{cd6082b u0 com.android.systemui/.recents.RecentsActivity t7}
          packageName=com.android.systemui processName=com.android.systemui
          launchedFromUid=10031 launchedFromPackage=com.android.systemui userId=0
          app=ProcessRecord{836a579 1909:com.android.systemui/u0a31}
          Intent { flg=0x10804000 cmp=com.android.systemui/.recents.RecentsActivity }
          frontOfTask=true task=TaskRecord{1f4075f #7 A=com.android.systemui U=0 StackId=0 sz=1}
          taskAffinity=com.android.systemui
          realActivity=com.android.systemui/.recents.RecentsActivity
          baseDir=/system/priv-app/SystemUI/SystemUI.apk
          dataDir=/data/user_de/0/com.android.systemui
          stateNotNeeded=true componentSpecified=true mActivityType=2
          compat={420dpi} labelRes=0x7f0b0248 icon=0x7f020183 theme=0x7f1301d1
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.8}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=ff212121
          launchFailed=false launchCount=0 lastLaunchTime=-4h37m31s416ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=784]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_NOT_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=3
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=RECENTS_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-6m56s995ms
          resizeMode=RESIZE_MODE_RESIZEABLE

    Running activities (most recent first):
      TaskRecord{a29c3fe #4 I=com.blackberry.blackberrylauncher/.MainActivity U=0 StackId=0 sz=1}
        Run #1: ActivityRecord{daeaf03 u0 com.blackberry.blackberrylauncher/.MainActivity t4}
      TaskRecord{1f4075f #7 A=com.android.systemui U=0 StackId=0 sz=1}
        Run #0: ActivityRecord{cd6082b u0 com.android.systemui/.recents.RecentsActivity t7}

    mLastPausedActivity: ActivityRecord{daeaf03 u0 com.blackberry.blackberrylauncher/.MainActivity t4}

  mFocusedActivity: ActivityRecord{791ea54 u0 com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity t19}
  mFocusedStack=ActivityStack{1a045ac stackId=1, 7 tasks} mLastFocusedStack=ActivityStack{1a045ac stackId=1, 7 tasks}
  mSleepTimeout=false
  mCurTaskIdForUser={0=20}
  mUserStackInFront={}
  mActivityContainers={0=ActivtyContainer{0}A, 1=ActivtyContainer{1}A}
  mLockTaskModeState=NONE mLockTaskPackages (userId:packages)=
    0:[]
 mLockTaskModeTasks[]
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="oklog" prog_lang="custom-colors" readonly="False" tags="" unique_id="200">
				<rich_text>huzhengyu@51187-26-1:~$ adb shell dumpsys activity activities
ACTIVITY MANAGER ACTIVITIES (dumpsys activity activities)
Display #0 (activities from top to bottom):
  Stack #1:
  mFullscreen=true
  mBounds=null
    Task id #23
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{293b1fa #23 A=com.google.android.googlequicksearchbox U=0 StackId=1 sz=1}
      userId=0 effectiveUid=u0a38 mCallingUid=u0a38 mUserSetupComplete=true mCallingPackage=com.google.android.googlequicksearchbox
      affinity=com.google.android.googlequicksearchbox
      intent={act=android.search.action.GLOBAL_SEARCH cat=[com.google.android.googlequicksearchbox.category.SEARCH_WIDGET] flg=0x10008000 cmp=com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity}
      realActivity=com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity
      autoRemoveRecents=false isPersistable=true numFullscreen=1 taskType=0 mTaskToReturnTo=1
      rootWasReset=false mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{9a532e8 u0 com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity t23}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=null lastThumbnailFile=/data/system_ce/0/recent_images/23_task_thumbnail.png
      stackId=1
      hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE isResizeable=true firstActiveTime=1482740750756 lastActiveTime=1482740750756 (inactive for 21s)
      * Hist #0: ActivityRecord{9a532e8 u0 com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity t23}
          packageName=com.google.android.googlequicksearchbox processName=com.google.android.googlequicksearchbox:search
          launchedFromUid=10038 launchedFromPackage=com.google.android.googlequicksearchbox userId=0
          app=ProcessRecord{4fc1e83 14398:com.google.android.googlequicksearchbox:search/u0a38}
          Intent { act=android.search.action.GLOBAL_SEARCH cat=[com.google.android.googlequicksearchbox.category.SEARCH_WIDGET] flg=0x10008000 cmp=com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity bnds=[274,130][891,256] (has extras) }
          frontOfTask=true task=TaskRecord{293b1fa #23 A=com.google.android.googlequicksearchbox U=0 StackId=1 sz=1}
          taskAffinity=com.google.android.googlequicksearchbox
          realActivity=com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity
          baseDir=/system/priv-app/Velvet/Velvet.apk
          dataDir=/data/user/0/com.google.android.googlequicksearchbox
          stateNotNeeded=false componentSpecified=true mActivityType=0
          compat={420dpi} labelRes=0x7f0b025c icon=0x7f030003 theme=0x7f110228
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.8}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=ff4285f4
          launchFailed=false launchCount=1 lastLaunchTime=-21s671ms
          haveState=false icicle=null
          state=RESUMED stopped=false delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=true sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_NOT_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=2
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=true lastVisibleTime=-21s237ms
          connections=[ConnectionRecord{471b5fb u0 CR com.google.android.googlequicksearchbox/com.google.android.apps.gsa.search.core.service.SearchService:@bc4db8a}]
          resizeMode=RESIZE_MODE_RESIZEABLE
    Task id #17
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{efb4581 #17 A=com.android.dialer U=0 StackId=1 sz=1}
      userId=0 effectiveUid=u0a18 mCallingUid=u0a24 mUserSetupComplete=true mCallingPackage=com.blackberry.blackberrylauncher
      affinity=com.android.dialer
      intent={act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.android.dialer/.DialtactsActivity}
      origActivity=com.android.dialer/.DialtactsActivity
      realActivity=com.android.dialer/.DialtactsActivity
      autoRemoveRecents=false isPersistable=true numFullscreen=1 taskType=0 mTaskToReturnTo=1
      rootWasReset=true mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{c3dc89e u0 com.android.dialer/.DialtactsActivity t17}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=android.graphics.Bitmap@a7923ab lastThumbnailFile=/data/system_ce/0/recent_images/17_task_thumbnail.png
      stackId=1
      hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE isResizeable=true firstActiveTime=1482740750002 lastActiveTime=1482740750002 (inactive for 22s)
      * Hist #0: ActivityRecord{c3dc89e u0 com.android.dialer/.DialtactsActivity t17}
          packageName=com.android.dialer processName=com.android.dialer
          launchedFromUid=10024 launchedFromPackage=com.blackberry.blackberrylauncher userId=0
          app=ProcessRecord{6659781 18170:com.android.dialer/u0a18}
          Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.android.dialer/.DialtactsActivity }
          frontOfTask=true task=TaskRecord{efb4581 #17 A=com.android.dialer U=0 StackId=1 sz=1}
          taskAffinity=com.android.dialer
          realActivity=com.android.dialer/.DialtactsActivity
          baseDir=/system/priv-app/Dialer/Dialer.apk
          dataDir=/data/user/0/com.android.dialer
          stateNotNeeded=false componentSpecified=true mActivityType=0
          compat={420dpi} labelRes=0x7f0c02b1 icon=0x7f030001 theme=0x7f0d018e
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.8}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=ff0288d1
          launchFailed=false launchCount=0 lastLaunchTime=-3m7s195ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=11560]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=2
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-22s860ms
          connections=[]
          resizeMode=RESIZE_MODE_RESIZEABLE
    Task id #13
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{e5d3267 #13 A=com.android.chrome U=0 StackId=1 sz=1}
      userId=0 effectiveUid=u0a65 mCallingUid=u0a65 mUserSetupComplete=true mCallingPackage=com.android.chrome
      affinity=com.android.chrome
      intent={act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x14002000 cmp=com.android.chrome/org.chromium.chrome.browser.ChromeTabbedActivity}
      realActivity=com.android.chrome/org.chromium.chrome.browser.ChromeTabbedActivity
      autoRemoveRecents=false isPersistable=true numFullscreen=1 taskType=0 mTaskToReturnTo=1
      rootWasReset=false mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{13638cc u0 com.android.chrome/org.chromium.chrome.browser.ChromeTabbedActivity t13}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=null lastThumbnailFile=/data/system_ce/0/recent_images/13_task_thumbnail.png
      stackId=1
      hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE isResizeable=true firstActiveTime=1451667447154 lastActiveTime=1451667447154 (inactive for 31073325s)
      * Hist #0: ActivityRecord{13638cc u0 com.android.chrome/org.chromium.chrome.browser.ChromeTabbedActivity t13}
          packageName=com.android.chrome processName=com.android.chrome
          launchedFromUid=10065 launchedFromPackage=com.android.chrome userId=0
          app=ProcessRecord{55be056 15003:com.android.chrome/u0a65}
          Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x14002000 cmp=com.android.chrome/org.chromium.chrome.browser.ChromeTabbedActivity (has extras) }
          frontOfTask=true task=TaskRecord{e5d3267 #13 A=com.android.chrome U=0 StackId=1 sz=1}
          taskAffinity=com.android.chrome
          realActivity=com.android.chrome/org.chromium.chrome.browser.ChromeTabbedActivity
          baseDir=/system/app/Chrome/Chrome.apk
          dataDir=/data/user/0/com.android.chrome
          stateNotNeeded=false componentSpecified=true mActivityType=0
          compat={420dpi} labelRes=0x7f0a0479 icon=0x7f030000 theme=0x7f0e018b
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.8}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=fff5f5f5
          launchFailed=false launchCount=0 lastLaunchTime=-11m41s104ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=3796]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=2
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-11m36s804ms
          connections=[]
          resizeMode=RESIZE_MODE_RESIZEABLE
    Task id #10
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{5b40814 #10 I=com.android.settings/.Settings$WifiSettingsActivity U=0 StackId=1 sz=1}
      userId=0 effectiveUid=1000 mCallingUid=u0a31 mUserSetupComplete=true mCallingPackage=com.android.systemui
      intent={act=android.settings.WIFI_SETTINGS flg=0x14000000 cmp=com.android.settings/.Settings$WifiSettingsActivity}
      realActivity=com.android.settings/.Settings$WifiSettingsActivity
      autoRemoveRecents=false isPersistable=true numFullscreen=1 taskType=0 mTaskToReturnTo=1
      rootWasReset=false mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{9cd0add u0 com.android.settings/.Settings$WifiSettingsActivity t10}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=null lastThumbnailFile=/data/system_ce/0/recent_images/10_task_thumbnail.png
      stackId=1
      hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE isResizeable=true firstActiveTime=1451667348121 lastActiveTime=1451667348121 (inactive for 31073424s)
      * Hist #0: ActivityRecord{9cd0add u0 com.android.settings/.Settings$WifiSettingsActivity t10}
          packageName=com.android.settings processName=com.android.settings
          launchedFromUid=10031 launchedFromPackage=com.android.systemui userId=0
          app=ProcessRecord{d09f0af 6270:com.android.settings/1000}
          Intent { act=android.settings.WIFI_SETTINGS flg=0x14000000 cmp=com.android.settings/.Settings$WifiSettingsActivity }
          frontOfTask=true task=TaskRecord{5b40814 #10 I=com.android.settings/.Settings$WifiSettingsActivity U=0 StackId=1 sz=1}
          taskAffinity=null
          realActivity=com.android.settings/.Settings$WifiSettingsActivity
          baseDir=/system/priv-app/Settings/Settings.apk
          dataDir=/data/user_de/0/com.android.settings
          stateNotNeeded=false componentSpecified=false mActivityType=0
          compat={420dpi} labelRes=0x7f0b03c9 icon=0x7f0200fe theme=0x7f0f01df
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.8}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=ff263238
          launchFailed=false launchCount=0 lastLaunchTime=-44m9s146ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=5448]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=0
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-11m47s52ms
          resizeMode=RESIZE_MODE_RESIZEABLE
    Task id #9
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{b95b8bd #9 A=com.android.settings U=0 StackId=1 sz=3}
      userId=0 effectiveUid=1000 mCallingUid=u0a31 mUserSetupComplete=true mCallingPackage=com.android.systemui
      affinity=com.android.settings
      intent={act=android.settings.SETTINGS flg=0x14000000 cmp=com.android.settings/.Settings}
      realActivity=com.android.settings/.Settings
      autoRemoveRecents=false isPersistable=true numFullscreen=3 taskType=0 mTaskToReturnTo=0
      rootWasReset=false mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{b86d409 u0 com.android.settings/.Settings t9}, ActivityRecord{8b2d4f7 u0 com.android.settings/.Settings$ManageApplicationsActivity t9}, ActivityRecord{959fc98 u0 com.android.settings/.SubSettings t9}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=null lastThumbnailFile=/data/system_ce/0/recent_images/9_task_thumbnail.png
      stackId=1
      hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE isResizeable=true firstActiveTime=1451663917119 lastActiveTime=1451663917119 (inactive for 31076855s)
      * Hist #2: ActivityRecord{959fc98 u0 com.android.settings/.SubSettings t9}
          packageName=com.android.settings processName=com.android.settings
          launchedFromUid=1000 launchedFromPackage=com.android.settings userId=0
          app=ProcessRecord{d09f0af 6270:com.android.settings/1000}
          Intent { act=android.intent.action.MAIN cmp=com.android.settings/.SubSettings (has extras) }
          frontOfTask=false task=TaskRecord{b95b8bd #9 A=com.android.settings U=0 StackId=1 sz=3}
          taskAffinity=com.android.settings
          realActivity=com.android.settings/.SubSettings
          baseDir=/system/priv-app/Settings/Settings.apk
          dataDir=/data/user_de/0/com.android.settings
          stateNotNeeded=false componentSpecified=true mActivityType=0
          compat={420dpi} labelRes=0x7f0b0282 icon=0x7f030000 theme=0x7f0f01df
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.8}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          resultTo=ActivityRecord{8b2d4f7 u0 com.android.settings/.Settings$ManageApplicationsActivity t9} resultWho=null resultCode=1
          taskDescription: iconFilename=null label=&quot;null&quot; color=ff263238
          launchFailed=false launchCount=0 lastLaunchTime=-44m14s649ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=4536]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_NOT_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=0
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-44m14s57ms
          resizeMode=RESIZE_MODE_RESIZEABLE
      * Hist #1: ActivityRecord{8b2d4f7 u0 com.android.settings/.Settings$ManageApplicationsActivity t9}
          packageName=com.android.settings processName=com.android.settings
          launchedFromUid=1000 launchedFromPackage=com.android.settings userId=0
          app=ProcessRecord{d09f0af 6270:com.android.settings/1000}
          Intent { flg=0x8000 cmp=com.android.settings/.Settings$ManageApplicationsActivity (has extras) }
          frontOfTask=false task=TaskRecord{b95b8bd #9 A=com.android.settings U=0 StackId=1 sz=3}
          taskAffinity=null
          realActivity=com.android.settings/.Settings$ManageApplicationsActivity
          baseDir=/system/priv-app/Settings/Settings.apk
          dataDir=/data/user_de/0/com.android.settings
          stateNotNeeded=false componentSpecified=true mActivityType=0
          compat={420dpi} labelRes=0x7f0b0688 icon=0x7f0200db theme=0x7f0f01df
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.8}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=ff263238
          launchFailed=false launchCount=0 lastLaunchTime=-45m10s934ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=3240]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_NOT_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=0
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-44m15s825ms
          resizeMode=RESIZE_MODE_RESIZEABLE
      * Hist #0: ActivityRecord{b86d409 u0 com.android.settings/.Settings t9}
          packageName=com.android.settings processName=com.android.settings
          launchedFromUid=10031 launchedFromPackage=com.android.systemui userId=0
          app=ProcessRecord{d09f0af 6270:com.android.settings/1000}
          Intent { act=android.settings.SETTINGS flg=0x14000000 cmp=com.android.settings/.Settings }
          frontOfTask=true task=TaskRecord{b95b8bd #9 A=com.android.settings U=0 StackId=1 sz=3}
          taskAffinity=com.android.settings
          realActivity=com.android.settings/.Settings
          baseDir=/system/priv-app/Settings/Settings.apk
          dataDir=/data/user_de/0/com.android.settings
          stateNotNeeded=false componentSpecified=false mActivityType=0
          compat={420dpi} labelRes=0x7f0b0283 icon=0x7f030000 theme=0x7f0f01df
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.8}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=ff263238
          launchFailed=false launchCount=0 lastLaunchTime=-45m13s455ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=1872]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=2
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-45m12s719ms
          resizeMode=RESIZE_MODE_RESIZEABLE
    Task id #8
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{c376eb2 #8 A=com.looklook.xinghongfei.looklook U=0 StackId=1 sz=1}
      userId=0 effectiveUid=u0a99 mCallingUid=2000 mUserSetupComplete=true mCallingPackage=null
      affinity=com.looklook.xinghongfei.looklook
      intent={act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.looklook.xinghongfei.looklook/.MainActivity}
      realActivity=com.looklook.xinghongfei.looklook/.MainActivity
      autoRemoveRecents=false isPersistable=true numFullscreen=1 taskType=0 mTaskToReturnTo=1
      rootWasReset=false mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{e550c04 u0 com.looklook.xinghongfei.looklook/.MainActivity t8}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=null lastThumbnailFile=/data/system_ce/0/recent_images/8_task_thumbnail.png
      stackId=1
      hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE isResizeable=true firstActiveTime=1451663747378 lastActiveTime=1451663747378 (inactive for 31077025s)
      * Hist #0: ActivityRecord{e550c04 u0 com.looklook.xinghongfei.looklook/.MainActivity t8}
          packageName=com.looklook.xinghongfei.looklook processName=com.looklook.xinghongfei.looklook
          launchedFromUid=2000 launchedFromPackage=null userId=0
          app=ProcessRecord{7008e03 14361:com.looklook.xinghongfei.looklook/u0a99}
          Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.looklook.xinghongfei.looklook/.MainActivity }
          frontOfTask=true task=TaskRecord{c376eb2 #8 A=com.looklook.xinghongfei.looklook U=0 StackId=1 sz=1}
          taskAffinity=com.looklook.xinghongfei.looklook
          realActivity=com.looklook.xinghongfei.looklook/.MainActivity
          baseDir=/data/app/com.looklook.xinghongfei.looklook-1/base.apk
          dataDir=/data/user/0/com.looklook.xinghongfei.looklook
          stateNotNeeded=false componentSpecified=true mActivityType=0
          compat={420dpi} labelRes=0x7f09002d icon=0x7f020058 theme=0x7f0b00d7
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.8}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=ff69f0ae
          launchFailed=false launchCount=0 lastLaunchTime=-45m39s213ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=3036]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=0
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-45m21s707ms
          resizeMode=RESIZE_MODE_RESIZEABLE
    Task id #2
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{fd39180 #2 A=com.android.wizard U=0 StackId=1 sz=4}
      userId=0 effectiveUid=2917 mCallingUid=u0a30 mUserSetupComplete=false mCallingPackage=com.google.android.setupwizard
      affinity=com.android.wizard
      intent={act=com.blackberry.oobe.AGREEMENT dat=oobe://com.blackberry.oobe.agreement flg=0x14000000 cmp=com.blackberry.oobe/.activities.OOBEAgreementActivity}
      realActivity=com.blackberry.oobe/.activities.OOBEAgreementActivity
      autoRemoveRecents=true isPersistable=true numFullscreen=4 taskType=0 mTaskToReturnTo=1
      rootWasReset=false mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{bbe22e1 u0 com.blackberry.oobe/.activities.OOBEAgreementActivity t2}, ActivityRecord{f6d4421 u0 com.blackberry.oobe/.activities.OOBEMarketingActivity t2}, ActivityRecord{ee0ed3a u0 com.blackberry.oobe/.activities.OOBECCLActivity t2}, ActivityRecord{45f979b u0 com.blackberry.oobe/.activities.OOBEAllSetActivity t2}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=null lastThumbnailFile=/data/system_ce/0/recent_images/2_task_thumbnail.png
      stackId=1
      hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE isResizeable=true firstActiveTime=1451649626266 lastActiveTime=1451649626266 (inactive for 31091146s)
      * Hist #3: ActivityRecord{45f979b u0 com.blackberry.oobe/.activities.OOBEAllSetActivity t2}
          packageName=com.blackberry.oobe processName=com.blackberry.oobe
          launchedFromUid=10030 launchedFromPackage=com.google.android.setupwizard userId=0
          app=ProcessRecord{c6a23b9 5120:com.blackberry.oobe/2917}
          Intent { act=com.blackberry.oobe.ALL_SET flg=0x4000000 cmp=com.blackberry.oobe/.activities.OOBEAllSetActivity (has extras) }
          frontOfTask=false task=TaskRecord{fd39180 #2 A=com.android.wizard U=0 StackId=1 sz=4}
          taskAffinity=com.android.wizard
          realActivity=com.blackberry.oobe/.activities.OOBEAllSetActivity
          baseDir=/system/priv-app/oobe/oobe.apk
          dataDir=/data/user/0/com.blackberry.oobe
          stateNotNeeded=false componentSpecified=false mActivityType=0
          compat={420dpi} labelRes=0x7f08001a icon=0x7f02000d theme=0x7f090004
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.6}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=fff5f5f5
          results=[ResultInfo{who=null, request=10000, result=0, data=null}]
          launchFailed=false launchCount=0 lastLaunchTime=-4h40m36s100ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=1688]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_NOT_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=0
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-4h40m35s449ms
          resizeMode=RESIZE_MODE_RESIZEABLE
      * Hist #2: ActivityRecord{ee0ed3a u0 com.blackberry.oobe/.activities.OOBECCLActivity t2}
          packageName=com.blackberry.oobe processName=com.blackberry.oobe
          launchedFromUid=10030 launchedFromPackage=com.google.android.setupwizard userId=0
          app=ProcessRecord{c6a23b9 5120:com.blackberry.oobe/2917}
          Intent { act=com.blackberry.oobe.CCL flg=0x4000000 cmp=com.blackberry.oobe/.activities.OOBECCLActivity (has extras) }
          frontOfTask=false task=TaskRecord{fd39180 #2 A=com.android.wizard U=0 StackId=1 sz=4}
          taskAffinity=com.android.wizard
          realActivity=com.blackberry.oobe/.activities.OOBECCLActivity
          baseDir=/system/priv-app/oobe/oobe.apk
          dataDir=/data/user/0/com.blackberry.oobe
          stateNotNeeded=false componentSpecified=false mActivityType=0
          compat={420dpi} labelRes=0x7f08001f icon=0x7f02000d theme=0x7f090004
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.6}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=fff5f5f5
          results=[ResultInfo{who=null, request=10000, result=0, data=null}]
          launchFailed=false launchCount=0 lastLaunchTime=-4h40m39s115ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=1908]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_NOT_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=0
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-4h40m38s438ms
          resizeMode=RESIZE_MODE_RESIZEABLE
      * Hist #1: ActivityRecord{f6d4421 u0 com.blackberry.oobe/.activities.OOBEMarketingActivity t2}
          packageName=com.blackberry.oobe processName=com.blackberry.oobe
          launchedFromUid=10030 launchedFromPackage=com.google.android.setupwizard userId=0
          app=ProcessRecord{c6a23b9 5120:com.blackberry.oobe/2917}
          Intent { act=com.blackberry.oobe.MARKETING flg=0x4000000 cmp=com.blackberry.oobe/.activities.OOBEMarketingActivity (has extras) }
          frontOfTask=false task=TaskRecord{fd39180 #2 A=com.android.wizard U=0 StackId=1 sz=4}
          taskAffinity=com.android.wizard
          realActivity=com.blackberry.oobe/.activities.OOBEMarketingActivity
          baseDir=/system/priv-app/oobe/oobe.apk
          dataDir=/data/user/0/com.blackberry.oobe
          stateNotNeeded=false componentSpecified=false mActivityType=0
          compat={420dpi} labelRes=0x7f08002b icon=0x7f02000d theme=0x7f090004
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.6}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=fff5f5f5
          results=[ResultInfo{who=null, request=10000, result=0, data=null}]
          launchFailed=false launchCount=0 lastLaunchTime=-4h40m40s435ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=1820]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_NOT_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=0
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-4h40m39s741ms
          resizeMode=RESIZE_MODE_RESIZEABLE
      * Hist #0: ActivityRecord{bbe22e1 u0 com.blackberry.oobe/.activities.OOBEAgreementActivity t2}
          packageName=com.blackberry.oobe processName=com.blackberry.oobe
          launchedFromUid=10030 launchedFromPackage=com.google.android.setupwizard userId=0
          app=ProcessRecord{c6a23b9 5120:com.blackberry.oobe/2917}
          Intent { act=com.blackberry.oobe.AGREEMENT dat=oobe://com.blackberry.oobe.agreement flg=0x14000000 cmp=com.blackberry.oobe/.activities.OOBEAgreementActivity (has extras) }
          frontOfTask=true task=TaskRecord{fd39180 #2 A=com.android.wizard U=0 StackId=1 sz=4}
          taskAffinity=com.android.wizard
          realActivity=com.blackberry.oobe/.activities.OOBEAgreementActivity
          baseDir=/system/priv-app/oobe/oobe.apk
          dataDir=/data/user/0/com.blackberry.oobe
          stateNotNeeded=false componentSpecified=false mActivityType=0
          compat={420dpi} labelRes=0x7f08000e icon=0x7f02000d theme=0x7f090004
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.6}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=fff5f5f5
          results=[ResultInfo{who=null, request=10000, result=0, data=null}]
          launchFailed=false launchCount=0 lastLaunchTime=-4h40m44s51ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=2076]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=2
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=APPLICATION_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-4h40m43s699ms
          resizeMode=RESIZE_MODE_RESIZEABLE

    Running activities (most recent first):
      TaskRecord{293b1fa #23 A=com.google.android.googlequicksearchbox U=0 StackId=1 sz=1}
        Run #11: ActivityRecord{9a532e8 u0 com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity t23}
      TaskRecord{efb4581 #17 A=com.android.dialer U=0 StackId=1 sz=1}
        Run #10: ActivityRecord{c3dc89e u0 com.android.dialer/.DialtactsActivity t17}
      TaskRecord{e5d3267 #13 A=com.android.chrome U=0 StackId=1 sz=1}
        Run #9: ActivityRecord{13638cc u0 com.android.chrome/org.chromium.chrome.browser.ChromeTabbedActivity t13}
      TaskRecord{5b40814 #10 I=com.android.settings/.Settings$WifiSettingsActivity U=0 StackId=1 sz=1}
        Run #8: ActivityRecord{9cd0add u0 com.android.settings/.Settings$WifiSettingsActivity t10}
      TaskRecord{b95b8bd #9 A=com.android.settings U=0 StackId=1 sz=3}
        Run #7: ActivityRecord{959fc98 u0 com.android.settings/.SubSettings t9}
        Run #6: ActivityRecord{8b2d4f7 u0 com.android.settings/.Settings$ManageApplicationsActivity t9}
        Run #5: ActivityRecord{b86d409 u0 com.android.settings/.Settings t9}
      TaskRecord{c376eb2 #8 A=com.looklook.xinghongfei.looklook U=0 StackId=1 sz=1}
        Run #4: ActivityRecord{e550c04 u0 com.looklook.xinghongfei.looklook/.MainActivity t8}
      TaskRecord{fd39180 #2 A=com.android.wizard U=0 StackId=1 sz=4}
        Run #3: ActivityRecord{45f979b u0 com.blackberry.oobe/.activities.OOBEAllSetActivity t2}
        Run #2: ActivityRecord{ee0ed3a u0 com.blackberry.oobe/.activities.OOBECCLActivity t2}
        Run #1: ActivityRecord{f6d4421 u0 com.blackberry.oobe/.activities.OOBEMarketingActivity t2}
        Run #0: ActivityRecord{bbe22e1 u0 com.blackberry.oobe/.activities.OOBEAgreementActivity t2}

    mResumedActivity: ActivityRecord{9a532e8 u0 com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity t23}

  Stack #0:
  mFullscreen=true
  mBounds=null
    Task id #4
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{a29c3fe #4 I=com.blackberry.blackberrylauncher/.MainActivity U=0 StackId=0 sz=1}
      userId=0 effectiveUid=u0a24 mCallingUid=1000 mUserSetupComplete=true mCallingPackage=android
      intent={act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x13208000 cmp=com.blackberry.blackberrylauncher/.MainActivity}
      realActivity=com.blackberry.blackberrylauncher/.MainActivity
      autoRemoveRecents=false isPersistable=true numFullscreen=1 taskType=1 mTaskToReturnTo=0
      rootWasReset=true mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{daeaf03 u0 com.blackberry.blackberrylauncher/.MainActivity t4}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=null lastThumbnailFile=/data/system_ce/0/recent_images/4_task_thumbnail.png
      stackId=0
      hasBeenVisible=true mResizeMode=RESIZE_MODE_UNRESIZEABLE isResizeable=false firstActiveTime=1482740750741 lastActiveTime=1482740750741 (inactive for 21s)
      * Hist #0: ActivityRecord{daeaf03 u0 com.blackberry.blackberrylauncher/.MainActivity t4}
          packageName=com.blackberry.blackberrylauncher processName=com.blackberry.blackberrylauncher
          launchedFromUid=10030 launchedFromPackage=com.google.android.setupwizard userId=0
          app=ProcessRecord{a78c3fc 2751:com.blackberry.blackberrylauncher/u0a24}
          Intent { act=android.intent.action.MAIN cat=[android.intent.category.HOME] flg=0x13208000 cmp=com.blackberry.blackberrylauncher/.MainActivity }
          frontOfTask=true task=TaskRecord{a29c3fe #4 I=com.blackberry.blackberrylauncher/.MainActivity U=0 StackId=0 sz=1}
          taskAffinity=null
          realActivity=com.blackberry.blackberrylauncher/.MainActivity
          baseDir=/system/priv-app/BlackBerryLauncher/BlackBerryLauncher.apk
          dataDir=/data/user/0/com.blackberry.blackberrylauncher
          stateNotNeeded=false componentSpecified=true mActivityType=1
          compat={420dpi} labelRes=0x7f0b01b8 icon=0x7f0200e2 theme=0x7f0e0039
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.6}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=ffffffff
          launchFailed=false launchCount=0 lastLaunchTime=-4h40m9s358ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=154644]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=2
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=HOME_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-22s59ms
          resizeMode=RESIZE_MODE_UNRESIZEABLE

    Task id #7
    mFullscreen=true
    mBounds=null
    mMinWidth=-1
    mMinHeight=-1
    mLastNonFullscreenBounds=null
    * TaskRecord{1f4075f #7 A=com.android.systemui U=0 StackId=0 sz=1}
      userId=0 effectiveUid=u0a31 mCallingUid=u0a31 mUserSetupComplete=true mCallingPackage=com.android.systemui
      affinity=com.android.systemui
      intent={flg=0x10804000 cmp=com.android.systemui/.recents.RecentsActivity}
      realActivity=com.android.systemui/.recents.RecentsActivity
      autoRemoveRecents=false isPersistable=false numFullscreen=1 taskType=2 mTaskToReturnTo=1
      rootWasReset=false mNeverRelinquishIdentity=true mReuseTask=false mLockTaskAuth=LOCK_TASK_AUTH_PINNABLE
      Activities=[ActivityRecord{cd6082b u0 com.android.systemui/.recents.RecentsActivity t7}]
      askedCompatMode=false inRecents=true isAvailable=true
      lastThumbnail=null lastThumbnailFile=/data/system_ce/0/recent_images/7_task_thumbnail.png
      stackId=0
      hasBeenVisible=true mResizeMode=RESIZE_MODE_RESIZEABLE isResizeable=true firstActiveTime=1482740221743 lastActiveTime=1482740221743 (inactive for 550s)
      * Hist #0: ActivityRecord{cd6082b u0 com.android.systemui/.recents.RecentsActivity t7}
          packageName=com.android.systemui processName=com.android.systemui
          launchedFromUid=10031 launchedFromPackage=com.android.systemui userId=0
          app=ProcessRecord{836a579 1909:com.android.systemui/u0a31}
          Intent { flg=0x10804000 cmp=com.android.systemui/.recents.RecentsActivity }
          frontOfTask=true task=TaskRecord{1f4075f #7 A=com.android.systemui U=0 StackId=0 sz=1}
          taskAffinity=com.android.systemui
          realActivity=com.android.systemui/.recents.RecentsActivity
          baseDir=/system/priv-app/SystemUI/SystemUI.apk
          dataDir=/data/user_de/0/com.android.systemui
          stateNotNeeded=true componentSpecified=true mActivityType=2
          compat={420dpi} labelRes=0x7f0b0248 icon=0x7f020183 theme=0x7f1301d1
          config={1.0 ?mcc?mnc [en_US] ldltr sw411dp w411dp h593dp 420dpi nrml port finger qwerty/v/v -nav/h s.8}
          taskConfigOverride={1.0 ?mcc?mnc ?localeList ?layoutDir ?swdp ?wdp ?hdp ?density ?lsize ?long ?orien ?uimode ?night ?touch ?keyb/?/? ?nav/?}
          taskDescription: iconFilename=null label=&quot;null&quot; color=ff212121
          launchFailed=false launchCount=0 lastLaunchTime=-4h39m45s514ms
          haveState=true icicle=Bundle[mParcelledData.dataSize=784]
          state=STOPPED stopped=true delayedResume=false finishing=false
          keysPaused=false inHistory=true visible=false sleeping=false idle=true mStartingWindowState=STARTING_WINDOW_NOT_SHOWN
          fullscreen=true noDisplay=false immersive=false launchMode=3
          frozenBeforeDestroy=false forceNewConfig=false
          mActivityType=RECENTS_ACTIVITY_TYPE
          waitingVisible=false nowVisible=false lastVisibleTime=-9m11s93ms
          resizeMode=RESIZE_MODE_RESIZEABLE

    Running activities (most recent first):
      TaskRecord{a29c3fe #4 I=com.blackberry.blackberrylauncher/.MainActivity U=0 StackId=0 sz=1}
        Run #1: ActivityRecord{daeaf03 u0 com.blackberry.blackberrylauncher/.MainActivity t4}
      TaskRecord{1f4075f #7 A=com.android.systemui U=0 StackId=0 sz=1}
        Run #0: ActivityRecord{cd6082b u0 com.android.systemui/.recents.RecentsActivity t7}

    mLastPausedActivity: ActivityRecord{daeaf03 u0 com.blackberry.blackberrylauncher/.MainActivity t4}

  mFocusedActivity: ActivityRecord{9a532e8 u0 com.google.android.googlequicksearchbox/com.google.android.apps.gsa.searchnow.SearchNowActivity t23}
  mFocusedStack=ActivityStack{1a045ac stackId=1, 7 tasks} mLastFocusedStack=ActivityStack{1a045ac stackId=1, 7 tasks}
  mSleepTimeout=false
  mCurTaskIdForUser={0=23}
  mUserStackInFront={}
  mActivityContainers={0=ActivtyContainer{0}A, 1=ActivtyContainer{1}A}
  mLockTaskModeState=NONE mLockTaskPackages (userId:packages)=
    0:[]
 mLockTaskModeTasks[]
huzhengyu@51187-26-1:~$ 
</rich_text>
			</node>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="笔记" prog_lang="custom-colors" readonly="False" tags="" unique_id="13">
		<rich_text>Activity四种启动模式， Fragment生命周期， Fragment与Activity之间的关系
动画：矢量动画，属性动画

05-24 15:05:18.610 26005 26417 W OpenGLRenderer: Incorrectly called buildLayer on View: ShortcutAndWidgetContainer, destroying layer...
05-24 15:05:18.610 26005 26417 W OpenGLRenderer: Incorrectly called buildLayer on View: ShortcutAndWidgetContainer, destroying layer...


这个问题主要分为三个部分
</rich_text>
		<rich_text foreground="#FF0000">1.联系人ANR</rich_text>
		<rich_text>
这部分有Logcat 没有相应trace 
  05-24 14:25:59.738  1504  1518 I am_anr  :  [0,2627,com.android.contacts,952680005,Input dispatching timed out  (Waiting to send non-key event because the touched window has not  finished processing certain input events that were delivered to it over  500.0ms ago.  Wait queue length: 2.  Wait queue head age: 6164.8ms.)]

 
</rich_text>
		<rich_text foreground="#FF0000">2.电量Power按键，发现无法点亮，时间点在2016/05/24 15：05左右</rich_text>
		<rich_text>

Logcat在这个时间点内没有出现异常的Log，唯一出现的是一个onetouch feedback保存ANR的Log，但是/anr 目录下已经没有文件。推测应该是出现了一个未知的ANR

 05-24 15:05:32.822 28285  2935 E TctFeedback: command: cp -r /data/anr /sdcard/BugReport/
 
</rich_text>
		<rich_text foreground="#FF0000">3 .插上数据线，发生重启，时间节点在2016/0524 15:35左右(alpha用户描述)</rich_text>
		<rich_text>

 查阅15：00 ～16：00 Logcat， 没有找到任何重启的Log


@lailai 

我现在打算提交的patch能够完成这样的情况：
在它反复切换的时候，无论出现怎样的情况都不会出现这个窗口消失的情况。
但 是有一个问题，就是在出现变态的几秒没恢复USB连接的时候拔掉数据线，窗口不会自动消失，需要手动点击cancle关闭。因为拔出USB窗口消失本身需 要监听connected -&gt;  disconnected这个状态变更才能实现，而在那变态几秒中拔出USB的时候其实USB已经处于断开的状态，不会再出现状态的变更，所以其实是符合 逻辑的。
好在这个并不是会经常出现 ，而且用户不会像测试一样如此频繁的去切换，也不太可能正好在切到变态几秒的时候突然想到去拔掉USB，哪怕他

 
偶然看到4S上你也有报过这个问题，也有一个解决方案，但是相应的方案并不是很好，在CN也不适用，因为CN的条件更加恶劣了。我先提交上去，你看下能否接受吧


06-17 08:47:19.340  1934  2690 D MediaScanner: MSDebug  prescan time: 18885ms
06-17 08:47:19.340  1934  2690 D MediaScanner: MSDebug    scan time: 74700ms
06-17 08:47:19.340  1934  2690 D MediaScanner: MSDebug postscan time: 14ms
06-17 08:47:19.340  1934  2690 D MediaScanner: MSDebug   total time: 93599ms

06-17 08:45:45.340  1934  2690 D MediaScanner: MSDebug  prescan time: 29398ms
06-17 08:45:45.341  1934  2690 D MediaScanner: MSDebug    scan time: 943433ms
06-17 08:45:45.341  1934  2690 D MediaScanner: MSDebug postscan time: 12ms
06-17 08:45:45.341  1934  2690 D MediaScanner: MSDebug   total time: 972843ms

06-17 08:45:45.651  1934  2690 D MediaScanner: MSDebug  prescan time: 88ms
06-17 08:45:45.651  1934  2690 D MediaScanner: MSDebug    scan time: 159ms
06-17 08:45:45.652  1934  2690 D MediaScanner: MSDebug postscan time: 0ms
06-17 08:45:45.652  1934  2690 D MediaScanner: MSDebug   total time: 247ms

17.77815 min



重启以后出现android is starting，属于android原生设计：

此提示框会在以下的几种情况下会出现此框：
1. 盘符挂载有一个72小时的维护周期，超过72小时之后，再开机，就会出现此框，然后系统去做盘符维护和检测，
    第一次开机或者恢复出长设置后，再开机会出现是因为，第一次开机后的时间是很早的，进入系统后，时间会被重新设置，另外手机联网后的时间
    也会变更一次，就可能超过72小时，所以会出现。
2. 另外一种是安装了一些应用，这些应用的dex优化会被delay操作，等下次开机的时候去优化，在优化的时候就会有框出现。
 


08-26 15:48:39.103  1489  1503 E ActivityManager: ANR in com.tencent.mm
08-26 15:48:39.103  1489  1503 E ActivityManager: PID: 5725
08-26 15:48:39.103  1489  1503 E ActivityManager: Reason: executing service com.tencent.mm/.booter.NotifyReceiver$NotifyService
08-26 15:48:39.103  1489  1503 E ActivityManager: Load: 12.32 / 10.0 / 7.5
08-26 15:48:39.103  1489  1503 E ActivityManager: CPU usage from 0ms to 12800ms later:
08-26 15:48:39.103  1489  1503 E ActivityManager:   33% 1489/system_server: 7.7% user + 26% kernel / faults: 11300 minor 38 major
08-26 15:48:39.103  1489  1503 E ActivityManager:   22% 8556/com.example.filleventtests: 10% user + 11% kernel / faults: 2343 minor 1 major
08-26 15:48:39.103  1489  1503 E ActivityManager:   11% 2016/com.android.systemui: 8.7% user + 3.2% kernel / faults: 6050 minor 7 major
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 659/debuggerd: 0% user + 0% kernel / faults: 21835 minor 12 major
08-26 15:48:39.103  1489  1503 E ActivityManager:   8.6% 5725/com.tencent.mm: 3.2% user + 5.4% kernel / faults: 3096 minor 25 major
08-26 15:48:39.103  1489  1503 E ActivityManager:   5.6% 2512/com.android.phone: 1.7% user + 3.8% kernel / faults: 5682 minor 17 major
08-26 15:48:39.103  1489  1503 E ActivityManager:   5% 487/surfaceflinger: 2.9% user + 2% kernel / faults: 55 minor
08-26 15:48:39.103  1489  1503 E ActivityManager:   4.2% 127/kswapd0: 0% user + 4.2% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   2.8% 995/kworker/u8:14: 0% user + 2.8% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   1.4% 339/mmc-cmdqd/0: 0% user + 1.4% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   1.2% 8643/kworker/u8:9: 0% user + 1.2% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   1.1% 432/logd: 0.4% user + 0.7% kernel / faults: 12 minor
08-26 15:48:39.103  1489  1503 E ActivityManager:   1.1% 8642/kworker/u8:8: 0% user + 1.1% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 660/debuggerd64: 0% user + 0% kernel / faults: 4617 minor 8 major
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.9% 7866/kworker/u8:4: 0% user + 0.9% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.8% 7/rcu_preempt: 0% user + 0.8% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.7% 6871/mdss_fb0: 0% user + 0.7% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.1% 6/kworker/u8:0: 0% user + 0.1% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.7% 5921/logcat: 0.4% user + 0.2% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.1% 2442/com.android.nfc: 0% user + 0% kernel / faults: 1861 minor 4 major
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.5% 486/servicemanager: 0% user + 0.4% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.5% 2418/com.tct.securitycenter: 0% user + 0.4% kernel / faults: 1606 minor 4 major
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.4% 41/smem_native_rpm: 0% user + 0.4% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.4% 307/cfinteractive: 0% user + 0.4% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 2400/com.quicinc.cne.CNEService: 0% user + 0% kernel / faults: 1846 minor 3 major
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.4% 2466/com.qti.dpmserviceapp: 0.4% user + 0% kernel / faults: 1598 minor 1 major
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 2505/com.qualcomm.qti.services.secureui:sui_service: 0% user + 0% kernel / faults: 1283 minor 3 major
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.3% 3072/perfd: 0% user + 0.3% kernel / faults: 23 minor
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.3% 3/ksoftirqd/0: 0% user + 0.3% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.3% 20/ksoftirqd/3: 0% user + 0.3% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.3% 46/irq/175-cpr3: 0% user + 0.3% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.3% 456/kworker/0:3: 0% user + 0.3% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.3% 2430/com.waves.maxxservice: 0.3% user + 0% kernel / faults: 994 minor 1 major
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 2472/com.quicinc.wbcserviceapp: 0% user + 0% kernel / faults: 1384 minor 1 major
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.3% 2489/com.qualcomm.qti.tetherservice: 0% user + 0.2% kernel / faults: 1358 minor 3 major
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.3% 8644/kworker/u8:10: 0% user + 0.3% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.2% 12/ksoftirqd/1: 0% user + 0.2% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.2% 16/ksoftirqd/2: 0% user + 0.2% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.2% 506/mm-pp-dpps: 0% user + 0.1% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 2394/com.tct.camera3: 0% user + 0% kernel / faults: 997 minor
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 8/rcu_sched: 0% user + 0% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.1% 524/sensors.qcom: 0% user + 0% kernel / faults: 2 minor
08-26 15:48:39.103  1489  1503 E ActivityManager:   0.1% 8612/irq/22-408000.q: 0% user + 0.1% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 10/migration/0: 0% user + 0% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 11/migration/1: 0% user + 0% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 33/kworker/2:1: 0% user + 0% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 43/kworker/0:1: 0% user + 0% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 74/system: 0% user + 0% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 286/irq/160-tsens_i: 0% user + 0% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 338/kworker/3:3: 0% user + 0% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 414/kworker/0:1H: 0% user + 0% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 428/kworker/1:3: 0% user + 0% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 654/jbd2/dm-1-8: 0% user + 0% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 661/rild: 0% user + 0% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 663/mediaserver: 0% user + 0% kernel / faults: 17 minor
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 675/thermal-engine: 0% user + 0% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 690/kworker/3:2H: 0% user + 0% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 2291/com.tcl.mie.tlauncher: 0% user + 0% kernel / faults: 254 minor
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 2610/com.android.contacts: 0% user + 0% kernel / faults: 42 minor
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 3016/smcd: 0% user + 0% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 6859/kworker/u8:3: 0% user + 0% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   0% 6891/com.tencent.mm:tools: 0% user + 0% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager: 67% TOTAL: 9.5% user + 18% kernel + 38% iowait + 0.5% irq + 0.8% softirq
08-26 15:48:39.103  1489  1503 E ActivityManager: CPU usage from 11979ms to 12500ms later:
08-26 15:48:39.103  1489  1503 E ActivityManager:   22% 2016/com.android.systemui: 19% user + 3.2% kernel / faults: 561 minor
08-26 15:48:39.103  1489  1503 E ActivityManager:     14% 3039/RenderThread: 12% user + 1.6% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:     6.4% 2016/ndroid.systemui: 6.4% user + 0% kernel
08-26 15:48:39.103  1489  1503 E ActivityManager:   9.5% 1489/system_server: 7.6% user + 1.9% kernel / faults: 28 minor
08-26 15:48:39.106  1489  1511 D AutomaticBrightnessController: updateAmbientLux:  mScreenAutoBrightnessDropAndUpQuicklyCo








</rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Demo" prog_lang="custom-colors" readonly="False" tags="" unique_id="59">
			<rich_text></rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="添加dropbox" prog_lang="custom-colors" readonly="False" tags="" unique_id="111">
				<rich_text>/data/system/dropbox/

添加Log到dropbox
        mDropbox = (DropBoxManager)mContext.getSystemService(Context.DROPBOX_SERVICE);   

                           if(data != null &amp;&amp;(data.endsWith(&quot;DCIM&quot;)|data.endsWith(&quot;Pictures&quot;)|data.endsWith(&quot;Camera&quot;)){
                                    String tag = &quot;zhengyuDebugforMediaProvider&quot;;
                                    String text = &quot;CallingPackage: &quot;+getCallingPackageOrSelf()+&quot;\n&quot; +
                                                &quot;stack: &quot;+Debug.getCallers(5) + &quot;\n&quot; +
                                                &quot;delete data: &quot;+data;                                                               
                                    mDropbox.addText(tag,text);
                                }
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="分享" prog_lang="custom-colors" readonly="False" tags="" unique_id="39">
				<rich_text>       
  Uri imageUri = Uri.parse(</rich_text>
				<rich_text foreground="#6a8759">&quot;content://media/external/images/media/52&quot;</rich_text>
				<rich_text>);</rich_text>
				<rich_text foreground="#cc7832">
  </rich_text>
				<rich_text>Intent intent = </rich_text>
				<rich_text foreground="#cc7832">new </rich_text>
				<rich_text>Intent(Intent.</rich_text>
				<rich_text foreground="#9876aa">ACTION_SEND</rich_text>
				<rich_text>)</rich_text>
				<rich_text foreground="#cc7832">;
  </rich_text>
				<rich_text>intent.setType(</rich_text>
				<rich_text foreground="#6a8759">&quot;image/*&quot;</rich_text>
				<rich_text>)</rich_text>
				<rich_text foreground="#cc7832">;
  </rich_text>
				<rich_text>intent.putExtra(Intent.</rich_text>
				<rich_text foreground="#9876aa">EXTRA_STREAM</rich_text>
				<rich_text foreground="#cc7832">, </rich_text>
				<rich_text>imageUri)</rich_text>
				<rich_text foreground="#cc7832">;
  </rich_text>
				<rich_text>startActivity(Intent.createChooser(intent</rich_text>
				<rich_text foreground="#cc7832">, </rich_text>
				<rich_text foreground="#6a8759">&quot;share&quot;</rich_text>
				<rich_text>))</rich_text>
				<rich_text foreground="#cc7832">;</rich_text>
				<rich_text>
        
   startActivity发送的Intent为 
ActivityManager: START u0 {act=android.intent.action.CHOOSER cmp=android/com.android.internal.app.ChooserActivity (has extras)} from uid 10095 on display 0

</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="创建文件" prog_lang="custom-colors" readonly="False" tags="" unique_id="8">
				<rich_text>String fileName = </rich_text>
				<rich_text foreground="#9876aa" style="italic">prefix</rich_text>
				<rich_text foreground="#9876aa">+</rich_text>
				<rich_text foreground="#6a8759">&quot;temp&quot;</rich_text>
				<rich_text foreground="#cc7832">;
</rich_text>
				<rich_text>File file = </rich_text>
				<rich_text foreground="#cc7832">new </rich_text>
				<rich_text>File(getCacheDir()</rich_text>
				<rich_text foreground="#cc7832">,</rich_text>
				<rich_text>fileName)</rich_text>
				<rich_text foreground="#cc7832">;
try </rich_text>
				<rich_text>{
    file.createNewFile()</rich_text>
				<rich_text foreground="#cc7832">;
</rich_text>
				<rich_text>} </rich_text>
				<rich_text foreground="#cc7832">catch </rich_text>
				<rich_text>(IOException e) {
    e.printStackTrace()</rich_text>
				<rich_text foreground="#cc7832">;
</rich_text>
				<rich_text>}

</rich_text>
				<rich_text foreground="#cc7832">try </rich_text>
				<rich_text>{
    FileInputStream fs = </rich_text>
				<rich_text foreground="#cc7832">new </rich_text>
				<rich_text>FileInputStream(file)</rich_text>
				<rich_text foreground="#cc7832">;
</rich_text>
				<rich_text>} </rich_text>
				<rich_text foreground="#cc7832">catch </rich_text>
				<rich_text>(FileNotFoundException e) {
    e.printStackTrace()</rich_text>
				<rich_text foreground="#cc7832">;
</rich_text>
				<rich_text>}</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="打印堆栈" prog_lang="custom-colors" readonly="False" tags="" unique_id="112">
				<rich_text>      
        // RuntimeException e = new RuntimeException(&quot;here&quot;);
        //     e.fillInStackTrace();
        // Slog.w(&quot;zhengyu&quot;, &quot;Debug2:&quot; , e);
        
        
        
        Log.i(TAG, &quot;EXCPETION:&quot;, new Exception());
        
        Log.i(TAG, Log.getStackTraceString(new Throwable()));
        
        

        
        
        android打印堆栈的方法，简单归类一下 
1. zygote的堆栈dump
实际上这个可以同时dump </rich_text>
				<rich_text link="webs http://lib.csdn.net/base/17">Java</rich_text>
				<rich_text>线程及native线程的堆栈，对于java线程，java堆栈和native堆栈都可以得到。
使用方法很简单，直接在adb shell或串口中输入：

1. kill -3 &lt;pid&gt;  
输出的trace会保存在 /data/anr/traces.txt文件中。这个需要注意，如果没有 /data/anr/这个目录或/data/anr/traces.txt这个文件，需要手工创建一下，并设置好读写权限。

如果需要在代码中，更容易控制堆栈的输出时机，可以用以下命令获取zygote的core dump:
1. Process.sendSignal(pid, Process.SIGNAL_QUIT);  
原理和命令行是一样的。
不过需要注意两点：
1. adb shell可能会没有权限，需要root。
2. android 4.2中关闭了native thread的堆栈打印，详见 dalvik/vm/Thread.cpp的dumpNativeThread方法：
</rich_text>
				<rich_text weight="heavy">[cpp]</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://blog.csdn.net/freshui/article/details/9456889#">view plain</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://blog.csdn.net/freshui/article/details/9456889#">copy</rich_text>
				<rich_text> 1. dvmPrintDebugMessage(target,  
2.     &quot;\&quot;%s\&quot; sysTid=%d nice=%d sched=%d/%d cgrp=%s\n&quot;,  
3.     name, tid, getpriority(PRIO_PROCESS, tid),  
4.     schedStats.policy, schedStats.priority, schedStats.group);  
5. dumpSchedStat(target, tid);  
6. // Temporarily disabled collecting native stacks from non-Dalvik  
7. // threads because sometimes they misbehave.  
8. //dvmDumpNativeStack(target, tid);  
Native堆栈的打印被关掉了！不过对于大多数情况，可以直接将这个注释打开。

2. debuggerd的堆栈dump
debuggerd 是android的一个daemon进程，负责在进程异常出错时，将进程的运行时信息dump出来供分析。debuggerd生成的coredump数据 是以文本形式呈现，被保存在 /data/tombstone/  目录下(名字取的也很形象，tombstone是墓碑的意思)，共可保存10个文件，当超过10个时，会覆盖重写最早生成的文件。从4.2版本开 始，debuggerd同时也是一个实用工具：可以在不中断进程执行的情况下打印当前进程的native堆栈。使用方法是:

</rich_text>
				<rich_text weight="heavy">[plain]</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://blog.csdn.net/freshui/article/details/9456889#">view plain</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://blog.csdn.net/freshui/article/details/9456889#">copy</rich_text>
				<rich_text> 1. debuggerd -b &lt;pid&gt;  
这可以协助我们分析进程执行行为，但最最有用的地方是：它可以非常简单的定位到native进程中锁死或错误逻辑引起的死循环的代码位置。


3. java代码中打印堆栈
Java代码打印堆栈比较简单， 堆栈信息获取和输出，都可以通过Throwable类的方法实现。目前通用的做法是在java进程出现需要注意的异常时，打印堆栈，然后再决定退出或挽救。通常的方法是使用exception的printStackTrace()方法：

</rich_text>
				<rich_text weight="heavy">[java]</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://blog.csdn.net/freshui/article/details/9456889#">view plain</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://blog.csdn.net/freshui/article/details/9456889#">copy</rich_text>
				<rich_text> 1. try {  
2.  ...  
3. } catch (RemoteException e) {  
4.   e.printStackTrace();  
5.   ...  
6. }  


当然也可以只打印堆栈不退出，这样就比较方便分析代码的动态运行情况。Java代码中插入堆栈打印的方法如下：
</rich_text>
				<rich_text weight="heavy">[java]</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://blog.csdn.net/freshui/article/details/9456889#">view plain</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://blog.csdn.net/freshui/article/details/9456889#">copy</rich_text>
				<rich_text> 1. Log.d(TAG,Log.getStackTraceString(new Throwable()));  
 
4. C++代码中打印堆栈

C++也是支持异常处理的，异常处理库中，已经包含了获取backtrace的接口，Android也是利用这个接口来打印堆栈信息的。在Android的C++中，已经集成了一个工具类CallStack，在libutils.so中。使用方法：
</rich_text>
				<rich_text weight="heavy">[cpp]</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://blog.csdn.net/freshui/article/details/9456889#">view plain</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://blog.csdn.net/freshui/article/details/9456889#">copy</rich_text>
				<rich_text> 1. #include &lt;utils/CallStack.h&gt;  
2. ...  
3. CallStack stack;  
4. stack.update();  
5. stack.dump();   
使用方式比较简单。目前Andoid4.2版本已经将相关信息解析的很到位，符号表查找，demangle，偏移位置校正都做好了。
</rich_text>
				<rich_text weight="heavy">[plain]</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://blog.csdn.net/freshui/article/details/9456889#">view plain</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://blog.csdn.net/freshui/article/details/9456889#">copy</rich_text>
				<rich_text> 1.    
5. C代码中打印堆栈
C 代码，尤其是底层C库，想要看到调用的堆栈信息，还是比较麻烦的。  CallStack肯定是不能用，一是因为其实C++写的，需要重新封装才能在C中使用，二是底层库反调上层库的函数，会造成链接器循环依赖而无法链接。 不过也不是没有办法，可以通过android工具类CallStack实现中使用的unwind调用及符号解析函数来处理。
这里需要注意的 是，为解决链接问题，最好使用dlopen方式，查找需要用到的接口再直接调用，这样会比较简单。如下为相关的实现代码，只需要在要打印的文件中插入此部 分代码，然后调用getCallStack()即可，无需包含太多的头文件和修改Android.mk文件：
</rich_text>
				<rich_text weight="heavy">[cpp]</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://blog.csdn.net/freshui/article/details/9456889#">view plain</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://blog.csdn.net/freshui/article/details/9456889#">copy</rich_text>
				<rich_text> 1. #define MAX_DEPTH                       31  
2. #define MAX_BACKTRACE_LINE_LENGTH   800  
3. #define PATH &quot;/system/lib/libcorkscrew.so&quot;  
4.   
5. typedef ssize_t (*unwindFn)(backtrace_frame_t*, size_t, size_t);  
6. typedef void (*unwindSymbFn)(const backtrace_frame_t*, size_t, backtrace_symbol_t*);  
7. typedef void (*unwindSymbFreeFn)(backtrace_symbol_t*, size_t);  
8.   
9. static void *gHandle = NULL;  
10.   
11. static int getCallStack(void){  
12.     ssize_t i = 0;  
13.     ssize_t result = 0;  
14.     ssize_t count;  
15.     backtrace_frame_t mStack[MAX_DEPTH];  
16.     backtrace_symbol_t symbols[MAX_DEPTH];  
17.   
18.     unwindFn unwind_backtrace = NULL;  
19.     unwindSymbFn get_backtrace_symbols = NULL;  
20.     unwindSymbFreeFn free_backtrace_symbols = NULL;  
21.   
22.     // open the so.  
23.     if(gHandle == NULL) gHandle = dlopen(PATH, RTLD_NOW);  
24.   
25.     // get the interface for unwind and symbol analyse  
26.     if(gHandle != NULL) unwind_backtrace = (unwindFn)dlsym(gHandle, &quot;unwind_backtrace&quot;);  
27.     if(gHandle != NULL) get_backtrace_symbols = (unwindSymbFn)dlsym(gHandle, &quot;get_backtrace_symbols&quot;);  
28.     if(gHandle != NULL) free_backtrace_symbols = (unwindSymbFreeFn)dlsym(gHandle, &quot;free_backtrace_symbols&quot;);  
29.   
30.     if(!gHandle ||!unwind_backtrace ||!get_backtrace_symbols || !free_backtrace_symbols  ){  
31.         ALOGE(&quot;Error! cannot get unwind info: handle:%p %p %p %p&quot;,  
32.             gHandle, unwind_backtrace, get_backtrace_symbols, free_backtrace_symbols );  
33.         return result;  
34.     }  
35.   
36.     count= unwind_backtrace(mStack, 1, MAX_DEPTH);  
37.     get_backtrace_symbols(mStack, count, symbols);  
38.   
39.     for (i = 0; i &lt; count; i++) {  
40.         char line[MAX_BACKTRACE_LINE_LENGTH];  
41.   
42.         const char* mapName = symbols[i].map_name ? symbols[i].map_name : &quot;&lt;unknown&gt;&quot;;  
43.         const char* symbolName =symbols[i].demangled_name ? symbols[i].demangled_name : symbols[i].symbol_name;  
44.         size_t fieldWidth = (MAX_BACKTRACE_LINE_LENGTH - 80) / 2;  
45.           
46.         if (symbolName) {  
47.             uint32_t pc_offset = symbols[i].relative_pc - symbols[i].relative_symbol_addr;  
48.             if (pc_offset) {  
49.                 snprintf(line, MAX_BACKTRACE_LINE_LENGTH, &quot;#%02d  pc %08x  %.*s (%.*s+%u)&quot;,  
50.                         i, symbols[i].relative_pc, fieldWidth, mapName,  
51.                         fieldWidth, symbolName, pc_offset);  
52.             } else {  
53.                 snprintf(line, MAX_BACKTRACE_LINE_LENGTH, &quot;#%02d  pc %08x  %.*s (%.*s)&quot;,  
54.                         i, symbols[i].relative_pc, fieldWidth, mapName,  
55.                         fieldWidth, symbolName);  
56.             }  
57.         } else {  
58.             snprintf(line, MAX_BACKTRACE_LINE_LENGTH, &quot;#%02d  pc %08x  %.*s&quot;,  
59.                     i, symbols[i].relative_pc, fieldWidth, mapName);  
60.         }  
61.   
62.         ALOGD(&quot;%s&quot;, line);  
63.     }  
64.   
65.     free_backtrace_symbols(symbols, count);  
66.   
67.     return result;  
68. }  
对sched_policy.c的堆栈调用分析如下,注意具体是否要打印，在哪里打印，还可以通过pid、uid、property等来控制一下，这样就不会被淹死在trace的汪洋大海中。
</rich_text>
				<rich_text weight="heavy">[plain]</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://blog.csdn.net/freshui/article/details/9456889#">view plain</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://blog.csdn.net/freshui/article/details/9456889#">copy</rich_text>
				<rich_text> 
1. D/SchedPolicy( 1350): #00  pc 0000676c  /system/lib/libcutils.so  
2. D/SchedPolicy( 1350): #01  pc 00006b3a  /system/lib/libcutils.so (set_sched_policy+49)  
3. D/SchedPolicy( 1350): #02  pc 00010e82  /system/lib/libutils.so (androidSetThreadPriority+61)  
4. D/SchedPolicy( 1350): #03  pc 00068104  /system/lib/libandroid_runtime.so (android_os_Process_setThreadPriority(_JNIEnv*, _jobject*, int, int)+7)  
5. D/SchedPolicy( 1350): #04  pc 0001e510  /system/lib/libdvm.so (dvmPlatformInvoke+112)  
6. D/SchedPolicy( 1350): #05  pc 0004d6aa  /system/lib/libdvm.so (dvmCallJNIMethod(unsigned int const*, JValue*, Method const*, Thread*)+417)  
7. D/SchedPolicy( 1350): #06  pc 00027920  /system/lib/libdvm.so  
8. D/SchedPolicy( 1350): #07  pc 0002b7fc  /system/lib/libdvm.so (dvmInterpret(Thread*, Method const*, JValue*)+184)  
9. D/SchedPolicy( 1350): #08  pc 00060c30  /system/lib/libdvm.so (dvmCallMethodV(Thread*, Method const*, Object*, bool, JValue*, std::__va_list)+271)  
10. D/SchedPolicy( 1350): #09  pc 0004cd34  /system/lib/libdvm.so  
11. D/SchedPolicy( 1350): #10  pc 00049382  /system/lib/libandroid_runtime.so  
12. D/SchedPolicy( 1350): #11  pc 00065e52  /system/lib/libandroid_runtime.so  
13. D/SchedPolicy( 1350): #12  pc 0001435e  /system/lib/libbinder.so (android::BBinder::transact(unsigned int, android::Parcel const&amp;, android::Parcel*, unsigned int)+57)  
14. D/SchedPolicy( 1350): #13  pc 00016f5a  /system/lib/libbinder.so (android::IPCThreadState::executeCommand(int)+513)  
15. D/SchedPolicy( 1350): #14  pc 00017380  /system/lib/libbinder.so (android::IPCThreadState::joinThreadPool(bool)+183)  
16. D/SchedPolicy( 1350): #15  pc 0001b160  /system/lib/libbinder.so  
17. D/SchedPolicy( 1350): #16  pc 00011264  /system/lib/libutils.so (android::Thread::_threadLoop(void*)+111)  
18. D/SchedPolicy( 1350): #17  pc 000469bc  /system/lib/libandroid_runtime.so (android::AndroidRuntime::javaThreadShell(void*)+63)  
19. D/SchedPolicy( 1350): #18  pc 00010dca  /system/lib/libutils.so  
20. D/SchedPolicy( 1350): #19  pc 0000e3d8  /system/lib/libc.so (__thread_entry+72)  
21. D/SchedPolicy( 1350): #20  pc 0000dac4  /system/lib/libc.so (pthread_create+160)  
22. D/SchedPolicy( 1350): #00  pc 0000676c  /system/lib/libcutils.so  
23. D/SchedPolicy( 1350): #01  pc 00006b3a  /system/lib/libcutils.so (set_sched_policy+49)  
24. D/SchedPolicy( 1350): #02  pc 00016f26  /system/lib/libbinder.so (android::IPCThreadState::executeCommand(int)+461)  
25. D/SchedPolicy( 1350): #03  pc 00017380  /system/lib/libbinder.so (android::IPCThreadState::joinThreadPool(bool)+183)  
26. D/SchedPolicy( 1350): #04  pc 0001b160  /system/lib/libbinder.so  
27. D/SchedPolicy( 1350): #05  pc 00011264  /system/lib/libutils.so (android::Thread::_threadLoop(void*)+111)  
28. D/SchedPolicy( 1350): #06  pc 000469bc  /system/lib/libandroid_runtime.so (android::AndroidRuntime::javaThreadShell(void*)+63)  
29. D/SchedPolicy( 1350): #07  pc 00010dca  /system/lib/libutils.so  
30. D/SchedPolicy( 1350): #08  pc 0000e3d8  /system/lib/libc.so (__thread_entry+72)  
31. D/SchedPolicy( 1350): #09  pc 0000dac4  /system/lib/libc.so (pthread_create+160)  
32.    
6. 其它堆栈信息查询


顶9踩

 

</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="反射调用" prog_lang="custom-colors" readonly="False" tags="" unique_id="122">
				<rich_text>Android系统中有些hide的代码并不会在SDK中公开，可以通过反射的方式去调用

Object objIActMag</rich_text>
				<rich_text foreground="#cc7832">,</rich_text>
				<rich_text>objActMagNative</rich_text>
				<rich_text foreground="#cc7832">;
</rich_text>
				<rich_text>Class clzActMag=Class.forName(</rich_text>
				<rich_text foreground="#6a8759">&quot;android.app.IActivityManager&quot;</rich_text>
				<rich_text>)</rich_text>
				<rich_text foreground="#cc7832">;
</rich_text>
				<rich_text>Class clzActMagNative=Class.forName(</rich_text>
				<rich_text foreground="#6a8759">&quot;android.app.ActivityManagerNative&quot;</rich_text>
				<rich_text>)</rich_text>
				<rich_text foreground="#cc7832">;

</rich_text>
				<rich_text>Method mtsActMagNative$getDefault=clzActMagNative.getDeclaredMethod(</rich_text>
				<rich_text foreground="#6a8759">&quot;getDefault&quot;</rich_text>
				<rich_text>)</rich_text>
				<rich_text foreground="#cc7832">;

</rich_text>
				<rich_text>objIActMag=mtsActMagNative$getDefault.invoke(clzActMagNative)</rich_text>
				<rich_text foreground="#cc7832">;

</rich_text>
				<rich_text>Method mtdIActMag$getConfiguration=clzActMag.getDeclaredMethod(</rich_text>
				<rich_text foreground="#6a8759">&quot;getConfiguration&quot;</rich_text>
				<rich_text>)</rich_text>
				<rich_text foreground="#cc7832">;
</rich_text>
				<rich_text>Configuration config=(Configuration)mtdIActMag$getConfiguration.invoke(objIActMag)</rich_text>
				<rich_text foreground="#cc7832">;

</rich_text>
				<rich_text>config.locale=Locale.CHINA</rich_text>
				<rich_text foreground="#cc7832">;

</rich_text>
				<rich_text>Class[] clzParams={Configuration.</rich_text>
				<rich_text foreground="#cc7832">class</rich_text>
				<rich_text>}</rich_text>
				<rich_text foreground="#cc7832">;
</rich_text>
				<rich_text>Method mtdActMag$updateConfiguration=clzActMag.getDeclaredMethod(</rich_text>
				<rich_text foreground="#6a8759">&quot;updateConfiguration&quot;</rich_text>
				<rich_text foreground="#cc7832">,</rich_text>
				<rich_text>clzParams)</rich_text>
				<rich_text foreground="#cc7832">;
</rich_text>
				<rich_text>mtdActMag$updateConfiguration.invoke(objIActMag</rich_text>
				<rich_text foreground="#cc7832">,</rich_text>
				<rich_text>config)</rich_text>
				<rich_text foreground="#cc7832">;

</rich_text>
				<rich_text>BackupManager.dataChanged(</rich_text>
				<rich_text foreground="#6a8759">&quot;com.android.providers.settings&quot;</rich_text>
				<rich_text>)</rich_text>
				<rich_text foreground="#cc7832">;</rich_text>
				<rich_text>
--------------------------
设语言
IActivityManageram=ActivityManagerNative.getDefault()</rich_text>
				<rich_text foreground="#cc7832">;
</rich_text>
				<rich_text>Configurationconfig=am.getConfiguration()</rich_text>
				<rich_text foreground="#cc7832">;

</rich_text>
				<rich_text>config.setLocale(locale)</rich_text>
				<rich_text foreground="#cc7832">;
</rich_text>
				<rich_text>config.userSetLocale=</rich_text>
				<rich_text foreground="#cc7832">true;

</rich_text>
				<rich_text>am.updateConfiguration(config)</rich_text>
				<rich_text foreground="#cc7832">;
</rich_text>
				<rich_text foreground="#808080">//TriggerthedirtybitfortheSettingsProvider.
</rich_text>
				<rich_text>BackupManager.dataChanged(</rich_text>
				<rich_text foreground="#6a8759">&quot;com.android.providers.settings&quot;</rich_text>
				<rich_text>)</rich_text>
				<rich_text foreground="#cc7832">;</rich_text>
				<rich_text>


------------------

        File[] files = null;
        try {
            Class c1 = null;
            c1 = Class.forName(&quot;android.os.Environment&quot;);
            Method method = c1.getMethod(&quot;buildExternalStorageAndroidDataDirs&quot;);
            try {
                files = (File[])method.invoke(c1);
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            } catch (IllegalArgumentException e) {
                e.printStackTrace();
            } catch (InvocationTargetException e) {
                e.printStackTrace();
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        //获取的是/storage/emulated/0/Android/data
        if(files == null){
            Log.i(&quot;hzy&quot;,&quot;files is null&quot;);
        }else{
            for(File file : files) {
                String path = file.toString();
                File tmpFile = new File(path, &quot;tmp2&quot;);
                try {
                    tmpFile.createNewFile();
                } catch (Exception e) {
                    Log.i(&quot;hzy&quot;,&quot;Exception&quot;);
                    e.printStackTrace();
                }
            }
        }



















</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="res-String获取" prog_lang="custom-colors" readonly="False" tags="" unique_id="123">
				<rich_text>/n8996/frameworks/base/core/res/isdm_framework-res.plf   plf的资源
mContext.getResources().getInteger(com.android.internal.R.integer.def_tctfw_low_memory_notification_mode_threshold)




</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="遍历Map" prog_lang="custom-colors" readonly="False" tags="" unique_id="124">
				<rich_text>Setset=</rich_text>
				<rich_text foreground="#660e7a">oldAndNewRowId</rich_text>
				<rich_text>.entrySet();
Iteratorit=set.iterator();
</rich_text>
				<rich_text foreground="#000080">while</rich_text>
				<rich_text>(it.hasNext()){
Map.Entrytmpentry=(Map.Entry)it.next();
ContentValuesvalues=</rich_text>
				<rich_text foreground="#000080">new</rich_text>
				<rich_text>ContentValues();
values.put(Files.FileColumns.</rich_text>
				<rich_text foreground="#660e7a">PARENT</rich_text>
				<rich_text>,(Long)tmpentry.getValue());

String[]whereArgs=</rich_text>
				<rich_text foreground="#000080">new</rich_text>
				<rich_text>String[]{Long.toString((Long)tmpentry.getKey())};
}</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="MediaScanner扫描单个文件" prog_lang="custom-colors" readonly="False" tags="" unique_id="140">
				<rich_text scale="h2">扫描单个文件</rich_text>
				<rich_text>
方式1：通过MediaScannerConnection
private void startScan() 
{ 
    if(conn!=null) conn.disconnect();  
    conn = new MediaScannerConnection(YourActivity.this,YourActivity.this); 
    conn.connect(); 
} 
 
@Override 
public void onMediaScannerConnected() { 
    try{
        conn.scanFile(yourImagePath, &quot;image/*&quot;);
       } catch (java.lang.IllegalStateException e){
       }
}
 
@Override 
public void onScanCompleted(String path, Uri uri) { 
    conn.disconnect(); 
} 

方式2：通过发送广播
File file = new File(absolutePath);
Uri uri = Uri.fromFile(file);
Intent intent = new Intent(Intent.</rich_text>
				<rich_text weight="heavy">ACTION_MEDIA_SCANNER_SCAN_FILE</rich_text>
				<rich_text>, uri);
sendBroadcast(intent);
------------------或者
sendBroadcast(new Intent(Intent.</rich_text>
				<rich_text weight="heavy">ACTION_MEDIA_MOUNTED</rich_text>
				<rich_text>, Uri.parse(&quot;file://&quot;
            + Environment.getExternalStorageDirectory())))
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="删除MediaProvider某条记录" prog_lang="custom-colors" readonly="False" tags="" unique_id="143">
				<rich_text>
</rich_text>
				<rich_text weight="heavy">ContentResolver resolver=getApplicationContext().getContentResolver();</rich_text>
				<rich_text>
Uri uri=MediaStore.Files.getContentUri(</rich_text>
				<rich_text foreground="#008000">&quot;external&quot;</rich_text>
				<rich_text>);
Log.i(</rich_text>
				<rich_text foreground="#008000">&quot;zhengyu&quot;</rich_text>
				<rich_text>,</rich_text>
				<rich_text foreground="#008000">&quot;uri----&gt;&quot;</rich_text>
				<rich_text>+uri.toString());

Stringprojection[]={MediaStore.Files.FileColumns.</rich_text>
				<rich_text foreground="#660e7a">DATA</rich_text>
				<rich_text>};
String where=MediaStore.Files.FileColumns.</rich_text>
				<rich_text foreground="#660e7a">_ID</rich_text>
				<rich_text>+</rich_text>
				<rich_text foreground="#008000">&quot;=?&quot;</rich_text>
				<rich_text>;
String selectArgs[]={</rich_text>
				<rich_text foreground="#008000">&quot;8&quot;</rich_text>
				<rich_text>};
Cursor c=</rich_text>
				<rich_text foreground="#000080">null</rich_text>
				<rich_text>;

</rich_text>
				<rich_text foreground="#000080">for</rich_text>
				<rich_text>(</rich_text>
				<rich_text foreground="#000080">int</rich_text>
				<rich_text>j=</rich_text>
				<rich_text foreground="#0000ff">101</rich_text>
				<rich_text>;j&lt;</rich_text>
				<rich_text foreground="#0000ff">20000</rich_text>
				<rich_text>;j++){
</rich_text>
				<rich_text weight="heavy">    resolver.delete(MediaStore.Files.getContentUri(</rich_text>
				<rich_text foreground="#008000" weight="heavy">&quot;external&quot;</rich_text>
				<rich_text weight="heavy">),MediaStore.Files.FileColumns.</rich_text>
				<rich_text foreground="#660e7a" weight="heavy">_ID</rich_text>
				<rich_text weight="heavy">+</rich_text>
				<rich_text foreground="#008000" weight="heavy">&quot;=?&quot;</rich_text>
				<rich_text weight="heavy">,</rich_text>
				<rich_text foreground="#000080" weight="heavy">new</rich_text>
				<rich_text weight="heavy">String[]{</rich_text>
				<rich_text foreground="#008000" weight="heavy">&quot;&quot;</rich_text>
				<rich_text weight="heavy">+j});</rich_text>
				<rich_text>
    Log.i(</rich_text>
				<rich_text foreground="#008000">&quot;zhengyu&quot;</rich_text>
				<rich_text>,</rich_text>
				<rich_text foreground="#008000">&quot;current:&quot;</rich_text>
				<rich_text>+j);
}
Log.i(</rich_text>
				<rich_text foreground="#008000">&quot;zhengyu&quot;</rich_text>
				<rich_text>,</rich_text>
				<rich_text foreground="#008000">&quot;finish&quot;</rich_text>
				<rich_text>);</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="测试运行时间" prog_lang="custom-colors" readonly="False" tags="" unique_id="150">
				<rich_text>        测试运行时间
        long startFix = System.currentTimeMillis();
        long endFix = System.currentTimeMillis();
        Log.i(TAG, &quot;MSDebug  FIX time: &quot; + (endFix - startFix) + &quot;ms\n&quot;);
        </rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="获取屏幕真实尺寸" prog_lang="custom-colors" readonly="False" tags="" unique_id="154">
				<rich_text>WindowManagerwm=(WindowManager)getSystemService(Context.</rich_text>
				<rich_text foreground="#660e7a">WINDOW_SERVICE</rich_text>
				<rich_text>);
wm.getDefaultDisplay().getRealMetrics(dm);
</rich_text>
				<rich_text foreground="#000080">int</rich_text>
				<rich_text>height=dm.</rich_text>
				<rich_text foreground="#660e7a">heightPixels</rich_text>
				<rich_text>;



获得当先Activity所能够用的尺寸
Resourcesresource=</rich_text>
				<rich_text foreground="#660e7a">mContext</rich_text>
				<rich_text>.getResources();
DisplayMetricsdm=resource.getDisplayMetrics();
Log.i(</rich_text>
				<rich_text foreground="#008000">&quot;calulator&quot;</rich_text>
				<rich_text>,</rich_text>
				<rich_text foreground="#008000">&quot;height1:&quot;</rich_text>
				<rich_text>+dm.</rich_text>
				<rich_text foreground="#660e7a">heightPixels</rich_text>
				<rich_text>);


获取屏幕密度、尺寸
 DisplayMetrics metric = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(metric);
        float density = metric.density;
        int densityDpi = metric.densityDpi;
        int width = metric.widthPixels;
        int height = metric.heightPixels;</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="添加有回复按钮的通知" prog_lang="custom-colors" readonly="False" tags="" unique_id="163">
				<rich_text>    
    action是新加的
    
    
    private void buildDirectoryNotification() {
        String replyLabel = getResources().getString(R.string.reply_label);
        RemoteInput remoteInput = new RemoteInput.Builder(KEY_TEXT_REPLY)
                .setLabel(replyLabel)
                .build();

        Intent replyIntent = new Intent(mContext, QuickReplyActivity.class);
       // final Intent intent = new Intent(SEND_ACTION);
        PendingIntent replyPendingIntent  = PendingIntent.getActivities(
                mContext,0,new Intent[]{replyIntent},PendingIntent.FLAG_UPDATE_CURRENT);


        Notification.Action action = new Notification.Action.Builder(R.drawable.icon,getString(R.string.reply_label),replyPendingIntent)
                .addRemoteInput(remoteInput)
                .build();

        Notification notification = new Notification.Builder(mContext)
                .setSmallIcon(R.drawable.icon)
                .setContentTitle(&quot;title&quot;)
                .setContentText(&quot;context&quot;)
              </rich_text>
				<rich_text background="#ffffffff0000">  </rich_text>
				<rich_text background="#ffffffff0000" foreground="#ffff00000000">.addAction(action)</rich_text>
				<rich_text>
                .setPriority(Notification.PRIORITY_HIGH)
                .setDefaults(Notification.DEFAULT_VIBRATE)
                .build();

        NotificationManager nm = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
        nm.notify(1,notification);

    }
    
    DialerUtils#startActivityWithErrorToast
  // DialtactsActivity#hideDialpadFragment
    
    </rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="在代码中获取Log" prog_lang="custom-colors" readonly="False" tags="" unique_id="181">
				<rich_text>1.程序中获取Logcat 

Runtime.getRuntime().exec(&quot;logcat&quot;);

并添加权限
&lt;users-permission android:name=&quot;android.permission.READ_LOGS/&gt;</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="启动某个Activity" prog_lang="custom-colors" readonly="False" tags="" unique_id="182">
				<rich_text>
Intentintent=</rich_text>
				<rich_text foreground="#000080">new</rich_text>
				<rich_text>Intent();
intent.setComponent(</rich_text>
				<rich_text foreground="#000080">new</rich_text>
				<rich_text>ComponentName(</rich_text>
				<rich_text foreground="#008000">&quot;com.tct.securitycenter&quot;</rich_text>
				<rich_text>,</rich_text>
				<rich_text foreground="#008000">&quot;com.tct.securitycenter.storageclearup.StorageClearUpActivity&quot;</rich_text>
				<rich_text>));
getContext().startActivity(intent);
 </rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="添加通知" prog_lang="custom-colors" readonly="False" tags="" unique_id="193">
				<rich_text>import android.app.Notification;
import android.app.NotificationManager;
import android.support.v4.app.NotificationCompat;


  NotificationManager mNotifactionManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
        NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(this);
        mBuilder.setContentTitle(&quot;title&quot;)
                .setContentText(&quot;text&quot;)
                .setAutoCancel(true)
                .setPriority(Notification.PRIORITY_DEFAULT);
</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="libcore" prog_lang="custom-colors" readonly="False" tags="" unique_id="9">
			<rich_text>/libcore/luni
包括了Java的基本类


interface FileDescriptorChannel {
    public FileDescriptor getFD();
}

frameworks/base/core/java/androidos/
FileBridge


AssetFileDescriptor

ParcelFileDescriptor

MemoryFile
匿名共享内存
P1利用tmpfs创建一块共享区域，得到这块区域的fd
P1在fd上mmap一片内存区域到本进程用于共享数据
P1通过parcelFileDescriptor把fd传给P2
P2在接到的fd上同样mmap相同的区域到本进程
然后P1、P2在mmap到本进程中的内存中读写对方都能看到


</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Doze" prog_lang="custom-colors" readonly="False" tags="" unique_id="17">
			<rich_text>Doze是在Android M手机静止不动（不包括放在裤袋里）一段时间后自动进入超级省电模式，并暂时关闭白名单之外的第三方应用的消息推送服务，一旦手机被挪动，将会恢复到正常模式，此时被延后推送的消息也会一拥而上
App Standby则是会智能识别初一定时间内不被使用的应用，禁用它的网络权限，用户再次使用该应用，或者正在充电时就会恢复。
config_enableAutoPowerModes
我们项目是</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/frameworks/base/core/res/res/values/">frameworks/base/core/res/res/values/</rich_text>
			<rich_text>下的，之前是关闭的不知道被谁给打开了
gms中有一个overlay，在
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/vendor/google/products/gms_overlay/frameworks/base/core/res/res/values/">/vendor/google/products/gms_overlay/frameworks/base/core/res/res/values/</rich_text>
			<rich_text>
这个值默认是true

在Doze Mode下网络访问被屏蔽，维持唤醒(Wake Lock)被忽略，定时任务
应用可以声明REQUEST_IGNORE_BATTERY_OPTIMIZATIONS权限主动要求用户将其加入至白名单中，从而不受Doze Mode和App Standby的影响

</rich_text>
			<rich_text justification="left"></rich_text>
			<rich_text>   
进入Doze睡眠：
1）用户不操作设备一段时间
2）屏幕关闭
3）设备未连接电源充电
在Doze模式下，系统试图通过限制应用程序访问网络和CPU密集服务节省电池，防止应用程序访问网络，推迟应用程序工作，同步和警报工作
App Standby不许要屏幕，进入后台一段时间会受到链接网络等限制

</rich_text>
			<encoded_png char_offset="493"></encoded_png>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="手机部件耗电量统计" prog_lang="custom-colors" readonly="False" tags="" unique_id="18">
			<rich_text>手机由众多部件组成，CPU，WIFI，GPS，Android App耗电总电量为App运行过程中，涉及各部件的消耗电量的总和
PowerUsageSummary.java-&gt;BatteryStatsImpl：提供App各个部件的运行时间, PowerProfile提供部件电流数值

power_profile.xml是存储系统耗电信息的核心文件。
用于Android系统统计电池电量信息。根据PowerProfile.java及power_profile.xml,可以计算出各应用或设备的耗电量、电池剩余时间等信息。
由于硬件之间的差异，各子系统耗电信息是不同的，因此此文件需要各生产厂商进行定制。
由上可知，power_profile.xml文件是统计耗电用的，改变它并不能真正省电。
按理说出厂前厂家都会测试后针对每个机型各硬件给出准确的耗电信息。

1)ActivityManagerService创建并初始化BatteryStatsService,并传入耗电量记录文件batterystats.bin;
2)BatteryStatsService在内部创建BatteryStatImpl实例，并传入耗电量记录文件battertstats.bin
3)ActivityManagerService执行 mBatteryStatsService.getActiveStatistics().readLocked();导致BatteryStatsService的BatteryStatsImpl加载batterystats.bin数据
4)在PowerUsageSummary计算App耗电量时, PowerUsageSummary从BatteryStatsService中获取BatteryStatsImpl实例，从而获得App相关数据


Android部件电流信息存与 power_prpfile.xml
每个OEM厂商有私有的power_profile.xml
PowerProfile读取power_profile.xml，并提供API访问部件电流数值

Native Code对处理器技术有很大的依赖， Android在NDK中定义了ABIs（Application Binary Interface）


DevicePolicyManager可管理操作的设备
Managed Profile , 可以理解为用户本人对于应用分类的需求，涉及到应用的限制，如控制某些应用不能访问摄像头，控制Chrome的历史记录功能被禁用， 所有的应用与主账户种的应用隔离。
要先开启加密功能才能使用多用户
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="反转180" prog_lang="custom-colors" readonly="False" tags="" unique_id="19">
			<rich_text>下拉通知栏 NotificationPanelView
RoatationPolicy -&gt; Settings.System.Reversible_ROTATION 为 1
ReverEnableCheckActivity



</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="SELinux" prog_lang="custom-colors" readonly="False" tags="" unique_id="20">
			<rich_text>SELinux(Security-Enhanced Linux)   进程只能访问那些在他的任务种所需要的文件

• </rich_text>
			<rich_text style="italic">Domain</rich_text>
			<rich_text> - A </rich_text>
			<rich_text weight="heavy">label</rich_text>
			<rich_text> for the </rich_text>
			<rich_text weight="heavy">process or set of processes</rich_text>
			<rich_text>. Also called a domain type as it is just a type for a process. 
• </rich_text>
			<rich_text style="italic">Type</rich_text>
			<rich_text> - A label for the </rich_text>
			<rich_text weight="heavy">object</rich_text>
			<rich_text> (e.g. file, socket) or set of objects.
• </rich_text>
			<rich_text style="italic">Class</rich_text>
			<rich_text> - The kind of object (e.g. file, socket) being accessed.
• </rich_text>
			<rich_text style="italic">Permission</rich_text>
			<rich_text> - The operation (e.g. read, write) being performed.


ps -Z 查看SELinux 的 domain和type

可以用工具 audit2allow -i  log.txt 来自动生成参考规则

Android原生的安全规则添加在external/sepolicy </rich_text>
			<rich_text foreground="#252525">system/sepolicy</rich_text>
			<rich_text>
高通平台添加规则在device/qcom/sepolicy等目录及其子目录
我们公司添加权限在device/tct/common/sepolicy

对于userdebug/eng版本下 可以通过命令setenfore 0/1来设置模式

添加权限后，需要编译


SELinux出现之前，Linux上的安全模型叫DAC（Discretionary Access Control， 自主访问控制）: 进程理论上所拥有的权限与执行它的用户权限相同。如以root用户启动Browser, 那么Browser就拥有root用户权限，可以在Linux系统上做任何事情。
MAC（Mandatory Access Control，强制访问控制）：任何系统想要在SELinux系统中干任何事情，都必须先在安全策略配置文件中赋予权限。凡是没有出现在安全策略配置文件中的权限，进程九没有该权限。

1.Linux系统先做DAC检查，如果没有通过DAC权限检查，则操作直接失败，如果通过DAC后，再做MAC
2.SELinux的用户和Linux中的用户概念不一样，在Linux中的root用户可能在SELinux什么地位都没有


SELinux用SELinux Policy语言来编写规则。
Linux有两种东西，活的(Active):进程之类能发起动作，如它能够打开文件并操作它,死的(Inactive):文件，只能被进程操作。

SELinux中，每种东西都会被赋予一个安全属性(Security Context), 通过ps -Z 查看
u：r：init：s0
u:user，SEAndroid中定义了一个SELinux用户，值为u
r:role, SELinux中一个较高的层次，更方便的权限管理思路，Role Based Access Control（基于角色的访问控制，RBAC），一个u可以属于多个role，不同的role有不同的权限
init，表示进程所属的Domain为init。MAC的管理思路是Type Enforcement Access Control(TEAC).对进程来说，Type就是Domain. 如init这个Domain有什么权限，都需要通过allow来说明
s0是SELinux为满足军用和教育行业而设计的Multi-Level Security机制有关，MLS将系统的进程和文件进行了分级，不同级别的资源需要对应级别的进程才能 访问。

通过ls -Z查看文件的上下文
u：objcet_r：rootfs：s0 root
u，代表创建这个文件的SELinux user
object_r：Linux中死的东西用这个表示角色
rootfs：死的东西的Type，表示root目录对应的Type是rootfs
s0：MLS的级别


rule_name source_type mtarget_type:</rich_text>
			<rich_text weight="heavy">class</rich_text>
			<rich_text> perm_set

</rich_text>
			<rich_text weight="heavy">object class 定义</rich_text>
			<rich_text>在/project/external/sepolicy/security_class中
file-related classes 有下面几种
class filesystem
class file #表示普通文件
class dir #代表目录
class fd #代表文件描述符
class lnk_file #代表链接文件
class chr_file #代表字符设备文件
... ...


network-related classes
class socket
class tcp_socket
class udp_socket

class binder #Android平台特有的binder
class zygote #Android平台特有的zygote

class property_service #userspace和用户空间中的SELinux权限检查有关

</rich_text>
			<rich_text weight="heavy">perm set</rich_text>
			<rich_text> 定义在/project/external/sepolicy/access_vectors
指的是某种object class所拥有的操作，对于file其perm set就包括read,write,open,create,execute等
common定义的可以被其他继承

commonfile
{ioctl read write create getattr
...
}

classdir
inheritsfile
{
add_name remove_name reparent search rmdir open audit_access execmod
}


</rich_text>
			<rich_text weight="heavy">type</rich_text>
			<rich_text> 定义在 external/sepolicy中
type type_id [alias alias_id][attribute_id]

如type shell, domain #来自shell.te

attribute 定义在/external/attributes 中， 有domain, fs_type等
属性可以理解为type的group，如有许多type与domain进行了关联，shell，system_app等
如果把属性domain作为target，相当与把与该属性相关联的type作为target


/mercury/

</rich_text>
			<rich_text weight="heavy">rule_name</rich_text>
			<rich_text>
allow
allowaudit ： 记录某项操作。默认情况下SELinux只会记录那些权限检查失败的操作
dontaudit ： 对那些权限检查失败的操作不做记录
neverallow

userdebug_or_eng('
    allow ....
    
')

-表示去除某项内同
*表示所有内容
～{}表示除了{}内的内容以外


</rich_text>
			<rich_text weight="heavy">RBAC</rich_text>
			<rich_text>
external/sepolicy/roles定义了Role
role r type domain;

external/sepolicy/users/定义了User
一个user可以与多个Role关联
level之后是该user具有的安全级别，s0是最低级别，mls_systemHigh为u所能获得的最高安全级别
user u roles {r} level s0 range s0 -mls_systemhigh

role切换 allow from_role_id to_role_id;
角色之间的关系 dominance {role super_r {role role1 ; role role2}}super_r 级别高于role1 、role2，同时从type理解，super_r继承role1，role2

SELinux</rich_text>
			<rich_text weight="heavy">如何实现role和user权限的控制？用constrain</rich_text>
			<rich_text>
constrain object_class_set perm_set expression
constrain file write (u1 == u2 and r1 == r2) 表示只有source和target的user相同，并且role也相同，才允许
expression
u1,r1,t1：代表souce的user,role,type
u2,r2,t2：代表target的user，role，type
操作符: sudo==，！=
dom, domby, incomp, eq : 统治，被统治，没关系和相同

而Android并没有使用constrain，而是用了MLS中的mlsconstrain. TEAC仅仅针对Type或者Domain，并没有针对user和role， Constain在TEAC的基础上，进一步加强了权限的控制。

SELinux初始化通过下面的文件
/external/sepolicy/initial_sides
/external/sepolicy/initial_sid_context

Domain和Type可以是相同的概念，活的东西可以理解为Domain，死的东西可以理解为type

</rich_text>
			<rich_text weight="heavy">Domain transition：</rich_text>
			<rich_text>  某个进程的Domain切换到一个合适的进程中去
如父进程创建子进程，两者的domain可能需要不一样，不然就会和父进程拥有同样的权限
格式：</rich_text>
			<rich_text weight="heavy">type_transition</rich_text>
			<rich_text>    </rich_text>
			<rich_text weight="heavy">souce_type</rich_text>
			<rich_text>     </rich_text>
			<rich_text weight="heavy">target_type</rich_text>
			<rich_text> :   </rich_text>
			<rich_text weight="heavy"> class    default_type;</rich_text>
			<rich_text>
示例： type_transition init_t apache_exex_t  :  process apache_t
当init_t Domain的进程执行type为apache_exec_t类型的可执行文件，其class所属的Domain需要切换到apache_t.
    要做Domain Transition， 肯定需要先fork一个子进程，然后通过execv打开一个新的可执行文件，从而进入变成那个可执行文件对应的活物。所以在type_transition中，target_type往往是那个可执行文件(死物)的type, defualt_type则表示execv执行后，这个活物默认的Domain, 对DT来说 class一定是process
    
DT属于Labeling一部分， 要真正实施成功DT还需要allow，因为打标签需要相关权限，在Kernel中，从fork到exec一共设置了三处Security检查点，所以需要三个权限
allow init_t apache_exec_t : file execute #允许init_t域中的进程能够执行type为apache_exec_t的文件
allow init_t apache_t : process transition #允许init_t做DT切换以进入apache_t域
allow apache_t apache_exec_t : file entrypoint; #切换入口（对应为entrypoint权限），为执行apache_exec_t类型文件

通过定义宏可以简化
external/sepolicy/te_macros
也有一些宏定义在external/sepolicy/global_macros中


定义domain_trans宏, $1, $2,$3表示第一、第二、第三个参数
define('domain_trans', '/mercury/
allow $1 $2:file {getattr open read execute};
allow $1 $3:process transition;
allow $3 $2:file {entrypoint read execute};
allow $3 $1 :process sigchld;
dontaudit $1 $3 : process noatsecure;
allow $1 $3 :process {siginh rlimitinh};
')

我们使用的是domain_auto_trans宏, 用法 domain_auto_trans(init_t, apache_exec_t, apache_t)

define('domain_auto_trans', '
domain_trans($1,$2,$3)
type_transition $1 $2 :process $3;
')

针对Type的Tansition， 假设目录A的SContext为u:r:dir_a， 那么默认情况下在该目录下创建的文件都具有u:r:dir_a这个SContext
定义file_type_trans(domain, dir_type, file_type) 宏

define('file_type_trans','
    allow $1 $2:dir ra_dir_perms;
    allow $1 $3:notedevfile_class_set create_file_perms;
    allow $1 $3:dir create_dir_perms;
')
其中ra_dir_perms, create_file_perms为glabal_macros定义的宏

SELinux中最初的Type是怎么来的呢？
external/sepolicy/file_contexts
对于常规的文件系统， SContext信息存储在文件节点(inode)的属性中，系统可以通过getattr读取inode中的SContext信息，对于这种方式
fs_user_xattr



</rich_text>
			<rich_text scale="h2">案例：</rich_text>
			<rich_text>

12-28 10:48:54.700  8266  8266 W externalstorage: type=1400 audit(0.0:361): avc: denied { write } </rich_text>
			<rich_text weight="heavy">for name=&quot;property_service&quot;</rich_text>
			<rich_text> dev=&quot;tmpfs&quot; ino=14180 </rich_text>
			<rich_text weight="heavy">scontext=u:r:platform_app</rich_text>
			<rich_text>:s0:c522,c768 </rich_text>
			<rich_text weight="heavy">tcontext</rich_text>
			<rich_text>=u:object_r:property_socket:s0 </rich_text>
			<rich_text weight="heavy">tclass</rich_text>
			<rich_text>=sock_file permissive=0

targetName: </rich_text>
			<rich_text weight="heavy">property_service</rich_text>
			<rich_text>
scontext: source Context   </rich_text>
			<rich_text weight="heavy">platform_app</rich_text>
			<rich_text>
tcontext: target Context </rich_text>
			<rich_text weight="heavy">property_socket</rich_text>
			<rich_text>
tclass : tartget Class </rich_text>
			<rich_text weight="heavy">sock_file</rich_text>
			<rich_text>

用工具生成为
allow platform_app property_socket:sock_file write;

allow &lt;Domain&gt; &lt;Type&gt; : &lt;CLass&gt; Permission





</rich_text>
			<rich_text foreground="#353535"> </rich_text>
			<rich_text>avengers/codeaurora_msm8953/device/tct/mercury / sepolicy/</rich_text>
			<rich_text weight="heavy">externalstorageprovider.te</rich_text>
			<rich_text>
type externalstorageprovider, domain;
app_domain(externalstorageprovider)

#for externalstorageprovider SystemProperties.set permission  add by zhengyu.hu Defect-3869576
allow externalstorageprovider { service_manager_type -netd_service }:service_manager find;
allow externalstorageprovider property_socket:sock_file write;
allow externalstorageprovider init:unix_stream_socket connectto;
allow externalstorageprovider system_prop:property_service set;


avengers/codeaurora_msm8953/device/tct/mercury / sepolicy/</rich_text>
			<rich_text weight="heavy">seapp_contexts</rich_text>
			<rich_text>

# for externalstorageprovider add by zhengyu.hu Defect-3869576
user=_app seinfo=platform name=com.android.externalstorage domain=externalstorageprovider type=app_data_file


type  指的是 /Avengers/system/sepolicy/file.te 中定义的文件

set_prop(system_app, system_prop)










</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Storage" prog_lang="custom-colors" readonly="False" tags="" unique_id="24">
			<rich_text>PublicVolumeSettings sd卡设置菜单

adb shell dumpsys devicestoragemonitor

sudo adb shell df //查看存储空间

Adoptable Storage


CDD文档中对Adoptable Storage的描述是：
             如果设备存在一个long-term stable    location（比如Sd卡槽），强烈推荐设备能够支持Adoptable Storage，而并非必须支持。所以关于Adoptable    Storage功能这块跟CDD其实没什么关系。我初步研究了下咱们的idol4s对Adoptable    Storage的支持情况如下，仅供参考。
    
    当新插入存储卡的时候，会提醒你需要用哪种方式使用存储卡
一.portable storage：这种方式就是Android    M之前对SD卡的支持方式，将存储卡当作可移动的设备，用来存储照片，多媒体数据。 
二.internal storage：
       1）这种方式应该就是Android M新增加的Adoptable    Storage方式，将外部存储当作内部存储用。对应的目录是/storage/emulated/0/，与内部存储的路径是一致的。
       2） 当应用安装的时候，默认会安装到内部存储。可以通过手动的方式将应用移到SD卡，而不需要再通过第  三方应用来将APP移动SD卡。
       3）如果应用移到了SD卡上，一旦移除SD卡，该应用所谓将不会出现在二级菜单出现。桌面上的应用快捷图标将会变灰色，点击弹出“App isn't    available”这个Toast，再次将SD卡插入即可用。
    所以我认为idol4s应该是支持Adoptable Storage的，仅供参考。
    
    
Vold： Volume Daemon 管理各种存储设备，MountService通过Vold查询，操作这些存储设备，如果外部存储设备发生变化，如插入了USB设备，Vold将会收到内核的UEent消息并转发给MountService

/system/vold
main.cpp为Vold入口函数，创建VolumeManager, NetlinkManager, CommandListener对象
CommandListener负责和Java层的NativeDaemonConnector进行Socket通讯，VolumeManager，NetlinkManager都会拥有其对象

NetlinkManager负责监听驱动发出的uevent消息

/frameworks/base/core/java/android/os/storage


</rich_text>
			<rich_text scale="h2" weight="heavy">//storage挂载的监听可以通过如下代码去实现</rich_text>
			<rich_text>
    private final </rich_text>
			<rich_text weight="heavy">StorageEventListener</rich_text>
			<rich_text> mStorageEventListener = new </rich_text>
			<rich_text weight="heavy">StorageEventListener</rich_text>
			<rich_text>() {
        @Override
        public void </rich_text>
			<rich_text weight="heavy">onStorageStateChanged</rich_text>
			<rich_text>(String path, String oldState, String newState) {
            synchronized (mBinder) {
                Log.d(TAG, &quot;onStorageStateChanged &quot; + path + &quot; &quot; + oldState + &quot; -&gt; &quot; + newState);
                //[BUGFIX]-Add-BEGIN by TSNJ.shengwei.qin,12/02/2015,ALM-1006239
                if (oldState.equals(newState)) {
                    return;
                }
                //[BUGFIX]-Add-END by TSNJ.shengwei.qin
                if (Environment.MEDIA_MOUNTED.equals(newState)) {
                    mVolumes = mStorageManager.getVolumeList();
                    volumeMountedLocked(path);
                } else if (Environment.MEDIA_MOUNTED.equals(oldState)) {
                    StorageVolume volume = mVolumeMap.remove(path);
                    if (volume != null) {
                        removeStorageLocked(volume);
                    }
                }
            }
        }
  };
    
  
  
  系统内置存储目录 /storage/emulated/
  SD卡路径 /storage/sdcard1/
  

  
  
  
  Android 6.0开始支持权限运行时动态管理， 包括 READ_EXTERNAL_STORAGE、WRITE_EXTERNAL_STORAGE 
  系统提供在不杀掉或重启已经运行的应用的情况下去动态授权的机制
  /mnt/
  
  
 
anr log:
08-11 10:27:48.491  1514  1528 I ActivityManager:  Waited long enough for: ServiceRecord{d10d5c u0  com.jrdcom.jrdlogger/.UploadFileService}
08-11 10:27:50.394  1514   1528 W ActivityManager: Timeout executing service: ServiceRecord{2765d7e  u0  com.tcl.mie.tlauncher/com.tcl.launcher3.unread.NotificationMonitorService}
08-11  10:27:50.410  1514  1528 I am_anr  :  [0,2328,com.tcl.mie.tlauncher,952647237,executing service  com.tcl.mie.tlauncher/com.tcl.launcher3.unread.NotificationMonitorService]
 
 MediaServer只占用8.7% 并非造成anr原因。

08-11 10:27:54.726  1514  1528 E ActivityManager: ANR in com.tcl.mie.tlauncher

08-11 10:27:54.726  1514  1528 E ActivityManager: PID: 2328
08-11  10:27:54.726  1514  1528 E ActivityManager: Reason: executing service  com.tcl.mie.tlauncher/com.tcl.launcher3.unread.NotificationMonitorService
08-11 10:27:54.726  1514  1528 E ActivityManager: Load: 5.74 / 1.51 / 0.51
08-11 10:27:54.726  1514  1528 E ActivityManager: CPU usage from 23236ms to 0ms ago:
08-11  10:27:54.726  1514  1528 E ActivityManager:   13% 1514/system_server:  8.6% user + 4.5% kernel / faults: 45260 minor 56 major
</rich_text>
			<rich_text foreground="#FF0000">08-11 10:27:54.726  1514  1528 E ActivityManager:   8.7% 667/mediaserver: 5.2% user + 3.4% kernel / faults: 20003 minor 68 major</rich_text>
			<rich_text>
08-11 10:27:54.726  1514  1528 E ActivityManager:   3.7% 489/surfaceflinger: 1.7% user + 1.9% kernel / faults: 46 minor
08-11 10:27:54.726  1514  1528 E ActivityManager:   2.5% 339/mmcqd/1: 0% user + 2.5% kernel
08-11 10:27:54.726  1514  1528 E ActivityManager:   2.2% 572/bootanimation: 1.4% user + 0.8% kernel / faults: 660 minor
08-11 10:27:54.726  1514  1528 E ActivityManager:   1.7% 564/mdss_fb0: 0% user + 1.7% kernel
08-11 10:27:54.726  1514  1528 E ActivityManager:   1% 646/kworker/u8:9: 0% user + 1% kernel
08-11 10:27:54.726  1514  1528 E ActivityManager:   1% 1007/kworker/u8:15: 0% user + 1% kernel
08-11 10:27:54.726  1514  1528 E ActivityManager:   0.9% 647/kworker/u8:10: 0% user + 0.9% kernel
08-11 10:27:54.726  1514  1528 E ActivityManager:   0.8% 432/logd: 0.3% user + 0.5% kernel / faults: 132 minor
08-11 10:27:54.726  1514  1528 E ActivityManager:   0.6% 683/zygote64: 0.1% user + 0.5% kernel / faults: 26202 minor
08-11 10:27:54.726  1514  1528 E ActivityManager:   0.7% 662/netd: 0% user + 0.6% kernel / faults: 1968 minor
08-11 10:27:54.726  1514  1528 E ActivityManager:   0.6% 336/mmc-cmdqd/0: 0% user + 0.6% kernel
08-11 10:27:54.726  1514  1528 E ActivityManager:   0.6% 4/kworker/0:0: 0% user + 0.6% kernel

  
    
  
08-12 11:46:25.538  1988  6255 E AndroidRuntime: FATAL EXCEPTION: pool-3-thread-2
08-12 11:46:25.538  1988  6255 E AndroidRuntime: Process: android.process.media, PID: 1988
08-12 11:46:25.538  1988  6255 E AndroidRuntime: java.util.ConcurrentModificationException
08-12 11:46:25.538  1988  6255 E AndroidRuntime: 	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:787)
08-12 11:46:25.538  1988  6255 E AndroidRuntime: 	at java.util.HashMap$KeyIterator.next(HashMap.java:814)
08-12 11:46:25.538  1988  6255 E AndroidRuntime: 	at android.media.MediaInserter.flushAllPriority(MediaInserter.java:82)
08-12 11:46:25.538  1988  6255 E AndroidRuntime: 	at android.media.MediaInserter.insert(MediaInserter.java:67)
08-12 11:46:25.538  1988  6255 E AndroidRuntime: 	at android.media.MediaInserter.insert(MediaInserter.java:51)
08-12 11:46:25.538  1988  6255 E AndroidRuntime: 	at android.media.MediaScanner$MyMediaScannerClient.endFile(MediaScanner.java:1125)
08-12 11:46:25.538  1988  6255 E AndroidRuntime: 	at android.media.MediaScanner$MyMediaScannerClient.doScanFile(MediaScanner.java:691)
08-12 11:46:25.538  1988  6255 E AndroidRuntime: 	at android.media.MediaScanner$MyMediaScannerClient$2.run(MediaScanner.java:666)
08-12 11:46:25.538  1988  6255 E AndroidRuntime: 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113)
08-12 11:46:25.538  1988  6255 E AndroidRuntime: 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)
08-12 11:46:25.538  1988  6255 E AndroidRuntime: 	at java.lang.Thread.run(Thread.java:818)


低存储无法重启
</rich_text>
			<rich_text link="webs http://172.16.11.162:8081/#/c/251922/">http://172.16.11.162:8081/#/c/251922/</rich_text>
			<rich_text>



经过项目组最终讨论，保持原生行为
SD as portable时：
1.第一次插入，提示&quot;New SD card detected&quot;
    手动dismiss通知后，再次插入不会提示了
    不dismiss的话，再次插入还会提示
2.拔卡时，始终没有提示

SD as internal时
1.第一次拔卡，提示“SD is missing”
    手动dismiss通知后，再次拔卡不会提示了
    不dismiss的话，再次拔卡还会提示



out/target/common/obj/PACKAGING/public_api.txt:29493: error 4: Added public method android.os.storage.StorageManager.createEfsStorage(String,String)

******************************
You have tried to change the API from what has been previously approved.

To make these errors go away, you have two choices:
   1) You can add &quot;@hide&quot; javadoc comments to the methods, etc. listed in the
      errors above.

   2) You can update current.txt by executing the following command:
         make update-api

      To submit the revised current.txt to the main Android repository,
      you will need approval.




</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="MTP协议" prog_lang="custom-colors" readonly="False" tags="" unique_id="73">
				<rich_text>

USB连接模式改为MTP模式的时候， 会触发USB驱动作出相应变动，可以在init.platform-name.usb.rc 查看USB的模式设置

Java层包括 
UsbReceiver： 用来监视USB事件，判断合适启动或停止MTPService
MtpService：  负责启动MtpServer和加载存储设备信息到数据库
MtpServer： 通过JNI接口去启动和停止C++层中MtpServer以及处理Storage的添加和删除
MediaProvider： 负责查询和更新数据库
MtpDatabase:  用户MediaProvider和MtpServer之间格式数据转换，如把MTP传递过来的信息(如文件大小、文件路径)转换成MediaProvider需要的格式


MTP代码分为两个部分
java层 ： /frameworks/base/media/java/android/mtp/
/packages/providers/MediaProvider/src/com/android/providers/media/MtpService.java

JNI  /frameworks/base/media/jni/android_mtp_MtpServer.cpp
android_mtp_MtpDatabase.cpp
android_mtp_MtpDevice.cpp
android_mtp_Server.cpp


MtpReceiver.java获取到usb连接到电脑的广播，1.启动MtpService 2.在contentprovider content://media/none/mtp_connected 插入URI
MtpService 创建MtpDatabase, MtpServer
负责搜索出Android设备上所有“挂载”的存储设备，然后根据这些设备创建MtpStorage对象，将MtpStorage添加到MtpDatabase和MtpServer

在启动的时候会启动Java层的MtpServer， 负责Android设备和PC之间通讯和数据同步



C++层： /frameworks/av/media/mtp
MtpServer.cpp的run()函数通过JNI调用C++层的MtpServer不断的进行轮寻，并通过驱动不断的从/dev/mtp_usb获取PC端传过来的数据，然后通过handlerRequest根据相应的操作指令进行处理
如操作是用户在PC端打开一个文件，相应的操作是MTP_OPERATION_GET_OBJECT
会调用doGetObject(), 在这个函数中首先会调用mDatabase-&gt;getObjectFilePath获取文件的路径，大小，格式等信息
getObjectFilePath是JNI定义的函数，会回调Java层MtpDatabase.java的getObjectFilePath从MediaProvider数据库中获取信息


MtpRequestPacket是解析PC请求指令的类
MtpResponsePackert是响应PC请求的类




kernel层: </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/m8996/">m8996</rich_text>
				<rich_text>/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/m8996/kernel/">kernel</rich_text>
				<rich_text>/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/m8996/kernel/drivers/">drivers</rich_text>
				<rich_text>/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/m8996/kernel/drivers/usb/">usb</rich_text>
				<rich_text>/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/m8996/kernel/drivers/usb/gadget/">gadget</rich_text>
				<rich_text>/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/m8996/kernel/drivers/usb/gadget/function/">function</rich_text>
				<rich_text>/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/m8996/kernel/drivers/usb/gadget/function/f_mtp.c">f_mtp.c</rich_text>
				<rich_text>
与节点/dev/mtp_usb进行映射
f_mtp.c
在mtp_setup函数中，通过misc_register将mtp设备映射到/dev/mtp_usb
用户空间操作节点/dev/mtp_usb就是调用MTP驱动中的file_operations中的file_operation相关函数
mtp_read()会通过USB数据读取“PC发送给Android设备的请求”，获取请求以后，会通过copy_to_user将数据从&quot;内核空间&quot;copy到&quot;用户空间&quot;


UsbModeChooserActivity 





http://www.cnblogs.com/skywang12345/p/3474206.html

MtpReceiver.java
Intent.ACTON_BOOT_COMPLETED
或者UsbManager.ACTION_USB_STATE
根据UsbManager.USB_CONFIGURED 以及UsbManager.USB_FUNCTION_MTP UsbManager.USB_FUNCTION_PTP
来启动对呀mtp或者ptpserver，并插入content://media/none/mtp_connected
根据UsbManager.USB_DATA_UNLOCK来中断server


Defect- </rich_text>
				<rich_text foreground="#000000">1865164</rich_text>
				<rich_text> MTP


底层 log 没有异常啊，mtp设备已经正常识别，如果是不能读写文件，请将pr assign 给上层的同事
01-10 12:51:27.842 0 0 I : [wxc]msm_otg_notify_chg_type AC or USB charger in
01-10 12:51:27.842 0 0 I msm_otg 78db000.usb: Avail curr from USB = 100
01-10 12:51:27.849 0 0 I android_work: android_work: did not send uevent (0 0 (null))
01-10 12:51:27.858 0 0 I init : Service 'config_bluetooth' (pid 439) exited with status 0
01-10 12:51:27.878 0 0 I android_work: android_work: sent uevent USB_STATE=CONNECTED
01-10 12:51:27.882 0 0 I android_work: android_work: sent uevent USB_STATE=DISCONNECTED
01-10 12:51:27.961 0 0 I android_work: android_work: sent uevent USB_STATE=CONNECTED
01-10 12:51:27.965 0 0 I android_usb gadget: high-speed config #1: 86000c8.android_usb
01-10 12:51:27.965 0 0 I diag : USB channel diag connected
01-10 12:51:27.965 0 0 I msm_otg 78db000.usb: Avail curr from USB = 500
01-10 12:51:28.019 0 0 I android_work: android_work: sent uevent USB_STATE=CONFIGURED


关于这条，我看了一下在Unmount的时候
1. MtpService.java 会调用mServer.removeStorage(storage);  这个调用应该是个阻塞调用，一直没有返回，只有等到电脑端进度条结束的时候才会返回， 然后SD卡才显示弹出。
2.  随之调用 MtpServer.java 的  MtpServer#removeStorage
 3.  随之调用 MtpServer.cpp的   MtpServer#removeStorage -&gt; MtpServer#sendStoreRemoved  -&gt;  MtpServer#sendEvent(MTP_EVENT_STORE_REMOVED, id);  -&gt;  MtpEventPacket#write
   
4.  而MtpEventPacket#write 应该是直接跟驱动交互了， 

int MtpEventPacket::write(int fd) {
    struct mtp_event    event;

    putUInt32(MTP_CONTAINER_LENGTH_OFFSET, mPacketSize);
    putUInt16(MTP_CONTAINER_TYPE_OFFSET, MTP_CONTAINER_TYPE_EVENT);

    event.data = mBuffer;
    event.length = mPacketSize;
    int ret = ::ioctl(fd, MTP_SEND_EVENT, (unsigned long)&amp;event);
    return (ret &lt; 0 ? ret : 0);
}


</rich_text>
				<rich_text weight="heavy">1.  MTP和storage显示不一致问题</rich_text>
				<rich_text>
[原因分析]
 
android源生有个保护功能，该功能主要是在可用空间低于一个值时（500M和储存设备的10％大小取小值），
 
会禁用下载等功能，显示在PC机上的可用空间是减去了这个值的。
 
在StorageManager.java中定义了这两个值：
 
</rich_text>
				<rich_text weight="heavy">private</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">final</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.26.41.73:8080/source/s?refs=DEFAULT_THRESHOLD_PERCENTAGE&amp;project=M8976">DEFAULT_THRESHOLD_PERCENTAGE</rich_text>
				<rich_text> = 10;
</rich_text>
				<rich_text weight="heavy">private</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">final</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">long</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.26.41.73:8080/source/s?refs=DEFAULT_THRESHOLD_MAX_BYTES&amp;project=M8976">DEFAULT_THRESHOLD_MAX_BYTES</rich_text>
				<rich_text> = 500 * </rich_text>
				<rich_text link="webs http://172.26.41.73:8080/source/s?defs=MB_IN_BYTES&amp;project=M8976">MB_IN_BYTES</rich_text>
				<rich_text>; 
 
在MtpStorage.cpp::getFreeSpace中判断显示的值
 
return (freeSpace &gt; mReserveSpace ? freeSpace - mReserveSpace : 0); 
 
[解决方案]
 
上海的同仁是把这个值减小到100
 
[测试建议]
 
测试值是否还是相差很大。 


</rich_text>
				<rich_text scale="h2" weight="heavy">2.  On MTP mode, after import a vcf file to external sdcard, cannot see it through PC soon.</rich_text>
				<rich_text>

</rich_text>
				<rich_text weight="heavy">【Steps】</rich_text>
				<rich_text>
1. DUT is connected with PC through mtp mode,
2. Import a vcf file from contacts to sdcard.
</rich_text>
				<rich_text weight="heavy">【Actual Result】</rich_text>
				<rich_text>
After step2, we can see the vcf file in internal storage through FileManager app, but cannot see it
through PC. While after restart the DUT or remove and insert sdcard again, then we can see the
file through PC on MTP mode.
</rich_text>
				<rich_text weight="heavy">【Expect Result】</rich_text>
				<rich_text>
After step2, can see the vcf file through PC at the first time, no need to restart the phone or remove
and insert sdcard again.
【Log snippet】
01-01 12:15:48.439 D/UsbDeviceManager( 1318): setEnabledFunctions functions=mtp,adb,
forceRestart=true
01-01 12:15:48.439 I/UsbDeviceManager( 1318): Setting USB config to mtp,adb
01-01 12:15:48.490 D/UsbDeviceManager( 1318): setUsbConfig(mtp,adb)
01-01 12:15:48.997 D/UsbDeviceManager( 1318): broadcasting Intent { act=
android.hardware.usb.action.USB_STATE flg=0x30000000 (has extras) } connected: true
configured: false mCurrentFunctions: mtp,adb isUsbTransferAllowed: true mUsbDataUnlocked:
true
01-01 12:15:49.057 D/UsbDeviceManager( 1318): broadcasting Intent { act=
android.hardware.usb.action.USB_STATE flg=0x30000000 (has extras) } connected: true
configured: true mCurrentFunctions: mtp,adb isUsbTransferAllowed: true mUsbDataUnlocked: true
01-01 12:15:49.157 D/MtpService( 5666): starting MTP server in MTP mode
01-01 12:15:49.163 D/MtpService( 5666): Adding MTP storage 0x10001 at /storage/emulated/0
01-01 12:15:49.163 D/MtpService( 5666): Adding MTP storage 0x31550001 at /storage/406E-1405
01-01 12:16:12.429 I/VCardService(11717): MediaScanner update is in progress.
01-01 12:16:12.436 D/MediaScannerReceiver( 5666): action:
android.intent.action.MEDIA_SCANNER_SCAN_FILE </rich_text>
				<rich_text weight="heavy">path: /storage/406E-1405/contactszzz.vcf</rich_text>
				<rich_text>


1) 使得USB连接处于MTP模式
To support this MTP problem, please ensure mtp is included in the system property &quot;
persist.sys.usb.config&quot; firstly.
For example,
Adb root
</rich_text>
				<rich_text weight="heavy">Adb shell setprop persist.sys.usb.config mtp,adb</rich_text>
				<rich_text>
Adb shell stop
Adb shell start
Then the changed(add/delete) files in internal storage can be seen through PC.

2）But after change files on sdcard , we still need mediaprovider to scan for files on non-internal
storage.
Please try to modify /src/com/android/
providers/media/MediaScannerReceiver.java as below:
@@ -62,7 +62,7 @@ public class MediaScannerReceiver extends BroadcastReceiver {
// scan whenever any volume is mounted
scan(context, MediaProvider.EXTERNAL_VOLUME);
} else if (Intent.ACTION_MEDIA_SCANNER_SCAN_FILE.equals(action) &amp;&amp;
</rich_text>
				<rich_text foreground="#ffff00000000" weight="heavy">- path != null &amp;&amp; path.startsWith(externalStoragePath + &quot;/&quot;)) {</rich_text>
				<rich_text foreground="#ffff00000000">
</rich_text>
				<rich_text foreground="#ffff00000000" weight="heavy">+ path != null) {</rich_text>
				<rich_text>
scanFile(context, path);
}
}

3
After picking above change, the file added to sdcard can be seen through MTP, but the size maybe
zero. This is another issue.
数据写到sd卡上需要一定的时间，添加sleep循环等待

Please try to modify /media/java/android/media/MediaScanner.java as below:
public Uri scanSingleFile(String path, String volumeName, String mimeType) {
try {
initialize(volumeName);
prescan(path, true);
File file = new File(path);
if (!file.exists()) {
return null;
}
+ for (int x = 0;x &lt; 15;x++) {
+ if (file.length() != 0L)
+ break;
+ try{
+ Thread.sleep(1000);
+}
+ catch(InterruptedException aa){
+ break;
+}
+}
// lastModified is in milliseconds on Files.
long lastModifiedSeconds = file.lastModified() / 1000;
Here it takes ~9secs for the vcf file to be written to actual disk, so when the mediascanner reads
file size before this, it gets size as zero, so we see zero on PC too.
Note: with this we will see some delay before the .vcf is shown on PC because of retry added, but
we will see correct size. You can control the sleep time here.







</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="MediaScanner" prog_lang="custom-colors" readonly="False" tags="" unique_id="74">
				<rich_text>
cts run cts -c android.media.cts.MediaScannerTest -m testMediaScanner


MediaScannerReceiver 会在系统重启和插播SD卡以后收到广播，重新扫描
-&gt; 启动MediaScannerService

数据库的位置
/data/data/com.android.providers.media/databases
Android多媒体库由表，视图，索引以及触发器组成


</rich_text>
				<rich_text scale="h2" weight="heavy">xref: /m8996/packages/providers/MediaProvider/src/com/android/providers/media/</rich_text>
				<rich_text>
MediaProvider.java 继承于ContentProvider
有一个变量是mUnMountReceiver,用来接收Intent.ACTION_MEDIA_EJECT这个intent
通过detachVolume(Uri.parse(&quot;content://media/external&quot;)); 来移除外部存储
detachVolume中将external storage从mDatabases中进行remove, 移除的并非是数据库文件，只是让其暂时无法操作，数据库查询返回为空
mDatabases是一个&lt;String , DatabaseHelper&gt;的map, 应该主要是下面连个关键字
static final String INTERNAL_VOLUME = &quot;internal&quot;; 
static final String EXTERNAL_VOLUME = &quot;external&quot;;


</rich_text>
				<rich_text scale="h2" weight="heavy">MediaScannerReceiver.java</rich_text>
				<rich_text>
这个Receiver静态注册在AndroidManifest中
会在接收到下列的广播以后相应
android.intent.action.BOOT_COMPLETED  //Receiver会在系统启动的时候扫描内部和外部存储
接收到此广播以后, 
会扫描下面两个目录：
MediaProvider.INTERNAL_VOLUME ===&gt; /system/media || /oem/media
MediaProvider.EXTERNAL_VOLUME ===&gt; /mnt/sdcard
 

//下面几个都是与外部存储相关
android.intent.action.MEDIA_MOUNTED 这个广播由MountService发送
android.intent.action.MEDIA_UNMOUNTED
android.intent.action.MEDIA_SCANNER_SCAN_FILE

通过startservice启动MediaScannerService进行扫描

</rich_text>
				<rich_text scale="h2" weight="heavy">MediaScannerService.java</rich_text>
				<rich_text>
oncreate -&gt; onStartCommand

在onCreate的时候启动了一个线程，并将service自己放到这个thread中运行，为了不block住主线程
Thread thr = new Thread(null, this, &quot;MediaScannerService&quot;);
thr.start();
在这个线程启动的时候，设置了线程的优先级，并创建了自己的Loop，然后初始化了mServiceHandler

启动MediaScanner，调用它的scanDirectories()

Scan发生之前会发送广播Intent.ACTION_MEDIA_SCANNER_STARTED
结束之后会发送广播Intent,ACTION_MEDIA_SCANNER_FINISHED

MEDIA_SCANNER_STARTED

在开始扫描前会通过MediaProvider插入一个标志MediaScanner的uri
    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Uri&amp;project=m8996">Uri</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=scanUri&amp;project=m8996">scanUri</rich_text>
				<rich_text> = </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getContentResolver&amp;project=m8996">getContentResolver</rich_text>
				<rich_text>().</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=insert&amp;project=m8996">insert</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=MediaStore&amp;project=m8996">MediaStore</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getMediaScannerUri&amp;project=m8996">getMediaScannerUri</rich_text>
				<rich_text>(), </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=values&amp;project=m8996">values</rich_text>
				<rich_text>);
在扫描结束以后会删除
            </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getContentResolver&amp;project=m8996">getContentResolver</rich_text>
				<rich_text>().</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=delete&amp;project=m8996">delete</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=scanUri&amp;project=m8996">scanUri</rich_text>
				<rich_text>, </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=m8996">null</rich_text>
				<rich_text>, </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=m8996">null</rich_text>
				<rich_text>);
通过这个可以在MediaProvider中记录开始扫描和结束扫描的状态

然后在MediaProvider将这些状态dump到数据库中





</rich_text>
				<rich_text weight="heavy">scanDirectories</rich_text>
				<rich_text>()
主要分为三个部分
1) </rich_text>
				<rich_text background="#e4e4ff">initialize</rich_text>
				<rich_text> 
获取MediaProvider，获取Audio, Images等Uri以便扫描的时候将数据插入对应的数据库表
2）prescan 检测数据库中的条目，如果发现这个路径的文件已经被删除，则在数据库中删除对应的条目
  如果是scan file ， 则需要确定 _data 和  Id &gt; ?
  如果是scan directory ， 则需要确定id &gt; ? 
  每次扫描1000行数据， 从MediaScanner数据库查找数据后， 对比文件系统， 如果文件系统文件不存在， 则进行删除
 在高通提交的代码中， 如果文件存在， 则将其存到mFileEntryCache这个数组中
 
3) processDirectory:
    ---Java层的MediaScanner中的processDirectory调用JNI层android_media_MediaScanner的processDirectoryd代码
    ---JNI中的processDirectory首先将java层的mediacanner client(MyMediaScanner)封装到native的MyMeidaScannerClient
        然后调用native的MediaScanner.processDirectory, 并将path和client作为参数传入
    ---Native层的MediaScanner.processDirectory 开始真正对process进行扫描，对于目录，递归调用ProcessDirectory, 对每个文件调用native层的MyMediaScannerClient.scanFile处理。doProcessDirectory -&gt; doProcessDirectoryEntry -&gt; client.scanFile
    ---Native端的MediaScannerClient.scanFile最终调用的是Java端的MyMediaScannerClient.scanFile. 
    ---MyMediaScannerClient.scanFile主要分为三个部分
          --- beginFile：获取文件信息，建立file_entry
          ---doScanFile：针对不同文件进行不同的处理, 将上次更改的文件重新进行扫描
              processFile 
              processImageFile
          --- endFile: 插入数据库

processDirectory会通过递归调用的方式扫描路径下的所有文件及子目录，MyMediaScannerClient负责处理扫描文件的工作

4) postscan





331    </rich_text>
				<rich_text weight="heavy">private</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">final</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SQLiteDatabase&amp;project=m8996">SQLiteDatabase</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=CustomFunction&amp;project=m8996">CustomFunction</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=mObjectRemovedCallback&amp;project=m8996">mObjectRemovedCallback</rich_text>
				<rich_text> =
332                </rich_text>
				<rich_text weight="heavy">new</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SQLiteDatabase&amp;project=m8996">SQLiteDatabase</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=CustomFunction&amp;project=m8996">CustomFunction</rich_text>
				<rich_text>() {
333        </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">void</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=callback&amp;project=m8996">callback</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=String&amp;project=m8996">String</rich_text>
				<rich_text>[] args) {
334            // We could remove only the deleted entry from the cache, but that
335            // requires the path, which we don't have here, so instead we just
336            // clear the entire cache.
337            // TODO: include the path in the callback and only remove the affected
338            // entry from the cache
339            mDirectoryCache.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=clear&amp;project=m8996">clear</rich_text>
				<rich_text>();
340            // do nothing if the operation originated from MTP
341            </rich_text>
				<rich_text weight="heavy">if</rich_text>
				<rich_text> (mDisableMtpObjectCallbacks) </rich_text>
				<rich_text weight="heavy">return</rich_text>
				<rich_text>;
342
343            </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Log&amp;project=m8996">Log</rich_text>
				<rich_text>.d(TAG, &quot;object removed &quot; + args[0]);
344            </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=IMtpService&amp;project=m8996">IMtpService</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mtpService&amp;project=m8996">mtpService</rich_text>
				<rich_text> = mMtpService;
345            </rich_text>
				<rich_text weight="heavy">if</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mtpService&amp;project=m8996">mtpService</rich_text>
				<rich_text> != </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=m8996">null</rich_text>
				<rich_text>) {
346                </rich_text>
				<rich_text weight="heavy">try</rich_text>
				<rich_text> {
347                    sendObjectRemoved(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Integer&amp;project=m8996">Integer</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=parseInt&amp;project=m8996">parseInt</rich_text>
				<rich_text>(args[0]));
348                } </rich_text>
				<rich_text weight="heavy">catch</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=NumberFormatException&amp;project=m8996">NumberFormatException</rich_text>
				<rich_text> e) {
349                    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Log&amp;project=m8996">Log</rich_text>
				<rich_text>.e(TAG, &quot;NumberFormatException in mObjectRemovedCallback&quot;, e);
350                }
351            }
352        }
353    };


        /*
                            else {
                                Log.i(&quot;zhengyu&quot;,&quot;exsist in fs&quot;);
                                where = MediaStore.Files.FileColumns._ID + &quot;= ?&quot;;
                                cc = mMediaProvider.query(mPackageName, mFilesUri, FILES_PRESCAN_PROJECTION,
                                                        where, new String[]{parentId}, MediaStore.Files.FileColumns._ID, null);
                                if(cc != null &amp;&amp; cc.getCount() == 0){
                                    Log.i(&quot;zhengyu&quot;,&quot;delete&quot;);
                                    deleter.delete(rowId);
                                }
                            }
                            */
                            
                            
                            
 MediaScanner的启动是通过MediaScannerReceiver接收广播
 
 50        &lt;receiver android:</rich_text>
				<rich_text weight="heavy">name=</rich_text>
				<rich_text>&quot;MediaScannerReceiver&quot;&gt;
51            &lt;intent-filter&gt;
52                &lt;action android:</rich_text>
				<rich_text weight="heavy">name=</rich_text>
				<rich_text>&quot;</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?path=android.intent.action.BOOT_COMPLETED&amp;project=m8996">android.intent.action.BOOT_COMPLETED</rich_text>
				<rich_text>&quot; /&gt;
53            &lt;/intent-filter&gt;
54            &lt;intent-filter&gt;
55                &lt;action android:</rich_text>
				<rich_text weight="heavy">name=</rich_text>
				<rich_text>&quot;</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?path=android.intent.action.MEDIA_MOUNTED&amp;project=m8996">android.intent.action.MEDIA_MOUNTED</rich_text>
				<rich_text>&quot; /&gt;
56                &lt;data android:</rich_text>
				<rich_text weight="heavy">scheme=</rich_text>
				<rich_text>&quot;file&quot; /&gt;
57            &lt;/intent-filter&gt;
58            &lt;intent-filter&gt;
59                &lt;action android:</rich_text>
				<rich_text weight="heavy">name=</rich_text>
				<rich_text>&quot;</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?path=android.intent.action.MEDIA_UNMOUNTED&amp;project=m8996">android.intent.action.MEDIA_UNMOUNTED</rich_text>
				<rich_text>&quot; /&gt;
60                &lt;data android:</rich_text>
				<rich_text weight="heavy">scheme=</rich_text>
				<rich_text>&quot;file&quot; /&gt;
61            &lt;/intent-filter&gt;
62            &lt;intent-filter&gt;
63                &lt;action android:</rich_text>
				<rich_text weight="heavy">name=</rich_text>
				<rich_text>&quot;</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?path=android.intent.action.MEDIA_SCANNER_SCAN_FILE&amp;project=m8996">android.intent.action.MEDIA_SCANNER_SCAN_FILE</rich_text>
				<rich_text>&quot; /&gt;
64                &lt;data android:</rich_text>
				<rich_text weight="heavy">scheme=</rich_text>
				<rich_text>&quot;file&quot; /&gt;
65            &lt;/intent-filter&gt;
66        &lt;/receiver&gt;


 首先会收到emulated MOUNT的广播                           
                            
                            
                            
08-02 11:40:50.589  1944  3050 I zhengyu : uri: content://media/external/file?deletedata=false
08-02 11:40:50.589  1944  3050 I zhengyu :  userWhere:_id IN (?,?,?)
08-02 11:40:50.589  1944  3050 I zhengyu :  whereArgs: [Ljava.lang.String;@7f72b3b
08-02 11:40:50.590  1944  3050 I zhengyu : match:700
08-02 11:40:50.590  1944  3050 I zhengyu : 1
08-02 11:40:50.590  1944  3050 I zhengyu : 2
08-02 11:40:50.590  1944  3050 I zhengyu : 3
08-02 11:40:50.590  1944  3050 I zhengyu : 4
08-02 11:40:50.590  1944  3050 I zhengyu : 5 : false
08-02 11:40:51.105  1944  3050 I zhengyu : mediascanner modify
08-02 11:40:55.698  1944  3681 I zhengyu : mediascanner modify
08-02 11:40:56.017  1944  3681 I zhengyu : mediascanner modify


08-02 11:41:56.670  1944  3160 I zhengyu : uri: content://media/external/images/media
08-02 11:41:56.670  1944  3160 I zhengyu :  userWhere:_id=?
08-02 11:41:56.670  1944  3160 I zhengyu :  whereArgs: [Ljava.lang.String;@51ccad0
08-02 11:41:56.673  1944  3160 I zhengyu : match:1
08-02 11:41:56.674  1944  3160 I zhengyu : 1
08-02 11:41:56.674  1944  3160 I zhengyu : 2
08-02 11:41:56.674  1944  3160 I zhengyu : 3
08-02 11:41:56.674  1944  3160 I zhengyu : 4
08-02 11:41:56.675  1944  3160 I zhengyu : 5 : null
08-02 11:41:56.675  1944  3160 I zhengyu : delete data: /storage/emulated/0/Pictures/Screenshots/Screenshot_20160802-114150.png
08-02 11:41:56.675  1944  3160 I zhengyu : after

                            
                            
android_media_MediaScanner_processFile
       mp-&gt;processFile
              -&gt;processFileInternal 
                   -&gt;MetadataRetrieverClient.setDataSource
 这里的mp是指MetadataRetrieverClient      


208            </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=MediaScannerConnection&amp;project=m8996">MediaScannerConnection</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=scanFile&amp;project=m8996">scanFile</rich_text>
				<rich_text>(</rich_text>
				<rich_text weight="heavy">this</rich_text>
				<rich_text>,
209                    </rich_text>
				<rich_text weight="heavy">new</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=String&amp;project=m8996">String</rich_text>
				<rich_text>[] { </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=file&amp;project=m8996">file</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=toString&amp;project=m8996">toString</rich_text>
				<rich_text>() }, </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=m8996">null</rich_text>
				<rich_text>,
210                    </rich_text>
				<rich_text weight="heavy">new</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=MediaScannerConnection&amp;project=m8996">MediaScannerConnection</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=OnScanCompletedListener&amp;project=m8996">OnScanCompletedListener</rich_text>
				<rich_text>() {
211                </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">void</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=onScanCompleted&amp;project=m8996">onScanCompleted</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=String&amp;project=m8996">String</rich_text>
				<rich_text> path, </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Uri&amp;project=m8996">Uri</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=uri&amp;project=m8996">uri</rich_text>
				<rich_text>) {
212                    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Log&amp;project=m8996">Log</rich_text>
				<rich_text>.i(&quot;ExternalStorage&quot;, &quot;Scanned &quot; + path + &quot;:&quot;);
213                    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Log&amp;project=m8996">Log</rich_text>
				<rich_text>.i(&quot;ExternalStorage&quot;, &quot;-&gt; uri=&quot; + </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=uri&amp;project=m8996">uri</rich_text>
				<rich_text>);
214                }
215            });






.nomedia 会使得图片不当到image视图当中，并不会修改数据库中parent的值

                </rich_text>
				<rich_text foreground="#666666">// rescan for metadata if file was modified since last scan</rich_text>
				<rich_text>
677                </rich_text>
				<rich_text weight="heavy">if</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=entry&amp;project=m8976">entry</rich_text>
				<rich_text> != </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=m8976">null</rich_text>
				<rich_text> &amp;&amp; (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=entry&amp;project=m8976">entry</rich_text>
				<rich_text>.mLastModifiedChanged || scanAlways)) {
</rich_text>
				<rich_text foreground="#ffff00000000">678                    </rich_text>
				<rich_text foreground="#ffff00000000" weight="heavy">if</rich_text>
				<rich_text foreground="#ffff00000000"> (</rich_text>
				<rich_text foreground="#ffff00000000" link="webs http://172.16.12.204:8080/source/s?defs=noMedia&amp;project=m8976">noMedia</rich_text>
				<rich_text foreground="#ffff00000000">) {
679                        </rich_text>
				<rich_text foreground="#ffff00000000" link="webs http://172.16.12.204:8080/source/s?defs=result&amp;project=m8976">result</rich_text>
				<rich_text foreground="#ffff00000000"> = endFile(</rich_text>
				<rich_text foreground="#ffff00000000" link="webs http://172.16.12.204:8080/source/s?defs=entry&amp;project=m8976">entry</rich_text>
				<rich_text foreground="#ffff00000000">, </rich_text>
				<rich_text foreground="#ffff00000000" weight="heavy">false</rich_text>
				<rich_text foreground="#ffff00000000">, </rich_text>
				<rich_text foreground="#ffff00000000" weight="heavy">false</rich_text>
				<rich_text foreground="#ffff00000000">, </rich_text>
				<rich_text foreground="#ffff00000000" weight="heavy">false</rich_text>
				<rich_text foreground="#ffff00000000">, </rich_text>
				<rich_text foreground="#ffff00000000" weight="heavy">false</rich_text>
				<rich_text foreground="#ffff00000000">, </rich_text>
				<rich_text foreground="#ffff00000000" weight="heavy">false</rich_text>
				<rich_text foreground="#ffff00000000">);</rich_text>
				<rich_text>
680                    } </rich_text>
				<rich_text weight="heavy">else</rich_text>
				<rich_text> {
681                        </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=String&amp;project=m8976">String</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=lowpath&amp;project=m8976">lowpath</rich_text>
				<rich_text> = </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=path&amp;project=m8976">path</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=toLowerCase&amp;project=m8976">toLowerCase</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Locale&amp;project=m8976">Locale</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ROOT&amp;project=m8976">ROOT</rich_text>
				<rich_text>);
682                        </rich_text>
				<rich_text weight="heavy">boolean</rich_text>
				<rich_text> ringtones = (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=lowpath&amp;project=m8976">lowpath</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=indexOf&amp;project=m8976">indexOf</rich_text>
				<rich_text>(RINGTONES_DIR) &gt; </rich_text>
				<rich_text foreground="#a52a2a">0</rich_text>
				<rich_text>);
683                        </rich_text>
				<rich_text weight="heavy">boolean</rich_text>
				<rich_text> notifications = (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=lowpath&amp;project=m8976">lowpath</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=indexOf&amp;project=m8976">indexOf</rich_text>
				<rich_text>(NOTIFICATIONS_DIR) &gt; </rich_text>
				<rich_text foreground="#a52a2a">0</rich_text>
				<rich_text>);
684                        </rich_text>
				<rich_text weight="heavy">boolean</rich_text>
				<rich_text> alarms = (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=lowpath&amp;project=m8976">lowpath</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=indexOf&amp;project=m8976">indexOf</rich_text>
				<rich_text>(ALARMS_DIR) &gt; </rich_text>
				<rich_text foreground="#a52a2a">0</rich_text>
				<rich_text>);
685                        </rich_text>
				<rich_text weight="heavy">boolean</rich_text>
				<rich_text> podcasts = (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=lowpath&amp;project=m8976">lowpath</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=indexOf&amp;project=m8976">indexOf</rich_text>
				<rich_text>(PODCAST_DIR) &gt; </rich_text>
				<rich_text foreground="#a52a2a">0</rich_text>
				<rich_text>);
686                        </rich_text>
				<rich_text weight="heavy">boolean</rich_text>
				<rich_text> music = (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=lowpath&amp;project=m8976">lowpath</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=indexOf&amp;project=m8976">indexOf</rich_text>
				<rich_text>(MUSIC_DIR) &gt; </rich_text>
				<rich_text foreground="#a52a2a">0</rich_text>
				<rich_text>) ||
687                            (!ringtones &amp;&amp; !notifications &amp;&amp; !alarms &amp;&amp; !podcasts);
688
689                        </rich_text>
				<rich_text weight="heavy">boolean</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isaudio&amp;project=m8976">isaudio</rich_text>
				<rich_text> = </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=MediaFile&amp;project=m8976">MediaFile</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isAudioFileType&amp;project=m8976">isAudioFileType</rich_text>
				<rich_text>(mFileType);
690                        </rich_text>
				<rich_text weight="heavy">boolean</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isvideo&amp;project=m8976">isvideo</rich_text>
				<rich_text> = </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=MediaFile&amp;project=m8976">MediaFile</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isVideoFileType&amp;project=m8976">isVideoFileType</rich_text>
				<rich_text>(mFileType);
691                        </rich_text>
				<rich_text weight="heavy">boolean</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isimage&amp;project=m8976">isimage</rich_text>
				<rich_text> = </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=MediaFile&amp;project=m8976">MediaFile</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isImageFileType&amp;project=m8976">isImageFileType</rich_text>
				<rich_text>(mFileType);
692
693                        </rich_text>
				<rich_text weight="heavy">if</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isaudio&amp;project=m8976">isaudio</rich_text>
				<rich_text> || </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isvideo&amp;project=m8976">isvideo</rich_text>
				<rich_text> || </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isimage&amp;project=m8976">isimage</rich_text>
				<rich_text>) {
694                            </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=path&amp;project=m8976">path</rich_text>
				<rich_text> = </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Environment&amp;project=m8976">Environment</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=maybeTranslateEmulatedPathToInternal&amp;project=m8976">maybeTranslateEmulatedPathToInternal</rich_text>
				<rich_text>(</rich_text>
				<rich_text weight="heavy">new</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=File&amp;project=m8976">File</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=path&amp;project=m8976">path</rich_text>
				<rich_text>))
695                                    .</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getAbsolutePath&amp;project=m8976">getAbsolutePath</rich_text>
				<rich_text>();
696                        }
697
698                        </rich_text>
				<rich_text foreground="#666666">// we only extract metadata for audio and video files</rich_text>
				<rich_text>
699                        </rich_text>
				<rich_text weight="heavy">if</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isaudio&amp;project=m8976">isaudio</rich_text>
				<rich_text> || </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isvideo&amp;project=m8976">isvideo</rich_text>
				<rich_text>) {
700                            processFile(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=path&amp;project=m8976">path</rich_text>
				<rich_text>, </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mimeType&amp;project=m8976">mimeType</rich_text>
				<rich_text>, </rich_text>
				<rich_text weight="heavy">this</rich_text>
				<rich_text>);
701                        }
702
703                        </rich_text>
				<rich_text weight="heavy">if</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isimage&amp;project=m8976">isimage</rich_text>
				<rich_text>) {
704                            processImageFile(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=path&amp;project=m8976">path</rich_text>
				<rich_text>);
705                        }

MediaProvider中那些parent为-1的可能就是插入的时候，应用自己的需求。














</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="mediaprovider recover patch" prog_lang="custom-colors" readonly="False" tags="" unique_id="125">
					<rich_text>diff --git a/media/java/android/media/MediaScanner.java b/media/java/android/media/MediaScanner.java
index bfc2e04..9961bfe 100644
--- a/media/java/android/media/MediaScanner.java
+++ b/media/java/android/media/MediaScanner.java
@@ -77,6 +77,11 @@ import android.os.Debug;
 /*[BUGFIX]-Add-END by TCTNB.zhengyu.hu*/
 
 
+/* [BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu, 2016/08/11, Defect-2545868  recover database after reboot */
+import java.util.HashSet;
+import java.util.HashMap;
+/* [BUGFIX]-Add-END by TCTNB.zhengyu.hu */
+
 /**
  * Internal service helper that no-one should use directly.
  *
@@ -136,6 +141,7 @@ public class MediaScanner
             Files.FileColumns.DATA, // 1
             Files.FileColumns.FORMAT, // 2
             Files.FileColumns.DATE_MODIFIED, // 3
+            Files.FileColumns.PARENT //4 [BUGFIX]-Add by TCTNB.zhengyu.hu,  2016/08/11, Defect-2545868 , recover database after reboot
     };
 
     private static final String[] ID_PROJECTION = new String[] {
@@ -146,6 +152,7 @@ public class MediaScanner
     private static final int FILES_PRESCAN_PATH_COLUMN_INDEX = 1;
     private static final int FILES_PRESCAN_FORMAT_COLUMN_INDEX = 2;
     private static final int FILES_PRESCAN_DATE_MODIFIED_COLUMN_INDEX = 3;
+    private static final int FILES_PRESCAN_PARENT_COLUMN_INDEX = 4; // [BUGFIX]-Add by TCTNB.zhengyu.hu, 2016/08/11, Defect-2545868 , recover database after reboot
+    private static final int FILES_PRESCAN_PARENT_COLUMN_INDEX = 4; // [BUGFIX]-Add by TCTNB.zhengyu.hu, 2016/08/11, Defect-2545868 , recover database after reboot
 
     private static final String[] PLAYLIST_MEMBERS_PROJECTION = new String[] {
             Audio.Playlists.Members.PLAYLIST_ID, // 0
@@ -377,6 +384,10 @@ public class MediaScanner
 
     private DropBoxManager mDropbox; /*[BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu, 2016/07/25, Defect-2545868 add Log*/
 
+    /* [BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu,  2016/08/11, Defect-2545868 Walkaround, recover database after reboot */
+    private HashMap&lt;Long,String&gt; problemRecordsMap; //record problem directories or folders, Key: old directory Rowid  value:old directory path(_data)
+    /* [BUGFIX]-Add-END by TCTNB.zhengyu.hu */
+
     private static class FileEntry {
         long mRowId;
         String mPath;
@@ -431,6 +442,8 @@ public class MediaScanner
         Log.d(TAG, &quot;MSDebug create cache for the fileentry&quot;);
         /*[BUGFIX]-Add-END by TCTNB.zhengyu.hu*/
         mDropbox = (DropBoxManager)mContext.getSystemService(Context.DROPBOX_SERVICE);  /*[BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu, 2016/07/25, Defect-2545868 add Log*/
+
+        problemRecordsMap = = new HashMap&lt;Long,String&gt;(); // [BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu,  2016/08/11, Defect-2545868 recover database after reboot
     }
 
     private void setDefaultRingtoneFileNames() {
@@ -1254,6 +1267,11 @@ public class MediaScanner
         MediaBulkDeleter deleter = new MediaBulkDeleter(mMediaProvider, mPackageName,
                 builder.build());
 
+        /* [BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu, 2016/08/11, Defect-2545868  recover database after reboot */
+        HashSet&lt;Long&gt; scannedRecord = new HashSet&lt;Long&gt;(); //record the scanned records
+        problemRecordsMap.clear();
+        /* [BUGFIX]-Add-END by TCTNB.zhengyu.hu */
+
         // Build the list of files from the content provider
         try {
             if (prescanFiles) {
@@ -1288,6 +1306,7 @@ public class MediaScanner
                         String path = c.getString(FILES_PRESCAN_PATH_COLUMN_INDEX);
                         int format = c.getInt(FILES_PRESCAN_FORMAT_COLUMN_INDEX);
                         long lastModified = c.getLong(FILES_PRESCAN_DATE_MODIFIED_COLUMN_INDEX);
+                        long parentId = c.getLong(FILES_PRESCAN_PARENT_COLUMN_INDEX); //[BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu, 2016/08/11, Defect-2545868  recover database after reboot
                         lastId = rowId;
 
                         // Only consider entries with absolute path names.
@@ -1326,12 +1345,38 @@ public class MediaScanner
                                                 parent, null);
                                     }
                                 }
-                                   } else {
-                               /*[BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu, 2016/06/18, Defect-2174549*/
-                                FileEntry fileEntry = new FileEntry(rowId, path, lastModified, format);
-                                mFileEntryCache.put(path,fileEntry);
-                                //Log.d(TAG,&quot;prescan add to cache pathe =&quot;+path);
-                                /*[BUGFIX]-Add-END by TCTNB.zhengyu.hu, 2016/06/18*/
+                            } else {
+                                /* [BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu, 2016/08/11, Defect-2545868  recover database after reboot */
+
+                                //Fix the wrong status in MediaProvider database
+                                //the Bug-2545868 happens because the parent directory record is deleted in the database by something we don't know
+                                //and the child directories still point to the unexsist deleted parent record
+                                //so we need to record the problem parent directories or folders in preScan
+                                //then update the new parentId in postScan for child files or directories
+
+                                if(parentId &gt; 0 &amp;&amp; //replace the situation parentId != 0 &amp;&amp; parentId != -1
+                                   !scannedRecord.contains(parentId) &amp;&amp; //check the path has the right parentId
+                                   filePath == null ) { // eliminate single file scan
+
+                                    String parentPath = null; //get parentpath
+                                    if(path != null)
+                                         parentPath= path.substring(0,path.lastIndexOf(&quot;/&quot;));
+                                    if(!problemRecordsMap.containsKey(parentId))
+                                        Log.i(&quot;hzy&quot;,&quot;add path to problem record path:&quot;+path+&quot; &quot;+parentPath);
+                                        problemRecordsMap.put(parentId,parentPath);
+                                /* [BUGFIX]-Add-END by TCTNB.zhengyu.hu, 2016/08/11*/
+                                else{
+                                    /*[BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu, 2016/06/18, Defect-2174549*/
+                                    FileEntry fileEntry = new FileEntry(rowId, path, lastModified, format);
+                                    mFileEntryCache.put(path,fileEntry);
+                                    //Log.d(TAG,&quot;prescan add to cache pathe =&quot;+path);
+                                    /*[BUGFIX]-Add-END by TCTNB.zhengyu.hu, 2016/06/18*/
+
+                                   /* [BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu, 2016/08/11, Defect-2545868  recover database after reboot */                               if(parentId &gt; 0 &amp;&amp; //parentId != 0 &amp;&amp; parentId != -1
+                                    if(format == MtpConstants.FORMAT_ASSOCIATION)
+                                        scannedRecord.add(rowId);
+                                   /* [BUGFIX]-Add-END by TCTNB.zhengyu.hu, 2016/08/11*/
+                                }
                             }
                         }
                     }
@@ -1463,6 +1508,46 @@ public class MediaScanner
         if (mOriginalCount == 0 &amp;&amp; mImagesUri.equals(Images.Media.getContentUri(&quot;external&quot;)))
             pruneDeadThumbnailFiles();
 
+        /* [BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu, 2016/08/11, Defect-2545868  recover database after reboot */
+        if(problemRecordsMap != null &amp;&amp; problemRecordsMap.size() &gt; 0){
+            //Log.i(&quot;hzy&quot;,&quot;problemRecord != null  &quot;+problemRecord.size()+&quot;  &quot;+problemRecord.toString());
+            Set set = problemRecordsMap.entrySet();
+            Iterator it = set.iterator();
+            Cursor c = null;
+            try{
+                while (it.hasNext()){
+                 Map.Entry tmpentry = (Map.Entry) it.next();
+                 Long oldRowId = (Long)tmpentry.getKey();
+                 String path = (String)tmpentry.getValue();
+                 long newRowId = -1;
+
+                //get new rowId of problem record
+                 String where = Files.FileColumns.DATA + &quot;=?&quot;;
+                 String [] selectionArgs = new String[] { path };
+                 c = mMediaProvider.query(mPackageName, mFilesUri,
+                            new String[] { Files.FileColumns._ID }, where, selectionArgs, null, null);
+                if (c.moveToFirst()) {
+                    newRowId = c.getLong(0);
+                 }
+
+                //update parentID to  newRowId
+                if(newRowId != -1){
+                    ContentValues values = new ContentValues();
+                    values.put(Files.FileColumns.PARENT, newRowId);
+                    String[] whereArgs = new String[] {  Long.toString(oldRowId) };
+                    mMediaProvider.update(mPackageName,mFilesUri ,values, &quot;parent = ?&quot;, whereArgs);
+                }
+            }
+                problemRecordsMap.clear();
+            }catch(Exception e){
+                e.printStackTrace();
+            }finally{
+                if(c != null)
+                    c.close();
+            }
+        }
+        /* [BUGFIX]-Add-END by TCTNB.zhengyu.hu */
+
         // allow GC to clean up
         mPlayLists = null;
         mMediaProvider = null;</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="Demo" prog_lang="custom-colors" readonly="False" tags="" unique_id="139">
					<rich_text>

</rich_text>
					<rich_text scale="h2">扫描单个文件</rich_text>
					<rich_text>
方式1：通过MediaScannerConnection
private void startScan() 
{ 
    if(conn!=null) conn.disconnect();  
    conn = new MediaScannerConnection(YourActivity.this,YourActivity.this); 
    conn.connect(); 
} 
 
@Override 
public void onMediaScannerConnected() { 
    try{
        conn.scanFile(yourImagePath, &quot;image/*&quot;);
       } catch (java.lang.IllegalStateException e){
       }
}
 
@Override 
public void onScanCompleted(String path, Uri uri) { 
    conn.disconnect(); 
} 

方式2：通过发送广播
File file = new File(absolutePath);
Uri uri = Uri.fromFile(file);
Intent intent = new Intent(Intent.</rich_text>
					<rich_text weight="heavy">ACTION_MEDIA_SCANNER_SCAN_FILE</rich_text>
					<rich_text>, uri);
sendBroadcast(intent);
------------------或者
sendBroadcast(new Intent(Intent.</rich_text>
					<rich_text weight="heavy">ACTION_MEDIA_MOUNTED</rich_text>
					<rich_text>, Uri.parse(&quot;file://&quot;
            + Environment.getExternalStorageDirectory())))
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="MTP读取文件大小0patch" prog_lang="custom-colors" readonly="False" tags="" unique_id="196">
					<rich_text>新建一个文件可能为空
    JI:1592854 fs_general: New file size reported as 0bytes after copying from Internal to SD
    
    DESCRIPTION:
        After copying a file from the Internal Storage to SD card using the built in file manager,
        the file is reported to MTP as 0 bytes. This prevent from opening the file using windows explorer.
        As a workaround, we are injecting the correct file length so that the media scanner DB is updated
        with the right information. The file then appears with the right size. Note that from the time
        on-device copy is initiated to the time the file can be opened on PC there is a short delay (&lt;10s).
    
    PLATFORM IMPACTED:
    8953
    
    TESTING:
        On R149 M3, User load:
        - Device stability is not negatively impacted
        - Triggered &quot;Settings Menu&quot;-&gt;Storage-&gt;Internal-&gt;Explore-&gt; ... -&gt;&quot;copy to sdcard&quot;
            - File copied to sdcard shows the right length
            - After a short delay (&lt; 10s) file content is available
    
    (cherry picked from commit 97352fee1724f4e39de22aeed8c23ef2c6a181c3)
    
    Change-Id: I035361fb1ca88c1571cadf00cd170f7b0fd9d686

diff --git a/media/java/android/media/MediaScanner.java b/media/java/android/media/MediaScanner.java
index 5fd85d1..161e3a6 100644
--- a/media/java/android/media/MediaScanner.java
+++ b/media/java/android/media/MediaScanner.java
@@ -1387,7 +1387,12 @@ public class MediaScanner implements AutoCloseable {
     }
 
     // this function is used to scan a single file
+// start:BBRY_ANDROID
+/*
     public Uri scanSingleFile(String path, String mimeType) {
+*/
+    public Uri scanSingleFile(String path, String mimeType, long length) {
+// end:BBRY_ANDROID
         try {
             prescan(path, true);
 
@@ -1400,8 +1405,14 @@ public class MediaScanner implements AutoCloseable {
             long lastModifiedSeconds = file.lastModified() / 1000;
 
             // always scan the file, so we can return the content://media Uri for existing files
+// start:BBRY_ANDROID JI:1436023 AVEN-70429
+            /*
             return mClient.doScanFile(path, mimeType, lastModifiedSeconds, file.length(),
                     false, true, MediaScanner.isNoMediaPath(path));
+            */
+            return mClient.doScanFile(path, mimeType, lastModifiedSeconds, length,
+                    false, true, MediaScanner.isNoMediaPath(path));
+// end:BBRY_ANDROID
         } catch (RemoteException e) {
             Log.e(TAG, &quot;RemoteException in MediaScanner.scanFile()&quot;, e);
             return null;
diff --git a/packages/ExternalStorageProvider/src/com/android/externalstorage/ExternalStorageProvider.java b/packages/ExternalStorageProvider/src/com/android/externalstorage/Ex
index 96d0f47..bf1de9c 100644
--- a/packages/ExternalStorageProvider/src/com/android/externalstorage/ExternalStorageProvider.java
+++ b/packages/ExternalStorageProvider/src/com/android/externalstorage/ExternalStorageProvider.java
@@ -653,6 +653,9 @@ public class ExternalStorageProvider extends DocumentsProvider {
                         final Intent intent = new Intent(
                                 Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
                         intent.setData(Uri.fromFile(visibleFile));
+// start:BBRY_ANDROID JI:1436023 AVEN-70429
+                        intent.putExtra(&quot;length&quot;, Long.toString(file.length()));
+// end:BBRY_ANDROID
                         getContext().sendBroadcast(intent);
                     }
                 });</rich_text>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="MediaProvider" prog_lang="custom-colors" readonly="False" tags="" unique_id="81">
				<rich_text>ContentValues values = new ContentValues();
278            ContentResolver resolver = context.getContentResolver();
279            values.put(MediaStore.Images.ImageColumns.DATA, mImageFilePath);
280            values.put(MediaStore.Images.ImageColumns.TITLE, mImageFileName);
281            values.put(MediaStore.Images.ImageColumns.DISPLAY_NAME, mImageFileName);
282            values.put(MediaStore.Images.ImageColumns.DATE_TAKEN, mImageTime);
283            values.put(MediaStore.Images.ImageColumns.DATE_ADDED, dateSeconds);
284            values.put(MediaStore.Images.ImageColumns.DATE_MODIFIED, dateSeconds);
285            values.put(MediaStore.Images.ImageColumns.MIME_TYPE, &quot;image/png&quot;);
286            values.put(MediaStore.Images.ImageColumns.WIDTH, mImageWidth);
287            values.put(MediaStore.Images.ImageColumns.HEIGHT, mImageHeight);
288            values.put(MediaStore.Images.ImageColumns.SIZE, new File(mImageFilePath).length());
289            uri = resolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);


对于多用户，android会分别建目录存储用户的数据
/data/user/0/com.android.provider.media/
/data/user/10/com.andorid.provider.media/

而/data/data/com.android.provider.media/里面的内容是android根据不同登录用户做的链接



//操作MediaProvider数据库
ContentValuesvalues=</rich_text>
				<rich_text foreground="#000080">new</rich_text>
				<rich_text>ContentValues();
ContentResolverresolver=</rich_text>
				<rich_text foreground="#660e7a">mContext</rich_text>
				<rich_text>.getContentResolver();
Uriuri=MediaStore.Files.getContentUri(</rich_text>
				<rich_text foreground="#008000">&quot;external&quot;</rich_text>
				<rich_text>);
Log.i(</rich_text>
				<rich_text foreground="#008000">&quot;zhengyu&quot;</rich_text>
				<rich_text>,</rich_text>
				<rich_text foreground="#008000">&quot;uri----&gt;&quot;</rich_text>
				<rich_text>+uri.toString());


Stringprojection[]={MediaStore.Files.FileColumns.</rich_text>
				<rich_text foreground="#660e7a">DATA</rich_text>
				<rich_text>};
Stringwhere=MediaStore.Files.FileColumns.</rich_text>
				<rich_text foreground="#660e7a">_ID</rich_text>
				<rich_text>+</rich_text>
				<rich_text foreground="#008000">&quot;=?&quot;</rich_text>
				<rich_text>;
StringselectArgs[]={</rich_text>
				<rich_text foreground="#008000">&quot;1&quot;</rich_text>
				<rich_text>};
Cursorc=resolver.query(uri,projection,where,selectArgs,MediaStore.Files.FileColumns.</rich_text>
				<rich_text foreground="#660e7a">_ID</rich_text>
				<rich_text>);

</rich_text>
				<rich_text foreground="#000080">if</rich_text>
				<rich_text>(c!=</rich_text>
				<rich_text foreground="#000080">null</rich_text>
				<rich_text>){
c.moveToNext();
</rich_text>
				<rich_text foreground="#000080">int</rich_text>
				<rich_text>index=c.getColumnIndex(MediaStore.Files.FileColumns.</rich_text>
				<rich_text foreground="#660e7a">DATA</rich_text>
				<rich_text>);
Stringdata=c.getString(index);
Log.i(</rich_text>
				<rich_text foreground="#008000">&quot;zhengyu&quot;</rich_text>
				<rich_text>,</rich_text>
				<rich_text foreground="#008000">&quot;data:&quot;</rich_text>
				<rich_text>+data);
}
</rich_text>
				<rich_text foreground="#000080">int</rich_text>
				<rich_text>i=resolver.delete(MediaStore.Files.getContentUri(</rich_text>
				<rich_text foreground="#008000">&quot;external&quot;</rich_text>
				<rich_text>),MediaStore.Files.FileColumns.</rich_text>
				<rich_text foreground="#660e7a">_ID</rich_text>
				<rich_text>+</rich_text>
				<rich_text foreground="#008000">&quot;=?&quot;</rich_text>
				<rich_text>,selectArgs);
Log.i(</rich_text>
				<rich_text foreground="#008000">&quot;zhengyu&quot;</rich_text>
				<rich_text>,</rich_text>
				<rich_text foreground="#008000">&quot;return:&quot;</rich_text>
				<rich_text>+i);




</rich_text>
				<rich_text foreground="#808080">ContentResolverresovler=getContentResolver();
Uriuri=MediaStore.Files.getContentUri(&quot;external&quot;);
//ContentValuesvalues=newContentValues();
Log.i(&quot;zhengyu&quot;,&quot;uri:&quot;+uri.toString());
//resovler.delete(uri,&quot;_id=9&quot;,null);

StringdisplayName=&quot;IMG_20160520_092309.jpg&quot;;
resovler.delete(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,MediaStore.MediaColumns.DATA+'='+displayName,null);</rich_text>
				<rich_text>





 MediaUpgrageReceiver.java
 MediaPRovider.getDataBaseVersion(context) 获取database的version
  context.getPackageManager().getPackageInfo(context.getPackageName(),0).versionCode;
 获取的是应用所在Manifest的androidversiobCode.
 
 






</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="LowMemoryMachanism" prog_lang="custom-colors" readonly="False" tags="" unique_id="36">
				<rich_text>关注/m8976/frameworks/base/core/res/isdm_framework-res.plf 里面有几个字段涉及低存储
feature_tctfw_lowmemory_policy_on 内存储机制的开关
def_tctfw_low_memory_notification_mode_threshold 低存储通知的阀值

代码里面可以通过如下获取字段的值
int defaultvalue = mContext.getResources().getInteger(com.android.internal.R.integer.def_tctfw_low_memory_notification_mode_threshold)


目前8996 的Storage and USB 
StorageSettings.java 里面的R.string.storage_volume_used_total 描述的是所有可以用的存储（内置+外置）


StorageVolumePreference.java 中tatalSpace变量有问题   ==&gt;内置存储值
PrivateVolumeSetting.java中的 phonetatalSpace 变量有问题



</rich_text>
				<rich_text weight="heavy">adb shell df </rich_text>
				<rich_text>查看存储空间

DeviceStorageMonitorService在SystemServer中通过</rich_text>
				<rich_text foreground="#9876aa">mSystemServiceManager</rich_text>
				<rich_text>.startService(DeviceStorageMonitorService.</rich_text>
				<rich_text foreground="#cc7832">class</rich_text>
				<rich_text>)</rich_text>
				<rich_text foreground="#cc7832">;
</rich_text>
				<rich_text>添加

LowMemoryStorage

当存储空间满的时候会有Storage space running out 的提示




</rich_text>
				<rich_text weight="heavy">DeviceStorageMonitorService</rich_text>
				<rich_text>

</rich_text>
				<rich_text scale="h2" weight="heavy">CN目前低存储方案</rich_text>
				<rich_text>
frameworks/base/core/res/isdm_framework-res.plf的变量feature_tctfw_lowmemory_policy_on确定低存储方案的开关
目前每过30s进行一次checkMemory，首先会重新获取mFreeMem的值,然后对比 </rich_text>
				<rich_text foreground="#660e7a">mMemLowThreshold</rich_text>
				<rich_text>， 查看存储处于低存储模式，然后做对应的Action

</rich_text>
				<rich_text weight="heavy">一. 通知模式 </rich_text>
				<rich_text background="#ffe4ff" weight="heavy">NOTIFICATION_MODE_THRESHOLD</rich_text>
				<rich_text weight="heavy">  </rich_text>
				<rich_text>
   </rich_text>
				<rich_text weight="heavy">阀值</rich_text>
				<rich_text>：500MB， CN从frameworks/base/core/res/isdm_framework-res.plf的变量def_tctfw_low_memory_notification_mode_threshold进行获取
   
   对应的Flag为</rich_text>
				<rich_text background="#ffe4ff">mLowMemFlag</rich_text>
				<rich_text>，如果低于这个值阀值，</rich_text>
				<rich_text background="#ffe4ff">mLowMemFlag</rich_text>
				<rich_text> = true
   对应的变量是</rich_text>
				<rich_text foreground="#660e7a">mMemLowThreshold</rich_text>
				<rich_text> ， 当系统存储低于这个值的时候，系统认为已经处于低存储状态了
   首先会清理一下cache , 通过下面的方式清理，暂时不太清楚清理的是什么
   IPackageManager.Stub.asInterface(ServiceManager.getService(</rich_text>
				<rich_text foreground="#008000">&quot;package&quot;</rich_text>
				<rich_text>)).freeStorageAndNotify(</rich_text>
				<rich_text foreground="#000080">null</rich_text>
				<rich_text>,</rich_text>
				<rich_text foreground="#660e7a">mMemCacheTrimToThreshold</rich_text>
				<rich_text>,</rich_text>
				<rich_text foreground="#660e7a">mClearCacheObserver</rich_text>
				<rich_text>);
   清理完cache以后会通过</rich_text>
				<rich_text background="#e4e4ff">CachePackageDataObserver</rich_text>
				<rich_text>中的定义再次执行一下checkMomory
         postCheckMemoryMsg(</rich_text>
				<rich_text foreground="#000080">false</rich_text>
				<rich_text>,</rich_text>
				<rich_text foreground="#0000ff">0</rich_text>
				<rich_text>);

   如果发现此时freeMem还是低于阀值，则通过sendNotification()发送广播
           1.发送Sticky广播</rich_text>
				<rich_text foreground="#660e7a">mStorageLowIntent</rich_text>
				<rich_text>=</rich_text>
				<rich_text foreground="#000080">new</rich_text>
				<rich_text background="#e4e4ff">Intent</rich_text>
				<rich_text>(</rich_text>
				<rich_text background="#e4e4ff">Intent</rich_text>
				<rich_text>.</rich_text>
				<rich_text foreground="#660e7a">ACTION_DEVICE_STORAGE_LOW</rich_text>
				<rich_text>);
           2.发送通知，由于与安全管家冲突，CN已经取消
   
   反之在之后的checkMemory中发现freeMem大于阀值，调用cancleNotification取消广播
           1.取消上面发送的Sticky广播
           2.发送</rich_text>
				<rich_text foreground="#660e7a">mStorageOkIntent</rich_text>
				<rich_text>=</rich_text>
				<rich_text foreground="#000080">new</rich_text>
				<rich_text>Intent(Intent.</rich_text>
				<rich_text foreground="#660e7a">ACTION_DEVICE_STORAGE_OK</rich_text>
				<rich_text>);
           3.取消通知，CN已经取消

</rich_text>
				<rich_text scale="h2" weight="heavy">二、低存储模式 </rich_text>
				<rich_text background="#e4e4ff" scale="h2" weight="heavy">LOWMEMORY_MODE_THRESHOLD</rich_text>
				<rich_text>
  阀值： 200MB 对应的Flag为</rich_text>
				<rich_text background="#e4e4ff">mLowmemoryModeFlag</rich_text>
				<rich_text>
  checkMemory在执行完上面的函数以后还会继续往下执行checkLowMemory，这个函数用来负责不能层级的低存储模式细化，并执行Action
  这个模式目前并没有做什么，因为下面这个包不存在，ERGO要求的是弹出一个框

</rich_text>
				<rich_text foreground="#000080">if</rich_text>
				<rich_text>(checkPackageExist(</rich_text>
				<rich_text foreground="#660e7a">mContext</rich_text>
				<rich_text>,</rich_text>
				<rich_text foreground="#008000">&quot;com.jrdcom.app2sdcard&quot;</rich_text>
				<rich_text>)){
    IntentlowMemIntent=</rich_text>
				<rich_text foreground="#000080">new</rich_text>
				<rich_text>Intent(</rich_text>
				<rich_text foreground="#008000">&quot;com.jrdcom.app2sdcard.MOVE_APPS_TO_SDCARD&quot;</rich_text>
				<rich_text>);
    lowMemIntent.addFlags(Intent.</rich_text>
				<rich_text foreground="#660e7a">FLAG_ACTIVITY_NEW_TASK</rich_text>
				<rich_text>);
    </rich_text>
				<rich_text foreground="#660e7a">mContext</rich_text>
				<rich_text>.startActivityAsUser(lowMemIntent,UserHandle.CURRENT_OR_SELF);
}



</rich_text>
				<rich_text scale="h2" weight="heavy">三、强制模式 </rich_text>
				<rich_text background="#e4e4ff" scale="h2" weight="heavy">FORCE_MODE_THRESHOLD</rich_text>
				<rich_text>
  阀值： 100MB 对应的Flag为</rich_text>
				<rich_text foreground="#660e7a">mForceModeFlag</rich_text>
				<rich_text>
  1.设置LOW_STORAGE_MODE值为1，Settings.Global.putInt(</rich_text>
				<rich_text foreground="#660e7a">mResolver</rich_text>
				<rich_text>,Settings.Global.LOW_STORAGE_MODE,</rich_text>
				<rich_text foreground="#0000ff">1</rich_text>
				<rich_text>);
  2.发送DEVICE_MEMORY_CRITICAL_LOW 消息， </rich_text>
				<rich_text foreground="#660e7a">mHandler</rich_text>
				<rich_text>.sendMessage(</rich_text>
				<rich_text foreground="#660e7a">mHandler</rich_text>
				<rich_text>.obtainMessage(</rich_text>
				<rich_text foreground="#660e7a">DEVICE_MEMORY_CRITICAL_LOW</rich_text>
				<rich_text>));

会使得发送广播  </rich_text>
				<rich_text foreground="#008000">com.android.settings.LowMemoryStorage</rich_text>
				<rich_text>
         
         接收的广播是Setting中的Activity
3345        &lt;activity android:</rich_text>
				<rich_text weight="heavy">name=</rich_text>
				<rich_text>&quot;LowMemoryStorage&quot;
3346                  android:</rich_text>
				<rich_text weight="heavy">excludeFromRecents=</rich_text>
				<rich_text>&quot;true&quot;
3347                  android:</rich_text>
				<rich_text weight="heavy">screenOrientation=</rich_text>
				<rich_text>&quot;portrait&quot;
3348                  android:</rich_text>
				<rich_text weight="heavy">theme=</rich_text>
				<rich_text>&quot;@android:</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/&amp;project=m8996">style</rich_text>
				<rich_text>/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/Theme.Translucent&amp;project=m8996">Theme.Translucent</rich_text>
				<rich_text>&quot;&gt;
3349            &lt;intent-filter&gt;
3350                &lt;action android:</rich_text>
				<rich_text weight="heavy">name=</rich_text>
				<rich_text>&quot;</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?path=com/&amp;project=m8996">com</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?path=com/android/&amp;project=m8996">android</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?path=com/android/settings/&amp;project=m8996">settings</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?path=com/android/settings/LowMemoryStorage&amp;project=m8996">LowMemoryStorage</rich_text>
				<rich_text>&quot; /&gt;
3351                &lt;category android:</rich_text>
				<rich_text weight="heavy">name=</rich_text>
				<rich_text>&quot;</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?path=android/&amp;project=m8996">android</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?path=android/intent/&amp;project=m8996">intent</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?path=android/intent/category/&amp;project=m8996">category</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?path=android/intent/category/DEFAULT&amp;project=m8996">DEFAULT</rich_text>
				<rich_text>&quot; /&gt;
3352            &lt;/intent-filter&gt;
3353        &lt;/activity&gt;

LowMemoryStorage会弹出一个用户无法取消的对话框，让用户执行有限的几个操作，如打电话，发短信，进入FileManager

   3.发送广播</rich_text>
				<rich_text background="#ffe4ff">mDataConnectionDisabled</rich_text>
				<rich_text>=</rich_text>
				<rich_text foreground="#000080">new</rich_text>
				<rich_text>Intent(</rich_text>
				<rich_text foreground="#008000">&quot;storageforcemode.disable.dataconnection&quot;</rich_text>
				<rich_text>); 使得WIFI， GPRS禁用
   对应接收的Receiver是在Settings中LowMemoryReceiver
   
   </rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>   
  
     
  
</rich_text>
				<rich_text scale="h2" weight="heavy">四、极限模式 </rich_text>
				<rich_text foreground="#008000" scale="h2" weight="heavy">EXTREMELY_MODE_THRESHOLD</rich_text>
				<rich_text scale="h2" weight="heavy"> </rich_text>
				<rich_text>
阀值：50MB
发送一个关于禁用MMS的通知， 告知用户彩信无法使用

</rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>   </rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>   




Setting部分
</rich_text>
				<rich_text link="webs http://172.16.11.162:8081/#/c/226866/">http://172.16.11.162:8081/#/c/226866/</rich_text>
				<rich_text>
</rich_text>
				<rich_text link="webs http://172.16.11.162:8081/#/c/260792/">http://172.16.11.162:8081/#/c/260792/</rich_text>
				<rich_text>
主要是资源文件，代码主要看最新的部分



        Dear All，
     idol3, idol4系列，Simba6X 目前低存储方案如下(截图是idol4s)：，
    
    1.&lt;500MB 弹出常驻通知，通知用户存储低
    2.&lt;100MB 弹出图1    不可取消对话框要求用户清理（即使用户通过某种方式取消，1min后又会弹出来），同时禁用WIFI，GPS，数据连接
    3.&lt;50MB  对话框变为图2，同时禁用彩信   
    4. 接近0MB 弹出存储满通知。
</rich_text>
				<encoded_png char_offset="3435"></encoded_png>
				<encoded_png char_offset="3521"></encoded_png>
				<encoded_png char_offset="3525"></encoded_png>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="ContentProvider" prog_lang="custom-colors" readonly="False" tags="" unique_id="80">
				<rich_text>ContentProvider
query (Uri uri, //相当与表名
          String[] projection,  //要获取的列
          String selection,  //where
          String[] selectionArgs, //替换where中带有？的参数
          String sortOrder)  按照哪一列排序
          
          
对MediaProvider 数据库files表的查询，删除
ContentResolverresolver=</rich_text>
				<rich_text foreground="#660e7a">mContext</rich_text>
				<rich_text>.getContentResolver();
Uriuri=MediaStore.Files.getContentUri(</rich_text>
				<rich_text foreground="#008000">&quot;external&quot;</rich_text>
				<rich_text>);
Log.i(</rich_text>
				<rich_text foreground="#008000">&quot;zhengyu&quot;</rich_text>
				<rich_text>,</rich_text>
				<rich_text foreground="#008000">&quot;uri----&gt;&quot;</rich_text>
				<rich_text>+uri.toString());

Stringprojection[]={MediaStore.Files.FileColumns.</rich_text>
				<rich_text foreground="#660e7a">DATA</rich_text>
				<rich_text>};
Stringwhere=MediaStore.Files.FileColumns.</rich_text>
				<rich_text foreground="#660e7a">_ID</rich_text>
				<rich_text>+</rich_text>
				<rich_text foreground="#008000">&quot;=?&quot;</rich_text>
				<rich_text>;
StringselectArgs[]={</rich_text>
				<rich_text foreground="#008000">&quot;8&quot;</rich_text>
				<rich_text>};
Cursorc=resolver.query(uri,projection,where,selectArgs,MediaStore.Files.FileColumns.</rich_text>
				<rich_text foreground="#660e7a">_ID</rich_text>
				<rich_text>);
</rich_text>
				<rich_text foreground="#000080">if</rich_text>
				<rich_text>(c!=</rich_text>
				<rich_text foreground="#000080">null</rich_text>
				<rich_text>){
c.moveToNext();
</rich_text>
				<rich_text foreground="#000080">int</rich_text>
				<rich_text>index=c.getColumnIndex(MediaStore.Files.FileColumns.</rich_text>
				<rich_text foreground="#660e7a">DATA</rich_text>
				<rich_text>);
Stringdata=c.getString(index);
Log.i(</rich_text>
				<rich_text foreground="#008000">&quot;zhengyu&quot;</rich_text>
				<rich_text>,</rich_text>
				<rich_text foreground="#008000">&quot;data:&quot;</rich_text>
				<rich_text>+data);
}
</rich_text>
				<rich_text foreground="#808080">//inti=resolver.delete(MediaStore.Files.getContentUri(&quot;external&quot;),MediaStore.Files.FileColumns._ID+&quot;=?&quot;,newString[]{&quot;9&quot;});
//Log.i(&quot;zhengyu&quot;,&quot;return:&quot;+i);</rich_text>
				<rich_text>


Image uri
</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=MediaStore&amp;project=m8996">MediaStore</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Images&amp;project=m8996">Images</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Media&amp;project=m8996">Media</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=EXTERNAL_CONTENT_URI&amp;project=m8996">EXTERNAL_CONTENT_URI</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Sql" prog_lang="custom-colors" readonly="False" tags="" unique_id="40">
				<rich_text>
省份把浙江排到第一位sql用法
order by case when ae = &quot;浙江&quot; then 0 else 1 end

sqlite3 sudo apt-get install sqlite3
可视化工具 sudo apt-get install sqlitebrowser

select * from files where _data like '/storage/emulated/0/DCIM/Camera%'


在adb shell里面直接可以使用sqlite3工具
sqlite3 

Sqlite 共享锁 (Shared Lock ) ， 预留锁 （Reserved Lock）， 未决锁（Pending Lock） 排它锁（Exclusive Lock）
读操作会用到共享锁，如果存在一个读操作，不允许写

写操作首先会申请一个预留锁，已经存在的读操作可以继续读，也可以新的读请求
把需要更新的数据写到缓冲区中
在写到缓冲区以后需要将更新刷到硬盘db中时候，会申请Pending lock， 不能再有shared lock申请，阻止读操作，已经存在的读操作可以继续。
等待，直到没有读操作申请排它锁模糊必须commit，将缓冲区数据写到db中


select parent, _data  from files where _data like '/storage/emulated/0/DCIM/%' and not _data like '/storage/emulated/0/DCIM/%/%' group by parent</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Vold" prog_lang="custom-colors" readonly="False" tags="" unique_id="82">
				<rich_text>/m8996/system/vold/


MountService与Vold进行交互，根据vold 负责发送 ACTION_MEDIA_MOUNTED ACTION_MEDIA_EJECT 

NetlinkManager 与Linux Kernel交互传递uevent事件
VolumeManager
CommandListener

</rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>

入口代码main.cpp
1.创建设备文件/dev/block/vold
2. 创建VolumeManager对象
3. 创建NetlinkManager对象
4. 创建CommandListener对象
5.创建CryptCommandListener对象


</rich_text>
				<rich_text scale="h2" weight="heavy">NetlinkManager</rich_text>
				<rich_text>
从Kernel从接收Uevent消息，然后转换成一个NetlinkEvent对象，最后调用VolumeManager-&gt;handleBlockEvent来处理
启动的流程如下：
1.nm = NetlinkManager::instance();
2.vm -&gt;setBroadcaster((SocketListener *) cl);
3.nm -&gt;start
    --- mSock = socket(PF_NETLINK, SOCK_DGRAM | SOCK_CLOEXEC, NETLINK_KOBJECT_UEVENT 
     创建PF_NETLINK地址簇的socket， 目前支持SOCK_DGRAM | SOCK_CLODEXEX 类型 ，第三个参数NETLINK_KOBJECT_UEVENT表示接收内核的Uevent事件； 通过setsocketopt设置socket缓冲区大小， 64KB ；对socket执行bind操作
    ---创建一个</rich_text>
				<rich_text weight="heavy">NetLinkHandler</rich_text>
				<rich_text>对象，并把创建好的Socket句柄传给它，然后调用handler的start
NetLinkHandler继承自NetLinkListener继承自SocketListener
NetLinkHandler-&gt;start
   --&gt; SocketListener-&gt;startlistener()
   在收到数据后会进入NetlinkListener-&gt;onDataAvailible
   onDataAvailible会调用NetLinkHandler-&gt;onEvent
   
 VolumeManager
 1. vm = VolumeManager::instance(); //单例模式，整个进程只有一个实例
 2. 调用vm-&gt;setBroadcaster((SocketListener*)cl);
 3. vm-&gt;start()
        --- 移除所有已知设备
        --- 内置媒体设备/data/media
 
 4.调用process_config(vm) 配置VM
       ---读取/etc/vold.fstab 这个文件的作用和Linux系统中的fstab类似，设置一些存储设备挂载点
           dev_mount sdcard /storage/sdcard1 auto /devices/msm_sdcc.2/mmc_host
            
       
 




关机的时候
ShutdownThread.java
 </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Log&amp;project=m8996">Log</rich_text>
				<rich_text>.i(TAG, &quot;Shutting down MountService&quot;);
570
571        // Set initial variables and time out time.
572        mActionDone = </rich_text>
				<rich_text weight="heavy">false</rich_text>
				<rich_text>;
573        </rich_text>
				<rich_text weight="heavy">final</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">long</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=endShutTime&amp;project=m8996">endShutTime</rich_text>
				<rich_text> = </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SystemClock&amp;project=m8996">SystemClock</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=elapsedRealtime&amp;project=m8996">elapsedRealtime</rich_text>
				<rich_text>() + MAX_SHUTDOWN_WAIT_TIME;
574        </rich_text>
				<rich_text weight="heavy">synchronized</rich_text>
				<rich_text> (mActionDoneSync) {
575            </rich_text>
				<rich_text weight="heavy">try</rich_text>
				<rich_text> {
576                </rich_text>
				<rich_text weight="heavy">final</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=IMountService&amp;project=m8996">IMountService</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mount&amp;project=m8996">mount</rich_text>
				<rich_text> = </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=IMountService&amp;project=m8996">IMountService</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Stub&amp;project=m8996">Stub</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=asInterface&amp;project=m8996">asInterface</rich_text>
				<rich_text>(
577                        </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ServiceManager&amp;project=m8996">ServiceManager</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=checkService&amp;project=m8996">checkService</rich_text>
				<rich_text>(&quot;mount&quot;));
578                </rich_text>
				<rich_text weight="heavy">if</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mount&amp;project=m8996">mount</rich_text>
				<rich_text> != </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=m8996">null</rich_text>
				<rich_text>) {
579                    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mount&amp;project=m8996">mount</rich_text>
				<rich_text>.shutdown(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=observer&amp;project=m8996">observer</rich_text>
				<rich_text>);
580                } </rich_text>
				<rich_text weight="heavy">else</rich_text>
				<rich_text> {
581                    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Log&amp;project=m8996">Log</rich_text>
				<rich_text>.w(TAG, &quot;MountService unavailable for shutdown&quot;);
582                }
583            } </rich_text>
				<rich_text weight="heavy">catch</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Exception&amp;project=m8996">Exception</rich_text>
				<rich_text> e) {
584                </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Log&amp;project=m8996">Log</rich_text>
				<rich_text>.e(TAG, &quot;Exception during MountService shutdown&quot;, e);
585            }
                ....

603        }

</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mount&amp;project=m8996">mount</rich_text>
				<rich_text>.shutdown(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=observer&amp;project=m8996">observer</rich_text>
				<rich_text>); 
这里的mount是MountService.shutdown， 发送shutdown给vold的CommandListener.cpp
        </rich_text>
				<rich_text weight="heavy">final</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=IMountShutdownObserver&amp;project=m8996">IMountShutdownObserver</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=obs&amp;project=m8996">obs</rich_text>
				<rich_text> = (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=IMountShutdownObserver&amp;project=m8996">IMountShutdownObserver</rich_text>
				<rich_text>) </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=msg&amp;project=m8996">msg</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=obj&amp;project=m8996">obj</rich_text>
				<rich_text>;
624                    </rich_text>
				<rich_text weight="heavy">boolean</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=success&amp;project=m8996">success</rich_text>
				<rich_text> = </rich_text>
				<rich_text weight="heavy">false</rich_text>
				<rich_text>;
625                    </rich_text>
				<rich_text weight="heavy">try</rich_text>
				<rich_text> {
626                        </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=success&amp;project=m8996">success</rich_text>
				<rich_text> = mConnector.execute(&quot;volume&quot;, &quot;shutdown&quot;).</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isClassOk&amp;project=m8996">isClassOk</rich_text>
				<rich_text>();
627                    } </rich_text>
				<rich_text weight="heavy">catch</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=NativeDaemonConnectorException&amp;project=m8996">NativeDaemonConnectorException</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ignored&amp;project=m8996">ignored</rich_text>
				<rich_text>) {
628                    }
629                    </rich_text>
				<rich_text weight="heavy">if</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=obs&amp;project=m8996">obs</rich_text>
				<rich_text> != </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=m8996">null</rich_text>
				<rich_text>) {
630                        </rich_text>
				<rich_text weight="heavy">try</rich_text>
				<rich_text> {
631                            </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=obs&amp;project=m8996">obs</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=onShutDownComplete&amp;project=m8996">onShutDownComplete</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=success&amp;project=m8996">success</rich_text>
				<rich_text> ? 0 : -1);
632                        } </rich_text>
				<rich_text weight="heavy">catch</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=RemoteException&amp;project=m8996">RemoteException</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ignored&amp;project=m8996">ignored</rich_text>
				<rich_text>) {
633                        }
634                    }

CommandListener接收到shutdown命令后调用vm-&gt;shutdown
</rich_text>
				<rich_text weight="heavy">return</rich_text>
				<rich_text> sendGenericOkFail(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=cli&amp;project=m8996">cli</rich_text>
				<rich_text>, </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=vm&amp;project=m8996">vm</rich_text>
				<rich_text>-&gt;</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=shutdown&amp;project=m8996">shutdown</rich_text>
				<rich_text>());

vm是VolumeManager， 即VolumeManager -&gt; shutdown
641</rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> VolumeManager::</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=shutdown&amp;project=m8996">shutdown</rich_text>
				<rich_text>() {
642    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mInternalEmulated&amp;project=m8996">mInternalEmulated</rich_text>
				<rich_text>-&gt;</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=destroy&amp;project=m8996">destroy</rich_text>
				<rich_text>();
643    </rich_text>
				<rich_text weight="heavy">for</rich_text>
				<rich_text> (</rich_text>
				<rich_text weight="heavy">auto</rich_text>
				<rich_text> disk : </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mDisks&amp;project=m8996">mDisks</rich_text>
				<rich_text>) {
644        disk-&gt;</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=destroy&amp;project=m8996">destroy</rich_text>
				<rich_text>();
645    }
646    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mDisks&amp;project=m8996">mDisks</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=clear&amp;project=m8996">clear</rich_text>
				<rich_text>();
647    </rich_text>
				<rich_text weight="heavy">return</rich_text>
				<rich_text> 0;
648}


</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mInternalEmulated&amp;project=m8996">mInternalEmulated</rich_text>
				<rich_text>-&gt;</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=destroy&amp;project=m8996">destroy</rich_text>
				<rich_text>();
调用VolumeBase.destroy
188</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=status_t&amp;project=m8996">status_t</rich_text>
				<rich_text> VolumeBase::</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=destroy&amp;project=m8996">destroy</rich_text>
				<rich_text>() {
189    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=CHECK&amp;project=m8996">CHECK</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mCreated&amp;project=m8996">mCreated</rich_text>
				<rich_text>);
190
191    </rich_text>
				<rich_text weight="heavy">if</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mState&amp;project=m8996">mState</rich_text>
				<rich_text> == </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=State&amp;project=m8996">State</rich_text>
				<rich_text>::</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=kMounted&amp;project=m8996">kMounted</rich_text>
				<rich_text>) {
192        unmount();   //调用unmount
193        setState(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=State&amp;project=m8996">State</rich_text>
				<rich_text>::</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=kBadRemoval&amp;project=m8996">kBadRemoval</rich_text>
				<rich_text>);
194    } </rich_text>
				<rich_text weight="heavy">else</rich_text>
				<rich_text> {
195        setState(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=State&amp;project=m8996">State</rich_text>
				<rich_text>::</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=kRemoved&amp;project=m8996">kRemoved</rich_text>
				<rich_text>);
196    }
197
198    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=notifyEvent&amp;project=m8996">notifyEvent</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ResponseCode&amp;project=m8996">ResponseCode</rich_text>
				<rich_text>::</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=VolumeDestroyed&amp;project=m8996">VolumeDestroyed</rich_text>
				<rich_text>);
199    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=status_t&amp;project=m8996">status_t</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=res&amp;project=m8996">res</rich_text>
				<rich_text> = doDestroy();
200    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mCreated&amp;project=m8996">mCreated</rich_text>
				<rich_text> = </rich_text>
				<rich_text weight="heavy">false</rich_text>
				<rich_text>;
201    </rich_text>
				<rich_text weight="heavy">return</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=res&amp;project=m8996">res</rich_text>
				<rich_text>;
202}


225</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=status_t&amp;project=m8996">status_t</rich_text>
				<rich_text> VolumeBase::</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=unmount&amp;project=m8996">unmount</rich_text>
				<rich_text>() {
226    </rich_text>
				<rich_text weight="heavy">if</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mState&amp;project=m8996">mState</rich_text>
				<rich_text> != </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=State&amp;project=m8996">State</rich_text>
				<rich_text>::</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=kMounted&amp;project=m8996">kMounted</rich_text>
				<rich_text>) {
227        </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=LOG&amp;project=m8996">LOG</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=WARNING&amp;project=m8996">WARNING</rich_text>
				<rich_text>) &lt;&lt; </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getId&amp;project=m8996">getId</rich_text>
				<rich_text>() &lt;&lt; &quot; unmount requires state mounted&quot;;
228        </rich_text>
				<rich_text weight="heavy">return</rich_text>
				<rich_text> -</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=EBUSY&amp;project=m8996">EBUSY</rich_text>
				<rich_text>;
229    }
230
231    setState(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=State&amp;project=m8996">State</rich_text>
				<rich_text>::</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=kEjecting&amp;project=m8996">kEjecting</rich_text>
				<rich_text>);
232    </rich_text>
				<rich_text weight="heavy">for</rich_text>
				<rich_text> (</rich_text>
				<rich_text weight="heavy">auto</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=vol&amp;project=m8996">vol</rich_text>
				<rich_text> : </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mVolumes&amp;project=m8996">mVolumes</rich_text>
				<rich_text>) {
233        </rich_text>
				<rich_text weight="heavy">if</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=vol&amp;project=m8996">vol</rich_text>
				<rich_text>-&gt;destroy()) {
234            </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=LOG&amp;project=m8996">LOG</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=WARNING&amp;project=m8996">WARNING</rich_text>
				<rich_text>) &lt;&lt; </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getId&amp;project=m8996">getId</rich_text>
				<rich_text>() &lt;&lt; &quot; failed to destroy &quot; &lt;&lt; </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=vol&amp;project=m8996">vol</rich_text>
				<rich_text>-&gt;</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getId&amp;project=m8996">getId</rich_text>
				<rich_text>()
235                    &lt;&lt; &quot; stacked above&quot;;
236        }
237    }
238    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mVolumes&amp;project=m8996">mVolumes</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=clear&amp;project=m8996">clear</rich_text>
				<rich_text>();
239
240    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=status_t&amp;project=m8996">status_t</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=res&amp;project=m8996">res</rich_text>
				<rich_text> = </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=doUnmount&amp;project=m8996">doUnmount</rich_text>
				<rich_text>();
241    setState(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=State&amp;project=m8996">State</rich_text>
				<rich_text>::</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=kUnmounted&amp;project=m8996">kUnmounted</rich_text>
				<rich_text>);
242    </rich_text>
				<rich_text weight="heavy">return</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=res&amp;project=m8996">res</rich_text>
				<rich_text>;
243}

---
EmulatedVolume.cpp
109</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=status_t&amp;project=m8996">status_t</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=EmulatedVolume&amp;project=m8996">EmulatedVolume</rich_text>
				<rich_text>::</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=doUnmount&amp;project=m8996">doUnmount</rich_text>
				<rich_text>() {
110    </rich_text>
				<rich_text weight="heavy">if</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mFusePid&amp;project=m8996">mFusePid</rich_text>
				<rich_text> &gt; 0) {
111        </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=kill&amp;project=m8996">kill</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mFusePid&amp;project=m8996">mFusePid</rich_text>
				<rich_text>, </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SIGTERM&amp;project=m8996">SIGTERM</rich_text>
				<rich_text>);
112        </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TEMP_FAILURE_RETRY&amp;project=m8996">TEMP_FAILURE_RETRY</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=waitpid&amp;project=m8996">waitpid</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mFusePid&amp;project=m8996">mFusePid</rich_text>
				<rich_text>, </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=nullptr&amp;project=m8996">nullptr</rich_text>
				<rich_text>, 0));
113        </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mFusePid&amp;project=m8996">mFusePid</rich_text>
				<rich_text> = 0;
114    }
115
116    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=KillProcessesUsingPath&amp;project=m8996">KillProcessesUsingPath</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getPath&amp;project=m8996">getPath</rich_text>
				<rich_text>());
117    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ForceUnmount&amp;project=m8996">ForceUnmount</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mFuseDefault&amp;project=m8996">mFuseDefault</rich_text>
				<rich_text>);
118    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ForceUnmount&amp;project=m8996">ForceUnmount</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mFuseRead&amp;project=m8996">mFuseRead</rich_text>
				<rich_text>);
119    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ForceUnmount&amp;project=m8996">ForceUnmount</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mFuseWrite&amp;project=m8996">mFuseWrite</rich_text>
				<rich_text>);
120
121    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=rmdir&amp;project=m8996">rmdir</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mFuseDefault&amp;project=m8996">mFuseDefault</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=c_str&amp;project=m8996">c_str</rich_text>
				<rich_text>());
122    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=rmdir&amp;project=m8996">rmdir</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mFuseRead&amp;project=m8996">mFuseRead</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=c_str&amp;project=m8996">c_str</rich_text>
				<rich_text>());
123    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=rmdir&amp;project=m8996">rmdir</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mFuseWrite&amp;project=m8996">mFuseWrite</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=c_str&amp;project=m8996">c_str</rich_text>
				<rich_text>());
124
125    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mFuseDefault&amp;project=m8996">mFuseDefault</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=clear&amp;project=m8996">clear</rich_text>
				<rich_text>();
126    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mFuseRead&amp;project=m8996">mFuseRead</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=clear&amp;project=m8996">clear</rich_text>
				<rich_text>();
127    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mFuseWrite&amp;project=m8996">mFuseWrite</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=clear&amp;project=m8996">clear</rich_text>
				<rich_text>();
128
129    </rich_text>
				<rich_text weight="heavy">return</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=OK&amp;project=m8996">OK</rich_text>
				<rich_text>;
130}


PrivateVolume -&gt;doUnmount -&gt; Util.ForceUnmount -&gt; Util.killProcessUsingProcessing




Disk.cpp
//把挂在的盘都unmount掉
126</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=status_t&amp;project=m8996">status_t</rich_text>
				<rich_text> Disk::</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=destroy&amp;project=m8996">destroy</rich_text>
				<rich_text>() { 
127    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=CHECK&amp;project=m8996">CHECK</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mCreated&amp;project=m8996">mCreated</rich_text>
				<rich_text>);
128    destroyAllVolumes();
129    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mCreated&amp;project=m8996">mCreated</rich_text>
				<rich_text> = </rich_text>
				<rich_text weight="heavy">false</rich_text>
				<rich_text>;
130    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=notifyEvent&amp;project=m8996">notifyEvent</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ResponseCode&amp;project=m8996">ResponseCode</rich_text>
				<rich_text>::</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=DiskDestroyed&amp;project=m8996">DiskDestroyed</rich_text>
				<rich_text>);
131    </rich_text>
				<rich_text weight="heavy">return</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=OK&amp;project=m8996">OK</rich_text>
				<rich_text>;
132}


183</rich_text>
				<rich_text weight="heavy">void</rich_text>
				<rich_text> Disk::</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=destroyAllVolumes&amp;project=m8996">destroyAllVolumes</rich_text>
				<rich_text>() {
184    </rich_text>
				<rich_text weight="heavy">for</rich_text>
				<rich_text> (</rich_text>
				<rich_text weight="heavy">auto</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=vol&amp;project=m8996">vol</rich_text>
				<rich_text> : </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mVolumes&amp;project=m8996">mVolumes</rich_text>
				<rich_text>) {
185        </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=vol&amp;project=m8996">vol</rich_text>
				<rich_text>-&gt;destroy();
186    }
187    </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mVolumes&amp;project=m8996">mVolumes</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=clear&amp;project=m8996">clear</rich_text>
				<rich_text>();
188}



08-02 03:48:07.987   444   448 W vold    : zhengyu  KillProcessesUsingPath 1/storage/emulated
08-02 03:48:11.569   444   448 W vold    : zhengyu  KillPrcessocessesUsingPath 2/storage/emulated
08-02 03:48:13.055   444   448 W vold    : zhengyu  ForceUnmount 1/mnt/runtime/default/emulated
08-02 03:48:13.060   444   448 W vold    : zhengyu  ForceUnmount 1/mnt/runtime/read/emulated
08-02 03:48:13.061   444   448 W vold    : zhengyu  ForceUnmount 1/mnt/runtime/write/emulated
08-02 03:48:13.068   444   448 W vold    : zhengyu  ForceUnmount 1/mnt/secure/asec
08-02 03:48:13.068   444   448 W vold    : zhengyu : PublicVolume  doUnmount /storage/sdcard1
08-02 03:48:13.068   444   448 W vold    : zhengyu  KillProcessesUsingPath 1/storage/sdcard1
08-02 03:48:16.567   444   448 W vold    : zhengyu  ForceUnmount 1/mnt/runtime/default/sdcard1
08-02 03:48:16.570   444   448 W vold    : zhengyu  ForceUnmount 1/mnt/runtime/read/sdcard1
08-02 03:48:16.572   444   448 W vold    : zhengyu  ForceUnmount 1/mnt/runtime/write/sdcard1
08-02 03:48:16.574   444   448 W vold    : zhengyu  ForceUnmount 1/mnt/media_rw/sdcard1


9：19：49


MountService的shutdown最终是将挂载的盘都unmount掉， 包括emulatedVolume，  privateVolume, publicVolume。系统会分别调用它们的unmount方法.  如果说要缩短时间，有个方法是将Util.cpp中的forceunmount和 killprocessesusingpath  的sleep时间去掉， 事实上，这个已经从原生的5s缩减到了目前的1s  。这个时间并不是每次调用这两个函数都会使用，而是会先尝试一次unmount操作，如果失败再sleep，然后再次尝试unmount，  所以就算去掉睡眠也一定会提升时间。
关键是去掉的话很可能就会产生其他不确定的问题，我是怀疑严重的时候可能造成内置存储无法成功挂在导致开机都是问题， 得不偿失， 不建议修改




SD卡热插拔后挂在，会出现failed to create mount points的错误
mFuseDefault -&gt; /mnt/runtime/default
mFuseRead -&gt; /mnt/runtime/read
mFuseWrite -&gt; /mnt/runtime/write
mRawPath -&gt; /mnt/media_rw/

原因是上面四个路境没有在SD卡移除的时候做相应的处理，或者说由于设备处于忙碌的状态，而unmount的时候采用的下面的方式无效
    ForceUnmount(mFuseDefault);
    ForceUnmount(mFuseRead);
    ForceUnmount(mFuseWrite);
    ForceUnmount(mRawPath);

    rmdir(mFuseDefault.c_str());
    rmdir(mFuseRead.c_str());
    rmdir(mFuseWrite.c_str());
    rmdir(mRawPath.c_str());

    mFuseDefault.clear();
    mFuseRead.clear();
    mFuseWrite.clear();
    mRawPath.clear();

所以现在将SD卡 domount时候做强制移除处理
        umount2(mFuseDefault.c_str(),MNT_DETACH);
        umount2(mFuseRead.c_str(),MNT_DETACH);
        umount2(mFuseWrite.c_str(),MNT_DETACH);
        umount2(mRawPath.c_str(),MNT_DETACH);

        rmdir(mFuseDefault.c_str());
        rmdir(mFuseRead.c_str());
        rmdir(mFuseWrite.c_str());
        rmdir(mRawPath.c_str());


MNT_DETACH 这个变量会使得即使设备处于忙碌状态都可以恢复








</rich_text>
				<encoded_png char_offset="170"></encoded_png>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="tmp" prog_lang="custom-colors" readonly="False" tags="" unique_id="90">
				<rich_text>USB_DEVICE_ATTACHED -&gt; </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?path=com.tct.gallery3d.ingest.IngestActivity">com.tct.gallery3d.ingest.IngestActivity</rich_text>
				<rich_text>

IngestActivity在onresume时候调用</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=updateWarningView&amp;project=m8996">updateWarningView</rich_text>
				<rich_text> 发现!mAdapter.deviceConnected ，使得出现Bug界面

mAdapter是MtpAdapter， 通过mModel.isDeviceConnected来判断是否连接

mModel是 </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=MtpDeviceIndex&amp;project=m8996">MtpDeviceIndex</rich_text>
				<rich_text> ， 通过其mDevice 来判断是否为空

mModel通过MtpAdapter -&gt;  setMtpDeviceIndex 来赋值

setMtpDeviceIndex 在IngestActivity中有两处调用
-&gt; </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=setFullscreenPagerVisibility&amp;project=m8996">setFullscreenPagerVisibility</rich_text>
				<rich_text> 
-&gt;  </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=mHelperServiceConnection&amp;project=m8996">mHelperServiceConnection</rich_text>
				<rich_text> 的onServiceConnected
    --&gt;</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=MtpDeviceIndex&amp;project=m8996">MtpDeviceIndex</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=index&amp;project=m8996">index</rich_text>
				<rich_text> = mHelperService.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getIndex&amp;project=m8996">getIndex</rich_text>
				<rich_text>();

mHelperService 是 </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=IngestService&amp;project=m8996">IngestService</rich_text>
				<rich_text> 的getIndex直接返回其成员变量

mIndex 通过 </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=MtpDeviceIndex&amp;project=m8996">MtpDeviceIndex</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getInstance&amp;project=m8996">getInstance</rich_text>
				<rich_text>()赋值

通过 new Factory -&gt; createMtpDeviceIndexRunnable

createMtpDeviceIndexRunnable这个函数在 MtpDeviceIndex的getIndexRunnable调用   
mIndex.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getIndexRunnable&amp;project=m8996">getIndexRunnable</rich_text>
				<rich_text>()；

mIndex.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getIndexRunnable&amp;project=m8996">getIndexRunnable</rich_text>
				<rich_text>()； 在IngestService中调用




08-01 09:15:53.637  4754  4754 I zhengyu : getDeviceList
08-01 09:15:53.638  4754  4754 I zhengyu : ssss
08-01 09:15:53.638  4754  4754 I zhengyu : deviceName:/dev/bus/usb/001/002
08-01 09:15:53.643  1423  1486 D WindowManager: navVisible1 = true
08-01 09:15:53.643  1423  1486 D WindowManager: navVisible2 = true
08-01 09:15:53.644  4754  4754 D MtpDevice: Found camera: &quot;Canon Inc.&quot; &quot;Canon Digital Camera&quot;
</rich_text>
				<rich_text weight="heavy">08-01 09:15:53.644  4754  4754 E MtpDevice: usb_device_claim_interface failed errno: 16</rich_text>
				<rich_text>
08-01 09:15:53.644  4754  4754 D UsbDeviceConnectionJNI: close
08-01 09:15:53.645  4754  4754 I zhengyu : device is null
08-01 09:15:53.645  4754  4754 I zhengyu : mDevices.length: 0
08-01 09:15:53.645  4754  4754 I zhengyu : is empty


MtpClient -&gt; openDeviceLocked -&gt; mtpDevice.open()

</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=android_mtp_MtpDevice_open&amp;project=m8996">android_mtp_MtpDevice_open</rich_text>
				<rich_text>(



</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Setting代码" prog_lang="custom-colors" readonly="False" tags="" unique_id="91">
				<rich_text>入口：StorageSettings storage的设置菜单类

StorageVolumePreference.java  StorageSettings点进去后显示的内置、外置preference，包括已用多少，进度条
PrivateVolumeSettings 点击internal 盘符进去以后看到的详情



  </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/m8996/packages/apps/Settings/src/com/android/settings/applications/ProcessStatsSummary.java">ProcessStatsSummary</rich_text>
				<rich_text> 内存信息
  ProcessStatsUi 查看每个App信息
  
  
 Settings添加自定义按钮
  
  PrivateVolumeSettings.java
addPreferencesFromResource(R.xml.device_info_storage_clear_memory);

device_info_storage_clear_memory.xml
&lt;?xmlversion=&quot;1.0&quot;encoding=&quot;utf-8&quot;?&gt;
&lt;PreferenceScreenxmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
xmlns:settings=&quot;http://schemas.android.com/apk/res/com.android.settings&quot;
android:title=&quot;@string/storage_settings_title&quot;&gt;

&lt;!--
&lt;PreferenceCategory
android:key=&quot;storage_settings_title&quot;
android:title=&quot;@string/storage_settings_title&quot;&gt;
&lt;PreferenceScreen
android:key=&quot;clear_memory&quot;
android:title=&quot;@string/clear_memory&quot;
android:persistent=&quot;false&quot;/&gt;
&lt;/PreferenceCategory&gt;
--&gt;

&lt;com.android.settings.deviceinfo.StorageClearMemory
android:key=&quot;clear_memory&quot;
android:title=&quot;@string/clear_memory&quot;
android:persistent=&quot;false&quot;/&gt;&quot;

&lt;/PreferenceScreen&gt;


StorageClearMemory.java
</rich_text>
				<rich_text foreground="#000080">package</rich_text>
				<rich_text>com.android.settings.deviceinfo;

</rich_text>
				<rich_text foreground="#000080">import</rich_text>
				<rich_text>android.content.ComponentName;
</rich_text>
				<rich_text foreground="#000080">import</rich_text>
				<rich_text>android.content.Context;
</rich_text>
				<rich_text foreground="#000080">import</rich_text>
				<rich_text>android.content.Intent;
</rich_text>
				<rich_text foreground="#000080">import</rich_text>
				<rich_text>android.preference.Preference;
</rich_text>
				<rich_text foreground="#000080">import</rich_text>
				<rich_text>android.util.AttributeSet;
</rich_text>
				<rich_text foreground="#000080">import</rich_text>
				<rich_text>android.view.View;
</rich_text>
				<rich_text foreground="#000080">import</rich_text>
				<rich_text>android.widget.Button;
</rich_text>
				<rich_text foreground="#000080">import</rich_text>
				<rich_text>android.widget.Toast;

</rich_text>
				<rich_text foreground="#000080">import</rich_text>
				<rich_text>com.android.settings.R;


</rich_text>
				<rich_text foreground="#808080">/**
*Createdbyhuzhengyuon16-4-26.
*/

</rich_text>
				<rich_text foreground="#000080">publicclass</rich_text>
				<rich_text>StorageClearMemory</rich_text>
				<rich_text foreground="#000080">extends</rich_text>
				<rich_text>Preference{

</rich_text>
				<rich_text foreground="#000080">private</rich_text>
				<rich_text>ButtonmClearMemoryBtn;

</rich_text>
				<rich_text foreground="#000080">public</rich_text>
				<rich_text>StorageClearMemory(Contextcontext,AttributeSetattrs){
</rich_text>
				<rich_text foreground="#000080">super</rich_text>
				<rich_text>(context,attrs);
setWidgetLayoutResource(R.layout.preference_storage_clear_memory);


Intentintent=</rich_text>
				<rich_text foreground="#000080">new</rich_text>
				<rich_text>Intent();
intent.setComponent(</rich_text>
				<rich_text foreground="#000080">new</rich_text>
				<rich_text>ComponentName(</rich_text>
				<rich_text foreground="#008000">&quot;com.tct.securitycenter&quot;</rich_text>
				<rich_text>,</rich_text>
				<rich_text foreground="#008000">&quot;com.tct.securitycenter.storageclearup.StorageClearUpActivity&quot;</rich_text>
				<rich_text>));
intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
getContext().startActivity(intent);
}

</rich_text>
				<rich_text foreground="#808080">//publicStorageClearMemory(Contextcontext,AttributeSetattrs,intdefStyle){
//super(context,attrs,defStyle);
////setLayoutResource(R.layout.preference_storage_clear_memory);
//
//
//
//}

</rich_text>
				<rich_text>@Override
</rich_text>
				<rich_text foreground="#000080">protectedvoid</rich_text>
				<rich_text>onBindView(Viewview){
</rich_text>
				<rich_text foreground="#000080">super</rich_text>
				<rich_text>.onBindView(view);

mClearMemoryBtn=(Button)view.findViewById(R.id.clear_memory);
</rich_text>
				<rich_text foreground="#808080">//mClearMemoryBtn.setOnClickListener(newView.OnClickListener(){
//@Override
//publicvoidonClick(Viewv){
////Toast.makeText(getContext(),&quot;haha&quot;,Toast.LENGTH_SHORT).show();
////Intentintent=newIntent(&quot;com.tct.securitycenter/.storageclearup.StorageClearUpActivity&quot;);
////intent.setAction(&quot;com.tct.securitycenter/.storageclearup.StorageClearUpActivity&quot;);
////Intentintent=newIntent();
////intent.setComponent(newComponenhttps://alm.tclcom.com:7003/im/issues?selection=2729901tName(&quot;com.tct.securitycenter&quot;,&quot;com.tct.securitycenter.storageclearup.StorageClearUpActivity&quot;));
////intent.setClass(getContext(),&quot;com.tct.securitycenter.storageclearup.StorageClearUpActivity&quot;);
////intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
////getContext().startActivity(intent);
//}
//});
</rich_text>
				<rich_text>}

}

preference_storage_clear_memory.xml
&lt;?</rich_text>
				<rich_text foreground="#0000ff">xmlversion=</rich_text>
				<rich_text foreground="#008000">&quot;1.0&quot;</rich_text>
				<rich_text foreground="#0000ff">encoding=</rich_text>
				<rich_text foreground="#008000">&quot;utf-8&quot;</rich_text>
				<rich_text>?&gt;
&lt;</rich_text>
				<rich_text foreground="#000080">LinearLayout</rich_text>
				<rich_text foreground="#0000ff">xmlns:android=</rich_text>
				<rich_text foreground="#008000">&quot;http://schemas.android.com/apk/res/android&quot;
</rich_text>
				<rich_text foreground="#0000ff">android:layout_width=</rich_text>
				<rich_text foreground="#008000">&quot;match_parent&quot;
</rich_text>
				<rich_text foreground="#0000ff">android:layout_height=</rich_text>
				<rich_text foreground="#008000">&quot;wrap_content&quot;
</rich_text>
				<rich_text foreground="#0000ff">android:orientation=</rich_text>
				<rich_text foreground="#008000">&quot;vertical&quot;</rich_text>
				<rich_text>&gt;
&lt;</rich_text>
				<rich_text foreground="#000080">Button
</rich_text>
				<rich_text foreground="#0000ff">android:id=</rich_text>
				<rich_text foreground="#008000">&quot;@+id/clear_memory&quot;
</rich_text>
				<rich_text foreground="#0000ff">android:text=</rich_text>
				<rich_text foreground="#008000">&quot;@string/clear_memory&quot;
</rich_text>
				<rich_text foreground="#0000ff">android:layout_width=</rich_text>
				<rich_text foreground="#008000">&quot;match_parent&quot;
</rich_text>
				<rich_text foreground="#0000ff">android:layout_height=</rich_text>
				<rich_text foreground="#008000">&quot;wrap_content&quot;
</rich_text>
				<rich_text foreground="#0000ff">android:orientation=</rich_text>
				<rich_text foreground="#008000">&quot;vertical&quot;</rich_text>
				<rich_text>&gt;
&lt;/</rich_text>
				<rich_text foreground="#000080">Button</rich_text>
				<rich_text>&gt;

&lt;/</rich_text>
				<rich_text foreground="#000080">LinearLayout</rich_text>
				<rich_text>&gt;
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="USB" prog_lang="custom-colors" readonly="False" tags="" unique_id="95">
				<rich_text>
</rich_text>
				<rich_text scale="h2">Framework端：</rich_text>
				<rich_text>
</rich_text>
				<rich_text weight="heavy">UsbManager.java</rich_text>
				<rich_text>
主要是一些常量的设置，定义USB function
180    public static final String USB_DATA_UNLOCKED = &quot;unlocked&quot;;
189    public static final String USB_FUNCTION_NONE = &quot;none&quot;;
197    public static final String USB_FUNCTION_ADB = &quot;adb&quot;;
205    public static final String USB_FUNCTION_RNDIS = &quot;rndis&quot;;
214    public static final String USB_FUNCTION_NCM = &quot;ncm&quot;;
223    public static final String USB_FUNCTION_MTP = &quot;mtp&quot;;
231    public static final String USB_FUNCTION_PTP = &quot;ptp&quot;;
239    public static final String USB_FUNCTION_AUDIO_SOURCE = &quot;audio_source&quot;;
public static final String USB_FUNCTION_CHARGING = &quot;charging&quot;;


</rich_text>
				<rich_text weight="heavy">UsbService</rich_text>
				<rich_text>.java
usbmanager对应的Service
常见的应用有：
getDeviceList
setCurrentFunction(String function) 通过传入的String使用usbDeviceManager设定当前的usb function， String为UsbManager定义的值


</rich_text>
				<rich_text weight="heavy">UsbDeviceManager</rich_text>
				<rich_text>.java
usbDeviceManager应该是一个策略类，用来真正执行UsbService的工作
 里面有一个内部类UsbHandler， 用来执行初始化USB连接模式，设置usb function等。
 
USB_CONFIG_PROPERTY 存储关机前USB的设置
USB_PERSISTENT_CONFIG_PROPERTY 持久化USB的设置， 关机后能存储





</rich_text>
				<rich_text scale="h2">Settings端：</rich_text>
				<rich_text>
</rich_text>
				<rich_text weight="heavy">UsbBackend</rich_text>
				<rich_text>.java

    private static final int MODE_POWER_MASK  = 0x01;
    public static final int MODE_POWER_SINK   = 0x00;
    public static final int MODE_POWER_SOURCE = 0x01;

    private static final int MODE_DATA_MASK  = 0x07 &lt;&lt; 1;
    public static final int MODE_DATA_NONE   = 0x00 &lt;&lt; 1;
    public static final int MODE_DATA_MTP    = 0x01 &lt;&lt; 1;
    public static final int MODE_DATA_PTP    = 0x02 &lt;&lt; 1;
    public static final int MODE_DATA_MIDI   = 0x03 &lt;&lt; 1;
    public static final int MODE_DATA_TETHERING   = 0x04 &lt;&lt; 1;

</rich_text>
				<rich_text weight="heavy">UsbModeChooserActivity</rich_text>
				<rich_text>.java usb模式选择对话框

    public static final int[] DEFAULT_MODES = {
        UsbBackend.MODE_POWER_SINK | UsbBackend.MODE_DATA_NONE,
        UsbBackend.MODE_POWER_SOURCE | UsbBackend.MODE_DATA_NONE,
        UsbBackend.MODE_POWER_SINK | UsbBackend.MODE_DATA_MTP,
        UsbBackend.MODE_POWER_SINK | UsbBackend.MODE_DATA_PTP,
        UsbBackend.MODE_POWER_SINK | UsbBackend.MODE_DATA_MIDI,
        UsbBackend.MODE_POWER_SINK | UsbBackend.MODE_DATA_TETHERING
    };


</rich_text>
				<rich_text weight="heavy">DevelopmentSettings</rich_text>
				<rich_text>.java 开发者选项


相关驱动
init.usb.rc
android.c

TetherSettings -&gt; mUsbTether -&gt; onPreferenceTreeClick
-&gt; setUsbTethering
-&gt; ConnectivityManager.setUsbTethering

ConnectivityService-&gt;setUsbTethering
-&gt; Tethering.setUsbTethering

rndis功能通过下面去获取
mRndisEnabled = </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=intent&amp;project=m8996">intent</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getBooleanExtra&amp;project=m8996">getBooleanExtra</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=UsbManager&amp;project=m8996">UsbManager</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=USB_FUNCTION_RNDIS&amp;project=m8996">USB_FUNCTION_RNDIS</rich_text>
				<rich_text>, </rich_text>
				<rich_text weight="heavy">false</rich_text>
				<rich_text>);

看log ，mRndisEnabled为false -&gt; UsbManager.setCurrentFunction(&quot;rndis, dialog&quot;);

-&gt; usbmanager.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setCurrentFunction&amp;project=m8996">setCurrentFunction</rich_text>
				<rich_text>
-&gt; usbservice.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setCurrentFunction&amp;project=m8996">setCurrentFunction</rich_text>
				<rich_text>

devicemanager.setCurrentFunctions(&quot;rndis, dialog&quot;)
-&gt; UsbDeviceManager-&gt;setCurrentFunctions(&quot;rndis, dialog&quot;) : sendMessage MSG_SET_CURRENT_FUNCTIONS
-&gt;setEnabledFunctions
-&gt; trySetEnabledFunctions
-&gt; </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=setUsbConfig&amp;project=m8996">setUsbConfig</rich_text>
				<rich_text>


切换快慢也是在这个类



drivers/usb/core/devio.c

UsbService.setCurrentFunction设置默认的选项


UsbModeChooserActivity 


usb_use

USB mode choose
</rich_text>
				<rich_text link="webs http://172.16.11.162:8081/#/c/326519/">http://172.16.11.162:8081/#/c/326519/</rich_text>
				<rich_text>

</rich_text>
				<rich_text link="webs http://172.16.11.162:8081/#/c/310722/">http://172.16.11.162:8081/#/c/310722/</rich_text>
				<rich_text>

</rich_text>
				<rich_text link="webs http://172.16.11.162:8081/#/c/236218/">http://172.16.11.162:8081/#/c/236218/</rich_text>
				<rich_text>



    
    
    
    
    
    
    
    
 mercurry 开发者模式中充电选项显示的是none， 对应的是UsbManager
 

 
 
 xref: /Avengers/frameworks/base/packages/SettingsLib/res/values/arrays.xml
336    &lt;</rich_text>
				<rich_text foreground="#a52a2a">string</rich_text>
				<rich_text>-</rich_text>
				<rich_text foreground="#a52a2a">array</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">name=</rich_text>
				<rich_text>&quot;usb_configuration_values&quot; </rich_text>
				<rich_text weight="heavy">translatable=</rich_text>
				<rich_text>&quot;false&quot;&gt;
337        </rich_text>
				<rich_text foreground="#666666">&lt;!-- Do not translate. --&gt;</rich_text>
				<rich_text>
338        &lt;</rich_text>
				<rich_text foreground="#a52a2a">item</rich_text>
				<rich_text>&gt;none&lt;/</rich_text>
				<rich_text foreground="#a52a2a">item</rich_text>
				<rich_text>&gt;
339        </rich_text>
				<rich_text foreground="#666666">&lt;!-- Do not translate. --&gt;</rich_text>
				<rich_text>
340        &lt;</rich_text>
				<rich_text foreground="#a52a2a">item</rich_text>
				<rich_text>&gt;mtp&lt;/</rich_text>
				<rich_text foreground="#a52a2a">item</rich_text>
				<rich_text>&gt;
341        </rich_text>
				<rich_text foreground="#666666">&lt;!-- Do not translate. --&gt;</rich_text>
				<rich_text>
342        &lt;</rich_text>
				<rich_text foreground="#a52a2a">item</rich_text>
				<rich_text>&gt;ptp&lt;/</rich_text>
				<rich_text foreground="#a52a2a">item</rich_text>
				<rich_text>&gt;
343        </rich_text>
				<rich_text foreground="#666666">&lt;!-- BBRY:start --&gt;</rich_text>
				<rich_text>
344        </rich_text>
				<rich_text foreground="#666666">&lt;!-- Do not translate. --&gt;</rich_text>
				<rich_text>
345        </rich_text>
				<rich_text foreground="#666666">&lt;!--
346        &lt;item&gt;rndis&lt;/item&gt;
347        --&gt;</rich_text>
				<rich_text>
348        </rich_text>
				<rich_text foreground="#666666">&lt;!-- Do not translate. --&gt;</rich_text>
				<rich_text>
349        </rich_text>
				<rich_text foreground="#666666">&lt;!--
350        &lt;item&gt;audio_source&lt;/item&gt;
351        --&gt;</rich_text>
				<rich_text>
352        </rich_text>
				<rich_text foreground="#666666">&lt;!-- BBRY:end --&gt;</rich_text>
				<rich_text>
353        </rich_text>
				<rich_text foreground="#666666">&lt;!-- Do not translate. --&gt;</rich_text>
				<rich_text>
354        &lt;</rich_text>
				<rich_text foreground="#a52a2a">item</rich_text>
				<rich_text>&gt;midi&lt;/</rich_text>
				<rich_text foreground="#a52a2a">item</rich_text>
				<rich_text>&gt;
355    &lt;/</rich_text>
				<rich_text foreground="#a52a2a">string</rich_text>
				<rich_text>-</rich_text>
				<rich_text foreground="#a52a2a">array</rich_text>
				<rich_text>&gt;
    
    
    
    
    </rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="move2sdcard" prog_lang="custom-colors" readonly="False" tags="" unique_id="117">
				<rich_text>AppStorageSettings.java  界面APP -&gt; app detail -&gt; storage 
点击mChangeStorageButton 以后弹出 mDialogBuilder.show
app_storage_settings.xml

而后会调用onclick （dialog，which)
启动StorageWizardMoveConfirm
调用PackageManagerService.movePackage(packageName, Volumn) 做实际移动的工作

启动 StorageWizardMoveProgress






</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="IO" prog_lang="custom-colors" readonly="False" tags="" unique_id="120">
				<rich_text>Android 主要会用到下面的
/libcore/luni/src/main/java/java/io/

输入流： 数据源包括键盘、文件、网络等
输出流：输出源包括显示器，打印机，文件，网络等


文件读写过程
1. 建立通道
2. 建立读写空间
3. 开始读写数据
4. 关闭流

Android所有文件的存储都是字节的存储
在磁盘上保存的并不是字符，而是先把字符编码成字节，再存储这些字节到磁盘

读取文件，一般都是一个字节一个字节读取形成字节序列
ByteArrayOutputStream out = new ByteArrayOutputStream();
byte [] buffer = new byte[1024];

ByteArrayInputStream in  = new ByteArrayInputStream(buffer);
int len = -1;
try {
     if(in != null){
       while ((len = in.read(buffer)) != -1){
         out.write(buffer,0,len);
         }
       }
      }catch (IOException e){

}

FileOutPutStream 如果传入的是一个文件，会通过调用IoBridege.open返回一个有效的FD
IoBridge.open调用Libcore.os.open(path, flags, mode)

LibCore 通过其 BlockGuardOs 来做具体操作
最终调用Posix.open
会调用/libcore/luni/src/main/native/libcore_io_Posix.cpp -&gt; Posix_open
调用TEMP_FAILURE_ENTRY(open(path.c_str(),flags,mode));

open是linux的系统调用，最终应该会调用/external/bison/lib/open.c 的 open









</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="buffer" prog_lang="custom-colors" readonly="False" tags="" unique_id="121">
				<rich_text>
</rich_text>
				<rich_text scale="h2">ION 和DMABUF的比较：</rich_text>
				<rich_text>
</rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>
</rich_text>
				<table char_offset="17" col_max="1000" col_min="40">
					<row>
						<cell>Feature</cell>
						<cell>ION</cell>
						<cell>DMABUF</cell>
					</row>
					<row>
						<cell>Memory Manager Role</cell>
						<cell>ION replaces PMEM as the manager of provisioned memory pools. The list of ION heaps can be extended per device.</cell>
						<cell>DMABUF  is a buffer sharing framework, designed to integrate with the memory  allocators in DMA mapping frameworks, like the work-in-progress  DMA-contiguous allocator, also known as theContiguous Memory Allocator (CMA). DMABUF exporters have the option to implement custom allocators.</cell>
					</row>
					<row>
						<cell>User Space Access Control</cell>
						<cell>ION  offers the /dev/ion interface for user-space programs to allocate and  share buffers. Any user program with ION access can cripple the system  by depleting the ION heaps. Android checks user and group IDs to block  unauthorized access to ION heaps.</cell>
						<cell>DMABUF offers only kernel APIs. Access control is a function of the permissions on the devices using the DMABUF feature.</cell>
					</row>
					<row>
						<cell>Global Client and Buffer Database</cell>
						<cell>ION  contains a device driver associated with /dev/ion. The device structure  contains a database that tracks the allocated ION buffers, handles and  file descriptors, all grouped by user clients and kernel clients. ION  validates all client calls according to the rules of the database. For  example, there is a rule that a client cannot have two handles to the  same buffer.</cell>
						<cell>The DMA debug facility implements  a global hashtable,dma_entry_hash, to track DMA buffers, but only when  the kernel was built with theCONFIG_DMA_API_DEBUGoption.</cell>
					</row>
					<row>
						<cell>Cross-architecture Usage</cell>
						<cell>ION usage today is limited to architectures that run the Android kernel.</cell>
						<cell>DMABUF usage is cross-architecture. The DMA mapping redesign preparation patchset modified the DMA mapping code in 9 architectures besides the ARM architecture.</cell>
					</row>
					<row>
						<cell>Buffer Synchronization</cell>
						<cell>ION considers buffer synchronization to be an orthogonal problem.</cell>
						<cell>DMABUF  provides a pair of APIs for synchronization. The buffer-user  callsdma_buf_map_attachment() whenever it wants to use the buffer for  DMA . Once the DMA for the current buffer-user is over, it signals  ‘end-of-DMA’ to the exporter via a call todma_buf_unmap_attachment().</cell>
					</row>
					<row>
						<cell>Delayed Buffer Allocation</cell>
						<cell>ION allocates the physical memory before the buffer is shared.</cell>
						<cell>DMABUF  can defer the allocation until the first call  todma_buf_map_attachment(). The exporter of DMA buffer has the  opportunity to scan all client attachments, collate their buffer  constraints, then choose the appropriate backing storage.</cell>
					</row>
					<row>
						<cell>click me</cell>
						<cell>click me</cell>
						<cell>click me</cell>
					</row>
				</table>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="USB大容量存储" prog_lang="custom-colors" readonly="False" tags="" unique_id="135">
				<rich_text>USB大容量存储的连接方式， 这个功能已经在Android L以后被移除。
          有两个原因可能不适合当前的环境被移除：
          1）独占式文件读取，    当通过这种方式连接的时候，PC如果获取了文件访问权，此时Android系统将无法访问此存储设备，这会产生很多问题。所以之前也只能用这种方式读取    SD卡，而无法读取内置存储。
          2）格式不兼容，用这种方式读取的存储是FAT格式，以前的SD卡较小，所以都是这种格式，而现在动辄32GB的SD卡都用的是EXT32格式，所以不    能通过这样的方式获取。</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="MountService" prog_lang="custom-colors" readonly="False" tags="" unique_id="174">
				<rich_text>MountService 中 onEvent接收来自NativeDaemonConnector从Vold反馈的信息，随后调用onEventLocked
如果盘符状态发生了变化，会返回下面的值。
case VoldResponseCode.VOLUME_STATE_CHANGED
然后调用onVolumeStateChangedLocked
在onVolumeStateChangedLocked中会通过mCallbbacks.notifyVolumeStateChanged(vol, oldState, newState)
这个回调函数应该是StorageEventListener

然后发送H_VOLUME_BROADCAST 事件，随之发送MediaMounted广播


</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/">n8996</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/">frameworks</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/base/">base</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/base/core/">core</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/base/core/java/">java</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/base/core/java/android/">android</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/base/core/java/android/os/">os</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/base/core/java/android/os/storage/">storage</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/base/core/java/android/os/storage/VolumeInfo.java">VolumeInfo.java</rich_text>
				<rich_text>
VolumeInfo 表示盘符状态
85    </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">final</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=STATE_UNMOUNTED&amp;project=n8996">STATE_UNMOUNTED</rich_text>
				<rich_text> = </rich_text>
				<rich_text foreground="#a52a2a">0</rich_text>
				<rich_text>;
86    </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">final</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=STATE_CHECKING&amp;project=n8996">STATE_CHECKING</rich_text>
				<rich_text> = </rich_text>
				<rich_text foreground="#a52a2a">1</rich_text>
				<rich_text>;
87    </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">final</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=STATE_MOUNTED&amp;project=n8996">STATE_MOUNTED</rich_text>
				<rich_text> = </rich_text>
				<rich_text foreground="#a52a2a">2</rich_text>
				<rich_text>;
88    </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">final</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=STATE_MOUNTED_READ_ONLY&amp;project=n8996">STATE_MOUNTED_READ_ONLY</rich_text>
				<rich_text> = </rich_text>
				<rich_text foreground="#a52a2a">3</rich_text>
				<rich_text>;
89    </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">final</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=STATE_FORMATTING&amp;project=n8996">STATE_FORMATTING</rich_text>
				<rich_text> = </rich_text>
				<rich_text foreground="#a52a2a">4</rich_text>
				<rich_text>;
90    </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">final</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=STATE_EJECTING&amp;project=n8996">STATE_EJECTING</rich_text>
				<rich_text> = </rich_text>
				<rich_text foreground="#a52a2a">5</rich_text>
				<rich_text>;
91    </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">final</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=STATE_UNMOUNTABLE&amp;project=n8996">STATE_UNMOUNTABLE</rich_text>
				<rich_text> = </rich_text>
				<rich_text foreground="#a52a2a">6</rich_text>
				<rich_text>;
92    </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">final</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=STATE_REMOVED&amp;project=n8996">STATE_REMOVED</rich_text>
				<rich_text> = </rich_text>
				<rich_text foreground="#a52a2a">7</rich_text>
				<rich_text>;
93    </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">final</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=STATE_BAD_REMOVAL&amp;project=n8996">STATE_BAD_REMOVAL</rich_text>
				<rich_text> = </rich_text>
				<rich_text foreground="#a52a2a">8</rich_text>
				<rich_text>;




Android N上 otg 挂在上以后不会发送Media_Mounted是因为MountService#onVolumeStateChangedLocked 中vol.isVisibleForRead(userId 为false 导致不发送 H_VOLUME_BROADCAST
因为 otg 挂载上来的mountFlags为0。 应该是private



Sdcard Mount: 

01-01 09:45:20.105  1435  1549 I zhengyu : VoldResponseCode.VOLUME_STATE_CHANGED
01-01 09:45:20.105  1435  1549 I zhengyu : VoldResponseCode:  oldState: 0 newState:1
01-01 09:45:20.106  1435  1549 I zhengyu : onVolumeStateChangedLocked oldState:0 newState:1
01-01 09:45:20.107  1435  1549 I zhengyu : !Objects.equals(oldStateEnv, newStateEnv)
01-01 09:45:20.108  1435  1549 I zhengyu : oldStateEnv:unmounted  newStateEnv:checking
01-01 09:45:20.108  1435  1549 I zhengyu : userId: 0 MOUNT_FLAG_VISIBLE:2mountFlags:2
01-01 09:45:20.108  1435  1549 I zhengyu : isVisibleForRead
01-01 09:45:20.109  1435  1669 I zhengyu : H_VOLUME_BROADCAST
01-01 09:45:20.111  1435  1669 D zhengyu :  Volume public:179,65 broadcasting checking to UserHandle{0}
01-01 09:45:20.667  1435  1549 I zhengyu : VoldResponseCode.VOLUME_STATE_CHANGED
01-01 09:45:20.668  1435  1549 I zhengyu : VoldResponseCode:  oldState: 1 newState:2
01-01 09:45:20.668  1435  1549 I zhengyu : onVolumeStateChangedLocked oldState:1 newState:2
01-01 09:45:20.682  1435  1549 I zhengyu : !Objects.equals(oldStateEnv, newStateEnv)
01-01 09:45:20.682  1435  1549 I zhengyu : oldStateEnv:checking  newStateEnv:mounted
01-01 09:45:20.682  1435  1549 I zhengyu : userId: 0 MOUNT_FLAG_VISIBLE:2mountFlags:2
01-01 09:45:20.682  1435  1549 I zhengyu : isVisibleForRead
01-01 09:45:20.683  1435  1669 I zhengyu : H_VOLUME_BROADCAST
01-01 09:45:20.683  1435  1669 D zhengyu :  Volume public:179,65 broadcasting mounted to UserHandle{0}




sdcard unmount:
01-01 09:45:14.694  1435  1549 I zhengyu : VoldResponseCode.VOLUME_STATE_CHANGED
01-01 09:45:14.694  1435  1549 I zhengyu : VoldResponseCode:  oldState: 2 newState:5
01-01 09:45:14.695  1435  1549 I zhengyu : onVolumeStateChangedLocked oldState:2 newState:5
01-01 09:45:14.695  1435  1549 I zhengyu : !Objects.equals(oldStateEnv, newStateEnv)
01-01 09:45:14.695  1435  1549 I zhengyu : oldStateEnv:mounted  newStateEnv:ejecting
01-01 09:45:14.696  1435  1549 I zhengyu : userId: 0 MOUNT_FLAG_VISIBLE:2mountFlags:2
01-01 09:45:14.696  1435  1549 I zhengyu : isVisibleForRead
01-01 09:45:14.696  1435  1669 I zhengyu : H_VOLUME_BROADCAST
01-01 09:45:14.697  1435  1669 D zhengyu :  Volume public:179,65 broadcasting ejecting to UserHandle{0}
01-01 09:45:15.767  1435  1549 I zhengyu : VoldResponseCode.VOLUME_STATE_CHANGED
01-01 09:45:15.767  1435  1549 I zhengyu : VoldResponseCode:  oldState: 5 newState:0
01-01 09:45:15.768  1435  1549 I zhengyu : onVolumeStateChangedLocked oldState:5 newState:0
01-01 09:45:15.768  1435  1549 I zhengyu : !Objects.equals(oldStateEnv, newStateEnv)
01-01 09:45:15.768  1435  1549 I zhengyu : oldStateEnv:ejecting  newStateEnv:unmounted
01-01 09:45:15.768  1435  1549 I zhengyu : userId: 0 MOUNT_FLAG_VISIBLE:2mountFlags:2
01-01 09:45:15.768  1435  1549 I zhengyu : isVisibleForRead
01-01 09:45:15.773  1435  1669 I zhengyu : H_VOLUME_BROADCAST
01-01 09:45:15.773  1435  1669 D zhengyu :  Volume public:179,65 broadcasting unmounted to UserHandle{0}





01-01 09:44:29.768  1435  1669 D zhengyu :  Volume public:179,65 broadcasting mounted to UserHandle{0}
01-01 09:44:29.770  1435  1669 D zhengyu :  Volume emulated broadcasting mounted to UserHandle{0}
01-01 09:45:14.697  1435  1669 D zhengyu :  Volume public:179,65 broadcasting ejecting to UserHandle{0}
01-01 09:45:15.773  1435  1669 D zhengyu :  Volume public:179,65 broadcasting unmounted to UserHandle{0}
01-01 09:45:20.111  1435  1669 D zhengyu :  Volume public:179,65 broadcasting checking to UserHandle{0}
01-01 09:45:20.683  1435  1669 D zhengyu :  Volume public:179,65 broadcasting mounted to UserHandle{0}
01-01 09:47:31.085  1435  1669 I zhengyu : H_VOLUME_MOUNT
01-01 09:47:31.085  1435  1549 I zhengyu : VoldResponseCode.VOLUME_STATE_CHANGED
01-01 09:47:31.085  1435  1549 I zhengyu : VoldResponseCode:  oldState: 0 newState:0
01-01 09:47:31.085  1435  1549 I zhengyu : onVolumeStateChangedLocked oldState:0 newState:0
01-01 09:47:31.089  1435  1549 I zhengyu : VoldResponseCode.VOLUME_STATE_CHANGED
01-01 09:47:31.089  1435  1549 I zhengyu : VoldResponseCode:  oldState: 0 newState:1
01-01 09:47:31.089  1435  1549 I zhengyu : onVolumeStateChangedLocked oldState:0 newState:1
01-01 09:47:31.089  1435  1549 I zhengyu : !Objects.equals(oldStateEnv, newStateEnv)
01-01 09:47:31.090  1435  1549 I zhengyu : oldStateEnv:unmounted  newStateEnv:checking
01-01 09:47:31.090  1435  1549 I zhengyu : userId: 0 MOUNT_FLAG_VISIBLE:2mountFlags:0
01-01 09:47:32.789  1435  1549 I zhengyu : VoldResponseCode.VOLUME_STATE_CHANGED
01-01 09:47:32.790  1435  1549 I zhengyu : VoldResponseCode:  oldState: 1 newState:2
01-01 09:47:32.790  1435  1549 I zhengyu : onVolumeStateChangedLocked oldState:1 newState:2
01-01 09:47:32.811  1435  1549 I zhengyu : !Objects.equals(oldStateEnv, newStateEnv)
01-01 09:47:32.811  1435  1549 I zhengyu : oldStateEnv:checking  newStateEnv:mounted
01-01 09:47:32.811  1435  1549 I zhengyu : userId: 0 MOUNT_FLAG_VISIBLE:2mountFlags:0


sdcard 格式化过程分析
单单mount的时候
01-05 04:13:29.398  1448  1648 D VoldConnector: SND -&gt; {90 volume mount public:179,65 2 0}
01-05 04:13:29.409  1448  2911 D VoldConnector: RCV &lt;- {651 public:179,65 1}
01-05 04:13:29.736  1448  2911 D VoldConnector: RCV &lt;- {652 public:179,65 vfat}
01-05 04:13:29.737  1448  2911 D VoldConnector: RCV &lt;- {653 public:179,65 002B-0ADB}
01-05 04:13:29.739  1448  2911 D VoldConnector: RCV &lt;- {654 public:179,65 }
01-05 04:13:29.740  1448  2911 D VoldConnector: RCV &lt;- {656 public:179,65 /mnt/media_rw/002B-0ADB}
01-05 04:13:29.741  1448  2911 D VoldConnector: RCV &lt;- {655 public:179,65 /storage/002B-0ADB}
01-05 04:13:29.891   418   424 I Vold    : Filesystem check completed OK
01-05 04:13:30.072  1448  2911 D VoldConnector: RCV &lt;- {651 public:179,65 2}
01-05 04:13:30.073  1448  2911 D VoldConnector: RCV &lt;- {200 90 Command succeeded}
01-05 04:13:30.074  1448  1648 E VoldConnector: NDC Command {90 volume mount public:179,65 2 0} took too long (677ms)


格式化后
01-05 03:41:32.518  1448  5240 D VoldConnector: SND -&gt; {84 volume partition disk:179,64 public}
01-05 03:41:32.520  1448  2911 D VoldConnector: RCV &lt;- {651 public:179,65 5}
01-05 03:41:33.861  1448  2911 D VoldConnector: RCV &lt;- {651 public:179,65 0}
01-05 03:41:33.861   418   424 V vold    : /system/bin/sgdisk
01-05 03:41:33.862   418   424 V vold    :     --zap-all
01-05 03:41:33.862   418   424 V vold    :     /dev/block/vold/disk:179,64
01-05 03:41:33.863  1448  2911 D VoldConnector: RCV &lt;- {651 public:179,65 8}
01-05 03:41:33.864  1448  2911 D VoldConnector: RCV &lt;- {659 public:179,65}
01-05 03:41:35.034  1448  2911 D VoldConnector: RCV &lt;- {200 84 Command succeeded}
01-05 03:41:35.035  1448  5240 E VoldConnector: NDC Command {84 volume partition disk:179,64 public} took too long (2517ms)
01-05 03:41:35.036   418   423 D vold    : Disk at 179:64 changed
01-05 03:41:35.037  1448  2911 D VoldConnector: RCV &lt;- {641 disk:179,64 3975151616}
01-05 03:41:35.037   418   423 V vold    : /system/bin/sgdisk
01-05 03:41:35.037   418   423 V vold    :     --android-dump
01-05 03:41:35.037   418   423 V vold    :     /dev/block/vold/disk:179,64
01-05 03:41:35.037  1448  2911 D VoldConnector: RCV &lt;- {642 disk:179,64 }
01-05 03:41:35.038  1448  2911 D VoldConnector: RCV &lt;- {644 disk:179,64 /sys//devices/soc/7864900.sdhci/mmc_host/mmc1/mmc1:59b4/block/mmcblk1}
01-05 03:41:35.076   418   423 V vold    : DISK mbr
01-05 03:41:35.076   418   423 V vold    : 
01-05 03:41:35.076   418   423 V vold    : PART 1 c
01-05 03:41:35.076   418   423 V vold    : 
01-05 03:41:35.077   418   423 D vold    : Device just partitioned; silently formatting
01-05 03:41:35.079   418   423 I vold    : About to discard 3974103040 on /dev/block/vold/public:179,65
01-05 03:41:35.522   418   423 I vold    : Discard success on /dev/block/vold/public:179,65
01-05 03:41:35.523   418   423 V vold    : /system/bin/newfs_msdos
01-05 03:41:35.523   418   423 V vold    :     -F
01-05 03:41:35.523   418   423 V vold    :     32
01-05 03:41:35.523   418   423 V vold    :     -O
01-05 03:41:35.524   418   423 V vold    :     android
01-05 03:41:35.524   418   423 V vold    :     -c
01-05 03:41:35.524   418   423 V vold    :     64
01-05 03:41:35.524   418   423 V vold    :     -A
01-05 03:41:35.525   418   423 V vold    :     /dev/block/vold/public:179,65
01-05 03:41:35.566   418   423 I newfs_msdos: /system/bin/newfs_msdos: warning, /dev/block/vold/public:179,65 is not a character device
01-05 03:41:35.566   418   423 I newfs_msdos: /dev/block/vold/public:179,65: 7758016 sectors in 121219 FAT32 clusters (32768 bytes/cluster)
01-05 03:41:36.251  1448  2911 D VoldConnector: RCV &lt;- {650 public:179,65 0 &quot;disk:179,64&quot; &quot;&quot;}
01-05 03:41:36.251   418   423 D vold    : Disk at 179:64 changed
01-05 03:41:36.251  1448  2911 D VoldConnector: RCV &lt;- {651 public:179,65 0}
01-05 03:41:36.252  1448  2911 D VoldConnector: RCV &lt;- {643 disk:179,64}
01-05 03:41:36.252   418   423 V vold    : /system/bin/sgdisk
01-05 03:41:36.252   418   423 V vold    :     --android-dump
01-05 03:41:36.252   418   423 V vold    :     /dev/block/vold/disk:179,64
01-05 03:41:36.252  1448  2911 D VoldConnector: RCV &lt;- {641 disk:179,64 3975151616}
01-05 03:41:36.252  1448  2911 D VoldConnector: RCV &lt;- {642 disk:179,64 }
01-05 03:41:36.253  1448  2911 D VoldConnector: RCV &lt;- {644 disk:179,64 /sys//devices/soc/7864900.sdhci/mmc_host/mmc1/mmc1:59b4/block/mmcblk1}
01-05 03:41:36.253  1448  2911 D VoldConnector: RCV &lt;- {651 public:179,65 7}
01-05 03:41:36.253  1448  2911 D VoldConnector: RCV &lt;- {659 public:179,65}
01-05 03:41:36.254  1448  2910 D VoldConnector: SND -&gt; {85 volume mount public:179,65 2 0}
01-05 03:41:36.294   418   423 V vold    : DISK mbr
01-05 03:41:36.294   418   423 V vold    : 
01-05 03:41:36.294   418   423 V vold    : PART 1 c
01-05 03:41:36.295   418   423 V vold    : 
01-05 03:41:36.298  1448  2911 D VoldConnector: RCV &lt;- {650 public:179,65 0 &quot;disk:179,64&quot; &quot;&quot;}
01-05 03:41:36.299  1448  2911 D VoldConnector: RCV &lt;- {651 public:179,65 0}
01-05 03:41:36.299  1448  2911 D VoldConnector: RCV &lt;- {643 disk:179,64}
01-05 03:41:36.300   418   424 V vold    : /system/bin/blkid
01-05 03:41:36.300   418   424 V vold    :     -c
01-05 03:41:36.300   418   424 V vold    :     /dev/null
01-05 03:41:36.300   418   424 V vold    :     -s
01-05 03:41:36.301   418   424 V vold    :     TYPE
01-05 03:41:36.301   418   424 V vold    :     -s
01-05 03:41:36.301   418   424 V vold    :     UUID
01-05 03:41:36.301   418   424 V vold    :     -s
01-05 03:41:36.301   418   424 V vold    :     LABEL
01-05 03:41:36.302   418   424 V vold    :     /dev/block/vold/public:179,65
01-05 03:41:36.303  1448  2911 D VoldConnector: RCV &lt;- {651 public:179,65 1}
01-05 03:41:36.392   418   424 V vold    : /dev/block/vold/public:179,65: UUID=&quot;002B-0ADB&quot; TYPE=&quot;vfat&quot; 
01-05 03:41:36.393   418   424 V vold    : 
01-05 03:41:36.395  1448  2911 D VoldConnector: RCV &lt;- {652 public:179,65 vfat}
01-05 03:41:36.396  1448  2911 D VoldConnector: RCV &lt;- {653 public:179,65 002B-0ADB}
01-05 03:41:36.396  1448  2911 D VoldConnector: RCV &lt;- {654 public:179,65 }
01-05 03:41:36.397  1448  2911 D VoldConnector: RCV &lt;- {656 public:179,65 /mnt/media_rw/002B-0ADB}
01-05 03:41:36.397  1448  2911 D VoldConnector: RCV &lt;- {655 public:179,65 /storage/002B-0ADB}
01-05 03:41:36.398   418   424 V vold    : /system/bin/fsck_msdos
01-05 03:41:36.398   418   424 V vold    :     -p
01-05 03:41:36.398   418   424 V vold    :     -f
01-05 03:41:36.398   418   424 V vold    :     /dev/block/vold/public:179,65
01-05 03:41:36.418   418   424 I fsck_msdos: ** /dev/block/vold/public:179,65
01-05 03:41:36.634   418   424 V vold    : Waiting for FUSE to spin up...
01-05 03:41:36.686  1448  2911 D VoldConnector: RCV &lt;- {651 public:179,65 2}
01-05 03:41:36.686  1448  2911 D VoldConnector: RCV &lt;- {200 85 Command succeeded}
01-05 03:41:36.689  1448  2910 D VoldConnector: SND -&gt; {86 volume mount public:179,65 2 0}
01-05 03:41:36.690   418   424 W vold    : public:179,65 flags change requires state unmounted or unmountable
01-05 03:41:36.690   418   424 W vold    : public:179,65 user change requires state unmounted or unmountable
01-05 03:41:36.690   418   424 W vold    : public:179,65 mount requires state unmounted or unmountable
01-05 03:41:36.690  1448  2911 D VoldConnector: RCV &lt;- {400 86 Command failed}



















01-05 03:41:32.518  1448  5240 D VoldConnector: SND -&gt; {84 volume partition disk:179,64 public}
01-05 03:41:32.520  1448  2911 D VoldConnector: RCV &lt;- {651 public:179,65 5}
01-05 03:41:33.861  1448  2911 D VoldConnector: RCV &lt;- {651 public:179,65 0}

public static final int VOLUME_STATE_CHANGED = 651;

1119            case VoldResponseCode.VOLUME_STATE_CHANGED: {
1120                if (cooked.length != 3) break;
1121                final VolumeInfo vol = mVolumes.get(cooked[1]);
1122                if (vol != null) {
1123                    final int oldState = vol.state;
1124                    final int newState = Integer.parseInt(cooked[2]);
1125                    vol.state = newState;
1126                    onVolumeStateChangedLocked(vol, oldState, newState);
1127                }
1128                break;
1129            }

01-05 03:41:36.251  1448  2911 D VoldConnector: RCV &lt;- {</rich_text>
				<rich_text weight="heavy">650</rich_text>
				<rich_text> public:179,65 0 &quot;disk:179,64&quot; &quot;&quot;}

</rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">final</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=VOLUME_CREATED&amp;project=Avengers">VOLUME_CREATED</rich_text>
				<rich_text> = </rich_text>
				<rich_text foreground="#a52a2a">650</rich_text>
				<rich_text>;
1107            case VoldResponseCode.VOLUME_CREATED: {
1108                final String id = cooked[1];
1109                final int type = Integer.parseInt(cooked[2]);
1110                final String diskId = TextUtils.nullIfEmpty(cooked[3]);
1111                final String partGuid = TextUtils.nullIfEmpty(cooked[4]);
1112
1113                final DiskInfo disk = mDisks.get(diskId);
1114                final VolumeInfo vol = new VolumeInfo(id, type, disk, partGuid);
1115                mVolumes.put(id, vol);
1116                </rich_text>
				<rich_text weight="heavy">onVolumeCreatedLocked</rich_text>
				<rich_text>(vol);
1117                break;
1118            }

 mHandler.obtainMessage(H_VOLUME_MOUNT, vol).sendToTarget();
 
 669                case H_VOLUME_MOUNT: {
670                    final VolumeInfo vol = (VolumeInfo) msg.obj;
671                    if (isMountDisallowed(vol)) {
672                        Slog.i(TAG, &quot;Ignoring mount &quot; + vol.getId() + &quot; due to policy&quot;);
673                        break;
674                    }
675                    try {
676                        mConnector.execute(&quot;volume&quot;, &quot;mount&quot;, vol.id, vol.mountFlags,
677                                vol.mountUserId);
678                    } catch (NativeDaemonConnectorException ignored) {
679                    }
680                    break;
681                }

01-05 03:41:36.254  1448  2910 D VoldConnector: SND -&gt; {</rich_text>
				<rich_text weight="heavy">85 volume mount public:179,65 2 0</rich_text>
				<rich_text>}





</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="DocumentUI" prog_lang="custom-colors" readonly="False" tags="" unique_id="186">
				<rich_text>ExternalStorageProvider.java

484    @Override
485    public void deleteDocument(String docId) throws FileNotFoundException {
486        final File file = getFileForDocId(docId);
487// start:BBRY_ANDROID
488        final File visibleFile = getFileForDocId(docId, true);
489// end:BBRY_ANDROID</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="MountService" prog_lang="custom-colors" readonly="False" tags="" unique_id="188">
				<rich_text>StorageManager 与 MountService 是client与service关系， 通过AIDL传输

如果要在StorageManager加一个接口

1.</rich_text>
				<rich_text weight="heavy">StorageManager.java </rich_text>
				<rich_text>
  
   添加方法
    public boolean createEfsStorage(String storagePath, String password) {
        try{
            Preconditions.checkNotNull(storagePath, &quot;storagePath cannot be null&quot;);
            Preconditions.checkNotNull(password, &quot;password cannot be null&quot;);
            mMountService.createEfsStorage(storagePath, password);
            return true;
        }catch(RemoteException e){
            throw e.rethrowFromSystemServer();
        }
    }


2. </rich_text>
				<rich_text weight="heavy">IMountService.h </rich_text>
				<rich_text>

  编译framework/base/libs/storage产生libstorage.a静态文件
  编译framework/base/native/android 产生libandroid.so库动态文件， 该文件会被MountService使用
   
    添加接口
virtual int32_t createEfsStorage(const String16&amp; storagePath, const String16&amp; password) = 0;
  
</rich_text>
				<rich_text weight="heavy">     IMountService.cpp</rich_text>
				<rich_text>
      添加对应实现
      
    TRANSACTION_createEfsStorage = IBinder::FIRST_CALL_TRANSACTION + 73,
     ====
    int32_t createEfsStorage(const String16&amp; storagePath, const String16&amp; password)
    {
        Parcel data, reply;
        data.writeInterfaceToken(IMountService::getInterfaceDescriptor());
        data.writeString16(storagePath);
        data.writeString16(password);
        if (remote()-&gt;transact(TRANSACTION_createEfsStorage, data, &amp;reply) != NO_ERROR) {
            ALOGD(&quot;createEfsStorage could not contact remote\n&quot;);
            return -1;
        }
        int32_t err = reply.readExceptionCode();
        if (err &lt; 0) {
            ALOGD(&quot;createEfsStorage caught exception %d\n&quot;, err);
            return err;
        }
        return reply.readInt32();
    } 
    
3.  </rich_text>
				<rich_text weight="heavy">ImountService.java</rich_text>
				<rich_text>

           static final int TRANSACTION_createEfsStorage = IBinder.FIRST_CALL_TRANSACTION + 73;
         ======
            public int createEfsStorage(String storagePath, String password)
				throws RemoteException {
                Parcel _data = Parcel.obtain();
                Parcel _reply = Parcel.obtain();
                int _result;
                try {
                    _data.writeInterfaceToken(DESCRIPTOR);
                    _data.writeString(storagePath);
                    _data.writeString(password);
                    mRemote.transact(Stub.TRANSACTION_createEfsStorage, _data, _reply, 0);
                    _reply.readException();
                    _result = _reply.readInt();
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
                return _result;
            }

         =======
+                case TRANSACTION_createEfsStorage: {
+                    data.enforceInterface(DESCRIPTOR);
+                    String storagePath;
+                    storagePath = data.readString();
+                    String password;
+                    password = data.readString();
+                    int resultCode = createEfsStorage(storagePath, password);
+                    reply.writeNoException();
+                    reply.writeInt(resultCode);
+                    return true;
+                }
            
           =======
+    public int createEfsStorage(String storagePath, String password)
+		throws RemoteException;
+













</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="OTG" prog_lang="custom-colors" readonly="False" tags="" unique_id="189">
				<rich_text>

01-03 01:18:51.762  3498  3498 I zhengyu :</rich_text>
				<rich_text weight="heavy"> VolumeInfo{private}:</rich_text>
				<rich_text> </rich_text>
				<rich_text foreground="#ffff00000000">私有存储</rich_text>
				<rich_text>
01-03 01:18:51.762  3498  3498 I zhengyu :     type=PRIVATE diskId=null partGuid=null mountFlags=0 mountUserId=-1 
01-03 01:18:51.762  3498  3498 I zhengyu :     state=MOUNTED 
01-03 01:18:51.762  3498  3498 I zhengyu :     fsType=null fsUuid=null fsLabel=null 
01-03 01:18:51.762  3498  3498 I zhengyu :     path=/data internalPath=null 

01-03 01:18:51.762  3498  3498 I zhengyu : </rich_text>
				<rich_text weight="heavy">VolumeInfo{public:179,65}:</rich_text>
				<rich_text> </rich_text>
				<rich_text foreground="#ffff00000000">sdcard</rich_text>
				<rich_text>
01-03 01:18:51.762  3498  3498 I zhengyu :     type=PUBLIC diskId=disk:179,64 partGuid=null mountFlags=VISIBLE 
01-03 01:18:51.762  3498  3498 I zhengyu :     mountUserId=0 state=MOUNTED 
01-03 01:18:51.762  3498  3498 I zhengyu :     fsType=vfat fsUuid=4004-0FEC fsLabel= 
01-03 01:18:51.762  3498  3498 I zhengyu :     path=/storage/4004-0FEC internalPath=/mnt/media_rw/4004-0FEC 
01-03 01:46:04.849  2114  2114 I zhengyu : DiskInfo{disk:179,64}:
01-03 01:46:04.849  2114  2114 I zhengyu :     flags=ADOPTABLE|DEFAULT_PRIMARY|SD size=3975151616 label= 
01-03 01:46:04.849  2114  2114 I zhengyu :     sysPath=/sys//devices/soc/7864900.sdhci/mmc_host/mmc1/mmc1:59b4/block/mmcblk
01-03 01:46:04.849  2114  2114 I zhengyu :     1 

01-03 01:18:51.762  3498  3498 I zhengyu : </rich_text>
				<rich_text weight="heavy">VolumeInfo{emulated}:</rich_text>
				<rich_text> </rich_text>
				<rich_text foreground="#ffff00000000">内置存储</rich_text>
				<rich_text>
01-03 01:18:51.762  3498  3498 I zhengyu :     type=EMULATED diskId=null partGuid=null mountFlags=PRIMARY|VISIBLE 
01-03 01:18:51.762  3498  3498 I zhengyu :     mountUserId=-1 state=MOUNTED 
01-03 01:18:51.762  3498  3498 I zhengyu :     fsType=null fsUuid=null fsLabel=null 
01-03 01:18:51.762  3498  3498 I zhengyu :     path=/storage/emulated internalPath=/data/media 


01-03 01:18:51.762  3498  3498 I zhengyu : </rich_text>
				<rich_text weight="heavy">VolumeInfo{public:8,1}:</rich_text>
				<rich_text> </rich_text>
				<rich_text foreground="#ffff00000000">otg</rich_text>
				<rich_text>
01-03 01:18:51.762  3498  3498 I zhengyu :     type=PUBLIC diskId=disk:8,0 partGuid=null mountFlags=0 mountUserId=0 
01-03 01:18:51.762  3498  3498 I zhengyu :     state=MOUNTED 
01-03 01:18:51.762  3498  3498 I zhengyu :     fsType=vfat fsUuid=0078-2718 fsLabel=DISK_IMG 
01-03 01:18:51.762  3498  3498 I zhengyu :     path=/mnt/media_rw/0078-2718 internalPath=/mnt/media_rw/0078-2718 
01-03 01:46:04.850  2114  2114 I zhengyu : DiskInfo{disk:8,0}:
01-03 01:46:04.850  2114  2114 I zhengyu :     flags=USB size=4026531840 label=Generic 
01-03 01:46:04.850  2114  2114 I zhengyu :     sysPath=/sys//devices/soc/7000000.ssusb/7000000.dwc3/xhci-hcd.0.auto/usb1/1-
01-03 01:46:04.850  2114  2114 I zhengyu :     1/1-1:1.0/host0/target0:0:0/0:0:0:0/block/sda </rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="路径的含义" prog_lang="custom-colors" readonly="False" tags="" unique_id="197">
				<rich_text>数据库迁徙其实迁徙的是/data/media的路径 （相当与是/sdcard/）
将sdcard设为internal ， 就会变成primary， 一个系统只能有一个primary , 如果sdcard作为primary了， 内置存储就没有用了

/data/anr 存放anr路径
/data/app 第三方应用安装路径
/data/data/&lt;包名&gt;/ 存放应用数据
/data/media/&lt;UserId&gt;/ 以用户为单位存放共享数据 （为/storeage/emlated/0/的实际路径， /sdcard）
如果将内部存储设为internal并迁移数据，迁移的就是/data/media/的路径

/data/user/0/&lt;包名&gt;/ 存放与用户有关的应用数据
/data/system存放系统相关数据


sdcard挂载为internal以后，在路径/mnt/expand/&lt;hash&gt;/ 这个路径地位等同与/data
将sdcard设为内置以后并迁移， /data/media/的数据会迁移到/mnt/expand/&lt;hash&gt;/media这个路径中
如果移动app， 则是将/data/app/&lt;包名&gt;的数据移动到 /data/media/

此时所有的照片之类的数据都会存在/mnt/expand/&lt;hash&gt;/media下

</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Gradle" prog_lang="custom-colors" readonly="False" tags="" unique_id="29">
			<rich_text>Android Studio会将grandle 下载到 ~/.grandle/wrapper/dists/ 相关路径下

</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Managed profile与多用户" prog_lang="custom-colors" readonly="False" tags="" unique_id="30">
			<rich_text>Managed profile  and Multi-user 

pm get-max-users
pm create-user


管理配置相关的API是DevicePolicyManager与DevicePolicyManagerService
Multi-user 相关的API是UserManager和 UserManagerService

=======Managed Profile============

管理配置依赖与多用户来实现， 每次设置的时候都会创建一个用户，默认为guest用户
以管理配置一个应用Android for work 为例， 程序会创建一个用户，然后在这个用户里面安装相应的程序，来实现一个应用有两个分身，两者完全独立开
google AndroidForWork demo: /m8976/development/samples/browseable/BasicManagedProfile/src/com.example.android.basicmanagedprofile/
通过demo可以创建管理配置文件（Managed Profile）
 

</rich_text>
			<rich_text scale="h2" weight="heavy">adb shell pm get-max-users 可以获取当前系统支持的最大用户数量</rich_text>
			<rich_text>
</rich_text>
			<rich_text scale="h2" weight="heavy">pm create-user &quot;user-name&quot;</rich_text>
			<rich_text>

用户文件路径：
/data/system/users/0


       查看了代码发现，guest用户不算到用户数量里面，哪怕把config_multiuserMaximumUsers设为1也可以创建，    所以刚才试用的idol3 在android for work    创建的是guest用户，这也就是为什么config_multiuserMaximumUsers == 1    的设备还能够部分使用Android for work的原因，但是我看到DevicePolicyManagerService    里边也有createUser的API, 所以如果不开启多用户，可能部分的功能无法使用
    
    
    621    private boolean isUserLimitReachedLocked() {
    622        return </rich_text>
			<rich_text weight="heavy">getAliveUsersExcludingGuestsCountLocked</rich_text>
			<rich_text>()    &gt;= UserManager.getMaxSupportedUsers();
    623    }
    
    
    647    private int </rich_text>
			<rich_text weight="heavy">getAliveUsersExcludingGuestsCountLocked</rich_text>
			<rich_text>()    {
    648        int aliveUserCount = 0;
    649        final int totalUserCount = mUsers.size();
    650        // Skip over users being removed
    651        for (int i = 0; i &lt; totalUserCount; i++) {
    652            UserInfo user = mUsers.valueAt(i);
    653            if (!mRemovingUserIds.get(user.id)
    654                    &amp;&amp;</rich_text>
			<rich_text weight="heavy"> !user.isGuest() </rich_text>
			<rich_text>&amp;&amp;    !user.partial) {
    655                aliveUserCount++;
    656            }
    657        }
    658        return aliveUserCount;
    659    }
    
    
    cdd里面关于managed profile与多用户相关只有下面一条，我的理解是必须要满足与多用户享用的</rich_text>
			<rich_text weight="heavy">安全需求</rich_text>
			<rich_text>，    而并不是说要满足多用户。</rich_text>
			<rich_text weight="heavy">所以Android for work 可以不满足多用户</rich_text>
			<rich_text>，但是满足多用户安全需求相关的特性，如用户存    储独立性（在Android for work里边是能够将ower用户与guest用户数据隔离开）
    
    MUST ensure that it satisfies </rich_text>
			<rich_text weight="heavy">all the security requirements       applicable</rich_text>
			<rich_text> for a device with
    multiple users enabled (see section 9.5), even though the managed    profile is not counted
    as another user in addition to the primary user.
    
    
    
    ========</rich_text>
			<rich_text scale="h2" weight="heavy">Multi-User</rich_text>
			<rich_text>============
   多用户设置： 通过在config_multiuserMaximumUsers设置允许用户的数量，这个数量不包含guest用户，必须大于等于1 
   
   
    1.UserManagerService的创建
    在SystemServer当中进行注册
    ServiceManager.addService(Context.USER_SERVICE, UserManagerService.getInstance());
    
    2.添加新用户
    UserManagerService -&gt; createUser
            1) 通过checkManagedUsersPermission来检查权限
            669    private static final void checkManageUsersPermission(String message) {
            670        final int uid = Binder.getCallingUid();  //获取调用的UserId， UID到底怎么理解？
            671        if (uid != Process.SYSTEM_UID &amp;&amp; uid != 0        //需要系统级别的UID         
            672                &amp;&amp; ActivityManager.checkComponentPermission(   
            673                        android.Manifest.permission.MANAGE_USERS,
            674                        uid, -1, true) != PackageManager.PERMISSION_GRANTED) {
            675            throw new SecurityException(&quot;You need MANAGE_USERS permission to: &quot; + message);
            676        }
            677    }
            
            
            </rich_text>
			<rich_text scale="h2" weight="heavy">关于UID</rich_text>
			<rich_text>
            与Linux的UID概念不同，在Android中UID更多的被用来做权限的管理，每个App会对应一个UID，UID存储在/data/system/packages.list ，通过Shared User id 可以将多个APK运行在同一个进程中，实现数据共享。
            对于某个APK来说，如果要使用某个共享UID需要
            #1 在Manifest节点中增加Android:sharedUserId属性
            #2 在Android.mk中增加LOCAL_CERTIFICATE的定义， 如果不对其定义会出现
               Package com.test.MyTest has no signatures that match those in shared user Android.uid.system; ignoring!
             #3 把APK的源码放到packages/apps/ 用mm编译
             
             Example:
             Settings在android:sharedUserId=&quot;android.uid.system&quot; 在Android.mk中添加LOCAL_CERTIFICATE := platform
             Launcher在android:sharedUserId=&quot;android.uid.shared&quot; 在Android.mk中增加LOCAL_CERTIFICATE := shared
             Gallery 在android:sharedUserId=&quot;android.media&quot; 在Android.mk中增加LOCAL_CERTIFICATE := media
             在build/target/product/security定义了四组签名供Android.mk编译APK使用
             testkey: 普通APK，默认情况下使用
             platform: 该APK完成一些系统的核心功能 编译出来的APK所在的进程UID为system
             shared：该APK需要和home/contacts进程共享数据
             media: 该APK是media/download系统中的一环
             
             
            2）createUserInternal
            
    
    
    =======Guest-User===========
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    </rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Fragment生命周期" prog_lang="custom-colors" readonly="False" tags="" unique_id="31">
			<rich_text>onAttach() -&gt; onCreate() -&gt; onCreateView() -&gt; onActivityCreate() -&gt; onStart() -&gt; onResume()


onResume()-&gt;onPause()-&gt;onStop()-&gt;onDestroyView() -&gt; onDetach() -&gt; 保留
                                                                                  -&gt; onDestroy() -&gt; onDetatch() -&gt; 销毁
                                                                                  

在Fragment中销毁当前Fragment
private void finish (){
    getActivity().onBackPressed();
}</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="apk反编译" prog_lang="custom-colors" readonly="False" tags="" unique_id="41">
			<rich_text>apktool.rar 负责反编译资源文件
与apktool一起用，将apltool与apktool.jar放在同一个目录，使用./apktool d xxx.apk 进行反编译


dex2jar....zip  将APK文件解压缩的classese.dex 放入其解压的文件夹 ====&gt; sh dex2jar.sh classes.dex 
sh d2j-dex2jar.sh GtsPermissionTestCases.apk 生成Jar

jd-gui-1.4.0.jar 用来查看由前面反编译出来的class_dex2jar.jar  ====&gt;   java -jar jd-gui-1.4.9.jar xxx


</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="VR glass" prog_lang="custom-colors" readonly="False" tags="" unique_id="47">
			<rich_text>    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/">xref</rich_text>
			<rich_text>: /</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/">m8976</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/frameworks/">frameworks</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/frameworks/base/">base</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/frameworks/base/core/">core</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/frameworks/base/core/java/">java</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/frameworks/base/core/java/android/">android</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/frameworks/base/core/java/android/view/">view</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/frameworks/base/core/java/android/view/KeyEvent.java">KeyEvent.java</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#ffff00000000" scale="h2">定义了两个事件，分别表示vrglass开启和关闭，确定手机是否在盒子中</rich_text>
			<rich_text>
      
       </rich_text>
			<rich_text weight="heavy">public</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">static</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">final</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">int</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=KEYCODE_TCT_VR_GLASS_ENABLE&amp;project=m8976">KEYCODE_TCT_VR_GLASS_ENABLE</rich_text>
			<rich_text> = 253;
       </rich_text>
			<rich_text weight="heavy">public</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">static</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">final</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">int</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=KEYCODE_TCT_VR_GLASS_DISABLE&amp;project=m8976">KEYCODE_TCT_VR_GLASS_DISABLE</rich_text>
			<rich_text> = 252;
       
       在PhoneWindowManager.java
        </rich_text>
			<rich_text weight="heavy">public</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">int</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=interceptKeyBeforeQueueing&amp;project=m8976">interceptKeyBeforeQueueing</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=KeyEvent&amp;project=m8976">KeyEvent</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=event&amp;project=m8976">event</rich_text>
			<rich_text>, </rich_text>
			<rich_text weight="heavy">int</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=policyFlags&amp;project=m8976">policyFlags</rich_text>
			<rich_text>) {
        ... ...
       
5787            </rich_text>
			<rich_text weight="heavy">case</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=KeyEvent&amp;project=m8976">KeyEvent</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=KEYCODE_TCT_VR_GLASS_ENABLE&amp;project=m8976">KEYCODE_TCT_VR_GLASS_ENABLE</rich_text>
			<rich_text>:
5788            </rich_text>
			<rich_text weight="heavy">case</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=KeyEvent&amp;project=m8976">KeyEvent</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=KEYCODE_TCT_VR_GLASS_DISABLE&amp;project=m8976">KEYCODE_TCT_VR_GLASS_DISABLE</rich_text>
			<rich_text>:
5789                </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=down&amp;project=m8976">down</rich_text>
			<rich_text>){
5790                         mVRMode = mVrgm.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getVRHallSensorState&amp;project=m8976">getVRHallSensorState</rich_text>
			<rich_text>()?1:0;   //===========&gt;VrGlassManager-&gt;getVRHallState() 
5791                         </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Settings&amp;project=m8976">Settings</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Global&amp;project=m8976">Global</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=putInt&amp;project=m8976">putInt</rich_text>
			<rich_text>(mContext.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getContentResolver&amp;project=m8976">getContentResolver</rich_text>
			<rich_text>(), &quot;vr_glass_mode&quot;, mVRMode);
5792                }
5793                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=result&amp;project=m8976">result</rich_text>
			<rich_text> &amp;= ~</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ACTION_PASS_TO_USER&amp;project=m8976">ACTION_PASS_TO_USER</rich_text>
			<rich_text>;
5794                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isWakeKey&amp;project=m8976">isWakeKey</rich_text>
			<rich_text> = </rich_text>
			<rich_text weight="heavy">false</rich_text>
			<rich_text>;
5795                </rich_text>
			<rich_text weight="heavy">break</rich_text>
			<rich_text>
        
        ... ...
        }
        
        
        
</rich_text>
			<rich_text foreground="#ffff00000000" scale="h2">在VrGlassService的构造函数中初始化了DataObserver对象，并通过调用其startObservering来注册回调函数，来监听字段vr_glass_mode的变化</rich_text>
			<rich_text>
        
309    </rich_text>
			<rich_text weight="heavy">private</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">class</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=DataObserver&amp;project=m8976">DataObserver</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">extends</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ContentObserver&amp;project=m8976">ContentObserver</rich_text>
			<rich_text> {
310        </rich_text>
			<rich_text weight="heavy">private</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ContentResolver&amp;project=m8976">ContentResolver</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=mContentResolver&amp;project=m8976">mContentResolver</rich_text>
			<rich_text>;
311        </rich_text>
			<rich_text weight="heavy">public</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=DataObserver&amp;project=m8976">DataObserver</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Handler&amp;project=m8976">Handler</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=handler&amp;project=m8976">handler</rich_text>
			<rich_text>) {
312            </rich_text>
			<rich_text weight="heavy">super</rich_text>
			<rich_text>(handler);
313            mContentResolver = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mContext&amp;project=m8976">mContext</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getContentResolver&amp;project=m8976">getContentResolver</rich_text>
			<rich_text>();
314        }
315
316        @</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Override&amp;project=m8976">Override</rich_text>
			<rich_text>
317        </rich_text>
			<rich_text weight="heavy">public</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=onChange&amp;project=m8976">onChange</rich_text>
			<rich_text>(</rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=selfChange&amp;project=m8976">selfChange</rich_text>
			<rich_text>) {
318            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Log&amp;project=m8976">Log</rich_text>
			<rich_text>.i(TAG, &quot;data state change&quot;);
319            refreshState();
320        }
321
322        </rich_text>
			<rich_text weight="heavy">public</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=refreshState&amp;project=m8976">refreshState</rich_text>
			<rich_text>(){
323            </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mVRModeEnable&amp;project=m8976">mVRModeEnable</rich_text>
			<rich_text> = mImpl.isVRMode();
324            mHandler.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=obtainMessage&amp;project=m8976">obtainMessage</rich_text>
			<rich_text>(H.STATE_CHANGED,</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mVRModeEnable&amp;project=m8976">mVRModeEnable</rich_text>
			<rich_text>).</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=sendToTarget&amp;project=m8976">sendToTarget</rich_text>
			<rich_text>();
325        }
326
327        </rich_text>
			<rich_text weight="heavy">public</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=startObserving&amp;project=m8976">startObserving</rich_text>
			<rich_text>() {
328            mContentResolver.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=registerContentObserver&amp;project=m8976">registerContentObserver</rich_text>
			<rich_text>(
329                    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Settings&amp;project=m8976">Settings</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Global&amp;project=m8976">Global</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getUriFor&amp;project=m8976">getUriFor</rich_text>
			<rich_text>(&quot;vr_glass_mode&quot;), </rich_text>
			<rich_text weight="heavy">false</rich_text>
			<rich_text>, </rich_text>
			<rich_text weight="heavy">this</rich_text>
			<rich_text>);
330        }
331    }
332
        
        
</rich_text>
			<rich_text foreground="#ffff00000000" scale="h2">如果变化则会调用onChange，然后发出H。STATE_CHANGED的信息， H的handle Message会调用handleVRModeChanged</rich_text>
			<rich_text>
这个函数首先判断isTopActivityCardBoard,然后调用startActivityAsUser，最后在writeSettings中写入设置，强制开启反转180度， 还需要为SystemService添加SELinux权限
        
          </rich_text>
			<rich_text weight="heavy">private</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=handleVRModeChanged&amp;project=m8976">handleVRModeChanged</rich_text>
			<rich_text>(</rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=enable&amp;project=m8976">enable</rich_text>
			<rich_text>){
253        </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text>(isVRModeEnable == enable) </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text>;
254        </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text>(DEBUG) </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Log&amp;project=m8976">Log</rich_text>
			<rich_text>.i(TAG,&quot;handleVRModeChanged from &quot;+isVRModeEnable+&quot; to &quot;+enable);
255
256        isVRModeEnable = enable;
257
258        </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text>(isVRModeEnable){
259            </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mIsTopCardBoard&amp;project=m8976">mIsTopCardBoard</rich_text>
			<rich_text> = mImpl.isTopActivityCardBoard();
260            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text>(!</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mIsTopCardBoard&amp;project=m8976">mIsTopCardBoard</rich_text>
			<rich_text>){
261                //startActivity
262                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=PackageManager&amp;project=m8976">PackageManager</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=manager&amp;project=m8976">manager</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mContext&amp;project=m8976">mContext</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getPackageManager&amp;project=m8976">getPackageManager</rich_text>
			<rich_text>();
263                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Intent&amp;project=m8976">Intent</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=intent&amp;project=m8976">intent</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=manager&amp;project=m8976">manager</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getLaunchIntentForPackage&amp;project=m8976">getLaunchIntentForPackage</rich_text>
			<rich_text>(&quot;com.nibiru.tcl.launcher&quot;);
264                </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=intent&amp;project=m8976">intent</rich_text>
			<rich_text>!=</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=m8976">null</rich_text>
			<rich_text>){
265                     </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=intent&amp;project=m8976">intent</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setFlags&amp;project=m8976">setFlags</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=intent&amp;project=m8976">intent</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=FLAG_ACTIVITY_NEW_TASK&amp;project=m8976">FLAG_ACTIVITY_NEW_TASK</rich_text>
			<rich_text>);
266                     </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mContext&amp;project=m8976">mContext</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=startActivityAsUser&amp;project=m8976">startActivityAsUser</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=intent&amp;project=m8976">intent</rich_text>
			<rich_text>,</rich_text>
			<rich_text weight="heavy">new</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=UserHandle&amp;project=m8976">UserHandle</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mContext&amp;project=m8976">mContext</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getUserId&amp;project=m8976">getUserId</rich_text>
			<rich_text>()));
267                }
268            }
269            writeSettings(mProduct);   //强制打开反转180
270        }</rich_text>
			<rich_text weight="heavy">else</rich_text>
			<rich_text>{
271            resetSettings(mProduct);
272        }



</rich_text>
			<rich_text scale="h2" weight="heavy">VrGlassImpl</rich_text>
			<rich_text>

517        </rich_text>
			<rich_text weight="heavy">public</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=isTopActivityCardBoard&amp;project=m8976">isTopActivityCardBoard</rich_text>
			<rich_text>(){
518            </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> isTopActivityCardBoard = </rich_text>
			<rich_text weight="heavy">false</rich_text>
			<rich_text>;
519            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=List&amp;project=m8976">List</rich_text>
			<rich_text>&lt;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ActivityManager&amp;project=m8976">ActivityManager</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=RunningTaskInfo&amp;project=m8976">RunningTaskInfo</rich_text>
			<rich_text>&gt; </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=taskList&amp;project=m8976">taskList</rich_text>
			<rich_text>;
520            </rich_text>
			<rich_text weight="heavy">try</rich_text>
			<rich_text> {
521                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=taskList&amp;project=m8976">taskList</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ActivityManagerNative&amp;project=m8976">ActivityManagerNative</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getDefault&amp;project=m8976">getDefault</rich_text>
			<rich_text>().</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getTasks&amp;project=m8976">getTasks</rich_text>
			<rich_text>(1, 0);
522                </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=taskList&amp;project=m8976">taskList</rich_text>
			<rich_text> != </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=m8976">null</rich_text>
			<rich_text> &amp;&amp; </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=taskList&amp;project=m8976">taskList</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=size&amp;project=m8976">size</rich_text>
			<rich_text>() &gt; 0) {
523                    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ComponentName&amp;project=m8976">ComponentName</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=topActivity&amp;project=m8976">topActivity</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=taskList&amp;project=m8976">taskList</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=get&amp;project=m8976">get</rich_text>
			<rich_text>(0).</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=topActivity&amp;project=m8976">topActivity</rich_text>
			<rich_text>;
524                    </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=topActivity&amp;project=m8976">topActivity</rich_text>
			<rich_text> != </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=m8976">null</rich_text>
			<rich_text>) {
525                        isTopActivityCardBoard = isCardBoardActivity(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=topActivity&amp;project=m8976">topActivity</rich_text>
			<rich_text>);
526                    }
527                }
528            } </rich_text>
			<rich_text weight="heavy">catch</rich_text>
			<rich_text> (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=RemoteException&amp;project=m8976">RemoteException</rich_text>
			<rich_text> e) {
529                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Log&amp;project=m8976">Log</rich_text>
			<rich_text>.e(TAG, &quot;isSsvTopActivity get the activity stack failed&quot;);
530            }
531            </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text> isTopActivityCardBoard;
532        }
533












</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Android用户切换流程" prog_lang="custom-colors" readonly="False" tags="" unique_id="50">
			<rich_text>ActivityManager -&gt; switchUser
 --- ActivityManagerService -&gt; switchUser -&gt; sendMessage(START_USER_SWITCH_MSG) -&gt; showUserSwitchDialog
 ----- UserSwitchDialog -&gt; startUser -&gt; ActivityManagerService.startUserInForground
 -----------ActivityManagerService -&gt;startUser 
 </rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="C++" prog_lang="custom-colors" readonly="False" tags="" unique_id="54">
			<rich_text>size_t 打印 
$zu prints as unsigned decimal
$zx prints as hex
$zd prints as signed decimal</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="内存管理" prog_lang="custom-colors" readonly="False" tags="" unique_id="55">
			<rich_text>android应用会使用两部分空间, native空间和heap堆， Dalvik Vm负责管理自己的Heap堆内存，与应用产生的垃圾对象的gc， ddms上只能看到Dalvik虚拟机对应的Heap堆内存， native所用的空间由linux统一管理，实现各个进程共享使用, 主要是JNI调用C会用到
adb shell dumpsys meminfo %packagename%

dumpsys | grep &quot;DUMP OF SERVICE&quot;

</rich_text>
			<rich_text weight="heavy">由于全局成员变量持有对象引用</rich_text>
			<rich_text>所导致的内存泄漏

当启动一个Service时，系统会倾向与将这个Service所依赖的进程进行保留，就会导致进程变得非常消耗内心村，推荐使用IntentService, 当后台任务执行结束后会自动停止

</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="内存泄漏" prog_lang="custom-colors" readonly="False" tags="" unique_id="77">
				<rich_text>GC优化
Android GC是一个三级Generation的内存模型，最近分配的对象会分配在Young Generation, 一定时间后存活的对象会移动到Old Generation， 最后到Permanent Generation
执行GC的时候，任何线程的任何操作都需要暂停，等待GC完成

避免GC频繁的操作
a) 避免内存抖动： Memory Churn 内存抖动是因为大量的对象在短时间内创建然后被释放掉
b) 避免在for循环, ondraw中创建对象，无法避免的可以创建对象池，然后在不用的时候释放
c) 主动回收Java对象，特别是比较大的如bitmap，减少GC工作效率






内存泄漏的分类
</rich_text>
				<rich_text scale="h2" weight="heavy">1. java heap space</rich_text>
				<rich_text>
java.lang.OutOfMemoryError: ......java heap space....
堆栈溢出， 访问数据量太大或者时间过长，GC认为这些不该被释放，导致栈移除，一般是由于代码原因引起
可以通过xms -xmx 调整虚拟机堆栈大小

java.lang.OutOfMemoryError:GC over head limit exceeded
系统处于高频率的GC状态， 但是效果并不是很明显，原因是系统中出现了太多的不可被释放的对象
---不恰当的引用
---申请太多的对象


</rich_text>
				<rich_text scale="h2" weight="heavy">2. PermGen space</rich_text>
				<rich_text>
java.lang.OutOfMemoryError: PermGen space
permgen space用于存放静态的类和方法  他的大小可以通过-XX：MaxPermSize来指定
当String处于interned状态(share unique instances)的时候也会占用permanent generation

</rich_text>
				<rich_text scale="h2" weight="heavy">3.Direct buffer memory</rich_text>
				<rich_text>


</rich_text>
				<rich_text scale="h2" weight="heavy">4.java.lang.StackOverflowError</rich_text>
				<rich_text>
程序里可能有死循环或递归调用 ， 报这个错误可能是-Xss设的太小了





 























</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="权限管理" prog_lang="custom-colors" readonly="False" tags="" unique_id="57">
			<rich_text>针对下面三个应用权限DefaultPermissionGrantPolicy 有特殊的处理
Browser app / Phone app / Default SMS app 
grantDefaultPermissionToDefaultBrowserLPr
grantDefaultPermissionsToDefaultDialerAppLPr
grantDefaultPermissionToDefaultSmsAppLPr

android.permission.WRITE_SETTINGS属于特殊权限， 管理入口不同与其他权限

默认权限授予入口为grantDefaultPermissions
 -&gt; grantPermissionsToSysComponentsAndPrivApps 为满足条件的APP默认授予全部权限，且这些APP的权限用户不可管理，不可回收
 系统组件 APP UID &lt; 10000 的应用
 平台签名并被防止到 priv-app 下的Persistent应用
 
 -&gt; grantDefaultSystemHandlerPermissions 为指定的APP默认授予部分指定权限（一个或多个），但这些APP的权限用户可以在权限管理界面进行手动回收或者再次授予
 应用预定义在这个方法中， OEM无法修改
 
 
 
 </rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="关机铃声" prog_lang="custom-colors" readonly="False" tags="" unique_id="61">
			<rich_text>shutdown -&gt; shutdowninner -&gt; beginShutdownSequence -&gt;</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="回调函数" prog_lang="custom-colors" readonly="False" tags="" unique_id="63">
			<rich_text>
第一种情况： A预留了回调函数作为一个系统类，B想要使得自己写的方法让A调用，可以通过实现MyInterface接口，然后在method中做自己想要做的，最后让A调用
/*A */
public class Caller{
    public MyCallerInterface mc;
    public void setCallfuc(MyCallInterfece mc){
         this.mc = mc;
    }
    
    public void call(){
         this.mc.method();
    }
}

public interface MyInterface{
    public void method();
}

public class B implements MyInterface{        //客户类实现接口
     public void method(){
        
     }
     public static void main(String args[]){
         Caller call = new Caller();
         call.setCallfunc(new B());
         call.call();
     }
    
}


第二种情况： A给B 留电话，等B问题考虑清楚以后给A回电

public class Caller{
    public MyCallerInterface mc;
    public void setCallfuc(MyCallInterfece mc){
         this.mc = mc;
    }
    
    public void call(){
         this.mc.method();
    }
}
public interface MyInterface{
    public void method();
}

public class B {        //客户类不直接实现接口
     public static void main(String args[]){
         Caller call = new Caller();
         call.setCallfunc(new MyInterface(){
         
         });
         call.call(); //在需要的时候再调用回调函数
     }
    
}

callback的一个应用， 测试方法时间
public class Tools {
    public void testTime(Callback callback){
        long begin = System.currentTimeMillis();
</rich_text>
			<rich_text weight="heavy">        callback.execute(); // 进行回调函数</rich_text>
			<rich_text>
        long end = System.currentTimeMillis();
        // 打印
        
    }

    public static void main (String[] args){
        Tools tool = new Tools();
         tool.testTime(new Callback(){
              public void execute(){
              
                TestObject.testMethod();
              } 
         });
    }

}


AIDL可以实现从客户端调用服务端的方法，并传递数据到服务端，也可以服务端传递数据过来； 但是如果要从服务去调用客户端的方法，那么就需要注册callback
服务端




















</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Android资源管理" prog_lang="custom-colors" readonly="False" tags="" unique_id="66">
			<rich_text>AssetManager.cpp -&gt; addAssetPath
AssetManager.cpp -&gt; appendPathToResTable
getZipResourceTable


每一个Activity组件都关联一个ContextImpl对象， 用来描述Activity组件的运行上下文环境的。
getResources -- Resouce 编译过的资源文件，可以通过id访问
getAssets -- AssetManager 访问未编译过的资源 

Resource也是通过AssetManager类来访问那些被编译过的应用程序资源文件，不过会先通过id获取资源文件名

一个进程可以同事加载多个应用程序，也就是可以同时加载多个APK文件，每一个APK文件在进程中都对应有一个全局的Resourses对象以及一个全局的AssetManager对象，这个全局的Resource对象保存在对应ContextImpl对象的成员变量mResouces中， 而全局AssetManager对象保存在Resources对象的mAssets中

每一个Activity都会创建一个对应的ContextImpl 然后通过调用init来执行初始化Activity组件运行上下文环境的工作， 包括Resouce对象和AssetManager对象


一个进程可以加载多个应用， 每个应用在进程中对应的资源都有一个全局的变量， 而每一个Activity都会有一个资源
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Makefile" prog_lang="custom-colors" readonly="False" tags="" unique_id="68">
			<rich_text>LOCAL_PATH:= $(call my-dir) 用于开发树中查找源文件，‘my-dir’ 由编译系统提供，用于返回当前路径，即包含xx.mk file的目录
include $(CLEAR_VARS) 
LOCAL_MODULE := services
LOCAL</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Binder机制" prog_lang="custom-colors" readonly="False" tags="" unique_id="69">
			<rich_text justification="left"></rich_text>
			<encoded_png char_offset="0"></encoded_png>
			<node custom_icon_id="0" foreground="" is_bold="False" name="JAVA层的Binder" prog_lang="custom-colors" readonly="False" tags="" unique_id="205">
				<rich_text>
</rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>   


ActivityManager的Binder案例， 里面ActivityManagerNative相当与上图中的stub. ActivityManagerService对应上图中的InputMethodWrapper

</rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>            

ActivityManager调用ActivityManagerService的过程是一个典型的代理模式
通过增加代理类，所有对ActivityManagerService的访问都转换成对代理类的访问， 消除了ActivityManager和ActivityManagerService之间的耦合，
代理类和被代理类都会实现同一个接口，对于调用者来说，无法知道掉哟该你的是代理类还是被代理类，实现了对上层的屏蔽。IActivityManager就是这样一个接口。


ActivityManager作为客户端，里面的功能函数会调用ActivityManagerNative.getDefault()来获取ActivityManagerProxy这个代理对象

ActivityManagerProxy
在初始化的时候将类型为IBinder的remote赋值到mRemote表示服务端在客户端的代理
asBinder返回IBinder类型的mRemote成员变量，即返回服务端在客户端的代理，ActivityManagerProxy所有的操作都会通过mRemote来实现
ActivityManagerProxy中的功能函数如startActivity都会现将数据写入Parcel中，然后通过成员变量mRemote.transact与服务端通信


ActivityManagerNative 
ActivityManagerNative相当与上图中的Stub
asInterface将binder转化为interface对象并通过这个对象创建ActivityManagerProxy,就得到了客户端代理对象
asBinder会返回自身，因为ActivityManagerNative属于服务端
onTransact对应与ActivityManagerProxy的成员变量mRemote的transact，通过switch-case过滤出要执行的方法，然后调用ActivityManagerService对应的方法，比如说getRunningAppProcesses。

getRunningAppProcesses执行过程如下：
ActivityManager.getRunningAppProcesses()通过ActivityManagerNative.getDefault()获取ActivityManagerProxy对象，再调用ActivityManagerProxy#getRunningAppProcesses(); 在这个函数中调用将一些参数写入parcel，通过mRemote.transact向服务端请求执行函数，ActivityManagerNative通过onTransact接收到这个请求，调用ActivityManagerService#getRunningAppProcesses


BinderProxy负责与JNI交互，然后通过JNI实现IBinder的一些底层函数











DeathRecipient



与Native层对应的关系

</rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>


Java层有AIDL工具来实现一些功能，相比较Native端简单很多。
要实现一个Java端的Service, 需要做下面几件事情
1. 写一个.aidl文件，用AIDL定义一个接口类IXXX
2. 在Android.mk里加入该文件，这样编译系统会自动生成一个IXXX.java，放在out/target/common/obj/JAVA_LIBRARIES/framework_intermediates/src/core下面
3.  服务端，写一个类，扩展IXXX。Stub，具体实现IXXX的接口函数。



#####AIDL定义############
Android Interface Definition Language
跨进程通讯接口

类似java风格
1. </rich_text>
				<rich_text foreground="#006699" weight="heavy">package</rich_text>
				<rich_text foreground="#000000"> com.cao.android.demos.binder.aidl;    </rich_text>
				<rich_text>
2. </rich_text>
				<rich_text foreground="#006699" weight="heavy">import</rich_text>
				<rich_text foreground="#000000"> com.cao.android.demos.binder.aidl.AIDLActivity;  </rich_text>
				<rich_text> //可以应用其他aidl类
3. </rich_text>
				<rich_text foreground="#006699" weight="heavy">interface</rich_text>
				<rich_text foreground="#000000"> AIDLService {     </rich_text>
				<rich_text>
4. </rich_text>
				<rich_text foreground="#000000">    </rich_text>
				<rich_text foreground="#006699" weight="heavy">void</rich_text>
				<rich_text foreground="#000000"> registerTestCall(AIDLActivity cb);     </rich_text>
				<rich_text>
5. </rich_text>
				<rich_text foreground="#000000">    </rich_text>
				<rich_text foreground="#006699" weight="heavy">void</rich_text>
				<rich_text foreground="#000000"> invokCallBack();  </rich_text>
				<rich_text>
6. </rich_text>
				<rich_text foreground="#000000">}    </rich_text>
				<rich_text>

会自动在gen目录生成AIDLService.java

</rich_text>
				<rich_text background="#ffffff" foreground="#333333">实现你定义aidl接口中的内部抽象类</rich_text>
				<rich_text>
</rich_text>
				<rich_text background="#ffffff" foreground="#333333">Stub类继承了Binder，并继承我们在aidl文件中定义的接口，我们需要实现接口方法，下面是我在例子中实现的Stub类：</rich_text>
				<rich_text foreground="#333333">
</rich_text>
				<rich_text>
1. </rich_text>
				<rich_text foreground="#006699" weight="heavy">private</rich_text>
				<rich_text foreground="#000000"> </rich_text>
				<rich_text foreground="#006699" weight="heavy">final</rich_text>
				<rich_text foreground="#000000"> AIDLService.Stub mBinder = </rich_text>
				<rich_text foreground="#006699" weight="heavy">new</rich_text>
				<rich_text foreground="#000000"> AIDLService.Stub() {  </rich_text>
				<rich_text>
2. </rich_text>
				<rich_text foreground="#000000">  </rich_text>
				<rich_text>
3. </rich_text>
				<rich_text foreground="#000000">    </rich_text>
				<rich_text foreground="#646464">@Override</rich_text>
				<rich_text foreground="#000000">  </rich_text>
				<rich_text>
4. </rich_text>
				<rich_text foreground="#000000">    </rich_text>
				<rich_text foreground="#006699" weight="heavy">public</rich_text>
				<rich_text foreground="#000000"> </rich_text>
				<rich_text foreground="#006699" weight="heavy">void</rich_text>
				<rich_text foreground="#000000"> invokCallBack() </rich_text>
				<rich_text foreground="#006699" weight="heavy">throws</rich_text>
				<rich_text foreground="#000000"> RemoteException {  </rich_text>
				<rich_text>
5. </rich_text>
				<rich_text foreground="#000000">        Log(</rich_text>
				<rich_text foreground="#0000ff">&quot;AIDLService.invokCallBack&quot;</rich_text>
				<rich_text foreground="#000000">);  </rich_text>
				<rich_text>
6. </rich_text>
				<rich_text foreground="#000000">        Rect1 rect = </rich_text>
				<rich_text foreground="#006699" weight="heavy">new</rich_text>
				<rich_text foreground="#000000"> Rect1();  </rich_text>
				<rich_text>
7. </rich_text>
				<rich_text foreground="#000000">        rect.bottom=-</rich_text>
				<rich_text foreground="#c00000">1</rich_text>
				<rich_text foreground="#000000">;  </rich_text>
				<rich_text>
8. </rich_text>
				<rich_text foreground="#000000">        rect.left=-</rich_text>
				<rich_text foreground="#c00000">1</rich_text>
				<rich_text foreground="#000000">;  </rich_text>
				<rich_text>
9. </rich_text>
				<rich_text foreground="#000000">        rect.right=</rich_text>
				<rich_text foreground="#c00000">1</rich_text>
				<rich_text foreground="#000000">;  </rich_text>
				<rich_text>
10. </rich_text>
				<rich_text foreground="#000000">        rect.top=</rich_text>
				<rich_text foreground="#c00000">1</rich_text>
				<rich_text foreground="#000000">;  </rich_text>
				<rich_text>
11. </rich_text>
				<rich_text foreground="#000000">        callback.performAction(rect);  </rich_text>
				<rich_text>
12. </rich_text>
				<rich_text foreground="#000000">    }  </rich_text>
				<rich_text>
13. </rich_text>
				<rich_text foreground="#000000">  </rich_text>
				<rich_text>
14. </rich_text>
				<rich_text foreground="#000000">  </rich_text>
				<rich_text>
15. </rich_text>
				<rich_text foreground="#000000">    </rich_text>
				<rich_text foreground="#646464">@Override</rich_text>
				<rich_text foreground="#000000">  </rich_text>
				<rich_text>
16. </rich_text>
				<rich_text foreground="#000000">    </rich_text>
				<rich_text foreground="#006699" weight="heavy">public</rich_text>
				<rich_text foreground="#000000"> </rich_text>
				<rich_text foreground="#006699" weight="heavy">void</rich_text>
				<rich_text foreground="#000000"> registerTestCall(AIDLActivity cb) </rich_text>
				<rich_text foreground="#006699" weight="heavy">throws</rich_text>
				<rich_text foreground="#000000"> RemoteException {  </rich_text>
				<rich_text>
17. </rich_text>
				<rich_text foreground="#000000">        Log(</rich_text>
				<rich_text foreground="#0000ff">&quot;AIDLService.registerTestCall&quot;</rich_text>
				<rich_text foreground="#000000">);  </rich_text>
				<rich_text>
18. </rich_text>
				<rich_text foreground="#000000">        callback = cb;  </rich_text>
				<rich_text>
19. </rich_text>
				<rich_text foreground="#000000">    }  </rich_text>
				<rich_text>
20. </rich_text>
				<rich_text foreground="#000000">};  </rich_text>
				<rich_text>

Stub翻译成中文是存根的意思，注意Stub对象是在被调用端进程，也就是服务端进程,至此，服务端aidl服务端得编码完成了。


   









</rich_text>
				<encoded_png char_offset="1">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</encoded_png>
				<encoded_png char_offset="118"></encoded_png>
				<table char_offset="1429" col_max="1000" col_min="40">
					<row>
						<cell>Native层</cell>
						<cell>Java层</cell>
						<cell></cell>
					</row>
					<row>
						<cell>IBinder</cell>
						<cell>IBinder</cell>
						<cell></cell>
					</row>
					<row>
						<cell>IInterface</cell>
						<cell>IInterface</cell>
						<cell></cell>
					</row>
					<row>
						<cell>BBinder</cell>
						<cell>Binder</cell>
						<cell>通过JavaBBinder类作为桥梁</cell>
					</row>
					<row>
						<cell>BpBinder</cell>
						<cell>BinderProxy</cell>
						<cell>通过JNI访问native实现</cell>
					</row>
					<row>
						<cell>BnInterface</cell>
						<cell>N/A</cell>
						<cell></cell>
					</row>
					<row>
						<cell>BpInterface</cell>
						<cell>N/A</cell>
						<cell></cell>
					</row>
					<row>
						<cell>BnXXXX</cell>
						<cell>Stub</cell>
						<cell>aidl工具生成</cell>
					</row>
					<row>
						<cell>BpXXXX</cell>
						<cell>Proxy</cell>
						<cell>aidl工具生成</cell>
					</row>
					<row>
						<cell>IXXX</cell>
						<cell>IXXX</cell>
						<cell>aidl文件定义</cell>
					</row>
					<row>
						<cell>click me</cell>
						<cell>click me</cell>
						<cell>click me</cell>
					</row>
				</table>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Native层Binder" prog_lang="custom-colors" readonly="False" tags="" unique_id="206">
				<rich_text scale="h2" weight="heavy">客户端</rich_text>
				<rich_text>(BpBinder)
</rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>   


IBinder.h
Binder.cpp (BBinder )  server端 
BpBinder.cpp  Client端


</rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>


</rich_text>
				<rich_text scale="h2" weight="heavy">服务端</rich_text>
				<rich_text>(BBinder)

</rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>   



Android Media文件的播放获取文件元数据，主要工作在MediaPlayer Service
MediaPlayer Client需要做的是创建播放实例，设置媒体文件位置，发送播放、获取元数据和录像命令
Avengers/frameworks/av/media/libmedia/
</rich_text>
				<rich_text weight="heavy">MediaPlayer</rich_text>
				<rich_text>.cpp 
MediaPlayer类的实现，应用程序实例化一个MediaPlayer对象，通过这个对象设置视频源，进行播放，暂停等播放操作，这个类也提供了getVideoHeight, getVideoWidth, getCurrentPosition,getTrackCount,getDuration等获取元数据的操作
实现上述操作的是类型为IMediaPlayer的成员变量mPlayer。

</rich_text>
				<rich_text weight="heavy">MediaRecorder</rich_text>
				<rich_text>.cpp
应用程序通过MediaRecorder对象与MediaPlayerService通信，进行视频的录制
MeidaRecorder通过类型为IMediaRecorder的成员变量mMediaRecorder， IMediaRecorder继承于IInterface, 相当与又是代理类的那个接口类，会被BnMediaRecorder、BpMediaRecorder继承


/Avengers/frameworks/av/media/libmediaplayerservice/




</rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>         

</rich_text>
				<rich_text weight="heavy">IMediaPlayer</rich_text>
				<rich_text>
IMediaPlayer.h中声明了DECLARE_META_INTERFACE(MediaPlayer); 
这个是定义在IInterface.h的宏主要定义了descripter的成员变量和asInterface、getInterfaceDescriptor两个成员方法。
#define DECLARE_META_INTERFACE(INTERFACE)                               \
    static const android::String16 </rich_text>
				<rich_text weight="heavy">descriptor</rich_text>
				<rich_text>;                          \
    static android::sp&lt;I##INTERFACE&gt; </rich_text>
				<rich_text weight="heavy">asInterface</rich_text>
				<rich_text>(                       \
            const android::sp&lt;android::IBinder&gt;&amp; obj);                  \
    virtual const android::String16&amp; </rich_text>
				<rich_text weight="heavy">getInterfaceDescriptor</rich_text>
				<rich_text>() const;    \
    I##INTERFACE();                                                     \
    virtual ~I##INTERFACE(); 

</rich_text>
				<rich_text scale="h2">客户端：</rich_text>
				<rich_text>
</rich_text>
				<rich_text weight="heavy">BpInterface</rich_text>
				<rich_text>
对应服务端的BnInterface，继承了IInterface且包含了IBinder， onAsBinder返回mRemote成员变量，也就是服务段的Binder
template&lt;typename INTERFACE&gt;
inline IBinder* BpInterface&lt;INTERFACE&gt;::onAsBinder()
{
    return remote();
}

remote()返回的是BnInterface的成员变量mRemote，这个是在BpInterface初始化的进行的赋值

BpRefBase::BpRefBase(const sp&lt;IBinder&gt;&amp; o)
    : </rich_text>
				<rich_text weight="heavy">mRemote</rich_text>
				<rich_text>(o.get()), mRefs(NULL), mState(0)
{
    extendObjectLifetime(OBJECT_LIFETIME_WEAK);

    if (mRemote) {
        mRemote-&gt;incStrong(this);           // Removed on first IncStrong().
        mRefs = mRemote-&gt;createWeak(this);  // Held for our entire lifetime.
    }
}


template&lt;typename INTERFACE&gt;
inline BpInterface&lt;INTERFACE&gt;::BpInterface(const sp&lt;IBinder&gt;&amp; remote)
    : </rich_text>
				<rich_text weight="heavy">BpRefBase</rich_text>
				<rich_text>(remote)
{
}


    BpMediaPlayer(const sp&lt;IBinder&gt;&amp; impl)
        : BpInterface&lt;IMediaPlayer&gt;(impl)
    {
    }



    virtual sp&lt;IMediaPlayer&gt; create(
            const sp&lt;IMediaPlayerClient&gt;&amp; client, audio_session_t audioSessionId) {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayerService::getInterfaceDescriptor());
        data.writeStrongBinder(IInterface::asBinder(client));
        data.writeInt32(audioSessionId);

        remote()-&gt;transact(CREATE, data, &amp;reply);
        return </rich_text>
				<rich_text weight="heavy">interface_cast&lt;IMediaPlayer&gt;(reply.readStrongBinder());</rich_text>
				<rich_text>
    }
    
    #define IMPLEMENT_META_INTERFACE(INTERFACE, NAME)                       \
    const android::String16 I##INTERFACE::descriptor(NAME);             \
    const android::String16&amp;                                            \
            I##INTERFACE::getInterfaceDescriptor() const {              \
        return I##INTERFACE::descriptor;                                \
    }                                                                   \
    android::sp&lt;I##INTERFACE&gt; I##INTERFACE::asInterface(                \
            const android::sp&lt;android::IBinder&gt;&amp; obj)                   \
    {                                                                   \
        android::sp&lt;I##INTERFACE&gt; intr;                                 \
        if (obj != NULL) {                                              \
            intr = static_cast&lt;I##INTERFACE*&gt;(                          \
                obj-&gt;queryLocalInterface(                               \
                        I##INTERFACE::descriptor).get());               \
            if (intr == NULL) {                                         \
                intr = new </rich_text>
				<rich_text weight="heavy">Bp##INTERFACE</rich_text>
				<rich_text>(obj);                          \
            }                                                           \
        }                                                               \
        return intr;                                                    \
    }                                                                   \
    I##INTERFACE::I##INTERFACE() { }                                    \
    I##INTERFACE::~I##INTERFACE() { }                                   \


IBinder -&gt; BnMediaPlayer -&gt; IMediaPlayer

客户端从远端获取一个IBinder对象，接着生成BpMediaPlayer，将其转化为IMediaPlayer对象，用户通过调用IMediaPlayer对象的接口，最终调用BpBinder对象的transact


        
</rich_text>
				<rich_text scale="h2">服务端：</rich_text>
				<rich_text>
</rich_text>
				<rich_text weight="heavy">BnInterface</rich_text>
				<rich_text>
同时继承IInterface和IBinder，onAsBinder直接返回自身。


</rich_text>
				<rich_text weight="heavy">BnMediaPlayer</rich_text>
				<rich_text>
BnXXX代表某个具体服务


开发一个NativeService
1)定义IXXX(对应IMediaPlayer) extends IInterface
2)定义BnXXX(对应BnMediaPlayer) extends BnInterface
3)定义XXXService(对应Client) 具体实现onTransact函数


BnMediaPlayerService: public BnInterface&lt;IMediaPlayerService&gt; 就是说BnMediaPlayerService同时继承BnInterface和IMediaPlayerService
    
template&lt;typename INTERFACE&gt;
class BnInterface : public INTERFACE, public BBinder
{
public:
    virtual sp&lt;IInterface&gt;      queryLocalInterface(const String16&amp; _descriptor);
    virtual const String16&amp;     getInterfaceDescriptor() const;

protected:
    virtual IBinder*            onAsBinder();
};
    



Binder线程创建
Process.start()
-&gt;Zygote.forkAndSpecialize()
-&gt;RuntimeInit.nativeZygoteInit()
-&gt;app_main.cpp#onZygoteInit

   </rich_text>
				<rich_text weight="heavy">app_main.cpp</rich_text>
				<rich_text>
   virtual void onZygoteInit()
    {
        sp&lt;ProcessState&gt; proc = ProcessState::self(); //获取Process对象
        ALOGV(&quot;App process: starting thread pool.\n&quot;); 
        proc-&gt;startThreadPool(); //启动新binder线程
    }

</rich_text>
				<rich_text foreground="#ffff00000000" weight="heavy">+++++++++++++ProcessState::startThreadPool++++++++++++++++</rich_text>
				<rich_text>

创建Binder主线程， 一个进程只有一个Binder主线程，是由应用进程主动创建，其他binser线程都是Binder驱动根据IPC通信需求创建，Binder主线程命名为Binder_1,  
void ProcessState::startThreadPool()
{
    AutoMutex _l(mLock);
    if (!mThreadPoolStarted) {
        mThreadPoolStarted = true;
        </rich_text>
				<rich_text weight="heavy">spawnPooledThread</rich_text>
				<rich_text>(true);
    }
}

void ProcessState::</rich_text>
				<rich_text weight="heavy">spawnPooledThread</rich_text>
				<rich_text>(bool isMain)
{
    if (mThreadPoolStarted) {
        String8 name = </rich_text>
				<rich_text weight="heavy">makeBinderThreadName</rich_text>
				<rich_text>();
        ALOGV(&quot;Spawning new pooled thread, name=%s\n&quot;, name.string());
        sp&lt;Thread&gt; t = new PoolThread(isMain);
        t-&gt;run(name.string());
    }
}

Binder线程的名称： Binder_X，通过ProcessState::Self():: makeBinderThreadName()来创建线程会通过下面的方式命名
String8 ProcessState::</rich_text>
				<rich_text weight="heavy">makeBinderThreadName</rich_text>
				<rich_text>() {
    int32_t s = android_atomic_add(1, &amp;mThreadPoolSeq);
    pid_t pid = getpid();
    String8 name;
    name.appendFormat(&quot;Binder:%d_%X&quot;, pid, s);
    return name;
}


客户端通过IBinder的transact()完成，实际是 BpBinder-&gt; transact 来完成


Android在Binder驱动中记录了每次Binder调用的信息，其中包括线程ID，因此Binder驱动知道返回值应该交给哪个线程，然后会唤醒这个线程来读取缓冲区的数据

</rich_text>
				<rich_text scale="h2" weight="heavy">入口代码：/m8996/frameworks/av/media/mediaserver/main_mediaserver.cpp</rich_text>
				<rich_text>
   sp&lt;ProcessState&gt; proc(ProcessState::self());  //获取processState对象， 通过self方式获取是单例模式
   sp&lt;IServiceManager&gt; sm = defaultServiceManager(); // 返回的是BpServiceManager
   MediaPlayerService::instantiate(); //MediaPlayerService实例化以后，会调用BpServiceManager-&gt;addService， service_manager收到addService的请求，将对应的信息保存到服务列表中
   
   
   ProcessState::self()-&gt;startThreadPool();
   IPCThreadState::self()-&gt;joinThreadPool();
   
</rich_text>
				<rich_text foreground="#ffff00000000" scale="h2" weight="heavy">++++++++++++++++sp&lt;ProcessState&gt; proc(ProcessState::self()); 分代码，获取ProcessState对象++++++++++++++++++++</rich_text>
				<rich_text>
ProcessState::self定义在/m8996/frameworks/native/libs/binder/ProcessState.cpp
    如果已经有了processState对象，则直接返回
    如果没有，则创建新对象，</rich_text>
				<rich_text weight="heavy">BINDER_VM_SIZE大小设置为不到1M空间</rich_text>
				<rich_text>，  #define BINDER_VM_SIZE ((1*1024*1024) - (4096 *2))
    在构造函数中会通过open_driver打开/</rich_text>
				<rich_text weight="heavy">dev/binder</rich_text>
				<rich_text>这个设备，是android在内核中搞得专门用于完成进程间通讯而设置的一个虚拟设备，并设置这个最大支持线程数量为 </rich_text>
				<rich_text weight="heavy">BINDER_SET_MAX_THREADS=15</rich_text>
				<rich_text> ，最大支持并发数量为16(一个Binder主线程+15个非主线程)个。通过ioctl方式告知内核， 通过这样的方式与内核binder建立了交互通道。Binder的驱动的fd会存到ProcessState成员变量mDriverFD中。
    所以每个进程只会调用open_drivder一次，之后改进程访问binder都是通过存储在mDriverFD的引用对binder设备进行操作，所以fd引用只会在进程中存在一个。
    
    
    ProcessState通过单例模式使得每个进程只存在一个ProcessState对象，这个对象保存在 Static.cpp 中
    sp&lt;ProcessState&gt; gProcess;
    

</rich_text>
				<rich_text foreground="#ffff00000000" scale="h2" weight="heavy">+++++++++defaultServiceManager()分代码，获取BpServiceManager对象是ServiceManager的代理对象++++++++++</rich_text>
				<rich_text>
定义在/m8996/frameworks/native/libs/binder/IServiceManager.cpp
33sp&lt;IServiceManager&gt; defaultServiceManager()
34{
35    if (gDefaultServiceManager != NULL) return gDefaultServiceManager;
36
37    {
38        AutoMutex _l(gDefaultServiceManagerLock);
39        while (gDefaultServiceManager == NULL) {
</rich_text>
				<rich_text weight="heavy">40            gDefaultServiceManager = interface_cast&lt;IServiceManager&gt;(
41                ProcessState::self()-&gt;getContextObject(NULL)); //传入参数为null</rich_text>
				<rich_text>
42            if (gDefaultServiceManager == NULL)
43                sleep(1);
44        }
45    }
46
47    return gDefaultServiceManager;
48}
  
</rich_text>
				<rich_text weight="heavy">----------------------------------------参数ProcessState::self()-&gt;getContextObject(NULL)返回Binder对象----------------------------</rich_text>
				<rich_text>
                85sp&lt;IBinder&gt; ProcessState::</rich_text>
				<rich_text weight="heavy">getContextObject</rich_text>
				<rich_text>(const sp&lt;IBinder&gt;&amp; /*caller*/)
                86{
                87    return </rich_text>
				<rich_text weight="heavy">getStrongProxyForHandle</rich_text>
				<rich_text>(</rich_text>
				<rich_text weight="heavy">0</rich_text>
				<rich_text>);  //传入参数为0
                88}
                
                ----------------------------ProcessState::getStrongProxyForHandle-----------

                179sp&lt;IBinder&gt; ProcessState::getStrongProxyForHandle(int32_t handle)
                180{
                181    sp&lt;IBinder&gt; result;
                182
                183    AutoMutex _l(mLock);
                184
                185    handle_entry* e = lookupHandleLocked(handle); //handle是一种资源的标识，某个数据结构，保存在数组中，然后handler是它在这个数组中的索引，内部会返回一个handle_entry
                186
                187    if (e != NULL) {
                188        // We need to create a new BpBinder if there isn't currently one, OR we
                189        // are unable to acquire a weak reference on this current one.  See comment
                190        // in getWeakProxyForHandle() for more info about this.
                191        IBinder* b = e-&gt;binder;
                192        if (b == NULL || !e-&gt;refs-&gt;attemptIncWeak(this)) {
                193            if (handle == 0) {
                213                Parcel data;
                214                status_t status = IPCThreadState::self()-&gt;transact(
                215                        0, IBinder::PING_TRANSACTION, data, NULL, 0);
                216                if (status == DEAD_OBJECT)
                217                   return NULL;
                218            }
                219
                </rich_text>
				<rich_text weight="heavy">220            b = new BpBinder(handle);</rich_text>
				<rich_text> //创建一个新的BpBinder对象
                221            e-&gt;binder = b;
                222            if (b) e-&gt;refs = b-&gt;getWeakRefs();
                223            result = b;
                224        } else {
                225            // This little bit of nastyness is to allow us to add a primary
                226            // reference to the remote proxy when this team doesn't have one
                227            // but another team is sending the handle to us.
                228            result.force_set(b);
                229            e-&gt;refs-&gt;decWeak(this);
                230        }
                231    }
                232
                233    return result;
                234}
                
</rich_text>
				<rich_text weight="heavy">                ----------------BpBinder构造函数---------------</rich_text>
				<rich_text>
                 89BpBinder::</rich_text>
				<rich_text weight="heavy">BpBinder</rich_text>
				<rich_text>(int32_t handle)
                    90    : mHandle(handle)  //上面传入的handle为0
                    91    , mAlive(1)
                    92    , mObitsSent(0)
                    93    , mObituaries(NULL)
                    94{
                    95    ALOGV(&quot;Creating BpBinder %p handle %d\n&quot;, this, mHandle);
                    96
                    97    extendObjectLifetime(OBJECT_LIFETIME_WEAK);
</rich_text>
				<rich_text weight="heavy">                    98    IPCThreadState::self()-&gt;incWeakHandle(handle);</rich_text>
				<rich_text>
                    99}
                    
                          --------------获取IPCThreadState对象-------
                            280IPCThreadState* IPCThreadState::self()
                            281{
                            282    if (gHaveTLS) {   //TLS， Thread Local Storage 线程独有的内部存储空间，每个线程都有一个，不与其他线程共享
                            283restart:
                            284        const pthread_key_t k = gTLS;
</rich_text>
				<rich_text weight="heavy">                            285        IPCThreadState* st = (IPCThreadState*)pthread_getspecific(k);</rich_text>
				<rich_text> //从TLS中过去IPCThreadState对象，在IPCThreadState的构造函数中pthread_setspecific
                            286        if (st) return st;
                            287        return new IPCThreadState;
                            288    }
                            289
                            290    if (gShutdown) return NULL;
                            291
                            292    pthread_mutex_lock(&amp;gTLSMutex);
                            293    if (!gHaveTLS) {
                            294        if (pthread_key_create(&amp;gTLS, threadDestructor) != 0) {
                            295            pthread_mutex_unlock(&amp;gTLSMutex);
                            296            return NULL;
                            297        }
                            298        gHaveTLS = true;
                            299    }
                            300    pthread_mutex_unlock(&amp;gTLSMutex);
                            301    goto restart;
                            302}
                    
                --------------继续defaultServiceManager流程，得到BpBinder对象作为参数，分析interface_cast&lt;IServiceManager&gt;（BpBinder *）这个函数-------------
                其实调用的是IServiceManager::asInterface(BpBinder* obj)，传入BpBinder(0), 返回的是BpServiceManager对象，这个对象是ServiceManager的代理对象，实现ServiceManager的函数如addService等方法
                
                gDefaultServiceManager =</rich_text>
				<rich_text weight="heavy"> interface_cast&lt;IServiceManager&gt;</rich_text>
				<rich_text>(
                ProcessState::self()-&gt;getContextObject(NULL)); //传入参数为null
 。            上面可以看到 ProcessState::self()-&gt;getContextObject(NULL))返回的是一个BpBinder对象
                
                            ---------------------interface_cast---------------------
                             定义在/m8996/frameworks/native/include/binder/IInterface.h
                                41template&lt;typename INTERFACE&gt;
                                42inline sp&lt;INTERFACE&gt; interface_cast(const sp&lt;IBinder&gt;&amp; obj)
                                43{
                                44    return INTERFACE::asInterface(obj);
                                45}
                                
                                传入的typename是IServiceManager, 上面函数等价于
                                42inline sp&lt;IServiceManager&gt; interface_cast(const sp&lt;IBinder&gt;&amp; obj)
                                43{
                                44    return IServiceManager::asInterface(obj);
                                45}
                
                
                                 /m8996/frameworks/native/include/binder/IServiceManager.h
                                 IServiceManager继承IInterface，addService，getService，checkService等操作
                                 DECLARE_META_INTERFACE(ServiceManager);
                                  宏代码段，在IServiceManager.cpp有对应的IMPLEMENT_META_INTERFACE
                                  83#define IMPLEMENT_META_INTERFACE(INTERFACE, NAME)                       \
                                    84    const android::String16 I##INTERFACE::descriptor(NAME);             \
                                    85    const android::String16&amp;                                            \
                                    86            I##INTERFACE::getInterfaceDescriptor() const {              \
                                    87        return I##INTERFACE::descriptor;                                \
                                    88    }                                                                   \
                                    89    android::sp&lt;I##INTERFACE&gt; I##INTERFACE::</rich_text>
				<rich_text weight="heavy">asInterface</rich_text>
				<rich_text>(                \
                                    90            const android::sp&lt;android::IBinder&gt;&amp; obj)                   \
                                    91    {                                                                   \
                                    92        android::sp&lt;I##INTERFACE&gt; intr;                                 \
                                    93        if (obj != NULL) {                                              \
                                    94            intr = static_cast&lt;I##INTERFACE*&gt;(                          \
                                    95                obj-&gt;queryLocalInterface(                               \
                                    96                        I##INTERFACE::descriptor).get());               \
                                    97            if (intr == NULL) {                                         \
                                    98                intr = new </rich_text>
				<rich_text weight="heavy">Bp##INTERFACE(obj);</rich_text>
				<rich_text>                          \  asInterface返回的是BpServiceManager
                                    99            }                                                           \
                                    100        }                                                               \
                                    101        return intr;                                                    \
                                    102    }                                                                   \
                                    103    I##INTERFACE::I##INTERFACE() { }                                    \
                                    104    I##INTERFACE::~I##INTERFACE() { }                                   \
                                 
                                  BpServiceManager定义在IServiceManager.cpp中，是ServiceManager的代理，对用户透明，所以不会在头文件里面出现BpServiceManager的定义
                                  class BpServiceManager : public BpInterface&lt;IServiceManager&gt; 表示BpServiceManager同时继承BpInterface和IServiceManager
                                  对ServiceManager进行真正的实现，如addService函数
                                
</rich_text>
				<rich_text foreground="#ffff00000000" scale="h2" weight="heavy">++++++++++++MediaPlayerService::instantiate()返回BnMediaPlayerService+++++++++++++++++++</rich_text>
				<rich_text>
/m8976/frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp



292void MediaPlayerService::instantiate() {
293    defaultServiceManager()-&gt;addService(    //调用BpServiceManager-&gt;addService，将service加入到ServiceManager中
294            String16(&quot;media.player&quot;), new MediaPlayerService()); //MediaPlayerService继承BnMediaPlayerService
295}
                                  
class MediaPlayerService : public </rich_text>
				<rich_text weight="heavy">BnMediaPlayerService</rich_text>
				<rich_text>                                  
                                 
 现在已经新建了一个BnMediaPLayerService需要将它加入到系统中去，通过BpServiceManager与ServiceManager进行通讯，在instantiate中调用了
 defaultServiceManager()-&gt;</rich_text>
				<rich_text weight="heavy">addService</rich_text>
				<rich_text>(）将BnMediaPLayerService加入到ServiceManager
 
            ServiceManager用来管理所有的系统服务，客户端可以通过它来查询系统中的服务
</rich_text>
				<rich_text weight="heavy">            ---------------------- defaultServiceManager()-&gt;addService(）addService ， BpServiceManager将addService命令写到BnManagerService, BnManagerService并不存在由service_manager.c处理------------------------</rich_text>
				<rich_text>
            

            
            /m8996/frameworks/native/libs/binder/IServiceManager.cpp
            155    virtual status_t </rich_text>
				<rich_text weight="heavy">addService</rich_text>
				<rich_text>(const String16&amp; name, const sp&lt;IBinder&gt;&amp; service,
            156            bool allowIsolated)
            157    {
            158        Parcel data, reply;  //data是发送到BnServiceManager的命令包
            159        data.writeInterfaceToken(IServiceManager::getInterfaceDescriptor()); //android.os.IServiceManager
            160        data.writeString16(name); //写入service名字media.player
            161        data.writeStrongBinder(service); //把MediaPlayerService写到命令中
            162        data.writeInt32(allowIsolated ? 1 : 0);
            163        status_t err = </rich_text>
				<rich_text weight="heavy">remote()-&gt;transact</rich_text>
				<rich_text>(ADD_SERVICE_TRANSACTION, data, &amp;reply); //调用remote的transact函数
            164        return err == NO_ERROR ? reply.readExceptionCode() : err;
            165    }
             
            ----------------------</rich_text>
				<rich_text weight="heavy">BpBinder</rich_text>
				<rich_text>: </rich_text>
				<rich_text weight="heavy">remote()-&gt;transact</rich_text>
				<rich_text>(------------------------
              remote(){return mRemote;} 即BpBinder , transact调用IPCThreadState的transact
             
                159status_t BpBinder::transact(
                160    uint32_t code, const Parcel&amp; data, Parcel* reply, uint32_t flags)
                161{  
                162    // Once a binder has died, it will never come back to life.
                163    if (mAlive) {
                164        status_t status = </rich_text>
				<rich_text weight="heavy">IPCThreadState::self()-&gt;transact</rich_text>
				<rich_text>(
                165            mHandle, code, data, reply, flags);
</rich_text>
				<rich_text weight="heavy">                             //code: ADD_SERVICE_TRANSACTION  data数据包, reply回复包， flags=0
                             //mHandle = 0</rich_text>
				<rich_text>
                166        if (status == DEAD_OBJECT) mAlive = 0;
                167        return status;
                168    }
                169
                170    return DEAD_OBJECT;
                171}
                               
                                ----------------</rich_text>
				<rich_text weight="heavy">IPCThreadState::transact</rich_text>
				<rich_text>
                                 /m8996/frameworks/native/libs/binder/IPCThreadState.cpp
                                  mHandle = 0  code: ADD_SERVICE_TRANSACTION  data数据包, reply回复包， flags=0
                                        
                                    548status_t IPCThreadState::transact(int32_t handle,
                                    549                                  uint32_t code, const Parcel&amp; data,
                                    550                                  Parcel* reply, uint32_t flags)
                                    551{
                                    552    status_t err = data.errorCheck();
                                    553
                                    554    flags |= TF_ACCEPT_FDS;
                                    555
                                    556    IF_LOG_TRANSACTIONS() {
                                    557        TextOutput::Bundle _b(alog);
                                    558        alog &lt;&lt; &quot;BC_TRANSACTION thr &quot; &lt;&lt; (void*)pthread_self() &lt;&lt; &quot; / hand &quot;
                                    559            &lt;&lt; handle &lt;&lt; &quot; / code &quot; &lt;&lt; TypeCode(code) &lt;&lt; &quot;: &quot;
                                    560            &lt;&lt; indent &lt;&lt; data &lt;&lt; dedent &lt;&lt; endl;
                                    561    }
                                    562
                                    563    if (err == NO_ERROR) {
                                    564        LOG_ONEWAY(&quot;&gt;&gt;&gt;&gt; SEND from pid %d uid %d %s&quot;, getpid(), getuid(),
                                    565            (flags &amp; TF_ONE_WAY) == 0 ? &quot;READ REPLY&quot; : &quot;ONE WAY&quot;);
                                    566        err = </rich_text>
				<rich_text weight="heavy">writeTransactionData</rich_text>
				<rich_text>(BC_TRANSACTION, flags, handle, code, data, NULL);  </rich_text>
				<rich_text scale="h2">//使用writeTransactionData发送数据</rich_text>
				<rich_text>
                                    567    }
                                    568
                                    569    if (err != NO_ERROR) {
                                    570        if (reply) reply-&gt;setError(err);
                                    571        return (mLastError = err);
                                    572    }
                                    573
                                    574    if ((flags &amp; TF_ONE_WAY) == 0) {
                                    575        #if 0
                                    576        if (code == 4) { // relayout
                                    577            ALOGI(&quot;&gt;&gt;&gt;&gt;&gt;&gt; CALLING transaction 4&quot;);
                                    578        } else {
                                    579            ALOGI(&quot;&gt;&gt;&gt;&gt;&gt;&gt; CALLING transaction %d&quot;, code);
                                    580        }
                                    581        #endif
                                    582        if (reply) {
                                    583            err = waitForResponse(reply);
                                    584        } else {
                                    585            Parcel fakeReply;
                                    586            err = waitForResponse(&amp;fakeReply);
                                    587        }
                                    588        #if 0
                                    589        if (code == 4) { // relayout
                                    590            ALOGI(&quot;&lt;&lt;&lt;&lt;&lt;&lt; RETURNING transaction 4&quot;);
                                    591        } else {
                                    592            ALOGI(&quot;&lt;&lt;&lt;&lt;&lt;&lt; RETURNING transaction %d&quot;, code);
                                    593        }
                                    594        #endif
                                    595
                                    596        IF_LOG_TRANSACTIONS() {
                                    597            TextOutput::Bundle _b(alog);
                                    598            alog &lt;&lt; &quot;BR_REPLY thr &quot; &lt;&lt; (void*)pthread_self() &lt;&lt; &quot; / hand &quot;
                                    599                &lt;&lt; handle &lt;&lt; &quot;: &quot;;
                                    600            if (reply) alog &lt;&lt; indent &lt;&lt; *reply &lt;&lt; dedent &lt;&lt; endl;
                                    601            else alog &lt;&lt; &quot;(none requested)&quot; &lt;&lt; endl;
                                    602        }
                                    603    } else {
                                    604        err = </rich_text>
				<rich_text weight="heavy">waitForResponse</rich_text>
				<rich_text>(NULL, NULL);   //等待回复
                                    605    }
                                    606
                                    607    return err;
                                    608}
                                    
</rich_text>
				<rich_text scale="h2" weight="heavy">                       -----------------writeTransactionData-------------------</rich_text>
				<rich_text>
                                   /m8996/frameworks/native/libs/binder/IPCThreadState.cpp
                                    把数据封装到binder_transaction_data，写到了mOut缓冲区中, mOut是IPCThreadState的成员变量，为Parcel类型
                                                904status_t writeTransactionData(int32_t cmd, uint32_t binderFlags,
                                                905    int32_t handle, uint32_t code, const Parcel&amp; data, status_t* statusBuffer)
                                                906{
                                                907    </rich_text>
				<rich_text weight="heavy">binder_transaction_data</rich_text>
				<rich_text> tr;       </rich_text>
				<rich_text scale="h2">//把数据封装到binder_transaction_data</rich_text>
				<rich_text>
                                                908
                                                909    tr.target.ptr = 0; /* Don't pass uninitialized stack data to a remote process */
                                                910    tr.target.handle = handle;
                                                911    tr.code = code;
                                                912    tr.flags = binderFlags;
                                                913    tr.cookie = 0;
                                                914    tr.sender_pid = 0;
                                                915    tr.sender_euid = 0;
                                                916
                                                917    const status_t err = data.errorCheck();
                                                918    if (err == NO_ERROR) {
                                                919        tr.data_size = data.ipcDataSize();
                                                920        tr.data.ptr.buffer = data.ipcData();
                                                921        tr.offsets_size = data.ipcObjectsCount()*sizeof(binder_size_t);
                                                922        tr.data.ptr.offsets = data.ipcObjects();
                                                923    } else if (statusBuffer) {
                                                924        tr.flags |= TF_STATUS_CODE;
                                                925        *statusBuffer = err;
                                                926        tr.data_size = sizeof(status_t);
                                                927        tr.data.ptr.buffer = reinterpret_cast&lt;uintptr_t&gt;(statusBuffer);
                                                928        tr.offsets_size = 0;
                                                929        tr.data.ptr.offsets = 0;
                                                930    } else {
                                                931        return (mLastError = err);
                                                932    }
                                                933
                                                934    mOut.writeInt32(cmd);
                                                935    mOut.write(&amp;tr, sizeof(tr));   </rich_text>
				<rich_text scale="h2">//写到了mOut缓冲区中</rich_text>
				<rich_text>
                                                936
                                                937    return NO_ERROR;
                                                938}


</rich_text>
				<rich_text weight="heavy">
</rich_text>
				<rich_text scale="h2" weight="heavy">                               ----------------------接着上面transact函数，IPCThreadState::waitForResponse---------------------------------------</rich_text>
				<rich_text>
                                                712status_t IPCThreadState::waitForResponse(Parcel *reply, status_t *acquireResult)
                                                713{
                                                714    uint32_t cmd;
                                                715    int32_t err;
                                                716
                                                717    while (1) {
                                                718        if ((err=</rich_text>
				<rich_text weight="heavy">talkWithDriver</rich_text>
				<rich_text>()) &lt; NO_ERROR) break;
                                                719        err = mIn.errorCheck();
                                                720        if (err &lt; NO_ERROR) break;
                                                721        if (mIn.dataAvail() == 0) continue;
                                                722
</rich_text>
				<rich_text weight="heavy">                                                723        cmd = (uint32_t)mIn.readInt32();</rich_text>
				<rich_text> </rich_text>
				<rich_text scale="h2">//talkWithDriver中将mOut数据发给驱动，驱动将数据返回到mIn中</rich_text>
				<rich_text>
                                                724
                                                725        IF_LOG_COMMANDS() {
                                                726            alog &lt;&lt; &quot;Processing waitForResponse Command: &quot;
                                                727                &lt;&lt; getReturnString(cmd) &lt;&lt; endl;
                                                728        }
                                                729
                                                730        switch (cmd) {
                                                731        case BR_TRANSACTION_COMPLETE:
                                                732            if (!reply &amp;&amp; !acquireResult) goto finish;
                                                733            break;
                                                      ........
                                                800    return err;
                                                801}
    
    
                                                                                                
</rich_text>
				<rich_text scale="h2" weight="heavy">                                               --------------  IPCThreadState::talkWithDriver  ------------  </rich_text>
				<rich_text scale="h2">
</rich_text>
				<rich_text scale="h2" weight="heavy">                                               binder_write_read bwr 作为媒介，首先将mOut数据写到bwr, 使用ioctl与内核交互读写数据，然后将返回的bwr数据写到mIn中</rich_text>
				<rich_text>
                                                                    803status_t IPCThreadState::talkWithDriver(bool doReceive)
                                                                    804{
                                                                    805    if (mProcess-&gt;mDriverFD &lt;= 0) {
                                                                    806        return -EBADF;
                                                                    807    }
                                                                    808
                                                                    809    binder_write_read </rich_text>
				<rich_text weight="heavy">bwr</rich_text>
				<rich_text>;  </rich_text>
				<rich_text scale="h2" weight="heavy"> //把mOut 和mIn数据处理好后赋给bwr</rich_text>
				<rich_text>
                                                                    810 ac04f4e69a6de138c5afc668a2c89b7da7ff4e6a 		24-Jun-2016 	John Reck &lt;jreck@google.com&gt; 	Remove FD from the right Looper

Bug: 29586513

Also gives BackdropFrameRenderer a direct-destroy
of Choreographer since it's hammering on new Threads
and we don't want to wait for the GC to release
FDs.
                                                                    811    // Is the read buffer empty?
                                                                    812    const bool needRead = mIn.dataPosition() &gt;= mIn.dataSize();
                                                                    813
                                                                    814    // We don't want to write anything if we are still reading
                                                                    815    // from data left in the input buffer and the caller
                                                                    816    // has requested to read the next data.
                                                                    817    const size_t outAvail = (!doReceive || needRead) ? mOut.dataSize() : 0;
                                                                    818
                                                                    819    bwr.write_size = outAvail;
                                                                    820    bwr.write_buffer = (uintptr_t)mOut.data();
                                                                    821
                                                                    822    // This is what we'll read.
                                                                    823    if (doReceive &amp;&amp; needRead) {
                                                                    824        bwr.read_size = mIn.dataCapacity();
                                                                    825        bwr.read_buffer = (uintptr_t)mIn.data();
                                                                    826    } else {
                                                                    827        bwr.read_size = 0;
                                                                    828        bwr.read_buffer = 0;
                                                                    829    }
                                                                    830
                                                                    831    IF_LOG_COMMANDS() {
                                                                    832        TextOutput::Bundle _b(alog);
                                                                    833        if (outAvail != 0) {
                                                                    834            alog &lt;&lt; &quot;Sending commands to driver: &quot; &lt;&lt; indent;
                                                                    835            const void* cmds = (const void*)bwr.write_buffer;
                                                                    836            const void* end = ((const uint8_t*)cmds)+bwr.write_size;
                                                                    837            alog &lt;&lt; HexDump(cmds, bwr.write_size) &lt;&lt; endl;
                                                                    838            while (cmds &lt; end) cmds = printCommand(alog, cmds);
                                                                    839            alog &lt;&lt; dedent;
                                                                    840        }
                                                                    841        alog &lt;&lt; &quot;Size of receive buffer: &quot; &lt;&lt; bwr.read_size
                                                                    842            &lt;&lt; &quot;, needRead: &quot; &lt;&lt; needRead &lt;&lt; &quot;, doReceive: &quot; &lt;&lt; doReceive &lt;&lt; endl;
                                                                    843    }
                                                                    844
                                                                    845    // Return immediately if there is nothing to do.
                                                                    846    if ((bwr.write_size == 0) &amp;&amp; (bwr.read_size == 0)) return NO_ERROR;
                                                                    847
                                                                    848    bwr.write_consumed = 0;
                                                                    849    bwr.read_consumed = 0;
                                                                    850    status_t err;
                                                                    851    do {
                                                                    852        IF_LOG_COMMANDS() {
                                                                    853            alog &lt;&lt; &quot;About to read/write, write size = &quot; &lt;&lt; mOut.dataSize() &lt;&lt; endl;
                                                                    854        }
                                                                    855#if defined(HAVE_ANDROID_OS)
                                                                    856        </rich_text>
				<rich_text scale="h2" weight="heavy">if (ioctl(mProcess-&gt;mDriverFD, BINDER_WRITE_READ, &amp;bwr) &gt;= 0)</rich_text>
				<rich_text scale="h2">  //使用ioctl来读写</rich_text>
				<rich_text>
                                                                    857            err = NO_ERROR;
                                                                    858        else
                                                                    859            err = -errno;
                                                                    860#else
                                                                    861        err = INVALID_OPERATION;
                                                                    862#endif
                                                                    863        if (mProcess-&gt;mDriverFD &lt;= 0) {
                                                                    864            err = -EBADF;
                                                                    865        }
                                                                    866        IF_LOG_COMMANDS() {
                                                                    867            alog &lt;&lt; &quot;Finished read/write, write size = &quot; &lt;&lt; mOut.dataSize() &lt;&lt; endl;
                                                                    868        }
                                                                    869    } while (err == -EINTR);
                                                                    870
                                                                    871    IF_LOG_COMMANDS() {
                                                                    872        alog &lt;&lt; &quot;Our err: &quot; &lt;&lt; (void*)(intptr_t)err &lt;&lt; &quot;, write consumed: &quot;
                                                                    873            &lt;&lt; bwr.write_consumed &lt;&lt; &quot; (of &quot; &lt;&lt; mOut.dataSize()
                                                                    874                        &lt;&lt; &quot;), read consumed: &quot; &lt;&lt; bwr.read_consumed &lt;&lt; endl;
                                                                    875    }
                                                                    876
                                                                    877    if (err &gt;= NO_ERROR) {
                                                                    878        if (bwr.write_consumed &gt; 0) {
                                                                    879            if (bwr.write_consumed &lt; mOut.dataSize())
                                                                    880                mOut.remove(0, bwr.write_consumed);
                                                                    881            else
                                                                    882                mOut.setDataSize(0);
                                                                    883        }
                                                                    884        if (bwr.read_consumed &gt; 0) {
                                                                    885 </rich_text>
				<rich_text weight="heavy">           mIn.setDataSize(bwr.read_consumed);   //bwr数据就是mIn提供的
                                                                    886            mIn.setDataPosition(0);</rich_text>
				<rich_text>
                                                                    887        }
                                                                    888        IF_LOG_COMMANDS() {
                                                                    889            TextOutput::Bundle _b(alog);
                                                                    890            alog &lt;&lt; &quot;Remaining data size: &quot; &lt;&lt; mOut.dataSize() &lt;&lt; endl;
                                                                    891            alog &lt;&lt; &quot;Received commands from driver: &quot; &lt;&lt; indent;
                                                                    892            const void* cmds = mIn.data();
                                                                    893            const void* end = mIn.data() + mIn.dataSize();
                                                                    894            alog &lt;&lt; HexDump(cmds, mIn.dataSize()) &lt;&lt; endl;
                                                                    895            while (cmds &lt; end) cmds = printReturnCommand(alog, cmds);
                                                                    896            alog &lt;&lt; dedent;
                                                                    897        }
                                                                    898        return NO_ERROR;
                                                                    899    }
                                                                    900
                                                                    901    return err;
                                                                    902}
        
        
</rich_text>
				<rich_text scale="h2" weight="heavy">        -------------service_manager.c完成BnServiceManager的工作, 来处理BpServiceManager发送过来的addService请求</rich_text>
				<rich_text weight="heavy">------------------</rich_text>
				<rich_text>
        /m8996/frameworks/native/cmds/servicemanager/service_manager.c

        347int main(int argc, char **argv)
        348{
        349    struct binder_state *bs;
        350
        351    bs = </rich_text>
				<rich_text scale="h2" weight="heavy">binder_open</rich_text>
				<rich_text>(128*1024);  //打开binder设备
        352    if (!bs) {
        353        ALOGE(&quot;failed to open binder driver\n&quot;);
        354        return -1;
        355    }
        356
        357    if (</rich_text>
				<rich_text scale="h2" weight="heavy">binder_become_context_manager</rich_text>
				<rich_text>(bs)) { //把自己设为manager
        358        ALOGE(&quot;cannot become context manager (%s)\n&quot;, strerror(errno));
        359        return -1;
        360    }
        361
        362    selinux_enabled = is_selinux_enabled();
        363    sehandle = selinux_android_service_context_handle();
        364    selinux_status_open(true);
        365
        366    if (selinux_enabled &gt; 0) {
        367        if (sehandle == NULL) {
        368            ALOGE(&quot;SELinux: Failed to acquire sehandle. Aborting.\n&quot;);
        369            abort();
        370        }
        371
        372        if (getcon(&amp;service_manager_context) != 0) {
        373            ALOGE(&quot;SELinux: Failed to acquire service_manager context. Aborting.\n&quot;);
        374            abort();
        375        }
        376    }
        377
        378    union selinux_callback cb;
        379    cb.func_audit = audit_callback;
        380    selinux_set_callback(SELINUX_CB_AUDIT, cb);
        381    cb.func_log = selinux_log_callback;
        382    selinux_set_callback(SELINUX_CB_LOG, cb);
        383
        384    </rich_text>
				<rich_text scale="h2" weight="heavy">binder_loop</rich_text>
				<rich_text>(bs, </rich_text>
				<rich_text scale="h2" weight="heavy">svcmgr_handler</rich_text>
				<rich_text>);  //从binder设备中读取请求，解析请求，写reply
        385
        386    return 0;
        387}

</rich_text>
				<rich_text weight="heavy">                            --------------binder.c-&gt; binder_open---------</rich_text>
				<rich_text>
                            /m8996/frameworks/native/cmds/servicemanager/binder.c
                             //打开binder设备
                            96struct binder_state *binder_open(size_t mapsize)
                            97{
                            98    struct binder_state *bs;
                            99    struct binder_version vers;
                            100
                            101    bs = malloc(sizeof(*bs));
                            102    if (!bs) {
                            103        errno = ENOMEM;
                            104        return NULL;
                            105    }
                            106
                            107   </rich_text>
				<rich_text weight="heavy"> bs-&gt;fd = open(&quot;/dev/binder&quot;, O_RDWR);</rich_text>
				<rich_text>
                            108    if (bs-&gt;fd &lt; 0) {
                            109        fprintf(stderr,&quot;binder: cannot open device (%s)\n&quot;,
             
                                    .........
                            136    return NULL;
                            137}



    </rich_text>
				<rich_text weight="heavy">                        ---------------binder.c-&gt; binder_become_context_manager-------------------</rich_text>
				<rich_text>
                            146int </rich_text>
				<rich_text weight="heavy">binder_become_context_manager</rich_text>
				<rich_text>(struct binder_state *bs)
                            147{
                            148    return ioctl(bs-&gt;fd, BINDER_SET_CONTEXT_MGR, 0);
                            149}
                            150




    </rich_text>
				<rich_text weight="heavy">                        ---------------binder.c-&gt; binder_loop-------------------</rich_text>
				<rich_text>
</rich_text>
				<rich_text weight="heavy">                            //从binder设备中读取请求，解析请求，写reply</rich_text>
				<rich_text>
                            372void binder_loop(struct binder_state *bs, binder_handler func)
                            373{
                            374    int res;
                            375    struct binder_write_read bwr;
                            376    uint32_t readbuf[32];
                            377
                            378    bwr.write_size = 0;
                            379    bwr.write_consumed = 0;
                            380    bwr.write_buffer = 0;
                            381
                            382    readbuf[0] = BC_ENTER_LOOPER;
                            383    binder_write(bs, readbuf, sizeof(uint32_t));
                            384
</rich_text>
				<rich_text weight="heavy">                            385    for (;;) {</rich_text>
				<rich_text>
                            386        bwr.read_size = sizeof(readbuf);
                            387        bwr.read_consumed = 0;
                            388        bwr.read_buffer = (uintptr_t) readbuf;
                            389
                            390        res = ioctl(bs-&gt;fd, BINDER_WRITE_READ, &amp;bwr);
                            391
                            392        if (res &lt; 0) {
                            393            ALOGE(&quot;binder_loop: ioctl failed (%s)\n&quot;, strerror(errno));
                            394            break;
                            395        }
                            396
                            397        res = </rich_text>
				<rich_text scale="h2" weight="heavy">binder_parse</rich_text>
				<rich_text>(bs, 0, (uintptr_t) readbuf, bwr.read_consumed, func); //解析请求
                            398        if (res == 0) {
                            399            ALOGE(&quot;binder_loop: unexpected reply?!\n&quot;);
                            400            break;
                            401        }
                            402        if (res &lt; 0) {
                            403            ALOGE(&quot;binder_loop: io error %d %s\n&quot;, res, strerror(errno));
                            404            break;
                            405        }
                            406    }
                            407}


                            ----------------service_manager.c -&gt; svcmgr_handler------------
                            类似与handleMessage处理各种命令
                             /m8996/frameworks/native/cmds/servicemanager/service_manager.c
                            244int svcmgr_handler(struct binder_state *bs,
                            245                   struct binder_transaction_data *txn,
                            246                   struct binder_io *msg,
                            247                   struct binder_io *reply)
                            248{

                            289    switch(txn-&gt;code) {
                            290    case SVC_MGR_GET_SERVICE:
                            291    case SVC_MGR_CHECK_SERVICE:
                            292        s = bio_get_string16(msg, &amp;len);
                            293        if (s == NULL) {
                            294            return -1;
                            295        }
                            296        handle = do_find_service(bs, s, len, txn-&gt;sender_euid, txn-&gt;sender_pid);
                            297        if (!handle)
                            298            break;
                            299        bio_put_ref(reply, handle);
                            300        return 0;
                            301
                            302    case </rich_text>
				<rich_text scale="h2" weight="heavy">SVC_MGR_ADD_SERVICE</rich_text>
				<rich_text>:
                            303        s = bio_get_string16(msg, &amp;len);
                            304        if (s == NULL) {
                            305            return -1;
                            306        }
                            307        handle = bio_get_ref(msg);
                            308        allow_isolated = bio_get_uint32(msg) ? 1 : 0;
                            309        if (</rich_text>
				<rich_text scale="h2" weight="heavy">do_add_service</rich_text>
				<rich_text>(bs, s, len, handle, txn-&gt;sender_euid,
                            310            allow_isolated, txn-&gt;sender_pid))
                            311            return -1;
                            312        break;
                            313
                                     .....
                            337    return 0;
                            338}

</rich_text>
				<rich_text scale="h2" weight="heavy">
                                   ----------------service_manager.c -&gt; do_add_service------------</rich_text>
				<rich_text>

                                                    194int </rich_text>
				<rich_text weight="heavy">do_add_service</rich_text>
				<rich_text>(struct binder_state *bs,
                                                    195                   const uint16_t *s, size_t len,
                                                    196                   uint32_t handle, uid_t uid, int allow_isolated,
                                                    197                   pid_t spid)
                                                    198{
                                                    199    struct svcinfo *si;
                                                    200
                                                    201    //ALOGI(&quot;add_service('%s',%x,%s) uid=%d\n&quot;, str8(s, len), handle,
                                                    202    //        allow_isolated ? &quot;allow_isolated&quot; : &quot;!allow_isolated&quot;, uid);
                                                    203
                                                    204    if (!handle || (len == 0) || (len &gt; 127))
                                                    205        return -1;
                                                    206
                                                    207    if (!svc_can_register(s, len, spid)) {
                                                    208        ALOGE(&quot;add_service('%s',%x) uid=%d - PERMISSION DENIED\n&quot;,
                                                    209             str8(s, len), handle, uid);
                                                    210        return -1;
                                                    211    }
                                                    212
                                                    213    si = find_svc(s, len);
                                                    214    if (si) {
                                                    215        if (si-&gt;handle) {
                                                    216            ALOGE(&quot;add_service('%s',%x) uid=%d - ALREADY REGISTERED, OVERRIDE\n&quot;,
                                                    217                 str8(s, len), handle, uid);
                                                    218            svcinfo_death(bs, si);
                                                    219        }
                                                    220        si-&gt;handle = handle;
                                                    221    } else {
                                                    222        si = malloc(sizeof(*si) + (len + 1) * sizeof(uint16_t));
                                                    223        if (!si) {
                                                    224            ALOGE(&quot;add_service('%s',%x) uid=%d - OUT OF MEMORY\n&quot;,
                                                    225                 str8(s, len), handle, uid);
                                                    226            return -1;
                                                    227        }
                                                    228        si-&gt;handle = handle;
                                                    229        si-&gt;len = len;
                                                    230        memcpy(si-&gt;name, s, (len + 1) * sizeof(uint16_t));
                                                    231        si-&gt;name[len] = '\0';
                                                    232        si-&gt;death.func = (void*) svcinfo_death;
                                                    233        si-&gt;death.ptr = si;
                                                    234        si-&gt;allow_isolated = allow_isolated;
                                                    235        si-&gt;next = svclist;
                                                    236        </rich_text>
				<rich_text weight="heavy">svclist</rich_text>
				<rich_text> = si;  </rich_text>
				<rich_text weight="heavy"> //svclist是一个列表，保存service</rich_text>
				<rich_text>
                                                    237    }
                                                    238
                                                    239    binder_acquire(bs, handle); </rich_text>
				<rich_text weight="heavy">  //当service退出后释放malloc的资源</rich_text>
				<rich_text>
                                                    240    binder_link_to_death(bs, handle, &amp;si-&gt;death);
                                                    241    return 0;
                                                    242}
                                                    
ServiceManager负责管理所有的service，每个Service在创建的时候都会在它上面注册，如果有客户端想要与某个service通讯，需要首先向ServiceManager查询service信息，然后通过ServiceManager返回的东西来与Service交互

ServiceManager的handle标志是0，所以只要往handle是0的服务发送消息了，最终都会被传递到ServiceManager中去

BpBinder是在用户空间中创，运行在Client进程


每个进程会维护一个ProcessState实例，
                                                    
java层的ServceManager是Java层建立的ServiceManager的代理，他把Java层客户端的各项请求传递到Native层ServiceManager处理



Java Binder 和 Native Binder通过下面的JNI函数建立交互关系
android_util_Binder.cpp::register_android_os_Binder{
   1.android_util_Binder.cpp::int_register_android_os_Binder
   2.
}

//建立Binder层和Native的关系
static int int_register_android_os_Binder(JNIEnv*env)
{
jclass clazz;
//kBinderPathName为Java层中Binder类的全路径名，&quot;android/os/Binder&quot;
clazz=env-＞FindClass(kBinderPathName);
/*
gBinderOffsets是一个静态类对象，它专门保存Binder类的一些在JNI层中使用的信息，
如成员函数execTransact的methodID,Binder类中成员mObject的fieldID
*/
gBinderOffsets.mClass=(jclass) env-＞NewGlobalRef(clazz);
gBinderOffsets.mExecTransact = env-＞GetMethodID(clazz,&quot;execTransact&quot;,&quot;(IIII)Z&quot;);
gBinderOffsets.mObject = env-＞GetFieldID(clazz,&quot;mObject&quot;,&quot;I&quot;);
//注册Binder类中native函数的实现
return AndroidRuntime::registerNativeMethods(
env, kBinderPathName, gBinderMethods, NELEM(gBinderMethods));

}




FLAG_ONEWAY binder中非阻塞式的调用， 客户端binder通过这样的方式调用的时候，一办会注册一个带有这个标记的回调函数，来获取结果


ActivityManagerService在 SystemServer中通过
mActivityManagerService.setSystemProcess() 实现将自己加入到ServiceManager

</rich_text>
				<rich_text scale="h2">setSystemProcess</rich_text>
				<rich_text>(){
    ServicManager.</rich_text>
				<rich_text scale="h2" weight="heavy">addService</rich_text>
				<rich_text>(Context.ACTIVITY-SERVICE， this , true);   // 通过调用ServiceManager.add 将ActivityManager注册到ServiceManager中
}

ServiceManager.java
70    public static void </rich_text>
				<rich_text scale="h2" weight="heavy">addService</rich_text>
				<rich_text>(String name, IBinder service) {
71        try {
72            </rich_text>
				<rich_text scale="h2" weight="heavy">getIServiceManager</rich_text>
				<rich_text>().addService(name, service, false);
73        } catch (RemoteException e) {
74            Log.e(TAG, &quot;error in addService&quot;, e);
75        }
76    }
77


33    private static IServiceManager </rich_text>
				<rich_text scale="h2" weight="heavy">getIServiceManager</rich_text>
				<rich_text>() {
34        if (sServiceManager != null) {
35            return sServiceManager;
36        }
37
38        // Find the service manager
39        sServiceManager = ServiceManagerNative.asInterface(BinderInternal.getContextObject());
40        return sServiceManager;
41    }

/m8976/frameworks/base/core/java/com/android/internal/os/BinderInternal.java
public static final native IBinder </rich_text>
				<rich_text weight="heavy">getContextObject</rich_text>
				<rich_text>();  //native函数

调用 /m8976/frameworks/base/core/jni/android_util_Binder.cpp
903static jobject </rich_text>
				<rich_text weight="heavy">android_os_BinderInternal_getContextObject</rich_text>
				<rich_text>(JNIEnv* env, jobject clazz)
904{
905    sp&lt;IBinder&gt; b = ProcessState::self()-&gt;getContextObject(NULL);  //返回BpBinder对象
906    return </rich_text>
				<rich_text scale="h2" weight="heavy">javaObjectForIBinder</rich_text>
				<rich_text>(env, b);  //由Native对象创建一个java对象
907}


551jobject </rich_text>
				<rich_text scale="h2" weight="heavy">javaObjectForIBinder</rich_text>
				<rich_text>(JNIEnv* env, const sp&lt;IBinder&gt;&amp; val)
552{
553    if (val == NULL) return NULL;
554
555    if (val-&gt;checkSubclass(&amp;gBinderOffsets)) {
556        // One of our own!
557        jobject object = static_cast&lt;JavaBBinder*&gt;(val.get())-&gt;object();
558        LOGDEATH(&quot;objectForBinder %p: it's our own %p!\n&quot;, val.get(), object);
559        return object;
560    }
561
562    // For the rest of the function we will hold this lock, to serialize
563    // looking/creation of Java proxies for native Binder proxies.
564    AutoMutex _l(mProxyLock); </rich_text>
				<rich_text scale="h2"> //mProxyLock是一个全局的静态CMutex对象</rich_text>
				<rich_text>
565
566    // Someone else's...  do we know about it?
567    jobject object = (jobject)val-&gt;findObject(&amp;gBinderProxyOffsets);
568    if (object != NULL) {
569        jobject res = jniGetReferent(env, object);
570        if (res != NULL) {
571            ALOGV(&quot;objectForBinder %p: found existing %p!\n&quot;, val.get(), res);
572            return res;
573        }
574        LOGDEATH(&quot;Proxy object %p of IBinder %p no longer in working set!!!&quot;, object, val.get());
575        android_atomic_dec(&amp;gNumProxyRefs);
576        val-&gt;detachObject(&amp;gBinderProxyOffsets);
577        env-&gt;DeleteGlobalRef(object);
578    }
579
580    object = env-&gt;NewObject(gBinderProxyOffsets.mClass, gBinderProxyOffsets.mConstructor);
581    if (object != NULL) {
582        LOGDEATH(&quot;objectForBinder %p: created new proxy %p !\n&quot;, val.get(), object);
583        // The proxy holds a reference to the native object.
584        env-&gt;SetLongField(object, gBinderProxyOffsets.mObject, (jlong)val.get());
585        val-&gt;incStrong((void*)javaObjectForIBinder);
586
587        // The native object needs to hold a weak reference back to the
588        // proxy, so we can retrieve the same proxy if it is still active.
589        jobject refObject = env-&gt;NewGlobalRef(
590                env-&gt;GetObjectField(object, gBinderProxyOffsets.mSelf));
591        val-&gt;attachObject(&amp;gBinderProxyOffsets, refObject,
592                jnienv_to_javavm(env), proxy_cleanup);
593
594        // Also remember the death recipients registered on this proxy
595        sp&lt;DeathRecipientList&gt; drl = new DeathRecipientList;
596        drl-&gt;incStrong((void*)javaObjectForIBinder);
597        env-&gt;SetLongField(object, gBinderProxyOffsets.mOrgue, reinterpret_cast&lt;jlong&gt;(drl.get()));
598
599        // Note that a new object reference has been created.
600        android_atomic_inc(&amp;gNumProxyRefs);
601        incRefsCreated(env);
602    }
603
604    return object;
605}
606















                                                    
                                                    
                                                    
                                                    
                                                    
                                                    
                                                    
                                                    
                                                    




</rich_text>
				<encoded_png char_offset="14"></encoded_png>
				<table char_offset="87" col_max="1000" col_min="40">
					<row>
						<cell>接口</cell>
						<cell>BBinder</cell>
						<cell>BpBinder</cell>
					</row>
					<row>
						<cell>queryLocalInterface()</cell>
						<cell>没有实现, 默认实现 IBinder 默认｛reutrn NULL};　　</cell>
						<cell>没有实现 IBinder 默认实现 {return NULL}</cell>
					</row>
					<row>
						<cell>getInterfaceDescriptor（）　　</cell>
						<cell>{return sEmptyDescriptor;}　　</cell>
						<cell>    (this)-&gt;transact(INTERFACE_TRANSACTION, send, &amp;reply);     ...    mDescriptorCache = res;    </cell>
					</row>
					<row>
						<cell>isBinderAlive()　　</cell>
						<cell>{return true;}</cell>
						<cell>{return mAlive != 0;}</cell>
					</row>
					<row>
						<cell>pingBinder()</cell>
						<cell>{return NoError;}</cell>
						<cell>{transact(PING_TRANSACTION, send, &amp;reply);</cell>
					</row>
					<row>
						<cell>linkToDeath()</cell>
						<cell>{return INVALID_OPERATION;}　　</cell>
						<cell>{self-&gt;requestDeathNotification(mHandle, this);}</cell>
					</row>
					<row>
						<cell>unlinkToDeath()　　</cell>
						<cell>{return INVALID_OPERATION;}</cell>
						<cell>{self-&gt;clearDeathNotification(mHandle, this);}</cell>
					</row>
					<row>
						<cell>localBinder()</cell>
						<cell>{return this;}</cell>
						<cell>没有实现, IBinder默认实现 {return NULL};</cell>
					</row>
					<row>
						<cell>remoteBinder()</cell>
						<cell>没有实现，IBinder默认实现 {return NULL;}</cell>
						<cell>{return this};</cell>
					</row>
					<row>
						<cell>transact()</cell>
						<cell>{err = onTransact(code, data, reply, flags);}</cell>
						<cell>IPCThreadState::self()-&gt;transact(mHandle, code, data, reply, flags);</cell>
					</row>
					<row>
						<cell>onTransact()</cell>
						<cell>      switch (code) {         case INTERFACE_TRANSACTION:             reply-&gt;writeString16(getInterfaceDescriptor());             return NO_ERROR;        ...</cell>
						<cell>没有实现</cell>
					</row>
					<row>
						<cell>click me</cell>
						<cell>click me</cell>
						<cell>click me</cell>
					</row>
				</table>
				<encoded_png char_offset="105"></encoded_png>
				<encoded_png char_offset="730"></encoded_png>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Service" prog_lang="custom-colors" readonly="False" tags="" unique_id="204">
				<rich_text>Service与C/S之间的关系，与Binder之间的关系

匿名Service指的是没有在servicemanager中注册的service

Service是提供服务的代码

Service可以运行在native端也可以运行在java端
1.请求Service服务的代码(Client)和Service本身


一般Service可以分为下面两种
1) localService，客户端和服务端处于同一个进程
客户端通过bindService绑定并启动服务，通过在Service端返回一个继承于Binder的对象，使得客户端能够在onServiceConnected的时候得到这个引用，来操作服务端的服务。
这个Binder继承于IBinder，作用类似于Native端的BBinder，用于表示服务端对象

3) remoteService，客户端和服务端处于不同的进程， 一般用AIDL的方式进行通信，也可以同messager的方式通信
AIDL需要用户定义一个AIDL文件，就是IMyService，通过AIDL会生成对应的IMyService.Stub和IMyservice.Proxy类，分别为服务端和客户端所用，服务端的MyService需要实现一个内部类如IMyServiceImpl来继承IMyService.Stub并实现IMyService接口中的方法，然后在MyService的onBinder时候将IMyServiceImpl对象传递给客户端。

客户端在onServiceConnected会收到来服务端的IBinder对象，这个对象的类型应该是BinderProxy，将这个对象作为参数通过调用IMyService.Stub.asInterface方法可以转化为IMyService.Proxy对象，然后客户端通过这个对象访问服务端的方法。


从Activity中操作bindService操作到onServiceConnected到底做了哪些操作呢？
1.Activity的bindService操作通过ContextImpl获取ActivityManagerService的代理ActivityManagerproxy以后来操作AMS
2.Activity通过AMS的bindService（servicename）让AMS查找对应的Service把一个Service的Binder代理对象返回给Activity，即在onServiceConnected中得到BinderProxy对象
3.Activity通过获取到的BinderProxy对象获取到Service代理对象Proxy对象





</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="AIDL" prog_lang="custom-colors" readonly="False" tags="" unique_id="33">
				<rich_text justification="left"></rich_text>
				<rich_text>




</rich_text>
				<encoded_png char_offset="0"></encoded_png>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Art虚拟机" prog_lang="custom-colors" readonly="False" tags="" unique_id="70">
			<rich_text></rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="GC" prog_lang="custom-colors" readonly="False" tags="" unique_id="71">
				<rich_text scale="h2" weight="heavy">GC触发条件</rich_text>
				<rich_text>
1）没有足够内存分配请求， 此时会调用Heap-&gt;CollectGarbageInternal触发原因为kGcCauseForAlloc的GC
2）分配出请求的内存以后，堆剩下的内存超过一定阀值，触发Heap类成员函数RequestConcurrentGC请求执行一次并行GC 触发kGcCauseBackground
          </rich_text>
				<rich_text foreground="#ffff00000000">这个阀值是在哪里确定的？</rich_text>
				<rich_text>

        3423void Heap::RequestConcurrentGC(Thread* self, bool force_full) {
        3424  if (</rich_text>
				<rich_text scale="h2" weight="heavy">CanAddHeapTask</rich_text>
				<rich_text>(self) &amp;&amp;
        3425      concurrent_gc_pending_.CompareExchangeStrongSequentiallyConsistent(false, true)) {
        3426    task_processor_-&gt;AddTask(self, new </rich_text>
				<rich_text scale="h2" weight="heavy">ConcurrentGCTask</rich_text>
				<rich_text>(NanoTime(),  // Start straight away.
        3427                                                        force_full));
        3428  }
        3429}
         task_processor_-&gt;AddTask到底是如何执行的？
         
                -----------
                RequestConcurrentGC通过</rich_text>
				<rich_text weight="heavy">CanAddHeapTask</rich_text>
				<rich_text>的四个条件，才能执行correntGC的任务，分别是1）runtime是否在运行 2）runtime是否已经完成启动 3）runtime不是正在关闭 4）当前线程没有发生栈溢出
                 
                3413static bool </rich_text>
				<rich_text scale="h2" weight="heavy">CanAddHeapTask</rich_text>
				<rich_text>(Thread* self) LOCKS_EXCLUDED(Locks::runtime_shutdown_lock_) {
                3414  Runtime* runtime = Runtime::Current();
                3415  return runtime != nullptr &amp;&amp; runtime-&gt;IsFinishedStarting() &amp;&amp; !runtime-&gt;IsShuttingDown(self) &amp;&amp;
                3416      !self-&gt;IsHandlingStackOverflow();
                3417}
          
                 ----------
                 task_processor_-&gt;AddTask添加的</rich_text>
				<rich_text weight="heavy">ConcurrentGCTask</rich_text>
				<rich_text>到底什么时候会被run?
                 </rich_text>
				<rich_text weight="heavy">ConcurrentGCTask</rich_text>
				<rich_text>        
                3399class Heap::</rich_text>
				<rich_text scale="h2" weight="heavy">ConcurrentGCTask</rich_text>
				<rich_text> : public HeapTask {
                3400 public:
                3401  explicit ConcurrentGCTask(uint64_t target_time, bool force_full)
                3402    : HeapTask(target_time), force_full_(force_full) { }
                3403  virtual void Run(Thread* self) OVERRIDE {
                3404    gc::Heap* heap = Runtime::Current()-&gt;GetHeap();
                3405    heap-&gt;</rich_text>
				<rich_text scale="h2" weight="heavy">ConcurrentGC</rich_text>
				<rich_text>(self, force_full_);
                3406    heap-&gt;</rich_text>
				<rich_text weight="heavy">ClearConcurrentGCRequest</rich_text>
				<rich_text>();
                3407  }
                
                
                     ----------            
                            ConcurrentGC被调用的时候会继续做检查runtime是否正在处于关闭状态            
                            void Heap::</rich_text>
				<rich_text scale="h2" weight="heavy">ConcurrentGC</rich_text>
				<rich_text>(Thread* self, bool force_full) {
                        3432  if (!Runtime::Current()-&gt;IsShuttingDown(self)) {  //ConcurrentGC被调用的时候会继续做检查runtime是否正在处于关闭状态 
                        3433    // Wait for any GCs currently running to finish.
                        3434    if (WaitForGcToComplete(kGcCauseBackground, self) == collector::kGcTypeNone) {  //检查当前是否正在执行GC
                        3435      // If the we can't run the GC type we wanted to run, find the next appropriate one and try that
                        3436      // instead. E.g. can't do partial, so do full instead.
                        3437      collector::GcType next_gc_type = next_gc_type_;
                        3438      // If forcing full and next gc type is sticky, override with a non-sticky type.
                        3439      if (force_full &amp;&amp; next_gc_type == collector::kGcTypeSticky) {
                        3440        next_gc_type = HasZygoteSpace() ? collector::kGcTypePartial : collector::kGcTypeFull;
                        3441      }
                        3442      if (</rich_text>
				<rich_text scale="h2" weight="heavy">CollectGarbageInternal</rich_text>
				<rich_text>(next_gc_type, </rich_text>
				<rich_text weight="heavy">kGcCauseBackground</rich_text>
				<rich_text>, false) == //调用CollectGarbageInternal触发kGcCauseBackground GC
                        3443          collector::kGcTypeNone) {
                        3444        for (collector::GcType gc_type : gc_plan_) {
                        3445          // Attempt to run the collector, if we succeed, we are done.
                        3446          if (gc_type &gt; next_gc_type &amp;&amp;
                        3447              CollectGarbageInternal(gc_type, kGcCauseBackground, false) !=
                        3448                  collector::kGcTypeNone) {
                        3449            break;
                        3450          }
                        3451        }
                        3452      }
                        3453    }
                        3454  }
                        3455}

3)  第三种是通过代码显示的调用GC ，java.lang.System的静态函数调用GC，可以通过设置启动选项 -XX：DisableExplicitGC来关闭

1802  void Heap::CollectGarbage(bool clear_soft_references) {
1803  // Even if we waited for a GC we still need to do another GC since weaks allocated during the
1804  // last GC will not have necessarily been cleared.
1805  </rich_text>
				<rich_text weight="heavy">CollectGarbageInternal</rich_text>
				<rich_text>(gc_plan_.back(), </rich_text>
				<rich_text weight="heavy">kGcCauseExplicit</rich_text>
				<rich_text>, clear_soft_references);
1806}

不管是哪个条件触发的GC，最后都是通过CollectGarbageInternal来实现GC的过程
/m8976/art/runtime/gc/gc_cause.h
26enum GcCause {
27  // GC triggered by a failed allocation. Thread doing allocation is blocked waiting for GC before
28  // retrying allocation.
29  kGcCauseForAlloc,
30  // A background GC trying to ensure there is free memory ahead of allocations.
31  kGcCauseBackground,
32  // An explicit System.gc() call.
33  kGcCauseExplicit,
34  // GC triggered for a native allocation.
35  kGcCauseForNativeAlloc,
36  // GC triggered for a collector transition.
37  kGcCauseCollectorTransition,
38  // Not a real GC cause, used when we disable moving GC (currently for GetPrimitiveArrayCritical).
39  kGcCauseDisableMovingGc,
40  // Not a real GC cause, used when we trim the heap.
41  kGcCauseTrim,
42  // GC triggered for background transition when both foreground and background collector are CMS.
43  kGcCauseHomogeneousSpaceCompact,
44};







</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="窗口" prog_lang="custom-colors" readonly="False" tags="" unique_id="72">
			<rich_text>67    // Window types from WindowManager.LayoutParams
68    enum {
69        FIRST_APPLICATION_WINDOW = 1,
70        TYPE_BASE_APPLICATION   = 1,
71        TYPE_APPLICATION        = 2,
72        TYPE_APPLICATION_STARTING = 3,
73        LAST_APPLICATION_WINDOW = 99,
74        FIRST_SUB_WINDOW        = 1000,
75        TYPE_APPLICATION_PANEL  = FIRST_SUB_WINDOW,
76        TYPE_APPLICATION_MEDIA  = FIRST_SUB_WINDOW+1,
77        TYPE_APPLICATION_SUB_PANEL = FIRST_SUB_WINDOW+2,
78        TYPE_APPLICATION_ATTACHED_DIALOG = FIRST_SUB_WINDOW+3,
79        TYPE_APPLICATION_MEDIA_OVERLAY  = FIRST_SUB_WINDOW+4,
80        LAST_SUB_WINDOW         = 1999,
81        FIRST_SYSTEM_WINDOW     = 2000,
82        TYPE_STATUS_BAR         = FIRST_SYSTEM_WINDOW,
83        TYPE_SEARCH_BAR         = FIRST_SYSTEM_WINDOW+1,
84        TYPE_PHONE              = FIRST_SYSTEM_WINDOW+2,
85        TYPE_SYSTEM_ALERT       = FIRST_SYSTEM_WINDOW+3,
86        TYPE_KEYGUARD           = FIRST_SYSTEM_WINDOW+4,
87        TYPE_TOAST              = FIRST_SYSTEM_WINDOW+5,
88        TYPE_SYSTEM_OVERLAY     = FIRST_SYSTEM_WINDOW+6,
89        TYPE_PRIORITY_PHONE     = FIRST_SYSTEM_WINDOW+7,
90        TYPE_SYSTEM_DIALOG      = FIRST_SYSTEM_WINDOW+8,
91        TYPE_KEYGUARD_DIALOG    = FIRST_SYSTEM_WINDOW+9,
92        TYPE_SYSTEM_ERROR       = FIRST_SYSTEM_WINDOW+10,
93        TYPE_INPUT_METHOD       = FIRST_SYSTEM_WINDOW+11,
94        TYPE_INPUT_METHOD_DIALOG= FIRST_SYSTEM_WINDOW+12,
95        TYPE_WALLPAPER          = FIRST_SYSTEM_WINDOW+13,
96        TYPE_STATUS_BAR_PANEL   = FIRST_SYSTEM_WINDOW+14,
97        TYPE_SECURE_SYSTEM_OVERLAY = FIRST_SYSTEM_WINDOW+15,
98        TYPE_DRAG               = FIRST_SYSTEM_WINDOW+16,
99        TYPE_STATUS_BAR_SUB_PANEL  = FIRST_SYSTEM_WINDOW+17,
100        TYPE_POINTER            = FIRST_SYSTEM_WINDOW+18,
101        TYPE_NAVIGATION_BAR     = FIRST_SYSTEM_WINDOW+19,
102        TYPE_VOLUME_OVERLAY = FIRST_SYSTEM_WINDOW+20,
103        TYPE_BOOT_PROGRESS = FIRST_SYSTEM_WINDOW+21,
104        TYPE_MAGNIFICATION_OVERLAY = FIRST_SYSTEM_WINDOW+22,
105        LAST_SYSTEM_WINDOW      = 2999,
106    };</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Android多线程" prog_lang="custom-colors" readonly="False" tags="" unique_id="78">
			<rich_text>线程的创建和销毁都需要耗费CPU和内存的损耗，所以尽量减少他们是非常有必要的

用线程池能够很好的对线程进行复用
ThreadPoo;Executor threadPool = new ThreadPoolExecutor(
     3, 10, 1, TimeUnit.SECONDS,  //默认三个线程，最多10个线程，如果没有任务保留1s
     new ArrayBlockingQueue&lt;Runnable&gt;(5), //队列
     new ThreadPoolExecutor.callerRunsPolicy()); //队列的策略

)


threadPool.execute(new Runnable()){

    @Override
    public void run(){
    //子线程要执行的代码
    
            
    }
}


</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Thread" prog_lang="custom-colors" readonly="False" tags="" unique_id="113">
				<rich_text>HandlerThread继承于Thread继承于Runnable
所以创建一个普通的thread如果传入runnable参数，其使用的是原来的线程

Thread继承于Runnable
Thread.run() 并不会真正创建线程
Thread.start()  会创建线程-&gt; nativeCreate


/art/runtime/native/java_lang_Thread.cc
-&gt;Thread_nativeCreate

/art/runtime/thread.cc
Thread::CreateNativeThread
创建子线程,调用pthread_create进行真正创建</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Handler" prog_lang="custom-colors" readonly="False" tags="" unique_id="32">
				<rich_text>Handler主要用于线程之间的消息传递，维护消息队列，





Handler可以实现UI线程的更新，Handler来根据接受的消息，处理UI更新
Handler mHandler = new Handler() { //默认使用当前线程的loop
    public void </rich_text>
				<rich_text weight="heavy">handleMessage</rich_text>
				<rich_text>(Message msg){
       // switch(msg.what){
       //     case TestHandler.GUIUPDATEIDENTIFIER:
       //         myBounceView.invalidate();
       //         break;
       // }
       // super.handleMessage(msg);
       
       String result = msg.obj;
       mTextView.setText(result);
       
    }
}

//在子线程中通过Handler向主线程发送消息，让主线程更新UI
//需要注意线程的管理
new Thread(new Runnable){

    public void run(){
        String result = timeConsume(); //耗时的操作
        //mTextView.setText(result)  
       
       Message msg = new Message();
      msg.obj = result;
      mHandler.</rich_text>
				<rich_text weight="heavy">sendMessage</rich_text>
				<rich_text>(msg);
   }
}.start();


HandlerThread继承于Thread相比较Thread需要自己创建loop，handlerthread能够自动创建loop，管理Loop
而Handler的创建需要loop，所以先创建HandlerThread，可以获取loop， 然后赋值给handler


Android的进程都会有一个main线程用来进行
Ui thread , work thread 一般用户使用

Handler， Loop， MessageQueue，Meaage
多个Handler可以使用同一个Loop
一个Loop对应一个MessageQueue
一个MessageQueuue可以装载多个Message



</rich_text>
				<rich_text scale="h2" weight="heavy">例子</rich_text>
				<rich_text>
public class LooperActivity extends Activity implements View.OnClickListener{
    //work thread
    LooperThread mLoopThread;
    
    private static class LooperThread extends Thread {
        public Handler mHandler;
        public void run(){
            //准备loop, 绑定消息读队列
            Looper.prepare();

            //使用无参构造函数，handler会使用但前线程的loop作为looper
            mHandler = new Handler(){
                @Override
                public void handleMessage(Message msg) {
                    if(msg.what == 0){
                        doLongRunningOperation();
                    }

                }
            };

            //阻塞线程，开始从message queue中获取信息，工作线程不会退出直到调用quit
            Looper.loop();
        }
        private void doLongRunningOperation() {

        }

    }


    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mLoopThread = new LooperThread();
        mLoopThread.start();
    }

    @Override
    public void onClick(View v) {
        if(mLoopThread.mHandler != null){
            Message msg =  mLoopThread.mHandler.obtainMessage(0);
            mLoopThread.mHandler.sendMessage(msg);
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        //退出looper
        mLoopThread.mHandler.getLooper().quit();

    }
}



消息队列 android.os.MessageQueue 使用单向列表实现
按照时间戳进行排序


















</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="AsyncTask" prog_lang="custom-colors" readonly="False" tags="" unique_id="79">
				<rich_text>AsyncTask对多线程进行了一个很好的封装，等于Handler+Thread+Message+Threadpool
典型的应用场景是需要从网络下载数据

必须在主线程中启动

AysncTask使用系统的线程池，默认核心线程5个，最大的执行线程数10个
MyTask task = new MyTask();
task.executeOnExecutor(threadPool,&quot;参数&quot;)； 


//Param: 传入的参数类型，为doInBackground的参数
//Progress: 进度显示参数类型为onProgressUpdate的参数
//Result：结果显示类型，onPostExecute的参数

class MyTask extends AsyncTask&lt;Param, Progress, Result&gt;{
    
    @Override
    protected void onPreExecute(){
           //耗时操作执行前的代码，主线程执行
    
    }
    
    @Override
    protected Result doInBackground(Param ... params){
        //耗时操作，必须实现这个方法，子线程执行
        
        for(int i=1;i&lt;=10;i++){
        
            try{
            Thread.sleep(500);
            publishProgress(i*10)
            }
        }        
        return &quot;result&quot;;
    }
    
    @Override
    protected void onPostExecute(Result result){
        //主线程操作
    }

    @Override
    protected void onProgressUpdate(Integer... values){
        //主线程调用，publishProgress()执行时会触发这个回调
          
        //mProgressBar.setProgress(values[0]);
    }
    
    
}

启动异步任务
MyTask task = new MyTask();
task.execute(&quot;传入的&quot;);


</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="线程通讯" prog_lang="custom-colors" readonly="False" tags="" unique_id="115">
				<rich_text>1.内存共享
2. 文件、数据库
3. Handler
4. 管道流：生产者-消费者

应用层：Binder通讯， 底层socket、管道
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Looper" prog_lang="custom-colors" readonly="False" tags="" unique_id="118">
				<rich_text>Looper 用于封装android线程的消息循环(Message Loop)，默认情况下，一个线程是不存在消息循环的
Looper.prepare()来给线程创建一个消息循环， 调用Loop.loop()来使消息循环其作用，从消息队列里取消息，处理消息
Loop.loop()会对线程进行阻塞，其之后的代码只有在looper.quit()之后才会继续被调用

Looper.prepare(){
 1. 创建MessageQueue，然后赋值给mQueue
 2. 将当前的线程赋给成员变量mThread
 3.
}</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="性能分析" prog_lang="custom-colors" readonly="False" tags="" unique_id="83">
			<rich_text>sysTrace

chrome://tracing

</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="KeyMaster" prog_lang="custom-colors" readonly="False" tags="" unique_id="84">
			<rich_text>keystore 这个概念是指系统的提供的一个更加安全的区域，用来创建、存储使用密钥的地方

Keystore 的加密解密服务是通过 keystore service, 这个与硬件抽象层HAL的keymaster模块相连接

AOSP提供软件级别的实现(softkeymaster), OEM可以提供基于硬件， 在ARM架构对应TrustZone


Keymaster HAL 输出生成和移除keypairs, sign data , 但是不向任何private keys provide exposure


RSA &amp;  ECDSA 存储在Widevine模块当中

hardware-backed key storage 应该是硬件层面的存储Key的区域

certificate chain 证书链 存储在AndroidKeyStore， 第一个证书是attestation， 其他证书

</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Fingerprint" prog_lang="custom-colors" readonly="False" tags="" unique_id="85">
			<rich_text>FingerprintUnlockController 

KeyguardIndicationController
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Keyguard" prog_lang="custom-colors" readonly="False" tags="" unique_id="86">
			<rich_text>

判断是否锁屏
</rich_text>
			<rich_text foreground="#000080">private</rich_text>
			<rich_text>KeyguardGoneReceiver</rich_text>
			<rich_text foreground="#660e7a">mKeyguardGoneReceiver</rich_text>
			<rich_text>=</rich_text>
			<rich_text foreground="#000080">new</rich_text>
			<rich_text>KeyguardGoneReceiver();
</rich_text>
			<rich_text foreground="#000080">boolean</rich_text>
			<rich_text>isDeviceLocked=km.isKeyguardLocked();



Intent.</rich_text>
			<rich_text foreground="#660e7a">ACTION_USER_PRESENT</rich_text>
			<rich_text> 解锁后发送的广播
Intent.</rich_text>
			<rich_text foreground="#660e7a">ACTION_SCREEN_OFF</rich_text>
			<rich_text> 关闭屏幕发送的广播
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Android控件" prog_lang="custom-colors" readonly="False" tags="" unique_id="88">
			<rich_text>Spanner 下拉选择框

               &lt;Spinner android:id=&quot;@+id/proxy_settings&quot;
                        android:layout_width=&quot;match_parent&quot;
                        android:layout_height=&quot;wrap_content&quot;
                        style=&quot;@style/wifi_item_content&quot;
                        android:prompt=&quot;@string/proxy_settings_title&quot;
                        android:entries=&quot;@array/wifi_proxy_settings&quot; /&gt;  //表示Spinner的数据集合是从wifi_proxy_settings从获取，wifi_proxy_settings需要在values/arrays.xml定义
                        
另外可以通过Adapter进行数据源绑定
spinner菜单有两种形式， dialog和dropdown, 通过android:sponnerMode来确定


android:textAllCaps = true 所有的控件都会变成大写， 默认都设为true



ListView的onItemClick事件无响应，是因为该列表项的点击事件被列表项的其他控件拦截

可以使用android:descendantFocusability = &quot;blocksDescandants&quot; 阻止其他空间拦截

也可以对ListView的子item的button设为android:focus = false;

</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="布局" prog_lang="custom-colors" readonly="False" tags="" unique_id="93">
				<rich_text></rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="Linearlayout" prog_lang="custom-colors" readonly="False" tags="" unique_id="92">
					<rich_text>
</rich_text>
					<rich_text justification="left"></rich_text>
					<rich_text>   



在线性布局中，如果有两个控件一个固定大小，让另一个控件填充剩余大小，可以将其weight设为1
                 &lt;LinearLayout
                    android:layout_width=&quot;match_parent&quot;
                    android:layout_height=&quot;wrap_content&quot;
                    android:orientation=&quot;horizontal&quot;&gt;
                    &lt;Spinner
                        android:id=&quot;@+id/security&quot;
                        android:layout_width=&quot;0dp&quot;
                        android:layout_height=&quot;wrap_content&quot;
</rich_text>
					<rich_text foreground="#ffff00000000">                        android:layout_weight=&quot;1&quot;</rich_text>
					<rich_text>
                        style=&quot;@style/wifi_item_content_spinner&quot;
                        android:prompt=&quot;@string/wifi_security&quot;
                        android:entries=&quot;@array/wifi_security&quot; /&gt;
                    &lt;ImageView
                        android:id=&quot;@+id/security_imageview&quot;
                        android:layout_width=&quot;wrap_content&quot;
                        android:layout_height=&quot;wrap_content&quot;
                        </rich_text>
					<rich_text foreground="#ffff00000000">android:layout_gravity=&quot;right&quot;  //靠右边</rich_text>
					<rich_text>
                        android:src=&quot;@drawable/ic_expand&quot;/&gt;

Linearlayout嵌套多层会降低UI render效率， 而且如果是listview或者gridview上的Item，效率会更低





</rich_text>
					<encoded_png char_offset="1"></encoded_png>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="Relativelayout" prog_lang="custom-colors" readonly="False" tags="" unique_id="94">
					<rich_text></rich_text>
				</node>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="verified boot" prog_lang="custom-colors" readonly="False" tags="" unique_id="89">
			<rich_text>Android 4.4以后引入的一个新特性，用于检测system分区是否被篡改

使能 
以Idol4s为例。 1，device/tct/idol4s/idol4s.mk追加以下几行（m8976分支高通平台可能已添加）： 
PRODUCT_SYSTEM_VERITY_PARTITION := /dev/block/bootdevice/by-name/system $(call inherit-product, build/target/product/verity.mk) PRODUCT_COPY_FILES += \ 
   frameworks/native/data/etc/android.software.verified_boot.xml:system/etc/permissions/android.software.verified_boot.xml

 2，device/tct/idol4s/fstab.qcom添加verify标志： 
/dev/block/bootdevice/by-name/system         /system      ext4     ro,barrier=1,discard  wait,verify 


对于user版本的可以刷userdebug或eng版本的boot.img

</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Surface" prog_lang="custom-colors" readonly="False" tags="" unique_id="96">
			<rich_text>Activity启动通过ActivityThread的handleLauncherActivity


adb shell dumpsys SurfaceFlinger</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="System" prog_lang="custom-colors" readonly="False" tags="" unique_id="97">
			<rich_text>fastboot 下
dd命令


     1.生成一个2M大小的空image
    dd if=/dev/zero of=./2m.img  bs=1024 count=2048
    2.进入fastboot刷modemst1，modemst2，fsg三个分区。
    sudo fastboot flash &lt;modemst1 | modemst2 | fsg&gt; 2m.img
    然后重启就可以了。</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Cdd" prog_lang="custom-colors" readonly="False" tags="" unique_id="16">
			<rich_text>
关于Behavior Constraint
1.需要在理解基础以后对文章进行归纳，用中文描述出来
2.CDD对行为的约束有MUST，MUST NOT等分类，文档填写中需要分开列出来

新增Analysis
1.主题所涉及到的内容与可能与哪些与模块相关，这些模块与Android原生相比缺少或增加了什么？
2. 如何去检测现有的项目关于某个主题是否符合CDD？
3. 如果相关的模块都符合CDD，请给出理由
4. 如果相关的模块不符合CDD，需要列出要怎样做才能使得其符合这部分CDD
5. 另外还需要给出关于这部分的注意点(Caution)使得在以后相关模块开发过程中能够作为重要参考


3.9.2需要继续跟进
9.11需要继续跟进

1.文件的读取速度跟硬件和软件的关联?
2.要怎么去理解 Device implementations MUST support running multiple applications as the same Linux user ID, provided that the applications are properly signed and constructed, as defined in the Security and Permissions reference


developer.android.com/guide/topics/security/permissions.html 

verified boot是一个确保设备软件集成的特性。
 
 1.CTS中的哪些测试用例涉及到哪些模块，哪些方面
2.CDD中有哪些点是模块通用的，有哪些是特定模块的


有些条例是许多模块通用的条例，如
1.JNI实现的时候必须要遵循ABI和兼容
2.比如说对共有API的修改不能改变其原来的状态行为

而有些则是特定模块的条例，

7.6.2 7.6.3 8.1
</rich_text>
			<rich_text justification="left"></rich_text>
			<rich_text>   
一些问题：
1）反馈得到的行为约束直接是将CDD翻译一下
2）许多组反映有许多内容平台本身就支持
3）目前还缺少代码约束这块的信息

分组的更新：
7.6.2
7.6.3
</rich_text>
			<rich_text foreground="#1F497D">和System组关系不大。</rich_text>
			<rich_text>
9.10</rich_text>
			<rich_text foreground="#1F497D">请</rich_text>
			<rich_text>security  team</rich_text>
			<rich_text foreground="#1F497D">再看看</rich_text>
			<rich_text>
6.1</rich_text>
			<rich_text foreground="#1F497D">请</rich_text>
			<rich_text>APP  team</rich_text>
			<rich_text foreground="#1F497D">再看看。</rich_text>
			<rich_text>


目前7.6.2与7.6.3缺少相关的Owner
Audio缺少7.8



Must : Required , Shall
Must Not : Shall Not 
Should: Recommended
Should not: Not Recommended
May : Optional 

@SystemApi @PrivateApi @hide
SystemApi 等价于privateApi 
@SystemApi一定是@hide的， @hide不一定是@SystemApi
也就是说@hide是SystemApi的必要条件。

@hide的方法可以让用户应用通过反射的方式获取到，而反射获取@SystemApi会出现incovationTargetException

/**************WifiManager setWifiApEnabled 方法为@hide ************************/
WifiManager manager = (WifiManager) getSystemService(Context.WIFI_SERVICE);

WifiConfiguration config = new WifiConfiguration();
config.SSID = &quot;AccessPointSSID&quot;;

Method method = manager.getClass().getMethod(&quot;setWifiApEnabled&quot;,WifiConfigutation.class,boolean.Class);
method.invoke(manager, config, true);

/**************WifiManager getPrivilegedConfiguredNetworks 方法为@SystemApi ************************/
WifiManager manager = (WifiManager) getSystemService(Context.WIFI_SERVICE);

Method method = manager.getClass().getMethod(&quot;getPrivilegedConfiguredNetworks&quot;);
List&lt;WifiConfiguration&gt; configs = (List&lt;WifiConfiguration&gt;)method.invoke(manager);


Android平台包含了
managedAPI集合
nativedAPI集合
softAPI集合(IntentSystem和Web-applicationAPI)：设备必须支持SDK开发文档种提到所有permission

Intent 兼容性 
设备实现者必须提供一种Android Activity 或者 Service 来匹配一个特定intent filter ， 同时对于每一个特定的intent类型需要实现正确的行为。

对于Desk Clock, Browser, Calendar, Contacts, Gallery,GlobalSearch, Launcher,Music,Setting这样的核心应用，在替代的时候必须要保持原来的Intent行为一致，如原来的Activity都是exported的标签，现在依旧要如此。

自定义Intent的时候，关键字不可以定义在Action 、Gategory或其他属于其他组织包空间下

第三方应用依赖某些平台来广播某些Intent，以通知他们软硬件环境的改变。Android兼容设备必须广播这些公共广播Intent，对适当的系统事件作出反应。查看SDK中的Broadcast Intent

对于默认App的选择，需要实现相应的Intent

 
Android Native Code 需要遵循Application Binary Interfaces

Native API 
1.在managed 环境下，使用标准的JNI语法，必须能够支持代码运行时能够调用native代码
2.必须要source-compatible(头文件匹配) and binary-compatible（ABI）

Android使用WebKit渲染引擎来实现android.webkit.WebView
WebView构件需要支持HTML5如何它支持HTML5的特点
第三方浏览器也需要基于WebKit引擎

API行为适配 
所有的API类型（managed,soft,native and web）需要与上游的Android开源项目推荐实现所一致，一些特定的兼容性方面如下：
1.设备绝不可以改变标准Intent的行为或意义 （需要相关标准的Intent）
2.设备绝不可变更某个特定系统组件（Activity,Service，ContentProvider）的生命周期或者生命周期语义
3. 设备绝不可以改变特定的权限语义


API命名空间
为了确保与第三方应用程序的兼容性，设备实现蛰不能会下面命名空间做修改。
java.*
javax.*
sun.*
android.*
com.android.*

禁止修改：

1.对于Android平台上暴露的共有API（没有@hide修饰的），设备实现者决不可以改变</rich_text>
			<rich_text background="#ffffffff0000" weight="heavy">任何方法</rich_text>
			<rich_text>或</rich_text>
			<rich_text background="#ffffffff0000">类签名</rich_text>
			<rich_text>，或者删除类或类字段的方式来改变他们（也就是说不能修改公开的API）
2. 设备实现者可以修改API的基础实现，但是不能修改已暴露的共有API的状态行为和Java语言签名
3. 设备实现者绝不可以向上面所叙述的API添加任何暴露的共有</rich_text>
			<rich_text background="#ffffffff0000">元素</rich_text>
			<rich_text>

对共有API可以进行内部的修改，但是不能影响其原来的行为，而且这些修改不能以任何其他方式暴露给开发者。

设备实现者可以实现自定义的API，但是不能出现在其他组织的命名空间种
比如设备实现者不能将API添加到com.google.*或类似的命名空间。


Launcher应用在实现的时候需要生命 android.software.home_screen

Notification listener service APIs





</rich_text>
			<encoded_png char_offset="813"></encoded_png>
			<node custom_icon_id="0" foreground="" is_bold="False" name="CDD-Framework" prog_lang="custom-colors" readonly="False" tags="" unique_id="10">
				<rich_text>1.什么是Managed API， Dalvik bytecode执行环境， Android API运行的基础
程序运行库，主要包括基本的C库、以及多媒体库以支持各种多媒体格式、位图和矢量字体、2D和3D图形引擎、浏览器、数据库支持
  1）Bionic系统C库
  2）媒体库，基于PacketVideo OpenCore
  3) Surface Manager用户管理Surface
  4) Webkit, LibWebCore浏览器，基于WebKit引擎
  5）SGL底层的2D图形引擎
  6) 3D libraries基于OpenGL ES 1.0 APIs实现
  7) FreeType位图(bitmap)和矢量(Vector)字体显示
  8) SQLite
  9) 硬件抽象层
  
  @System API对用户隐藏，只能被系统应用调用，@System API必定是@hide


Android设置程序最小运行的堆内存
onCreate中加入
int CWJ_HEAP_SIZE = 10 * 1024 * 10247;
VMRuntime.getRuntime().setMinimumHeapSize(CWJ_HEAP_SIZE);
导入 import system.VMRuntime;

dalvik.vm.heapgrowthlimit 极限堆大小
dalvik.vm.heapstartsize 极限堆大小
dalvik.vm.heapsize 使用大堆时，极限堆大小，Android开发种，如果使用大堆，manifest中指定android:largeHeap为true

通过下面命令来查看虚拟机的heapsize, 如果程序申请的java heap对象超过了dalvik.vm.heapsize，即使在RAM充足的情况下，也会发生OMM
sudo adb shell getprop | grep dalvik.vm.heapsize
对于一些大型应用程序，内存使用比较多，很容易超出vm heapsize的限制，可以通过下面方式保证OOM不崩溃
1）创建子进程
2）使用jni在native heap上申请空间，nativeheap的增长不受dalvik vm heapsize的限制，只要RAM有剩余空间，程序员可以一直在native heap上申请空间
3）使用显存（操作系统预留RAM的一部分作为显存）
使用OpenGL texture等api，texture memory不受dalvik vm heapsize限制





Android截屏 &lt;uses-permission android:name=&quot;android.permission.READ_FRAME_BUFFER&gt;

Android permission
1.framework permission
packageInstaller通过AppSecurityPermission来检查，给用户提示


执行环境用来完成Android在运行时在作用域、生存期等方面的处理



ABI(Application Binary Interface)定义了一个compiler该产生怎样的obj
常见的问题是：
如果一个动态库是以ABI1.2的标准生成，但是系统使用的标准库是ABI1.3标准生成，那么这个动态库将不能使用系统的标准库。通常使用libgcc_s.so来标识gcc的ABI版本信息，使用libstdc++.so来标识标准库的ABI版本信息。


是系统与应用之间的协议，一个Binary必须符合ABI才能在相应的系统上运行
比如我在PC用不管什么样的COMPILER，只要产生符合LINUX的ELF文件，用相应的INSTRUCTION SET（比如INTEL，PPC，SPARC）就可以在一个LINUX机器上运行, 调用系统或别人的LIB
ABI定义了BINARY的文件格式，内容，以及装载/卸载程序的要求，函数调用时参数传递规则，寄存器，堆栈的使用等。
机器代码一层的接口


</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="exclusive core" prog_lang="custom-colors" readonly="False" tags="" unique_id="184">
				<rich_text>&lt;&lt; summary of investigation &gt;&gt;
This feature need only if a core application such as camera required it. getExclusiveCores implementation does exist with N release and implemented in JNI level. Device specific startup scripts needs to be modified to enable CPU foreground feature. This should be done by power/thermal team, since the power and thermal impact needs to verified in the lab. If an application needs to enable this feature then they should modify the start up scripts. It is not clear to me that how getExclusiveCores() API is used in the application level.
There is no kernel work based on the limited investigation done so far.
&lt;&lt;&lt; documents and Google source referred &gt;&gt;
getExclusiveCores pdf doc.
</rich_text>
				<rich_text link="webs https://wikis.rim.net/display/Avengers/Google+Documentation+-+Android+N+Release?preview=%2F680444248%2F753065685%2FExclusive_Core.pdf">https://wikis.rim.net/display/Avengers/Google+Documentation+-+Android+N+Release?preview=%2F680444248%2F753065685%2FExclusive_Core.pdf</rich_text>
				<rich_text>
Sample source code for nexus 6
git clone </rich_text>
				<rich_text link="webs https://android.googlesource.com/device/huawei/angler">https://android.googlesource.com/device/huawei/angler</rich_text>
				<rich_text>
getExclusiveCores API reference
</rich_text>
				<rich_text link="webs https://developer.android.com/reference/android/os/Process.html#getExclusiveCores(">https://developer.android.com/reference/android/os/Process.html#getExclusiveCores(</rich_text>
				<rich_text>)
Implemented as part of Class android.os.Process ( API level 24)
in file and enabled by following config variable.
ENABLE_CPUSETS := true
frameworks/base/core/java/android/os/Process.java:1023: public static final native int[] getExclusiveCores();
frameworks/base/core/jni/android_util_Process.cpp:397:jintArray android_os_Process_getExclusiveCores(JNIEnv* env, jobject clazz)
usage example:
cts/tests/vr/src/android/vr/cts/VrCpuTest.java:41: int[] excl_cores = Process.getExclusiveCores();
&lt;&lt; Detail scope of work if any application needed this feature &gt;&gt;&gt;
1. Enable ENABLE_CPUSETS := true config variable in
file name: device/tct/mercury/BoardConfig.mk ( for mercury and similar file for any other N supporting device)
surface fliger module have some imact on this. The imact should be tested by graphics team.
frameworks/native/services/surfaceflinger/main_surfaceflinger.cpp:47:#ifdef ENABLE_CPUSETS
frameworks/native/services/surfaceflinger/Android.mk:169:ifneq ($(ENABLE_CPUSETS),)
frameworks/native/services/surfaceflinger/Android.mk:170: LOCAL_CFLAGS += -DENABLE_CPUSETS
2. each application team ( camera should modify there initialization to give exclusive access ) should modify the start scripts for there module.
Reference from QC
qcom/msmcobalt/init.target.rc:78: write /dev/cpuset/top-app/cpus 0-7
qcom/msmcobalt/init.target.rc:79: write /dev/cpuset/foreground/cpus 0-7
qcom/msmcobalt/init.target.rc:80: write /dev/cpuset/foreground/boost/cpus 0-7
qcom/msmcobalt/init.target.rc:81: write /dev/cpuset/background/cpus 0-7
qcom/msmcobalt/init.target.rc:82: write /dev/cpuset/system-background/cpus 0-7
– NEXUS —
vgeorge@CI0700000001210:~/hddrive/googlesource/angler$ grep -rni cpuset
init.angler.rc:71: # add a cpuset for the camera daemon
init.angler.rc:73: mkdir /dev/cpuset/camera-daemon
init.angler.rc:74: write /dev/cpuset/camera-daemon/cpus 0
init.angler.rc:75: write /dev/cpuset/camera-daemon/mems 0
init.angler.rc:76: chown system system /dev/cpuset/camera-daemon
init.angler.rc:77: chown system system /dev/cpuset/camera-daemon/tasks
init.angler.rc:78: chmod 0664 /dev/cpuset/camera-daemon/tasks
init.angler.rc:80: # update foreground cpuset now that processors are up
init.angler.rc:82: write /dev/cpuset/foreground/cpus 0-2,4-7
init.angler.rc:83: write /dev/cpuset/foreground/boost/cpus 4-7
init.angler.rc:84: write /dev/cpuset/background/cpus 0
init.angler.rc:85: write /dev/cpuset/system-background/cpus 0-2
init.angler.rc:86: write /dev/cpuset/top-app/cpus 0-7
init.angler.rc:87: write /dev/cpuset/camera-daemon/cpus 0-3
init.angler.rc:287: writepid /dev/cpuset/system-background/tasks
init.angler.rc:293: writepid /dev/cpuset/system-background/tasks
init.angler.rc:299: writepid /dev/cpuset/system-background/tasks
init.angler.rc:306: writepid /dev/cpuset/system-background/tasks
init.angler.rc:312: writepid /dev/cpuset/system-background/tasks
init.angler.rc:326: writepid /dev/cpuset/system-background/tasks
init.angler.rc:333: writepid /dev/cpuset/system-background/tasks
init.angler.rc:339: writepid /dev/cpuset/system-background/tasks
init.angler.rc:344: writepid /dev/cpuset/system-background/tasks
init.angler.rc:350: writepid /dev/cpuset/system-background/tasks
init.angler.rc:356: writepid /dev/cpuset/system-background/tasks
init.angler.rc:361: writepid /dev/cpuset/system-background/tasks
init.angler.rc:376: writepid /dev/cpuset/camera-daemon/tasks
init.angler.rc:382: writepid /dev/cpuset/system-background/tasks
init.angler.rc:401: writepid /dev/cpuset/system-background/tasks
init.angler.rc:408: writepid /dev/cpuset/system-background/tasks
init.angler.rc:418: writepid /dev/cpuset/system-background/tasks
init.angler.rc:424: writepid /dev/cpuset/system-background/tasks
init.angler.rc:461: writepid /dev/cpuset/system-background/tasks
BoardConfig.mk:32:ENABLE_CPUSETS := true
&lt;&lt; Risks &gt;&gt;
1. API version of power.c provided by QC is way lower than current Google version
We may consult with QC before adding this feature for compatibility
vgeorge@CI0700000001210:~/hddrive/googlesource/angler/power$ grep -rni module_api_version
power.c:756: .module_api_version = POWER_MODULE_API_VERSION_0_5, &lt;&lt;&lt; latest android version &gt;&gt;&gt;
power.c.d:442: .module_api_version = POWER_MODULE_API_VERSION_0_2, &lt;&lt;&lt; QC version &gt;&gt;&gt;
2. Must analyze the thermal/sleep current impact after enabling this feature
</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Activity跳转动画" prog_lang="custom-colors" readonly="False" tags="" unique_id="2">
			<rich_text> 
    2.
    Music应用内部跳转过慢
    高提case：02490895
    

     Music windowAnimationStyle这个属性，自定义比 设为Null速度快
     查看Music的这个属性Style是在Music5.Dark 继承于Theme.AppCompat.Light.DarkActionBar
     Theme.AppCompat.Light.DarkActionBar是在V7兼容包上定义的， 继承于Base.Theme.AppCompat.Light.DarkActionBar
     Base.Theme.AppCompat.Light.DarkActionBar 定义在/frameworks/support/v7/appcompat/res/values/themes_base.xml中 
     继承于Base.Theme.AppCompat.Light 继承与Base.V7.Theme.AppCompat.Light 
     继承于Platform.AppCompat.Light 
     继承于framework/base/core/res/res/values/themes.xml 中的 Theme.Light
     继承于Theme
     系统的windowAnimationStyle 属性就是在Theme中定义的
     &lt;</rich_text>
			<rich_text foreground="#000080">style</rich_text>
			<rich_text> </rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;AppTheme&quot;</rich_text>
			<rich_text> </rich_text>
			<rich_text foreground="#0000ff">parent=</rich_text>
			<rich_text foreground="#008000">&quot;Theme.AppCompat.Light.DarkActionBar&quot;</rich_text>
			<rich_text>&gt;
   &lt;</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text> </rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;android:windowIsTranslucent&quot;</rich_text>
			<rich_text>&gt;true&lt;/</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text>&gt;
&lt;/</rich_text>
			<rich_text foreground="#000080">style</rich_text>
			<rich_text>&gt;
     调查以后发现，如果style定义了android:windowIsTranslucent， Acitivty使用了这个属性的话，之间的跳转会调用  TRANSIT_WALLPAPER_CLOSE而不是TRANSIT_ACTIVITY_OPEN
    这个都在AppTransition中定义
    
    小米的动画去掉了一些延时：
    wallpaper_close_enter
    
     android:windowShowWallpaper为true
     
     AppTransition
     
     
     
</rich_text>
			<rich_text foreground="#333333">Music应用内部跳转过慢这个问题分析结果如下：
因为Activity定义的style中带有</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">windowIsTranslucent</rich_text>
			<rich_text>使得从上一个activity跳转到下一个activity的跳转动画是</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text>而不是预期的</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#000000">解决的方法： 去掉Wallpaper动画的延时，需要提供一个pr或者fr给我</rich_text>
			<rich_text>

</rich_text>
			<rich_text foreground="#000000">具体分析：</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#000000"> Music5.Dark 这个主题继承于Theme.AppCompat.Light.DarkActionBar最终使用到系统默认的windowAnimationStyle是定义于 /m8996/frameworks/base/core/res/res/values/styles.xml的&lt;style name=&quot;Animation.Activity&quot;&gt;</rich_text>
			<rich_text>
8</rich_text>
			<rich_text foreground="#333333">3    &lt;style </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=Animation.Activity&amp;project=m8976">Animation.Activity</rich_text>
			<rich_text foreground="#333333">&quot;&gt;
84        &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;activityOpenEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_open_enter&amp;project=m8976">activity_open_enter</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;
85        &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;activityOpenExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_open_exit&amp;project=m8976">activity_open_exit</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;

              ... ...
100        &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;wallpaperCloseEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/wallpaper_close_enter&amp;project=m8976">wallpaper_close_enter</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;
101        &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;wallpaperCloseExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/wallpaper_close_exit&amp;project=m8976">wallpaper_close_exit</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;
              ... ...
112    &lt;/style&gt;</rich_text>
			<rich_text>    </rich_text>
			<rich_text foreground="#333333">
         正常的情况下从一个Activity跳转到另一个Activity的跳转在AppTransition的体现是</rich_text>
			<rich_text foreground="#333333" weight="heavy">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text foreground="#333333">，对应到上面的动画是下面
       </rich_text>
			<rich_text>    </rich_text>
			<rich_text foreground="#333333">  &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;activityOpenEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_open_enter&amp;project=m8976">activity_open_enter</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;
             &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;activityOpenExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_open_exit&amp;project=m8976">activity_open_exit</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;</rich_text>
			<rich_text> 
  </rich_text>
			<rich_text foreground="#333333">         
         但是如果这个Activity包含 &lt;item name=&quot;android:</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">windowIsTranslucent</rich_text>
			<rich_text>&quot;&gt;true&lt;/item&gt;这个属性进行跳转的话使用的跳转动画</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text>是下面两个，因为此时的Activity是以wallpaper作为背景


            </rich_text>
			<rich_text foreground="#333333">&lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;wallpaperCloseEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/wallpaper_close_enter&amp;project=m8976">wallpaper_close_enter</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;
            &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;wallpaperCloseExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/wallpaper_close_exit&amp;project=m8976">wallpaper_close_exit</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;
</rich_text>
			<rich_text>    </rich_text>
			<rich_text foreground="#333333">         
         </rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#333333">         目前我所知道的会引起Activity跳转动画的属性有</rich_text>
			<rich_text foreground="#000000" weight="heavy">windowIsTranslucent,windowShowWallpaper</rich_text>
			<rich_text weight="heavy"> </rich_text>
			<rich_text>

         查看idol4_pro_cn这两个动画的定义发现 会有300ms的延时，所以才会出现卡顿的现象
           
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/wallpaper_close_enter&amp;project=m8976">wallpaper_close_enter.xml</rich_text>
			<rich_text>    </rich_text>
			<rich_text foreground="#333333">       </rich_text>
			<rich_text>   
</rich_text>
			<rich_text foreground="#333333">23    &lt;alpha android:</rich_text>
			<rich_text foreground="#333333" weight="heavy">fromAlpha=</rich_text>
			<rich_text foreground="#333333">&quot;0&quot; android:</rich_text>
			<rich_text foreground="#333333" weight="heavy">toAlpha=</rich_text>
			<rich_text foreground="#333333">&quot;1.0&quot;
24        android:</rich_text>
			<rich_text foreground="#333333" weight="heavy">fillEnabled=</rich_text>
			<rich_text foreground="#333333">&quot;true&quot; android:</rich_text>
			<rich_text foreground="#333333" weight="heavy">fillBefore=</rich_text>
			<rich_text foreground="#333333">&quot;true&quot; android:</rich_text>
			<rich_text foreground="#333333" weight="heavy">fillAfter=</rich_text>
			<rich_text foreground="#333333">&quot;true&quot;
25        android:</rich_text>
			<rich_text foreground="#333333" weight="heavy">interpolator=</rich_text>
			<rich_text foreground="#333333">&quot;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=interpolator/&amp;project=m8976">interpolator</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=interpolator/decelerate_quart&amp;project=m8976">decelerate_quart</rich_text>
			<rich_text foreground="#333333">&quot;
26        </rich_text>
			<rich_text foreground="#ff0000" weight="heavy">android:startOffset=&quot;300&quot;</rich_text>
			<rich_text>
27        android:</rich_text>
			<rich_text weight="heavy">duration=</rich_text>
			<rich_text>&quot;167&quot;/&gt;
28
29    &lt;translate android:</rich_text>
			<rich_text weight="heavy">fromYDelta=</rich_text>
			<rich_text>&quot;110%&quot; android:</rich_text>
			<rich_text weight="heavy">toYDelta=</rich_text>
			<rich_text>&quot;0&quot;
30        android:</rich_text>
			<rich_text weight="heavy">fillEnabled=</rich_text>
			<rich_text>&quot;true&quot; android:</rich_text>
			<rich_text weight="heavy">fillBefore=</rich_text>
			<rich_text>&quot;true&quot; android:</rich_text>
			<rich_text weight="heavy">fillAfter=</rich_text>
			<rich_text>&quot;true&quot;
31        android:</rich_text>
			<rich_text weight="heavy">interpolator=</rich_text>
			<rich_text>&quot;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=interpolator/&amp;project=m8976">interpolator</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=interpolator/decelerate_quint&amp;project=m8976">decelerate_quint</rich_text>
			<rich_text>&quot;
32        </rich_text>
			<rich_text foreground="#ff0000" weight="heavy">android:startOffset=&quot;300&quot;</rich_text>
			<rich_text>
33        android:</rich_text>
			<rich_text weight="heavy">duration=</rich_text>
			<rich_text>&quot;417&quot; /&gt;


</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">Q1：为什么将同样的APK装到小米5上是流畅的？</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#000000">    要注意的是上面的动画是原生的定义，将同样的APK装到小米5上面不卡顿是因为小米将去掉了wallpaper动画的延时</rich_text>
			<rich_text>
         
         ##来自小米5的wallpaper_close_enter.xml
         &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
         &lt;set android:background=&quot;#ff000000&quot;         android:shareInterpolator=&quot;false&quot; android:zAdjustment=&quot;top&quot;
           xmlns:android=</rich_text>
			<rich_text link="webs http://moz-txt-link-rfc2396E">&quot;http://schemas.android.com/apk/res/android&quot;</rich_text>
			<rich_text foreground="#333333">&gt;
             &lt;alpha android:interpolator=&quot;@interpolator/linear&quot; 
                    android:duration=&quot;167&quot; 
                    android:fillBefore=&quot;true&quot; 
                    android:fillAfter=&quot;true&quot;
</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">                    android:startOffset=&quot;0&quot;</rich_text>
			<rich_text>
                    android:fromAlpha=&quot;0.0&quot;
                    android:toAlpha=&quot;1.0&quot; 
                    android:fillEnabled=&quot;true&quot; /&gt;
             &lt;translate         android:interpolator=&quot;@interpolator/decelerate_quint&quot;
                      android:duration=&quot;417&quot;
                     android:fillBefore=&quot;true&quot; 
                     android:fillAfter=&quot;true&quot;
</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">                     android:startOffset=&quot;0&quot; </rich_text>
			<rich_text>
                     android:fromYDelta=&quot;95.00001%&quot; 
                     android:toYDelta=&quot;0.0&quot; 
                     android:fillEnabled=&quot;true&quot; /&gt;
         &lt;/set&gt;


</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">Q2:为什么Music自定义动画以后速度变快了？</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#000000">下面 music_windowAnimationStyle是music自定义的动画，其实下面两个item并没有起什么作用，关键是其继承了 android:style</rich_text>
			<rich_text>/</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">Animation.Translucent </rich_text>
			<rich_text>
   
77    &lt;style </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">music_windowAnimationStyle</rich_text>
			<rich_text>&quot; </rich_text>
			<rich_text weight="heavy">parent=</rich_text>
			<rich_text>&quot;android:</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/&amp;project=m8996">style</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/Animation.Translucent&amp;project=m8996">Animation.Translucent</rich_text>
			<rich_text>&quot;&gt;
78        &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text>&quot;android:activityOpenEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8996">anim</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_anim_in&amp;project=m8996">activity_anim_in</rich_text>
			<rich_text>&lt;/item&gt;
79        &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text>&quot;android:activityOpenExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8996">anim</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_anim_out&amp;project=m8996">activity_anim_out</rich_text>
			<rich_text>&lt;/item&gt;</rich_text>
			<rich_text foreground="#333333">     </rich_text>
			<rich_text>

</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">Animation.Translucent </rich_text>
			<rich_text foreground="#000000">这个属性定义在/m8996/frameworks/base/core/res/res/values/styles.xml</rich_text>
			<rich_text weight="heavy">
</rich_text>
			<rich_text>126    &lt;style </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=Animation.Translucent&amp;project=m8996">Animation.Translucent</rich_text>
			<rich_text>&quot;&gt;
127        &lt;item </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;windowEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8996">anim</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/translucent_enter&amp;project=m8996">translucent_enter</rich_text>
			<rich_text>&lt;/item&gt;
128        &lt;item </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;windowExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8996">anim</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/translucent_exit&amp;project=m8996">translucent_exit</rich_text>
			<rich_text>&lt;/item&gt;
129    &lt;/style&gt;s

</rich_text>
			<rich_text foreground="#000000">实际上调用的是 windowEnterAnimation和windowExitAnimation这两个动画，而这两个动画没有定义延时，所以速度就快了。</rich_text>
			<rich_text>
  
  
  ActivityStack -&gt; startActivityLocked Activitystart过程中真正执行开始的方法
     -&gt; WindowManagerService-&gt; prepareAppTransition
  
  
  windowManagerService-&gt;applyAnimationLocked
  windowManagerService.loadAnimation
  
  ActivityStackSupervisor.startActivityLocked -&gt; ActivityStackSupervisor.startActivityUncheckedLocked -&gt; ActivityStack.startActivityLocked -&gt; WindowManagerService-&gt; prepareAppTransition
  
  ActivityStackSupervisor.resumeTopActivitiesLocked -&gt; ActivityStack.resumeTopActivityLocked -&gt; ActivityStack.resumeTopActivityInnerLocked -&gt; WindowManagerService-&gt; prepareAppTransition
  
  
  
  
</rich_text>
			<rich_text weight="heavy">  从Music点击一个菜单图标后走的流程</rich_text>
			<rich_text>（带有透明属性的系统跳转）
  windowManagerService -&gt; executeAppTransition
 08-01 09:10:07.560  1550  1613 W WindowManager: Execute app transition: mNextAppTransition=TRANSIT_UNSET 
 Callers=com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:1697 //调用堆栈
  com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
  com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840
  com.android.server.am.ActivityManagerService.setFocusedStack:2846 
  com.android.server.wm.WindowManagerService$H.handleMessage:8257 


</rich_text>
			<rich_text weight="heavy">  ActivityStackSupervisor.startActivityLocked -&gt; ActivityStackSupervisor.startActivityUncheckedLocked -&gt; ActivityStack.startActivityLocked -&gt; WindowManagerService.prepareAppTransition</rich_text>
			<rich_text>
 08-01 09:10:07.568  1550  2801 V WindowManager: Prepare app transition: transit=TRANSIT_ACTIVITY_OPEN mNextAppTransition=TRANSIT_UNSET alwaysKeepCurrent=false Callers=com.android.server.am.ActivityStack.startActivityLocked:2268
 com.android.server.am.ActivityStackSupervisor.startActivityUncheckedLocked:2563 
 com.android.server.am.ActivityStackSupervisor.startActivityLocked:1777 
  
</rich_text>
			<rich_text weight="heavy">    ActivityStackSupervisor.resumeTopActivitiesLocked -&gt; ActivityStack.resumeTopActivityLocked -&gt; ActivityStack.resumeTopActivityInnerLocked -&gt; WindowManagerService.prepareAppTransition</rich_text>
			<rich_text>
  08-01 09:10:07.591  1550  2244 V WindowManager: Prepare app transition: transit=TRANSIT_ACTIVITY_OPEN mNextAppTransition=TRANSIT_ACTIVITY_OPEN alwaysKeepCurrent=false Callers=com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:1914
   com.android.server.am.ActivityStack.resumeTopActivityLocked:1609
    com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840 

</rich_text>
			<rich_text weight="heavy">  ActivityStackSupervisor.resumeTopActivitiesLocked -&gt; ActivityStack.resumeTopActivityLocked -&gt; ActivityStack.resumeTopActivityInnerLocked 
          -&gt; ActivityStackSupervisor.startSpecificActivityLocked</rich_text>
			<rich_text> -&gt; </rich_text>
			<rich_text weight="heavy">ActivityStackSupervisor.realStartActivityLocked</rich_text>
			<rich_text>
 08-01 09:10:07.592  1550  2244 V WindowManager: setAppVisibility(Token{3001748 ActivityRecord{3e7edeb u0 com.alcatel.music5.china/com.alcatel.music5.activities.BaseJumpActivity t10}}, visible=true): mNextAppTransition=TRANSIT_ACTIVITY_OPEN hidden=true hiddenRequested=true 
 Callers=com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1244 
 com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 
 com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:2112 
 com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
 com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840 
 com.android.server.am.ActivityStack.completePauseLocked:1102 

  </rich_text>
			<rich_text weight="heavy">  ActivityStackSupervisor.resumeTopActivitiesLocked -&gt; ActivityStack.resumeTopActivityLocked -&gt; ActivityStack.resumeTopActivityInnerLocke 
          -&gt; ActivityStackSupervisor.startSpecificActivityLocked</rich_text>
			<rich_text> -&gt; </rich_text>
			<rich_text weight="heavy">ActivityStackSupervisor.realStartActivityLocked</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">-&gt; ActivityStack.minimalResumeActivityLocked</rich_text>
			<rich_text> 
</rich_text>
			<rich_text weight="heavy">          -&gt; ActivityStack.completeResumeLocked -&gt; ActivityStackSupervisor.reportResumedActivityLocked -&gt;  WindowManagerService.executeAppTransition</rich_text>
			<rich_text>
  
 08-01 09:10:07.596  1550  2244 W WindowManager: Execute app transition: mNextAppTransition=TRANSIT_ACTIVITY_OPEN 
 Callers=com.android.server.am.ActivityStackSupervisor.reportResumedActivityLocked:3379 
 com.android.server.am.ActivityStack.completeResumeLocked:1168 
 com.android.server.am.ActivityStack.minimalResumeActivityLocked:709 
 com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1400 
 com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 

08-01 09:10:07.903  1550  1613 I zhengyu : TRANSIT_WALLPAPER_CLOSE
08-01 09:10:07.904  1550  1613 V AppTransition: applyAnimation: </rich_text>
			<rich_text foreground="#ffff00000000">anim=android.view.animation.AnimationSet@a8dd8d5 </rich_text>
			<rich_text>animAttr=0x12 transit=TRANSIT_WALLPAPER_CLOSE isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3514
 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4578 
 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9484 


08-01 10:17:17.218  1550  1613 I zhengyu : TRANSIT_ACTIVITY_OPEN
08-01 10:17:17.220  1550  1613 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@7ff8d38 animAttr=0x4 transit=TRANSIT_ACTIVITY_OPEN isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3514 
com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4578 
com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:948


</rich_text>
			<rich_text weight="heavy">带有透明属性自定义的跳转</rich_text>
			<rich_text>
08-01 10:04:11.281  1550  1613 W WindowManager: Execute app transition: mNextAppTransition=TRANSIT_UNSET 
Callers=com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:1697 
com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840 
com.android.server.am.ActivityManagerService.setFocusedStack:2846 
com.android.server.wm.WindowManagerService$H.handleMessage:8257 

08-01 10:04:11.287  1550  2201 V WindowManager: Prepare app transition: transit=TRANSIT_ACTIVITY_OPEN mNextAppTransition=TRANSIT_UNSET alwaysKeepCurrent=false Callers=com.android.server.am.ActivityStack.startActivityLocked:2268 
com.android.server.am.ActivityStackSupervisor.startActivityUncheckedLocked:2563 
com.android.server.am.ActivityStackSupervisor.startActivityLocked:1777 

08-01 10:04:11.306  1550  2862 V WindowManager: Prepare app transition: transit=TRANSIT_ACTIVITY_OPEN mNextAppTransition=TRANSIT_ACTIVITY_OPEN alwaysKeepCurrent=false Callers=com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:1914 
com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840 

08-01 10:04:11.306  1550  2862 V WindowManager: setAppVisibility(Token{c298ae9 ActivityRecord{bc05770 u0 test.example.com.myapplication/.SecondActivity t25}}, visible=true): mNextAppTransition=TRANSIT_ACTIVITY_OPEN hidden=true hiddenRequested=true 
Callers=com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1244 
com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 
com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:2112 
com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840 
com.android.server.am.ActivityStack.completePauseLocked:1102 

08-01 10:04:11.314  1550  2862 W WindowManager: Execute app transition: mNextAppTransition=TRANSIT_ACTIVITY_OPEN 
Callers=com.android.server.am.ActivityStackSupervisor.reportResumedActivityLocked:3379 
com.android.server.am.ActivityStack.completeResumeLocked:1168 
com.android.server.am.ActivityStack.minimalResumeActivityLocked:709 
com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1400 
com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 

08-01 10:04:11.378  1550  1613 I zhengyu : TRANSIT_WALLPAPER_CLOSE

08-01 10:04:11.378  1550  1613 V AppTransition: </rich_text>
			<rich_text foreground="#ffff00000000">applyAnimation: anim=null</rich_text>
			<rich_text> animAttr=0x12 transit=TRANSIT_WALLPAPER_CLOSE isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3514 
com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4578 
com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9484 





</rich_text>
			<rich_text weight="heavy">自定义没有透明属性的跳转</rich_text>
			<rich_text>
08-01 10:17:17.090  1550  2866 V WindowManager: Prepare app transition: transit=TRANSIT_ACTIVITY_OPEN mNextAppTransition=TRANSIT_UNSET alwaysKeepCurrent=false Callers=com.android.server.am.ActivityStack.startActivityLocked:2268 
com.android.server.am.ActivityStackSupervisor.startActivityUncheckedLocked:2563 
com.android.server.am.ActivityStackSupervisor.startActivityLocked:1777 

08-01 10:17:17.111  1550  2247 V WindowManager: Prepare app transition: transit=TRANSIT_ACTIVITY_OPEN mNextAppTransition=TRANSIT_ACTIVITY_OPEN alwaysKeepCurrent=false Callers=com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:1914 
com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840 

08-01 10:17:17.111  1550  2247 V WindowManager: setAppVisibility(Token{f9ca07f ActivityRecord{a5e8d9e u0 test.example.com.myapplication/.SecondActivity t28}}, visible=true): mNextAppTransition=TRANSIT_ACTIVITY_OPEN hidden=true hiddenRequested=true 
Callers=com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1244 
com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 
com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:2112 
com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840 
com.android.server.am.ActivityStack.completePauseLocked:1102 

08-01 10:17:17.114  1550  2247 V WindowManager: setAppVisibility(Token{79c7b8d ActivityRecord{183d424 u0 test.example.com.myapplication/.MainActivity t28}}, visible=false): mNextAppTransition=TRANSIT_ACTIVITY_OPEN hidden=false hiddenRequested=false Callers=com.android.server.am.ActivityStack.setVisible:1192 com.android.server.am.ActivityStack.ensureActivitiesVisibleLocked:1453 com.android.server.am.ActivityStackSupervisor.ensureActivitiesVisibleLocked:3471 
com.android.server.am.ActivityManagerService.updateConfigurationLocked:18089 
com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1260 
com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 

08-01 10:17:17.122  1550  2247 W WindowManager: Execute app transition: mNextAppTransition=TRANSIT_ACTIVITY_OPEN 
Callers=com.android.server.am.ActivityStackSupervisor.reportResumedActivityLocked:3379 
com.android.server.am.ActivityStack.completeResumeLocked:1168 
com.android.server.am.ActivityStack.minimalResumeActivityLocked:709 
com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1400 
com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 

08-01 10:17:17.218  1550  1613 I zhengyu : TRANSIT_ACTIVITY_OPEN
08-01 10:17:17.220  1550  1613 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@7ff8d38 animAttr=0x4 transit=TRANSIT_ACTIVITY_OPEN isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3514 
com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4578 
com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9484 

08-01 10:17:17.226  1550  1613 I zhengyu : TRANSIT_ACTIVITY_OPEN
08-01 10:17:17.227  1550  1613 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@6cd8002 animAttr=0x5 transit=TRANSIT_ACTIVITY_OPEN isEntrance=false Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3514 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4578 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9524 
08-01 10:17:17.668  1550  1607 V WindowManager: setAppVisibility(Token{79c7b8d ActivityRecord{183d424 u0 test.example.com.myapplication/.MainActivity t28}}, visible=false): mNextAppTransition=TRANSIT_UNSET hidden=true hiddenRequested=true Callers=com.android.server.am.ActivityStack.stopActivityLocked:2821 com.android.server.am.ActivityStackSupervisor.activityIdleInternalLocked:2707 com.android.server.am.ActivityStackSupervisor$ActivityStackSupervisorHandler.activityIdleInternal:4183 com.android.server.am.ActivityStackSupervisor$ActivityStackSupervisorHandler.handleMessage:4206 android.os.Handler.dispatchMessage:102 android.os.Looper.loop:148 


非透明背景之间跳转
08-12 02:28:07.454 16141 16141 I zhengyu : MainActivity.onPause
08-12 02:28:07.471 16141 16141 I zhengyu : SecondActivity.onCreate
08-12 02:28:07.475 16141 16141 I zhengyu : SecondActivity.onStart
08-12 02:28:07.476 16141 16141 I zhengyu : SecondActivity.onResume
08-12 02:28:07.752 16141 16141 I zhengyu : </rich_text>
			<rich_text foreground="#ffff00000000">MainActivity.onStop</rich_text>
			<rich_text>

    
 透明背景之间跳转
08-12 02:26:28.818 14840 14840 I zhengyu : MainActivity.onPause
08-12 02:26:28.839 14840 14840 I zhengyu : SecondActivity.onCreate
08-12 02:26:28.843 14840 14840 I zhengyu : SecondActivity.onStart
08-12 02:26:28.844 14840 14840 I zhengyu : SecondActivity.onResume
    
 
</rich_text>
			<rich_text weight="heavy"> ActivityStack.</rich_text>
			<rich_text foreground="#ffff00000000" weight="heavy">startActivityLocked</rich_text>
			<rich_text weight="heavy">()</rich_text>
			<rich_text>
     
2225    </rich_text>
			<rich_text weight="heavy">final</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=startActivityLocked&amp;project=m8996">startActivityLocked</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ActivityRecord&amp;project=m8996">ActivityRecord</rich_text>
			<rich_text> r, </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=newTask&amp;project=m8996">newTask</rich_text>
			<rich_text>,
2226            </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> doResume, </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> keepCurTransition, </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Bundle&amp;project=m8996">Bundle</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=options&amp;project=m8996">options</rich_text>
			<rich_text>) {
 //参数r描述的是打算启动的Activity

....
2310            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> ((r.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=intent&amp;project=m8996">intent</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getFlags&amp;project=m8996">getFlags</rich_text>
			<rich_text>() &amp; </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Intent&amp;project=m8996">Intent</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=FLAG_ACTIVITY_NO_ANIMATION&amp;project=m8996">FLAG_ACTIVITY_NO_ANIMATION</rich_text>
			<rich_text>) != 0) {
2311                mWindowManager.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=prepareAppTransition&amp;project=m8996">prepareAppTransition</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_NONE&amp;project=m8996">TRANSIT_NONE</rich_text>
			<rich_text>, keepCurTransition);
2312                mNoAnimActivities.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=add&amp;project=m8996">add</rich_text>
			<rich_text>(r);
2313            } </rich_text>
			<rich_text weight="heavy">else</rich_text>
			<rich_text> {
2314                mWindowManager.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=prepareAppTransition&amp;project=m8996">prepareAppTransition</rich_text>
			<rich_text>(newTask
2315                        ? r.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mLaunchTaskBehind&amp;project=m8996">mLaunchTaskBehind</rich_text>
			<rich_text>
2316                                ? </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_TASK_OPEN_BEHIND&amp;project=m8996">TRANSIT_TASK_OPEN_BEHIND</rich_text>
			<rich_text>
2317                                : </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_TASK_OPEN&amp;project=m8996">TRANSIT_TASK_OPEN</rich_text>
			<rich_text>
2318                        : </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_ACTIVITY_OPEN&amp;project=m8996">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text>, keepCurTransition);
2319                mNoAnimActivities.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=remove&amp;project=m8996">remove</rich_text>
			<rich_text>(r);
2320            }
    
    
    如果定义了FLAG_ACTIVITY_NO_ANIMATION将会使用AppTransition.TRANSIT_NONE属性表示没有动画
    如果 newTask &amp;&amp; mLaunchTaskBehind -&gt; TANSIT_TASK_OPEN_BEHIND
           newTask &amp;&amp; !mLaunchTaskBehind -&gt; TRANSIT_TASK_OPEN
           !newTask -&gt; TRANSIT_ACTIVITY_OPEN
    
 
</rich_text>
			<rich_text weight="heavy">WindowManagerService.prepareAppTransition()</rich_text>
			<rich_text>    
4184    </rich_text>
			<rich_text weight="heavy">public</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=prepareAppTransition&amp;project=m8996">prepareAppTransition</rich_text>
			<rich_text>(</rich_text>
			<rich_text weight="heavy">int</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>, </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=alwaysKeepCurrent&amp;project=m8996">alwaysKeepCurrent</rich_text>
			<rich_text>) {
4185        </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (!checkCallingPermission(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=android&amp;project=m8996">android</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Manifest&amp;project=m8996">Manifest</rich_text>
			<rich_text>.permission.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=MANAGE_APP_TOKENS&amp;project=m8996">MANAGE_APP_TOKENS</rich_text>
			<rich_text>,    //权限检查
4186                &quot;prepareAppTransition()&quot;)) {
4187            </rich_text>
			<rich_text weight="heavy">throw</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">new</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SecurityException&amp;project=m8996">SecurityException</rich_text>
			<rich_text>(&quot;Requires MANAGE_APP_TOKENS permission&quot;);
4188        }
4189
4190        </rich_text>
			<rich_text weight="heavy">synchronized</rich_text>
			<rich_text>(mWindowMap) {
4191            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (DEBUG_APP_TRANSITIONS) </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Slog&amp;project=m8996">Slog</rich_text>
			<rich_text>.v(TAG, &quot;Prepare app transition:&quot;
4192                    + &quot; transit=&quot; + </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=appTransitionToString&amp;project=m8996">appTransitionToString</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>)
4193                    + &quot; &quot; + mAppTransition
4194                    + &quot; alwaysKeepCurrent=&quot; + alwaysKeepCurrent
4195                    + &quot; Callers=&quot; + </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Debug&amp;project=m8996">Debug</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getCallers&amp;project=m8996">getCallers</rich_text>
			<rich_text>(3));
4196            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (!mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionSet&amp;project=m8996">isTransitionSet</rich_text>
			<rich_text>() || mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionNone&amp;project=m8996">isTransitionNone</rich_text>
			<rich_text>()) { //表示windowmanagerservice接下来没有activity组件切换动画等待执行，这时候参数transit描述的activity组件qiehuan 
4197                mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setAppTransition&amp;project=m8996">setAppTransition</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>);
4198            } </rich_text>
			<rich_text weight="heavy">else</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (!alwaysKeepCurrent) {
4199                </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text> == </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_TASK_OPEN&amp;project=m8996">TRANSIT_TASK_OPEN</rich_text>
			<rich_text>  //接下来的动画， 如果发现接下来的动画是TASK_CLOSE 而当前的transit是TASK_OPEN则覆盖，将接下来要执行的动画改为Task_OPEN, 因为open优先级高于close
4200                        &amp;&amp; mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionEqual&amp;project=m8996">isTransitionEqual</rich_text>
			<rich_text>(
4201                                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_TASK_CLOSE&amp;project=m8996">TRANSIT_TASK_CLOSE</rich_text>
			<rich_text>)) {
4202                    // Opening a new task always supersedes a close for the anim.
4203                    mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setAppTransition&amp;project=m8996">setAppTransition</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>);
4204                } </rich_text>
			<rich_text weight="heavy">else</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text> == </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_ACTIVITY_OPEN&amp;project=m8996">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text>
4205                        &amp;&amp; mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionEqual&amp;project=m8996">isTransitionEqual</rich_text>
			<rich_text>(
4206                            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_ACTIVITY_CLOSE&amp;project=m8996">TRANSIT_ACTIVITY_CLOSE</rich_text>
			<rich_text>)) {
4207                    // Opening a new activity always supersedes a close for the anim.
4208                    mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setAppTransition&amp;project=m8996">setAppTransition</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>);
4209                }
4210            }

4211            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (okToDisplay() &amp;&amp; mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=prepare&amp;project=m8996">prepare</rich_text>
			<rich_text>()) {
4212                mSkipAppTransitionAnimation = </rich_text>
			<rich_text weight="heavy">false</rich_text>
			<rich_text>;   //表示windowmanagerservice是否需要不执行Activity组件的切换动画
4213            }
4214            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionSet&amp;project=m8996">isTransitionSet</rich_text>
			<rich_text>()) {
4215                mH.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=removeMessages&amp;project=m8996">removeMessages</rich_text>
			<rich_text>(H.APP_TRANSITION_TIMEOUT); 
4216                mH.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=sendEmptyMessageDelayed&amp;project=m8996">sendEmptyMessageDelayed</rich_text>
			<rich_text>(H.APP_TRANSITION_TIMEOUT, 5000); //5s后执行timeout， 强制设置动画要在5s内完成，不然认为执行该动画超时
4217            }
4218        }
4219    }
4220
    
    AppTransition.isTransitionSet(){return mNextAppTransition != TRANSIT_UNSET}
    AppTransition.isTransitionNone(){return mNextAppTransition == TRANSIT_NONE}
    所以 </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (!mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionSet&amp;project=m8996">isTransitionSet</rich_text>
			<rich_text>() || mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionNone&amp;project=m8996">isTransitionNone</rich_text>
			<rich_text>()) 表示的是接下来没有需要准备的动画了
    
       </rich_text>
			<rich_text weight="heavy">alwaysKeepCurrent</rich_text>
			<rich_text> 这个参数是在ActivityStackSupervisor被定义然后在startActivityUncheckedLocked中被赋值的赋值代码如下，表示将要启动的Activity是在已经存在的Task中，就设为true。要注意这里的</rich_text>
			<rich_text weight="heavy">alwaysKeepCurrent</rich_text>
			<rich_text>前面！
       
                </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (!</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=addingToTask&amp;project=m8996">addingToTask</rich_text>
			<rich_text> &amp;&amp; (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=launchFlags&amp;project=m8996">launchFlags</rich_text>
			<rich_text>&amp;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Intent&amp;project=m8996">Intent</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=FLAG_ACTIVITY_CLEAR_TOP&amp;project=m8996">FLAG_ACTIVITY_CLEAR_TOP</rich_text>
			<rich_text>) != 0) {
2456                // In this case, we are adding the activity to an existing
2457                // task, but the caller has asked to clear that task if the
2458                // activity is already running.
2459                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ActivityRecord&amp;project=m8996">ActivityRecord</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=top&amp;project=m8996">top</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=sourceTask&amp;project=m8996">sourceTask</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=performClearTaskLocked&amp;project=m8996">performClearTaskLocked</rich_text>
			<rich_text>(r, </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=launchFlags&amp;project=m8996">launchFlags</rich_text>
			<rich_text>);
2460                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=keepCurTransition&amp;project=m8996">keepCurTransition</rich_text>
			<rich_text> = </rich_text>
			<rich_text weight="heavy">true</rich_text>
			<rich_text>;
 ... ...
 }
       
       246    </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=isTransitionEqual&amp;project=m8996">isTransitionEqual</rich_text>
			<rich_text>(</rich_text>
			<rich_text weight="heavy">int</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>) {
247        </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text> mNextAppTransition == </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>;
248    }

254    </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=setAppTransition&amp;project=m8996">setAppTransition</rich_text>
			<rich_text>(</rich_text>
			<rich_text weight="heavy">int</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>) {
255        mNextAppTransition = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>;
256    }
257

-----

//表示屏幕不是处于冻屏且允许显示且屏幕是亮起的
3630    </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=okToDisplay&amp;project=m8996">okToDisplay</rich_text>
			<rich_text>() {
3631        </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text> !mDisplayFrozen &amp;&amp; mDisplayEnabled &amp;&amp; mPolicy.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isScreenOn&amp;project=m8996">isScreenOn</rich_text>
			<rich_text>();
3632    }


  这个时候切换动画准备完成，但是还不能执行， 需要等到前面的激活的activity组件进入到paused状态，并且接下来的activity进入到resume状态后执行
  
   
   
   
   
  接着前面的startActivityLocked在调用完WindowManagerService.prepareAppTransition以后继续调用resumeTopActivitiesLocked
 ActivityStackSupervisor.resumeTopActivitiesLocked  -&gt; </rich_text>
			<rich_text foreground="#ffff00000000" weight="heavy">ActivityStack.resumeTopActivityLocked</rich_text>
			<rich_text> -&gt; </rich_text>
			<rich_text foreground="#ffff00000000" weight="heavy">ActivityStack.resumeTopActivityInnerLocked</rich_text>
			<rich_text>
 resumeTopActivityInnerLocked 是ActivityStack中比较重要的一个方法，这里与AppTransition相关的主要有
  1) 通知当前处以激活状态的Activity所运行的进程，它所运行的Activity将由Resumed -&gt; Paused
  2) 再次调用PrepareAppTransition准备上一个Activity离开的动画
  3）调用ActivityStackSupervisor.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=startSpecificActivityLocked&amp;project=m8996">startSpecificActivityLocked</rich_text>
			<rich_text> 继续启动Activity
  
  
  -&gt; ActivityStackSupervisor.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=startSpecificActivityLocked&amp;project=m8996">startSpecificActivityLocked</rich_text>
			<rich_text>
             --&gt;  ActivityStackSuperviser.</rich_text>
			<rich_text foreground="#000000">realStartActivityLocked</rich_text>
			<rich_text>  //检查用来运行当前正在启动的Activity组件的应用进程是否已经启动来了。如果已经启动起来，那么就会直接通知该应用程序进程将正在启动的Activity加载起来，否则的话，就会先将该应用程序进程启动起来，然后再通知它将正在启动的Activity组件加载
</rich_text>
			<rich_text weight="heavy">ActivityStackSuperviser.</rich_text>
			<rich_text foreground="#000000" weight="heavy">realStartActivityLocked</rich_text>
			<rich_text weight="heavy"> </rich_text>
			<rich_text>
        </rich_text>
			<rich_text foreground="#cc7832">final boolean </rich_text>
			<rich_text foreground="#ffc66d">realStartActivityLocked</rich_text>
			<rich_text>(ActivityRecord r</rich_text>
			<rich_text foreground="#cc7832">,
                </rich_text>
			<rich_text>ProcessRecord app</rich_text>
			<rich_text foreground="#cc7832">, boolean </rich_text>
			<rich_text>andResume</rich_text>
			<rich_text foreground="#cc7832">, boolean </rich_text>
			<rich_text>checkConfig)
                </rich_text>
			<rich_text foreground="#cc7832">throws </rich_text>
			<rich_text>RemoteException {  
            </rich_text>
			<rich_text foreground="#cc7832">if </rich_text>
			<rich_text>(andResume) {
                r.startFreezingScreenLocked(app</rich_text>
			<rich_text foreground="#cc7832">, </rich_text>
			<rich_text foreground="#6897bb">0</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
                </rich_text>
			<rich_text foreground="#9876aa">mWindowManager</rich_text>
			<rich_text>.setAppVisibility(r.</rich_text>
			<rich_text foreground="#9876aa">appToken</rich_text>
			<rich_text foreground="#cc7832">, true</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;

                </rich_text>
			<rich_text foreground="#808080">// schedule launch ticks to collect information about slow apps.
                </rich_text>
			<rich_text>r.startLaunchTickingLocked()</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>    }
 }
 
 ......
app.</rich_text>
			<rich_text foreground="#9876aa">thread</rich_text>
			<rich_text>.scheduleLaunchActivity(</rich_text>
			<rich_text foreground="#cc7832">new </rich_text>
			<rich_text>Intent(r.</rich_text>
			<rich_text foreground="#9876aa">intent</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">, </rich_text>
			<rich_text>r.</rich_text>
			<rich_text foreground="#9876aa">appToken</rich_text>
			<rich_text foreground="#cc7832">,
        </rich_text>
			<rich_text>System.</rich_text>
			<rich_text style="italic">identityHashCode</rich_text>
			<rich_text>(r)</rich_text>
			<rich_text foreground="#cc7832">, </rich_text>
			<rich_text>r.</rich_text>
			<rich_text foreground="#9876aa">info</rich_text>
			<rich_text foreground="#cc7832">, new </rich_text>
			<rich_text>Configuration(</rich_text>
			<rich_text foreground="#9876aa">mService</rich_text>
			<rich_text>.</rich_text>
			<rich_text foreground="#9876aa">mConfiguration</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">,
        new </rich_text>
			<rich_text>Configuration(stack.</rich_text>
			<rich_text foreground="#9876aa">mOverrideConfig</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">, </rich_text>
			<rich_text>r.</rich_text>
			<rich_text foreground="#9876aa">compat</rich_text>
			<rich_text foreground="#cc7832">, </rich_text>
			<rich_text>r.</rich_text>
			<rich_text foreground="#9876aa">launchedFromPackage</rich_text>
			<rich_text foreground="#cc7832">,
        </rich_text>
			<rich_text>task.</rich_text>
			<rich_text foreground="#9876aa">voiceInteractor</rich_text>
			<rich_text foreground="#cc7832">, </rich_text>
			<rich_text>app.</rich_text>
			<rich_text foreground="#9876aa">repProcState</rich_text>
			<rich_text foreground="#cc7832">, </rich_text>
			<rich_text>r.</rich_text>
			<rich_text foreground="#9876aa">icicle</rich_text>
			<rich_text foreground="#cc7832">, </rich_text>
			<rich_text>r.</rich_text>
			<rich_text foreground="#9876aa">persistentState</rich_text>
			<rich_text foreground="#cc7832">, </rich_text>
			<rich_text>results</rich_text>
			<rich_text foreground="#cc7832">,
        </rich_text>
			<rich_text>newIntents</rich_text>
			<rich_text foreground="#cc7832">, </rich_text>
			<rich_text>!andResume</rich_text>
			<rich_text foreground="#cc7832">, </rich_text>
			<rich_text foreground="#9876aa">mService</rich_text>
			<rich_text>.isNextTransitionForward()</rich_text>
			<rich_text foreground="#cc7832">, </rich_text>
			<rich_text>profilerInfo)</rich_text>
			<rich_text foreground="#cc7832">;
        ...
        if (andResume) {
    </rich_text>
			<rich_text foreground="#808080">// As part of the process of launching, ActivityThread also performs
    // a resume.
    </rich_text>
			<rich_text>stack.minimalResumeActivityLocked(r);
} else {
    </rich_text>
			<rich_text foreground="#808080">// This activity is not starting in the resumed state... which
    // should look like we asked it to pause+stop (but remain visible),
    // and it has done so and reported back the current icicle and
    // other state.
    </rich_text>
			<rich_text>if (</rich_text>
			<rich_text foreground="#9876aa" style="italic">DEBUG_STATES</rich_text>
			<rich_text foreground="#9876aa">) Slog.</rich_text>
			<rich_text foreground="#9876aa" style="italic">v</rich_text>
			<rich_text foreground="#9876aa">(</rich_text>
			<rich_text foreground="#9876aa" style="italic">TAG_STATES</rich_text>
			<rich_text>,
            </rich_text>
			<rich_text foreground="#6a8759">&quot;Moving to STOPPED: &quot; </rich_text>
			<rich_text>+ r + </rich_text>
			<rich_text foreground="#6a8759">&quot; (starting in stopped state)&quot;</rich_text>
			<rich_text>);
    r.</rich_text>
			<rich_text foreground="#9876aa">state </rich_text>
			<rich_text>= </rich_text>
			<rich_text foreground="#9876aa" style="italic">STOPPED</rich_text>
			<rich_text>;
    r.</rich_text>
			<rich_text foreground="#9876aa">stopped </rich_text>
			<rich_text>= true;
}
...

app.</rich_text>
			<rich_text foreground="#9876aa">thread</rich_text>
			<rich_text>.scheduleLaunchActivity 真正执行了对Activity的启动
app.</rich_text>
			<rich_text foreground="#9876aa">thread</rich_text>
			<rich_text>.scheduleLaunchActivity -&gt; ApplicationThreadNative.scheduleLaunchActivity -&gt;  ActivityThread.scheduleLaunchActivity 
ActivityThread send LAUNCH_ACTIVITY -&gt;ActivityThread. handleLaunchActivity  -&gt;ActivityThread.performLaunchActivity
-&gt; Instrumentation-&gt;callActivityOnCreate()  



                    </rich_text>
			<rich_text weight="heavy">  ---&gt;windowManagerService.setAppVisibility</rich_text>
			<rich_text>


</rich_text>
			<rich_text background="#ffffff" foreground="#006699" weight="heavy">1. public</rich_text>
			<rich_text background="#ffffff" foreground="#000000"> </rich_text>
			<rich_text background="#ffffff" foreground="#006699" weight="heavy">void</rich_text>
			<rich_text background="#ffffff" foreground="#000000"> setAppVisibility(IBinder token, </rich_text>
			<rich_text background="#ffffff" foreground="#006699" weight="heavy">boolean</rich_text>
			<rich_text background="#ffffff" foreground="#000000"> visible) {  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">2.     </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">if</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000"> (!checkCallingPermission(android.Manifest.permission.MANAGE_APP_TOKENS,  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">3.             </rich_text>
			<rich_text background="#ffffff" foreground="#0000ff">&quot;setAppVisibility()&quot;</rich_text>
			<rich_text background="#ffffff" foreground="#000000">)) {  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">4.         </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">throw</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000"> </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">new</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000"> SecurityException(</rich_text>
			<rich_text background="#f8f8f8" foreground="#0000ff">&quot;Requires MANAGE_APP_TOKENS permission&quot;</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">);  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">5.     }  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">6.   </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">7.     AppWindowToken wtoken;  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">8.   </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">9.     </rich_text>
			<rich_text background="#ffffff" foreground="#006699" weight="heavy">synchronized</rich_text>
			<rich_text background="#ffffff" foreground="#000000">(mWindowMap) {  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">10.         wtoken = findAppWindowToken(token);  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">11.         </rich_text>
			<rich_text background="#ffffff" foreground="#006699" weight="heavy">if</rich_text>
			<rich_text background="#ffffff" foreground="#000000"> (wtoken == </rich_text>
			<rich_text background="#ffffff" foreground="#006699" weight="heavy">null</rich_text>
			<rich_text background="#ffffff" foreground="#000000">) {  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">12.             Slog.w(TAG, </rich_text>
			<rich_text background="#f8f8f8" foreground="#0000ff">&quot;Attempted to set visibility of non-existing app token: &quot;</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000"> + token);  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">13.             </rich_text>
			<rich_text background="#ffffff" foreground="#006699" weight="heavy">return</rich_text>
			<rich_text background="#ffffff" foreground="#000000">;  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">14.         }  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">15.         mOpeningApps.remove(wtoken);  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">16.         mClosingApps.remove(wtoken);  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">17.         wtoken.waitingToShow = </rich_text>
			<rich_text background="#ffffff" foreground="#006699" weight="heavy">false</rich_text>
			<rich_text background="#ffffff" foreground="#000000">;  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">18.         wtoken.hiddenRequested = !visible;  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">19.   </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">20.         </rich_text>
			<rich_text background="#f8f8f8" foreground="#008200">// If we are preparing an app transition, then delay changing</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">21.         </rich_text>
			<rich_text background="#ffffff" foreground="#008200">// the visibility of this token until we execute that transition.</rich_text>
			<rich_text background="#ffffff" foreground="#000000">  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">22.         </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">if</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000"> (okToDisplay() &amp;&amp; mAppTransition.isTransitionSet()) {  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">23.             </rich_text>
			<rich_text background="#ffffff" foreground="#008200">// A dummy animation is a placeholder animation which informs others that an</rich_text>
			<rich_text background="#ffffff" foreground="#000000">  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">24.             </rich_text>
			<rich_text background="#f8f8f8" foreground="#008200">// animation is going on (in this case an application transition). If the animation</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">25.             </rich_text>
			<rich_text background="#ffffff" foreground="#008200">// was transferred from another application/animator, no dummy animator should be</rich_text>
			<rich_text background="#ffffff" foreground="#000000">  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">26.             </rich_text>
			<rich_text background="#f8f8f8" foreground="#008200">// created since an animation is already in progress.</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">27.             </rich_text>
			<rich_text background="#ffffff" foreground="#006699" weight="heavy">if</rich_text>
			<rich_text background="#ffffff" foreground="#000000"> (!wtoken.mAppAnimator.usingTransferredAnimation &amp;&amp;  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">28.                     (!wtoken.startingDisplayed || mSkipAppTransitionAnimation)) {  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">29.                 wtoken.mAppAnimator.setDummyAnimation();  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">30.             }  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">31.             wtoken.inPendingTransaction = </rich_text>
			<rich_text background="#ffffff" foreground="#006699" weight="heavy">true</rich_text>
			<rich_text background="#ffffff" foreground="#000000">;  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">32.             </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">if</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000"> (visible) {  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">33.                 mOpeningApps.add(wtoken);  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">34.                 wtoken.startingMoved = </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">false</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">;  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">35.                 wtoken.mEnteringAnimation = </rich_text>
			<rich_text background="#ffffff" foreground="#006699" weight="heavy">true</rich_text>
			<rich_text background="#ffffff" foreground="#000000">;  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">36.   </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">37.                 </rich_text>
			<rich_text background="#ffffff" foreground="#008200">// If the token is currently hidden (should be the</rich_text>
			<rich_text background="#ffffff" foreground="#000000">  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">38.                 </rich_text>
			<rich_text background="#f8f8f8" foreground="#008200">// common case), then we need to set up to wait for</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">39.                 </rich_text>
			<rich_text background="#ffffff" foreground="#008200">// its windows to be ready.</rich_text>
			<rich_text background="#ffffff" foreground="#000000">  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">40.                 </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">if</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000"> (wtoken.hidden) {  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">41.                     wtoken.allDrawn = </rich_text>
			<rich_text background="#ffffff" foreground="#006699" weight="heavy">false</rich_text>
			<rich_text background="#ffffff" foreground="#000000">;  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">42.                     wtoken.deferClearAllDrawn = </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">false</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">;  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">43.                     wtoken.waitingToShow = </rich_text>
			<rich_text background="#ffffff" foreground="#006699" weight="heavy">true</rich_text>
			<rich_text background="#ffffff" foreground="#000000">;  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">44.   </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">45.                     </rich_text>
			<rich_text background="#ffffff" foreground="#006699" weight="heavy">if</rich_text>
			<rich_text background="#ffffff" foreground="#000000"> (wtoken.clientHidden) {  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">46.                         </rich_text>
			<rich_text background="#f8f8f8" foreground="#008200">// In the case where we are making an app visible</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">47.                         </rich_text>
			<rich_text background="#ffffff" foreground="#008200">// but holding off for a transition, we still need</rich_text>
			<rich_text background="#ffffff" foreground="#000000">  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">48.                         </rich_text>
			<rich_text background="#f8f8f8" foreground="#008200">// to tell the client to make its windows visible so</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">49.                         </rich_text>
			<rich_text background="#ffffff" foreground="#008200">// they get drawn.  Otherwise, we will wait on</rich_text>
			<rich_text background="#ffffff" foreground="#000000">  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">50.                         </rich_text>
			<rich_text background="#f8f8f8" foreground="#008200">// performing the transition until all windows have</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">51.                         </rich_text>
			<rich_text background="#ffffff" foreground="#008200">// been drawn, they never will be, and we are sad.</rich_text>
			<rich_text background="#ffffff" foreground="#000000">  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">52.                         wtoken.clientHidden = </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">false</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">;  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">53.                         wtoken.sendAppVisibilityToClients();  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">54.                     }  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">55.                 }  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">56.             } </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">else</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000"> {  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">57.                 mClosingApps.add(wtoken);  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">58.                 wtoken.mEnteringAnimation = </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">false</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">;  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">59.             }  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">60.             </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">if</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000"> (mAppTransition.getAppTransition() == AppTransition.TRANSIT_TASK_OPEN_BEHIND) {  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">61.                 </rich_text>
			<rich_text background="#ffffff" foreground="#008200">// We're launchingBehind, add the launching activity to mOpeningApps.</rich_text>
			<rich_text background="#ffffff" foreground="#000000">  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">62.                 </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">final</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000"> WindowState win =  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">63.                         findFocusedWindowLocked(getDefaultDisplayContentLocked());  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">64.                 </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">if</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000"> (win != </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">null</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">) {  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">65.                     </rich_text>
			<rich_text background="#ffffff" foreground="#006699" weight="heavy">final</rich_text>
			<rich_text background="#ffffff" foreground="#000000"> AppWindowToken focusedToken = win.mAppToken;  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">66.                     </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">if</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000"> (focusedToken != </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">null</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">) {  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">67.                         </rich_text>
			<rich_text background="#ffffff" foreground="#006699" weight="heavy">if</rich_text>
			<rich_text background="#ffffff" foreground="#000000"> (DEBUG_APP_TRANSITIONS) Slog.d(TAG, </rich_text>
			<rich_text background="#ffffff" foreground="#0000ff">&quot;TRANSIT_TASK_OPEN_BEHIND, &quot;</rich_text>
			<rich_text background="#ffffff" foreground="#000000"> +  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">68.                                 </rich_text>
			<rich_text background="#f8f8f8" foreground="#0000ff">&quot; adding &quot;</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000"> + focusedToken + </rich_text>
			<rich_text background="#f8f8f8" foreground="#0000ff">&quot; to mOpeningApps&quot;</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">);  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">69.                         </rich_text>
			<rich_text background="#ffffff" foreground="#008200">// Force animation to be loaded.</rich_text>
			<rich_text background="#ffffff" foreground="#000000">  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">70.                         focusedToken.hidden = </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">true</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">;  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">71.                         mOpeningApps.add(focusedToken);  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">72.                     }  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">73.                 }  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">74.             }  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">75.             </rich_text>
			<rich_text background="#ffffff" foreground="#006699" weight="heavy">return</rich_text>
			<rich_text background="#ffffff" foreground="#000000">;  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">76.         }  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">77.   </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">78.         </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">final</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000"> </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">long</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000"> origId = Binder.clearCallingIdentity();  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">79.         wtoken.inPendingTransaction = </rich_text>
			<rich_text background="#ffffff" foreground="#006699" weight="heavy">false</rich_text>
			<rich_text background="#ffffff" foreground="#000000">;  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">80.         setTokenVisibilityLocked(wtoken, </rich_text>
			<rich_text background="#f8f8f8" foreground="#006699" weight="heavy">null</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">, visible, AppTransition.TRANSIT_UNSET,  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">81.                 </rich_text>
			<rich_text background="#ffffff" foreground="#006699" weight="heavy">true</rich_text>
			<rich_text background="#ffffff" foreground="#000000">, wtoken.voiceInteraction);  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">82.         wtoken.updateReportedVisibilityLocked();  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">83.         Binder.restoreCallingIdentity(origId);  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#f8f8f8" foreground="#000000">84.     }  </rich_text>
			<rich_text>
</rich_text>
			<rich_text background="#ffffff" foreground="#000000">85. }  </rich_text>
			<rich_text>
                            1.首先通过findWindowToken获取与这个Activity关联的AppWindowToken, 每个Activity在windowManagerService都会有对应的AppWindowToken对象，用来描述Activity在windowManagerService的状态
                             2.然后根据mNextAppTransition的值来确定当前的Activity是否需要动画的跳转， 如果其mNextAppTransition为TRANSIT_UNSET 说明参数token所描述的Activity就是正在等待执行切换操作的Activity组件
                      
                      </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=wtoken&amp;project=m8996">wtoken</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=hiddenRequested&amp;project=m8996">hiddenRequested</rich_text>
			<rich_text> = !</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=visible&amp;project=m8996">visible</rich_text>
			<rich_text>;   //设置为可见
                      </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (okToDisplay() &amp;&amp; mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionSet&amp;project=m8996">isTransitionSet</rich_text>
			<rich_text>()) {
                            //修改token的可见性
                      }
                      
                      
                              okToDisplay(){
                                  </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text> !mDisplayFrozen &amp;&amp; mDisplayEnabled &amp;&amp; mPolicy.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isScreenOn&amp;project=m8996">isScreenOn</rich_text>
			<rich_text>();
                              }
                              1）屏幕不是处于冻结状态 ！mDisplayFrozen
                              2）允许display
                              3）当前屏幕是点亮的 mPolicy.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isScreenOn&amp;project=m8996">isScreenOn</rich_text>
			<rich_text>();
                             
                             mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionSet&amp;project=m8996">isTransitionSet</rich_text>
			<rich_text>()
                             mNextAppTransition != TRANSIT_UNSET;
 
              -&gt; ActivityStack.</rich_text>
			<rich_text weight="heavy">completeResumeLocked</rich_text>
			<rich_text>
              1. mStackSupervisor.scheduleIdleTimeoutLocked(next)
              ActivityStackSupervisor
            3870    </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=scheduleIdleTimeoutLocked&amp;project=m8996">scheduleIdleTimeoutLocked</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ActivityRecord&amp;project=m8996">ActivityRecord</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=next&amp;project=m8996">next</rich_text>
			<rich_text>) {
            。。。
            3873        </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Message&amp;project=m8996">Message</rich_text>
			<rich_text> msg = mHandler.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=obtainMessage&amp;project=m8996">obtainMessage</rich_text>
			<rich_text>(IDLE_TIMEOUT_MSG, next);
            3874        mHandler.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=sendMessageDelayed&amp;project=m8996">sendMessageDelayed</rich_text>
			<rich_text>(msg, IDLE_TIMEOUT);
            3875    }

   向ActivityManager发送IDLE_TIMEOUT_MSG消息， 这个消息将在IDOLE_TIMEOUT_MSG 毫秒后处理，用来监控WindowManagerService服务能否在IDLE_TIMEOUT毫秒内完成参数Next所描述的动画，并将窗口显示出来，如果能够做到的话，windowmanagerservice就会通知activitymanagerservice， 然后由activitymanagerservice做一些清理服务，如那些已经stopped状态的activity清理掉。即使做不到，ActivityManager还是要完成这个清理的过程
        
  2. mStackSupervisor.</rich_text>
			<rich_text weight="heavy">reportResumedActivityLocked</rich_text>
			<rich_text>
     a. ensureActivitiesComplete -&gt; ActivityStack.ensureActivitiesVisibleLocked
     b. mWindowManager.executeAppTransition
     
  
  
  
  
  
</rich_text>
			<rich_text weight="heavy">  ActivityStack.ensureActivitiesVisibleLocked(ActivityRecord starting, int configChanges)</rich_text>
			<rich_text>
  
  ActivityRecord 是Activity组件在ActivityManagerService的部分，用来表示Activity的状态, starting表示要启动的组件
  1.通过topRunningActivityLocked获取topActivity的ActivityRecord
  2.遍历TaskHistory, 以及每个Tast的activity， 设置正确的状态， 如果一个Activity正在finish， 跳过
  3. r.app == null ， r.app.thread == null 表示应用还没起来， 会先通过r.visible来确定这个activity是否可见， 如果不可见，则通过setVisible通知windowManagerservice将其设为可见， 查看该activity组件是否starting描述的组件，如果不是通过startSpecificActivityLocked启动该组件
  4.如果Activity已经跑起来了且Activity已经是可见，那就什么都不用做
  5.如果Activity已经跑起来了但是仍旧是不可见的，需要将r.visible设为true， 然后查看是否是resume状态， 与starting是否同一个组件， 如果检查图哦功能过， 将其设为可见。
  
  
  WindowManager.executeAppTransition
  
  4279    @</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Override&amp;project=m8996">Override</rich_text>
			<rich_text>
4280    </rich_text>
			<rich_text weight="heavy">public</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=executeAppTransition&amp;project=m8996">executeAppTransition</rich_text>
			<rich_text>() {
              </rich_text>
			<rich_text foreground="#8b8b69691414">//检查权限</rich_text>
			<rich_text>
4281        </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (!checkCallingPermission(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=android&amp;project=m8996">android</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Manifest&amp;project=m8996">Manifest</rich_text>
			<rich_text>.permission.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=MANAGE_APP_TOKENS&amp;project=m8996">MANAGE_APP_TOKENS</rich_text>
			<rich_text>,
4282                &quot;executeAppTransition()&quot;)) {     
4283            </rich_text>
			<rich_text weight="heavy">throw</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">new</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SecurityException&amp;project=m8996">SecurityException</rich_text>
			<rich_text>(&quot;Requires MANAGE_APP_TOKENS permission&quot;);
4284        }
4285
4286        </rich_text>
			<rich_text weight="heavy">synchronized</rich_text>
			<rich_text>(mWindowMap) {
4287            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (DEBUG_APP_TRANSITIONS) </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Slog&amp;project=m8996">Slog</rich_text>
			<rich_text>.w(TAG, &quot;Execute app transition: &quot; + mAppTransition
4288                    + &quot; Callers=&quot; + </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Debug&amp;project=m8996">Debug</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getCallers&amp;project=m8996">getCallers</rich_text>
			<rich_text>(5));
4289            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionSet&amp;project=m8996">isTransitionSet</rich_text>
			<rich_text>()) { </rich_text>
			<rich_text foreground="#8b8b69691414">//当之前一个Activity准备好，即nextAppTransition ！= TRANSIT_UNSET 时候, 执行performLayoutAndPlaceSurfaceLocked</rich_text>
			<rich_text>
4290                mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setReady&amp;project=m8996">setReady</rich_text>
			<rich_text>();
4291                </rich_text>
			<rich_text weight="heavy">final</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">long</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=origId&amp;project=m8996">origId</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Binder&amp;project=m8996">Binder</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=clearCallingIdentity&amp;project=m8996">clearCallingIdentity</rich_text>
			<rich_text>();
4292                </rich_text>
			<rich_text weight="heavy">try</rich_text>
			<rich_text> {
4293                    </rich_text>
			<rich_text weight="heavy">performLayoutAndPlaceSurfacesLocked</rich_text>
			<rich_text>();
4294                } </rich_text>
			<rich_text weight="heavy">finally</rich_text>
			<rich_text> {
4295                    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Binder&amp;project=m8996">Binder</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=restoreCallingIdentity&amp;project=m8996">restoreCallingIdentity</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=origId&amp;project=m8996">origId</rich_text>
			<rich_text>);
4296                }
4297            }
4298        }
4299    }
  
  
  WindowManager.performLayoutAndPlaceSurfacesLocked
  1.检查是否有窗口回收，如果有的话，调用removeWindowInnerLocked将他们从系统中移除
  2.调用</rich_text>
			<rich_text weight="heavy">performLayoutAndPlaceSurcacesLockedInner</rich_text>
			<rich_text>来刷新系统UI， 包括执行在前面准备的Activity组件切换操作
  3.在执行上面的操作中，如果又有一些窗口要被移除，再调用removiWindowInnerLocked来清除， 并再次递归调用performLayoutAndPlaceSurfacesLockedInner
  
  
  WindowManagerService.performLayoutAndPlaceSurfacesLockedInner
   这个方法是整个WindowManagerService的核心
   1. 计算各个窗口大小，updateFocusdWindowLocked中的performLayoutLockedInner来实现
   2. 计算各个窗口接下来要执行的动画
   3. 执行各个窗口动画
   4. 检查当前是否需要执行Activity组件切换操作，也就是检查成员变量mAppTransitionReady是否为true， 如果等于的话，那么接下来就会执行这个Activity组件切换操作，就是给正在切换的Activity组件应用一个切换动作
        adjustWallpaperWindowsLocked   函数来实现保证壁纸窗口目前是位于那些需要显示壁纸的窗口下面的
    a)handleAppTransitionReadyLocked
         数组mOpenningApps表示正在打开的activity, allDrawn表示绘制完成

AppTransition.</rich_text>
			<rich_text background="#ffffff" foreground="#333333">TRANSIT_WALLPAPER_INTRA_OPEN</rich_text>
			<rich_text> 这种类型的切换动画与打开壁纸窗口相关的
AppTransition</rich_text>
			<rich_text background="#ffffff" foreground="#333333">.TRANSIT_WALLPAPER_INTRA_CLOSE</rich_text>
			<rich_text> 这种类型的切换动画是与关闭壁纸窗口相关的
 
AppTransition.TRANSIT_WALLPAPER_CLOSE 这种类型的切换动画是从一个需要显示壁纸的Activity组件切换到一个不需要显示壁纸的Activity组件上去
AppTransition.TRANSIT_WALLPAPER_OPEN 从一个不需要显示壁纸的Activity组件切换到需要显示壁纸的Activity组件上去

在调整壁纸窗口堆栈的位置的时候，如果刚好碰到系统在执行两个Activity组件的切换， 并且这两个Activity组件都需要显示壁纸，那么Z轴较低的窗口就会保存在mLowerWall

ActivityRe



   5.
   
   
   
   
   adjustWallpaperWindowsLocked
调整壁纸窗口在窗口堆栈中的位置，使得它位于需要显示壁纸的窗口下面

    检查当前正在运行的Activity是否带有walpape, 如果有则设置 mTargetWallpaper </rich_text>
			<rich_text foreground="#9876aa">mLowerWallpaperTarget</rich_text>
			<rich_text> 
mTargetWallpaper 如果不为Null ， 那么其指向的WindowState对象描述的是系统当前可见的并且需要显示壁纸的窗口


   </rich_text>
			<rich_text foreground="#cc7832">final boolean </rich_text>
			<rich_text>hasWallpaper = (w.</rich_text>
			<rich_text foreground="#9876aa">mAttrs</rich_text>
			<rich_text>.</rich_text>
			<rich_text foreground="#9876aa">flags</rich_text>
			<rich_text>&amp;</rich_text>
			<rich_text foreground="#9876aa" style="italic">FLAG_SHOW_WALLPAPER</rich_text>
			<rich_text foreground="#9876aa">) != </rich_text>
			<rich_text foreground="#6897bb">0
        </rich_text>
			<rich_text>|| (w.</rich_text>
			<rich_text foreground="#9876aa">mAppToken </rich_text>
			<rich_text>!= </rich_text>
			<rich_text foreground="#cc7832">null
                </rich_text>
			<rich_text>&amp;&amp; w.</rich_text>
			<rich_text foreground="#9876aa">mWinAnimator</rich_text>
			<rich_text>.</rich_text>
			<rich_text foreground="#9876aa">mKeyguardGoingAwayAnimation</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
if </rich_text>
			<rich_text>(hasWallpaper &amp;&amp; w.isOnScreen()
        &amp;&amp; (</rich_text>
			<rich_text foreground="#9876aa">mWallpaperTarget </rich_text>
			<rich_text>== w || w.isDrawFinishedLw())) {
    </rich_text>
			<rich_text foreground="#cc7832">if </rich_text>
			<rich_text>(</rich_text>
			<rich_text foreground="#9876aa" style="italic">DEBUG_WALLPAPER</rich_text>
			<rich_text foreground="#9876aa">) Slog.</rich_text>
			<rich_text foreground="#9876aa" style="italic">v</rich_text>
			<rich_text foreground="#9876aa">(</rich_text>
			<rich_text foreground="#9876aa" style="italic">TAG</rich_text>
			<rich_text foreground="#cc7832">,
            </rich_text>
			<rich_text foreground="#6a8759">&quot;Found wallpaper target: #&quot; </rich_text>
			<rich_text>+ i + </rich_text>
			<rich_text foreground="#6a8759">&quot;=&quot; </rich_text>
			<rich_text>+ w)</rich_text>
			<rich_text foreground="#cc7832">;
    </rich_text>
			<rich_text>foundW = w</rich_text>
			<rich_text foreground="#cc7832">;
    </rich_text>
			<rich_text>foundI = i</rich_text>
			<rich_text foreground="#cc7832">;
    if </rich_text>
			<rich_text>(w == </rich_text>
			<rich_text foreground="#9876aa">mWallpaperTarget </rich_text>
			<rich_text>&amp;&amp; w.</rich_text>
			<rich_text foreground="#9876aa">mWinAnimator</rich_text>
			<rich_text>.isAnimating()) {
        </rich_text>
			<rich_text foreground="#808080">// The current wallpaper target is animating, so we'll
        // look behind it for another possible target and figure
        // out what is going on below.
        </rich_text>
			<rich_text foreground="#cc7832">if </rich_text>
			<rich_text>(</rich_text>
			<rich_text foreground="#9876aa" style="italic">DEBUG_WALLPAPER</rich_text>
			<rich_text foreground="#9876aa">) Slog.</rich_text>
			<rich_text foreground="#9876aa" style="italic">v</rich_text>
			<rich_text foreground="#9876aa">(</rich_text>
			<rich_text foreground="#9876aa" style="italic">TAG</rich_text>
			<rich_text foreground="#cc7832">, </rich_text>
			<rich_text foreground="#6a8759">&quot;Win &quot; </rich_text>
			<rich_text>+ w
                + </rich_text>
			<rich_text foreground="#6a8759">&quot;: token animating, looking behind.&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
        continue;
    </rich_text>
			<rich_text>}
    </rich_text>
			<rich_text foreground="#cc7832">break;</rich_text>
			<rich_text>
   


</rich_text>
			<rich_text foreground="#cc7832">if </rich_text>
			<rich_text>(</rich_text>
			<rich_text foreground="#9876aa">mWallpaperTarget </rich_text>
			<rich_text>!= foundW
        &amp;&amp; (</rich_text>
			<rich_text foreground="#9876aa">mLowerWallpaperTarget </rich_text>
			<rich_text>== </rich_text>
			<rich_text foreground="#cc7832">null </rich_text>
			<rich_text>|| </rich_text>
			<rich_text foreground="#9876aa">mLowerWallpaperTarget </rich_text>
			<rich_text>!= foundW)) {
    </rich_text>
			<rich_text foreground="#cc7832">if </rich_text>
			<rich_text>(</rich_text>
			<rich_text foreground="#9876aa" style="italic">DEBUG_WALLPAPER_LIGHT</rich_text>
			<rich_text foreground="#9876aa">) {
        Slog.</rich_text>
			<rich_text foreground="#9876aa" style="italic">v</rich_text>
			<rich_text foreground="#9876aa">(</rich_text>
			<rich_text foreground="#9876aa" style="italic">TAG</rich_text>
			<rich_text foreground="#cc7832">, </rich_text>
			<rich_text foreground="#6a8759">&quot;New wallpaper target: &quot; </rich_text>
			<rich_text>+ foundW
                + </rich_text>
			<rich_text foreground="#6a8759">&quot; oldTarget: &quot; </rich_text>
			<rich_text>+ </rich_text>
			<rich_text foreground="#9876aa">mWallpaperTarget</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
    </rich_text>
			<rich_text>}

    </rich_text>
			<rich_text foreground="#9876aa">mLowerWallpaperTarget </rich_text>
			<rich_text>= </rich_text>
			<rich_text foreground="#cc7832">null;
    </rich_text>
			<rich_text foreground="#9876aa">mUpperWallpaperTarget </rich_text>
			<rich_text>= </rich_text>
			<rich_text foreground="#cc7832">null;

    </rich_text>
			<rich_text>WindowState oldW = </rich_text>
			<rich_text foreground="#9876aa">mWallpaperTarget</rich_text>
			<rich_text foreground="#cc7832">;
    </rich_text>
			<rich_text foreground="#9876aa">mWallpaperTarget </rich_text>
			<rich_text>= foundW</rich_text>
			<rich_text foreground="#cc7832">;
    </rich_text>
			<rich_text>targetChanged = </rich_text>
			<rich_text foreground="#cc7832">true;</rich_text>
			<rich_text>






    1.handleAppTransitionReadyLocked
    2.handleAnimatingStoppedAndTransitionLocked
    3.handleNotObscuredLocked
    4.
    
    
# Title And Author
AppTansition @ v1.0 @ 20160703 @ RainHu

# Object And Messages
ActivityStackSupervisor : startActivityLocked
ActivityStackSupervisor -&gt; ActivityStack : startActivityUncheckedLocked
ActivityStack -&gt; WindowManagerService : startActivityLocked
WindowManagerService :  prepareAppTransition
ActivityStackSupervisor -&gt; ActivityStack : resumeTopActivityLocked
ActivityStack  : resumeTopActivityLocked
ActivityStack -&gt;  WindowManagerService : resumeTopActivityInnerLocked
WindowManagerService : prepareAppTransition
ActivityStackSupervisor :  startSpecificActivityLocked
ActivityStackSupervisor -&gt; ActivityStack :  realStartActivityLocked
ActivityStack : minimalResumeActivityLocked 
ActivityStack -&gt; ActivityStackSupervisor : completeResumeLocked
ActivityStackSupervisor -&gt;  WindowManagerService : reportResumedActivityLocked 
WindowManagerService : executeAppTransition
WindowManagerService : performLayoutAndPlaceSurfacesLocked
WindowManagerService : performLayoutAndPlaceSurfacesLockedInner
WindowManagerService : handleAppTransitionReadyLocked

# Bottom Description
[This is a description for this diagram]
[ how an order request is passed between sub-systems ]
    
    
    
    
  --------------------------------------------------------  
 wallpaper_close_enter.xml
 Wallpaper_open_enter.xml  duration:225 -&gt; 150
 wallpaper_open_exit.xml duration
    
   
   小米的
    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;set android:shareInterpolator=&quot;false&quot; android:zAdjustment=&quot;top&quot;
  xmlns:android=&quot;</rich_text>
			<rich_text link="webs http://schemas.android.com/apk/res/android&quot;&gt;">http://schemas.android.com/apk/res/android&quot;&gt;</rich_text>
			<rich_text>
    &lt;alpha android:interpolator=&quot;@interpolator/linear&quot; 
    android:duration=&quot;75&quot; 
    android:fillBefore=&quot;true&quot; 
    android:fillAfter=&quot;true&quot; 
    android:startOffset=&quot;75&quot; 
    android:fromAlpha=&quot;1.0&quot; 
    android:toAlpha=&quot;0.0&quot; 
    android:fillEnabled=&quot;true&quot; /&gt;
    &lt;translate android:interpolator=&quot;@interpolator/linear&quot; 
    android:duration=&quot;150&quot; 
    android:fillBefore=&quot;true&quot; 
    android:fillAfter=&quot;true&quot; 
    android:fromYDelta=&quot;0.0&quot; 
    android:toYDelta=&quot;50.0%&quot; 
    android:fillEnabled=&quot;true&quot; /&gt;
&lt;/set&gt;

    我们的
    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;set android:shareInterpolator=&quot;false&quot; android:zAdjustment=&quot;top&quot;
  xmlns:android=&quot;</rich_text>
			<rich_text link="webs http://schemas.android.com/apk/res/android&quot;&gt;">http://schemas.android.com/apk/res/android&quot;&gt;</rich_text>
			<rich_text>
    &lt;alpha android:interpolator=&quot;@interpolator/linear&quot; 
    android:duration=&quot;75&quot; 
    android:fillBefore=&quot;true&quot; 
    android:fillAfter=&quot;true&quot; 
    android:startOffset=&quot;75&quot; 
    android:fromAlpha=&quot;1.0&quot; 
    android:toAlpha=&quot;0.0&quot; 
    android:fillEnabled=&quot;true&quot; /&gt;
    &lt;translate android:interpolator=&quot;@interpolator/linear&quot; 
    android:duration=&quot;150&quot; 
    android:fillBefore=&quot;true&quot; 
    android:fillAfter=&quot;true&quot; 
    android:fromYDelta=&quot;0.0&quot; 
    android:toYDelta=&quot;50.0%&quot; 
    android:fillEnabled=&quot;true&quot; /&gt;
&lt;/set&gt;
    
    
    
    
    
    新版本Music 切换
    为什么</rich_text>
			<rich_text weight="heavy">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text> 
    新版本的Music
    从 </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=.activities.BaseMusicPlayerActivity&amp;project=m8996">BaseMusicPlayerActivity</rich_text>
			<rich_text> 非透明 -&gt; </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=.activities.BaseJumpActivity&amp;project=m8996">BaseJumpActivity</rich_text>
			<rich_text>  透明
    Theme分别为 android:</rich_text>
			<rich_text weight="heavy">theme=</rich_text>
			<rich_text>&quot;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/&amp;project=m8996">style</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/Music5.Dark.BaseMusicPlayer&amp;project=m8996">Music5.Dark.BaseMusicPlayer</rich_text>
			<rich_text>&quot; 以及android:</rich_text>
			<rich_text weight="heavy">theme=</rich_text>
			<rich_text>&quot;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/&amp;project=m8996">style</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/Music5.Dark&amp;project=m8996">Music5.Dark</rich_text>
			<rich_text>&quot;
    9    &lt;style </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=Music5.Dark.BaseMusicPlayer&amp;project=m8996">Music5.Dark.BaseMusicPlayer</rich_text>
			<rich_text>&quot; </rich_text>
			<rich_text weight="heavy">parent=</rich_text>
			<rich_text>&quot;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=Music5.Dark&amp;project=m8996">Music5.Dark</rich_text>
			<rich_text>&quot;&gt;
</rich_text>
			<rich_text weight="heavy">20        &lt;item name=&quot;android:windowIsTranslucent&quot;&gt;false&lt;/item&gt;</rich_text>
			<rich_text>
21        &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text>&quot;android:windowAnimationStyle&quot;&gt;@null&lt;/item&gt;
22    &lt;/style&gt;

&quot;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=Music5.Dark&amp;project=m8996">Music5.Dark</rich_text>
			<rich_text>&quot;
        &lt;item </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;android:windowIsTranslucent&quot;&gt;true&lt;/item&gt;
        &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text>&quot;android:</rich_text>
			<rich_text weight="heavy">windowAnimationStyle</rich_text>
			<rich_text>&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/&amp;project=m8996">style</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/music_windowAnimationStyle&amp;project=m8996">music_windowAnimationStyle</rich_text>
			<rich_text>&lt;/item&gt;
           
           
79    &lt;style </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;</rich_text>
			<rich_text weight="heavy">music_windowAnimationStyle</rich_text>
			<rich_text>&quot; </rich_text>
			<rich_text weight="heavy">parent=</rich_text>
			<rich_text>&quot;android:</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/&amp;project=m8996">style</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/Animation.Translucent&amp;project=m8996">Animation.Translucent</rich_text>
			<rich_text>&quot;&gt;
80    &lt;!-- add for  2401692 begin--&gt;
81    &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text> &quot;android:windowEnterAnimation&quot;&gt;@null&lt;/item&gt;
82    &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text> &quot;android:windowExitAnimation&quot; &gt;@null&lt;/item&gt;
83    &lt;!-- add for  2401692 end--&gt;
84    &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text>&quot;android:activityOpenEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8996">anim</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_anim_in&amp;project=m8996">activity_anim_in</rich_text>
			<rich_text>&lt;/item&gt;
85    &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text>&quot;android:activityOpenExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8996">anim</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_anim_out&amp;project=m8996">activity_anim_out</rich_text>
			<rich_text>&lt;/item&gt;
86&lt;/style&gt; 。


            
  08-01 16:36:30.977  1434  1505 V WindowManagerService: applyAnimation: atoken=AppWindowToken{37cc0c7 token=Token{3756206 ActivityRecord{518d4e1 u0 com.alcatel.music5.china/com.alcatel.music5.activities.BaseJumpActivity t19}}}
08-01 16:36:30.978  1434  1505 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@cb7a7ea animAttr=0x4 enter:true transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text> isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-01 16:36:30.978  1434  1505 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-01 16:36:30.978  1434  1505 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-01 16:36:30.978  1434  1505 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-01 16:36:30.981  1434  1505 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{cf59892 com.alcatel.music5.china/com.alcatel.music5.activities.BaseJumpActivity} anim=0 attr=0x0 a=android.view.animation.AnimationSet@16fb851 transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393 

    
    老版本Music 切换
   08-01 16:43:58.506  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{7aa6378 token=Token{db80cdb ActivityRecord{e24c1ea u0 com.alcatel.music5.china/com.alcatel.music5.activities.BaseJumpActivity t27}}}
08-01 16:43:58.508  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@959e0a7 animAttr=0x12 enter:true transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> isEntrance=</rich_text>
			<rich_text weight="heavy">true</rich_text>
			<rich_text> Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-01 16:43:58.508  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-01 16:43:58.508  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-01 16:43:58.508  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-01 16:43:58.511  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{a05c289 com.alcatel.music5.china/com.alcatel.music5.activities.BaseJumpActivity} anim=0 attr=0x0 a=null transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393 
    
    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=WindowAnimation_wallpaperCloseEnterAnimation&amp;project=m8996">WindowAnimation_wallpaperCloseEnterAnimation</rich_text>
			<rich_text>
    
    
    
    启动安全管家应用
   08-01 16:46:45.328  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{d0d0f90 token=Token{ef7fa53 ActivityRecord{7129a42 u0 com.tcl.ota/.SystemUpdatesActivity t33}}}
08-01 16:46:45.328  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@d3c1f97 nextAppTransition=ANIM_SCALE_UP transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> isEntrance=</rich_text>
			<rich_text weight="heavy">true</rich_text>
			<rich_text> Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-01 16:46:45.328  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-01 16:46:45.329  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-01 16:46:45.329  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-01 16:46:45.331  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{68423d8 Starting com.tcl.ota} anim=0 attr=0x0 a=null transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393 
08-01 16:46:45.332  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{4b1de78 token=Token{29493db ActivityRecord{81304ea u0 com.tcl.mie.tlauncher/com.android.launcher3.Launcher t26}}}
08-01 16:46:45.332  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AlphaAnimation@a03a584 nextAppTransition=ANIM_SCALE_UP transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> isEntrance=</rich_text>
			<rich_text weight="heavy">false</rich_text>
			<rich_text> Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9532 
08-01 16:46:45.333  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-01 16:46:45.333  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-01 16:46:45.333  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-01 16:46:45.369  1441  2442 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{26ff505 com.tcl.mie.tlauncher/com.android.launcher3.Launcher} anim=0 attr=0x1 a=null transit=2 isEntrance=false Callers com.android.server.wm.WindowManagerService.relayoutWindow:3319 com.android.server.wm.Session.relayout:198 android.view.IWindowSession$Stub.onTransact:284 
08-01 16:46:45.487  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{8d795f0 com.tcl.ota/com.tcl.ota.SystemUpdatesActivity} anim=0 attr=0x0 a=null transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.WindowStateAnimator.commitFinishDrawingLocked:555 
08-01 16:46:45.512  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{68423d8 Starting com.tcl.ota} anim=17432593 attr=0xffffffff a=android.view.animation.AlphaAnimation@cb43308 transit=5 isEntrance=false Callers com.android.server.wm.WindowManagerService.removeWindowLocked:2762 com.android.server.wm.WindowManagerService.removeWindow:2716 com.android.server.wm.Session.remove:187 



A1、A2都带有</rich_text>
			<rich_text foreground="#008000">windowShowWallpaper</rich_text>
			<rich_text> 属性，从A1启动到A2 调用  TRANSIT_WALLPAPER_INTRA_OPEN  两次， 一次是enter， 一次是exit

08-02 08:44:00.497  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{e0bac1b token=Token{792562a ActivityRecord{ea63315 u0 test.example.com.myapplication/.SecondActivity t74}}}
08-02 08:44:00.499  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@c65ffd0 animAttr=0x14 enter:true transit=TRANSIT_WALLPAPER_INTRA_OPEN isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-02 08:44:00.500  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-02 08:44:00.502  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-02 08:44:00.502  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-02 08:44:00.505  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{d7aaf6 test.example.com.myapplication/test.example.com.myapplication.SecondActivity} anim=0 attr=0x0 a=null transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393 
08-02 08:44:00.506  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{641bb5e token=Token{653dc99 ActivityRecord{f9f21e0 u0 test.example.com.myapplication/.MainActivity t74}}}
08-02 08:44:00.507  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@73522ce animAttr=0x15 enter:false transit=TRANSIT_WALLPAPER_INTRA_OPEN isEntrance=false Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9532 
08-02 08:44:00.507  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-02 08:44:00.507  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-02 08:44:00.507  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-02 08:44:00.557  1441  2436 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{677b337 test.example.com.myapplication/test.example.com.myapplication.MainActivity} anim=0 attr=0x1 a=null transit=2 isEntrance=false Callers com.android.server.wm.WindowManagerService.relayoutWindow:3319 com.android.server.wm.Session.relayout:198 android.view.IWindowSession$Stub.onTransact:284 



A1、A2都带有</rich_text>
			<rich_text foreground="#008000">windowIsTranslucent</rich_text>
			<rich_text>属性，从A1启动到A2 调用TRANSIT_WALLPAPER_CLOSE 一次， 表示enter 
08-02 08:48:32.147  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{30f62e2 token=Token{2a11fad ActivityRecord{821f4c4 u0 test.example.com.myapplication/.SecondActivity t76}}}
08-02 08:48:32.148  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@9d39765 animAttr=0x12 enter:true transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-02 08:48:32.148  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-02 08:48:32.148  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-02 08:48:32.148  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-02 08:48:32.150  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{5dd09a9 test.example.com.myapplication/test.example.com.myapplication.SecondActivity} anim=0 attr=0x0 a=null transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393



 </rich_text>
			<rich_text weight="heavy">需要进一步研究</rich_text>
			<rich_text>
A1、 A2都带</rich_text>
			<rich_text foreground="#008000">windowIsTranslucent</rich_text>
			<rich_text> ,且带有下面自定义动画 
&lt;</rich_text>
			<rich_text foreground="#000080">style</rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;myanimation&quot;</rich_text>
			<rich_text foreground="#0000ff">parent=</rich_text>
			<rich_text foreground="#008000">&quot;android:style/Animation.Translucent&quot;</rich_text>
			<rich_text>&gt;
&lt;</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;android:activityOpenEnterAnimation&quot;</rich_text>
			<rich_text>&gt;@anim/activity_anim_in&lt;/</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text>&gt;
&lt;</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;android:activityOpenExitAnimation&quot;</rich_text>
			<rich_text>&gt;@anim/activity_anim_out&lt;/</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text>&gt;

&lt;</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;android:windowEnterAnimation&quot;</rich_text>
			<rich_text>&gt;@null&lt;/</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text>&gt;
&lt;</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;android:windowExitAnimation&quot;</rich_text>
			<rich_text>&gt;@null&lt;/</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text>&gt;
&lt;/</rich_text>
			<rich_text foreground="#000080">style</rich_text>
			<rich_text>&gt;
从A1到A2启动调用TRANSIT_ACTIVITY_OPEN 一次， 表示enter

  08-02 09:05:31.429  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{5576aaa token=Token{7b8c995 ActivityRecord{c17f54c u0 test.example.com.myapplication/.SecondActivity t82}}}
08-02 09:05:31.430  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@e0ea502 animAttr=0x4 enter:true transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text> isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-02 09:05:31.431  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-02 09:05:31.431  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-02 09:05:31.431  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-02 09:05:31.435  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{5296a11 test.example.com.myapplication/test.example.com.myapplication.SecondActivity} anim=0 attr=0x0 a=android.view.animation.AnimationSet@a864a49 transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393 

    
    
 新Music启动， 为什么明明是</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> 却没有调用相应的动画？ 因为其nextAppTransition 是 </rich_text>
			<rich_text weight="heavy">ANIM_SCALE_UP</rich_text>
			<rich_text>， 这个应该是引用启动的动画，优先级比</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text>， 这个时候会直接跳过</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> 执行</rich_text>
			<rich_text weight="heavy">ANIM_SCALE_UP</rich_text>
			<rich_text>动画， AppTranasition中 </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=createScaleUpAnimationLocked&amp;project=m8996">createScaleUpAnimationLocked</rich_text>
			<rich_text>
 
 08-02 09:12:08.715  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{2734149 token=Token{c9f6b50 ActivityRecord{baf6d13 u0 com.alcatel.music5.china/com.alcatel.music5.activities.BaseMusicPlayerActivity t84}}}
08-02 09:12:08.716  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@d7d3567 nextAppTransition=</rich_text>
			<rich_text weight="heavy">ANIM_SCALE_UP</rich_text>
			<rich_text> transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-02 09:12:08.716  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-02 09:12:08.716  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-02 09:12:08.716  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-02 09:12:08.719  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{5256b8b com.alcatel.music5.china/com.alcatel.music5.activities.BaseMusicPlayerActivity} anim=0 attr=0x0 a=null transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393 
08-02 09:12:08.721  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{4b1de78 token=Token{29493db ActivityRecord{81304ea u0 com.tcl.mie.tlauncher/com.android.launcher3.Launcher t26}}}
08-02 09:12:08.722  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AlphaAnimation@93f4f14 nextAppTransition=</rich_text>
			<rich_text weight="heavy">ANIM_SCALE_UP</rich_text>
			<rich_text> transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> isEntrance=false Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9532 
08-02 09:12:08.723  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-02 09:12:08.723  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-02 09:12:08.723  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-02 09:12:08.751  1441  2465 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{26ff505 com.tcl.mie.tlauncher/com.android.launcher3.Launcher} anim=0 attr=0x1 a=null transit=2 isEntrance=false Callers com.android.server.wm.WindowManagerService.relayoutWindow:3319 com.android.server.wm.Session.relayout:198 android.view.IWindowSession$Stub.onTransact:284 
   
    
    
    
    
    
    
    
    
     
    2.
    Music应用内部跳转过慢
    高提case：02490895
    

     Music windowAnimationStyle这个属性，自定义比 设为Null速度快
     查看Music的这个属性Style是在Music5.Dark 继承于Theme.AppCompat.Light.DarkActionBar
     Theme.AppCompat.Light.DarkActionBar是在V7兼容包上定义的， 继承于Base.Theme.AppCompat.Light.DarkActionBar
     Base.Theme.AppCompat.Light.DarkActionBar 定义在/frameworks/support/v7/appcompat/res/values/themes_base.xml中 
     继承于Base.Theme.AppCompat.Light 继承与Base.V7.Theme.AppCompat.Light 
     继承于Platform.AppCompat.Light 
     继承于framework/base/core/res/res/values/themes.xml 中的 Theme.Light
     继承于Theme
     系统的windowAnimationStyle 属性就是在Theme中定义的
     &lt;</rich_text>
			<rich_text foreground="#000080">style</rich_text>
			<rich_text> </rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;AppTheme&quot;</rich_text>
			<rich_text> </rich_text>
			<rich_text foreground="#0000ff">parent=</rich_text>
			<rich_text foreground="#008000">&quot;Theme.AppCompat.Light.DarkActionBar&quot;</rich_text>
			<rich_text>&gt;
   &lt;</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text> </rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;android:windowIsTranslucent&quot;</rich_text>
			<rich_text>&gt;true&lt;/</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text>&gt;
&lt;/</rich_text>
			<rich_text foreground="#000080">style</rich_text>
			<rich_text>&gt;
     调查以后发现，如果style定义了android:windowIsTranslucent， Acitivty使用了这个属性的话，之间的跳转会调用  TRANSIT_WALLPAPER_CLOSE而不是TRANSIT_ACTIVITY_OPEN
    这个都在AppTransition中定义
    
    小米的动画去掉了一些延时：
    wallpaper_close_enter
    
     android:windowShowWallpaper为true
     
     AppTransition
     
     
     
</rich_text>
			<rich_text foreground="#333333">Music应用内部跳转过慢这个问题分析结果如下：
因为Activity定义的style中带有</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">windowIsTranslucent</rich_text>
			<rich_text>使得从上一个activity跳转到下一个activity的跳转动画是</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text>而不是预期的</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#000000">解决的方法： 去掉Wallpaper动画的延时，需要提供一个pr或者fr给我</rich_text>
			<rich_text>

</rich_text>
			<rich_text foreground="#000000">具体分析：</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#000000"> Music5.Dark 这个主题继承于Theme.AppCompat.Light.DarkActionBar最终使用到系统默认的windowAnimationStyle是定义于 /m8996/frameworks/base/core/res/res/values/styles.xml的&lt;style name=&quot;Animation.Activity&quot;&gt;</rich_text>
			<rich_text>
8</rich_text>
			<rich_text foreground="#333333">3    &lt;style </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=Animation.Activity&amp;project=m8976">Animation.Activity</rich_text>
			<rich_text foreground="#333333">&quot;&gt;
84        &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;activityOpenEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_open_enter&amp;project=m8976">activity_open_enter</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;
85        &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;activityOpenExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_open_exit&amp;project=m8976">activity_open_exit</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;

              ... ...
100        &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;wallpaperCloseEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/wallpaper_close_enter&amp;project=m8976">wallpaper_close_enter</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;
101        &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;wallpaperCloseExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/wallpaper_close_exit&amp;project=m8976">wallpaper_close_exit</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;
              ... ...
112    &lt;/style&gt;</rich_text>
			<rich_text>    </rich_text>
			<rich_text foreground="#333333">
         正常的情况下从一个Activity跳转到另一个Activity的跳转在AppTransition的体现是</rich_text>
			<rich_text foreground="#333333" weight="heavy">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text foreground="#333333">，对应到上面的动画是下面
       </rich_text>
			<rich_text>    </rich_text>
			<rich_text foreground="#333333">  &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;activityOpenEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_open_enter&amp;project=m8976">activity_open_enter</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;
             &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;activityOpenExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_open_exit&amp;project=m8976">activity_open_exit</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;</rich_text>
			<rich_text> 
  </rich_text>
			<rich_text foreground="#333333">         
         但是如果这个Activity包含 &lt;item name=&quot;android:</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">windowIsTranslucent</rich_text>
			<rich_text>&quot;&gt;true&lt;/item&gt;这个属性进行跳转的话使用的跳转动画</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text>是下面两个，因为此时的Activity是以wallpaper作为背景


            </rich_text>
			<rich_text foreground="#333333">&lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;wallpaperCloseEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/wallpaper_close_enter&amp;project=m8976">wallpaper_close_enter</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;
            &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;wallpaperCloseExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/wallpaper_close_exit&amp;project=m8976">wallpaper_close_exit</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;
</rich_text>
			<rich_text>    </rich_text>
			<rich_text foreground="#333333">         
         </rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#333333">         目前我所知道的会引起Activity跳转动画的属性有</rich_text>
			<rich_text foreground="#000000" weight="heavy">windowIsTranslucent,windowShowWallpaper</rich_text>
			<rich_text weight="heavy"> </rich_text>
			<rich_text>

         查看idol4_pro_cn这两个动画的定义发现 会有300ms的延时，所以才会出现卡顿的现象
           
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/wallpaper_close_enter&amp;project=m8976">wallpaper_close_enter.xml</rich_text>
			<rich_text>    </rich_text>
			<rich_text foreground="#333333">       </rich_text>
			<rich_text>   
</rich_text>
			<rich_text foreground="#333333">23    &lt;alpha android:</rich_text>
			<rich_text foreground="#333333" weight="heavy">fromAlpha=</rich_text>
			<rich_text foreground="#333333">&quot;0&quot; android:</rich_text>
			<rich_text foreground="#333333" weight="heavy">toAlpha=</rich_text>
			<rich_text foreground="#333333">&quot;1.0&quot;
24        android:</rich_text>
			<rich_text foreground="#333333" weight="heavy">fillEnabled=</rich_text>
			<rich_text foreground="#333333">&quot;true&quot; android:</rich_text>
			<rich_text foreground="#333333" weight="heavy">fillBefore=</rich_text>
			<rich_text foreground="#333333">&quot;true&quot; android:</rich_text>
			<rich_text foreground="#333333" weight="heavy">fillAfter=</rich_text>
			<rich_text foreground="#333333">&quot;true&quot;
25        android:</rich_text>
			<rich_text foreground="#333333" weight="heavy">interpolator=</rich_text>
			<rich_text foreground="#333333">&quot;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=interpolator/&amp;project=m8976">interpolator</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=interpolator/decelerate_quart&amp;project=m8976">decelerate_quart</rich_text>
			<rich_text foreground="#333333">&quot;
26        </rich_text>
			<rich_text foreground="#ff0000" weight="heavy">android:startOffset=&quot;300&quot;</rich_text>
			<rich_text>
27        android:</rich_text>
			<rich_text weight="heavy">duration=</rich_text>
			<rich_text>&quot;167&quot;/&gt;
28
29    &lt;translate android:</rich_text>
			<rich_text weight="heavy">fromYDelta=</rich_text>
			<rich_text>&quot;110%&quot; android:</rich_text>
			<rich_text weight="heavy">toYDelta=</rich_text>
			<rich_text>&quot;0&quot;
30        android:</rich_text>
			<rich_text weight="heavy">fillEnabled=</rich_text>
			<rich_text>&quot;true&quot; android:</rich_text>
			<rich_text weight="heavy">fillBefore=</rich_text>
			<rich_text>&quot;true&quot; android:</rich_text>
			<rich_text weight="heavy">fillAfter=</rich_text>
			<rich_text>&quot;true&quot;
31        android:</rich_text>
			<rich_text weight="heavy">interpolator=</rich_text>
			<rich_text>&quot;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=interpolator/&amp;project=m8976">interpolator</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=interpolator/decelerate_quint&amp;project=m8976">decelerate_quint</rich_text>
			<rich_text>&quot;
32        </rich_text>
			<rich_text foreground="#ff0000" weight="heavy">android:startOffset=&quot;300&quot;</rich_text>
			<rich_text>
33        android:</rich_text>
			<rich_text weight="heavy">duration=</rich_text>
			<rich_text>&quot;417&quot; /&gt;


</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">Q1：为什么将同样的APK装到小米5上是流畅的？</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#000000">    要注意的是上面的动画是原生的定义，将同样的APK装到小米5上面不卡顿是因为小米将去掉了wallpaper动画的延时</rich_text>
			<rich_text>
         
         ##来自小米5的wallpaper_close_enter.xml
         &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
         &lt;set android:background=&quot;#ff000000&quot;         android:shareInterpolator=&quot;false&quot; android:zAdjustment=&quot;top&quot;
           xmlns:android=</rich_text>
			<rich_text link="webs http://moz-txt-link-rfc2396E">&quot;http://schemas.android.com/apk/res/android&quot;</rich_text>
			<rich_text foreground="#333333">&gt;
             &lt;alpha android:interpolator=&quot;@interpolator/linear&quot; 
                    android:duration=&quot;167&quot; 
                    android:fillBefore=&quot;true&quot; 
                    android:fillAfter=&quot;true&quot;
</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">                    android:startOffset=&quot;0&quot;</rich_text>
			<rich_text>
                    android:fromAlpha=&quot;0.0&quot;
                    android:toAlpha=&quot;1.0&quot; 
                    android:fillEnabled=&quot;true&quot; /&gt;
             &lt;translate         android:interpolator=&quot;@interpolator/decelerate_quint&quot;
                      android:duration=&quot;417&quot;
                     android:fillBefore=&quot;true&quot; 
                     android:fillAfter=&quot;true&quot;
</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">                     android:startOffset=&quot;0&quot; </rich_text>
			<rich_text>
                     android:fromYDelta=&quot;95.00001%&quot; 
                     android:toYDelta=&quot;0.0&quot; 
                     android:fillEnabled=&quot;true&quot; /&gt;
         &lt;/set&gt;


</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">Q2:为什么Music自定义动画以后速度变快了？</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#000000">下面 music_windowAnimationStyle是music自定义的动画，其实下面两个item并没有起什么作用，关键是其继承了 android:style</rich_text>
			<rich_text>/</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">Animation.Translucent </rich_text>
			<rich_text>
   
77    &lt;style </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">music_windowAnimationStyle</rich_text>
			<rich_text>&quot; </rich_text>
			<rich_text weight="heavy">parent=</rich_text>
			<rich_text>&quot;android:</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/&amp;project=m8996">style</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/Animation.Translucent&amp;project=m8996">Animation.Translucent</rich_text>
			<rich_text>&quot;&gt;
78        &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text>&quot;android:activityOpenEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8996">anim</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_anim_in&amp;project=m8996">activity_anim_in</rich_text>
			<rich_text>&lt;/item&gt;
79        &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text>&quot;android:activityOpenExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8996">anim</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_anim_out&amp;project=m8996">activity_anim_out</rich_text>
			<rich_text>&lt;/item&gt;</rich_text>
			<rich_text foreground="#333333">     </rich_text>
			<rich_text>

</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">Animation.Translucent </rich_text>
			<rich_text foreground="#000000">这个属性定义在/m8996/frameworks/base/core/res/res/values/styles.xml</rich_text>
			<rich_text weight="heavy">
</rich_text>
			<rich_text>126    &lt;style </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=Animation.Translucent&amp;project=m8996">Animation.Translucent</rich_text>
			<rich_text>&quot;&gt;
127        &lt;item </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;windowEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8996">anim</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/translucent_enter&amp;project=m8996">translucent_enter</rich_text>
			<rich_text>&lt;/item&gt;
128        &lt;item </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;windowExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8996">anim</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/translucent_exit&amp;project=m8996">translucent_exit</rich_text>
			<rich_text>&lt;/item&gt;
129    &lt;/style&gt;s

</rich_text>
			<rich_text foreground="#000000">实际上调用的是 windowEnterAnimation和windowExitAnimation这两个动画，而这两个动画没有定义延时，所以速度就快了。</rich_text>
			<rich_text>
  
  
  ActivityStack -&gt; startActivityLocked Activitystart过程中真正执行开始的方法
     -&gt; WindowManagerService-&gt; prepareAppTransition
  
  
  windowManagerService-&gt;applyAnimationLocked
  windowManagerService.loadAnimation
  
  ActivityStackSupervisor.startActivityLocked -&gt; ActivityStackSupervisor.startActivityUncheckedLocked -&gt; ActivityStack.startActivityLocked -&gt; WindowManagerService-&gt; prepareAppTransition
  
  ActivityStackSupervisor.resumeTopActivitiesLocked -&gt; ActivityStack.resumeTopActivityLocked -&gt; ActivityStack.resumeTopActivityInnerLocked -&gt; WindowManagerService-&gt; prepareAppTransition
  
  
  
  
</rich_text>
			<rich_text weight="heavy">  从Music点击一个菜单图标后走的流程</rich_text>
			<rich_text>（带有透明属性的系统跳转）
  windowManagerService -&gt; executeAppTransition
 08-01 09:10:07.560  1550  1613 W WindowManager: Execute app transition: mNextAppTransition=TRANSIT_UNSET 
 Callers=com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:1697 //调用堆栈
  com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
  com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840
  com.android.server.am.ActivityManagerService.setFocusedStack:2846 
  com.android.server.wm.WindowManagerService$H.handleMessage:8257 


</rich_text>
			<rich_text weight="heavy">  ActivityStackSupervisor.startActivityLocked -&gt; ActivityStackSupervisor.startActivityUncheckedLocked -&gt; ActivityStack.startActivityLocked -&gt; WindowManagerService.prepareAppTransition</rich_text>
			<rich_text>
 08-01 09:10:07.568  1550  2801 V WindowManager: Prepare app transition: transit=TRANSIT_ACTIVITY_OPEN mNextAppTransition=TRANSIT_UNSET alwaysKeepCurrent=false Callers=com.android.server.am.ActivityStack.startActivityLocked:2268
 com.android.server.am.ActivityStackSupervisor.startActivityUncheckedLocked:2563 
 com.android.server.am.ActivityStackSupervisor.startActivityLocked:1777 
  
</rich_text>
			<rich_text weight="heavy">    ActivityStackSupervisor.resumeTopActivitiesLocked -&gt; ActivityStack.resumeTopActivityLocked -&gt; ActivityStack.resumeTopActivityInnerLocked -&gt; WindowManagerService.prepareAppTransition</rich_text>
			<rich_text>
  08-01 09:10:07.591  1550  2244 V WindowManager: Prepare app transition: transit=TRANSIT_ACTIVITY_OPEN mNextAppTransition=TRANSIT_ACTIVITY_OPEN alwaysKeepCurrent=false Callers=com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:1914
   com.android.server.am.ActivityStack.resumeTopActivityLocked:1609
    com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840 

</rich_text>
			<rich_text weight="heavy">  ActivityStackSupervisor.resumeTopActivitiesLocked -&gt; ActivityStack.resumeTopActivityLocked -&gt; ActivityStack.resumeTopActivityInnerLocked 
          -&gt; ActivityStackSupervisor.startSpecificActivityLocked</rich_text>
			<rich_text> -&gt; </rich_text>
			<rich_text weight="heavy">ActivityStackSupervisor.realStartActivityLocked</rich_text>
			<rich_text>
 08-01 09:10:07.592  1550  2244 V WindowManager: setAppVisibility(Token{3001748 ActivityRecord{3e7edeb u0 com.alcatel.music5.china/com.alcatel.music5.activities.BaseJumpActivity t10}}, visible=true): mNextAppTransition=TRANSIT_ACTIVITY_OPEN hidden=true hiddenRequested=true 
 Callers=com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1244 
 com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 
 com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:2112 
 com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
 com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840 
 com.android.server.am.ActivityStack.completePauseLocked:1102 

  </rich_text>
			<rich_text weight="heavy">  ActivityStackSupervisor.resumeTopActivitiesLocked -&gt; ActivityStack.resumeTopActivityLocked -&gt; ActivityStack.resumeTopActivityInnerLocke 
          -&gt; ActivityStackSupervisor.startSpecificActivityLocked</rich_text>
			<rich_text> -&gt; </rich_text>
			<rich_text weight="heavy">ActivityStackSupervisor.realStartActivityLocked</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">-&gt; ActivityStack.minimalResumeActivityLocked</rich_text>
			<rich_text> 
</rich_text>
			<rich_text weight="heavy">          -&gt; ActivityStack.completeResumeLocked -&gt; ActivityStackSupervisor.reportResumedActivityLocked -&gt;  WindowManagerService.executeAppTransition</rich_text>
			<rich_text>
  
 08-01 09:10:07.596  1550  2244 W WindowManager: Execute app transition: mNextAppTransition=TRANSIT_ACTIVITY_OPEN 
 Callers=com.android.server.am.ActivityStackSupervisor.reportResumedActivityLocked:3379 
 com.android.server.am.ActivityStack.completeResumeLocked:1168 
 com.android.server.am.ActivityStack.minimalResumeActivityLocked:709 
 com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1400 
 com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 

08-01 09:10:07.903  1550  1613 I zhengyu : TRANSIT_WALLPAPER_CLOSE
08-01 09:10:07.904  1550  1613 V AppTransition: applyAnimation: </rich_text>
			<rich_text foreground="#ffff00000000">anim=android.view.animation.AnimationSet@a8dd8d5 </rich_text>
			<rich_text>animAttr=0x12 transit=TRANSIT_WALLPAPER_CLOSE isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3514
 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4578 
 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9484 


08-01 10:17:17.218  1550  1613 I zhengyu : TRANSIT_ACTIVITY_OPEN
08-01 10:17:17.220  1550  1613 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@7ff8d38 animAttr=0x4 transit=TRANSIT_ACTIVITY_OPEN isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3514 
com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4578 
com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:948


</rich_text>
			<rich_text weight="heavy">带有透明属性自定义的跳转</rich_text>
			<rich_text>
08-01 10:04:11.281  1550  1613 W WindowManager: Execute app transition: mNextAppTransition=TRANSIT_UNSET 
Callers=com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:1697 
com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840 
com.android.server.am.ActivityManagerService.setFocusedStack:2846 
com.android.server.wm.WindowManagerService$H.handleMessage:8257 

08-01 10:04:11.287  1550  2201 V WindowManager: Prepare app transition: transit=TRANSIT_ACTIVITY_OPEN mNextAppTransition=TRANSIT_UNSET alwaysKeepCurrent=false Callers=com.android.server.am.ActivityStack.startActivityLocked:2268 
com.android.server.am.ActivityStackSupervisor.startActivityUncheckedLocked:2563 
com.android.server.am.ActivityStackSupervisor.startActivityLocked:1777 

08-01 10:04:11.306  1550  2862 V WindowManager: Prepare app transition: transit=TRANSIT_ACTIVITY_OPEN mNextAppTransition=TRANSIT_ACTIVITY_OPEN alwaysKeepCurrent=false Callers=com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:1914 
com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840 

08-01 10:04:11.306  1550  2862 V WindowManager: setAppVisibility(Token{c298ae9 ActivityRecord{bc05770 u0 test.example.com.myapplication/.SecondActivity t25}}, visible=true): mNextAppTransition=TRANSIT_ACTIVITY_OPEN hidden=true hiddenRequested=true 
Callers=com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1244 
com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 
com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:2112 
com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840 
com.android.server.am.ActivityStack.completePauseLocked:1102 

08-01 10:04:11.314  1550  2862 W WindowManager: Execute app transition: mNextAppTransition=TRANSIT_ACTIVITY_OPEN 
Callers=com.android.server.am.ActivityStackSupervisor.reportResumedActivityLocked:3379 
com.android.server.am.ActivityStack.completeResumeLocked:1168 
com.android.server.am.ActivityStack.minimalResumeActivityLocked:709 
com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1400 
com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 

08-01 10:04:11.378  1550  1613 I zhengyu : TRANSIT_WALLPAPER_CLOSE

08-01 10:04:11.378  1550  1613 V AppTransition: </rich_text>
			<rich_text foreground="#ffff00000000">applyAnimation: anim=null</rich_text>
			<rich_text> animAttr=0x12 transit=TRANSIT_WALLPAPER_CLOSE isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3514 
com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4578 
com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9484 





</rich_text>
			<rich_text weight="heavy">自定义没有透明属性的跳转</rich_text>
			<rich_text>
08-01 10:17:17.090  1550  2866 V WindowManager: Prepare app transition: transit=TRANSIT_ACTIVITY_OPEN mNextAppTransition=TRANSIT_UNSET alwaysKeepCurrent=false Callers=com.android.server.am.ActivityStack.startActivityLocked:2268 
com.android.server.am.ActivityStackSupervisor.startActivityUncheckedLocked:2563 
com.android.server.am.ActivityStackSupervisor.startActivityLocked:1777 

08-01 10:17:17.111  1550  2247 V WindowManager: Prepare app transition: transit=TRANSIT_ACTIVITY_OPEN mNextAppTransition=TRANSIT_ACTIVITY_OPEN alwaysKeepCurrent=false Callers=com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:1914 
com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840 

08-01 10:17:17.111  1550  2247 V WindowManager: setAppVisibility(Token{f9ca07f ActivityRecord{a5e8d9e u0 test.example.com.myapplication/.SecondActivity t28}}, visible=true): mNextAppTransition=TRANSIT_ACTIVITY_OPEN hidden=true hiddenRequested=true 
Callers=com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1244 
com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 
com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:2112 
com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840 
com.android.server.am.ActivityStack.completePauseLocked:1102 

08-01 10:17:17.114  1550  2247 V WindowManager: setAppVisibility(Token{79c7b8d ActivityRecord{183d424 u0 test.example.com.myapplication/.MainActivity t28}}, visible=false): mNextAppTransition=TRANSIT_ACTIVITY_OPEN hidden=false hiddenRequested=false Callers=com.android.server.am.ActivityStack.setVisible:1192 com.android.server.am.ActivityStack.ensureActivitiesVisibleLocked:1453 com.android.server.am.ActivityStackSupervisor.ensureActivitiesVisibleLocked:3471 
com.android.server.am.ActivityManagerService.updateConfigurationLocked:18089 
com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1260 
com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 

08-01 10:17:17.122  1550  2247 W WindowManager: Execute app transition: mNextAppTransition=TRANSIT_ACTIVITY_OPEN 
Callers=com.android.server.am.ActivityStackSupervisor.reportResumedActivityLocked:3379 
com.android.server.am.ActivityStack.completeResumeLocked:1168 
com.android.server.am.ActivityStack.minimalResumeActivityLocked:709 
com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1400 
com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 

08-01 10:17:17.218  1550  1613 I zhengyu : TRANSIT_ACTIVITY_OPEN
08-01 10:17:17.220  1550  1613 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@7ff8d38 animAttr=0x4 transit=TRANSIT_ACTIVITY_OPEN isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3514 
com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4578 
com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9484 

08-01 10:17:17.226  1550  1613 I zhengyu : TRANSIT_ACTIVITY_OPEN
08-01 10:17:17.227  1550  1613 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@6cd8002 animAttr=0x5 transit=TRANSIT_ACTIVITY_OPEN isEntrance=false Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3514 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4578 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9524 
08-01 10:17:17.668  1550  1607 V WindowManager: setAppVisibility(Token{79c7b8d ActivityRecord{183d424 u0 test.example.com.myapplication/.MainActivity t28}}, visible=false): mNextAppTransition=TRANSIT_UNSET hidden=true hiddenRequested=true Callers=com.android.server.am.ActivityStack.stopActivityLocked:2821 com.android.server.am.ActivityStackSupervisor.activityIdleInternalLocked:2707 com.android.server.am.ActivityStackSupervisor$ActivityStackSupervisorHandler.activityIdleInternal:4183 com.android.server.am.ActivityStackSupervisor$ActivityStackSupervisorHandler.handleMessage:4206 android.os.Handler.dispatchMessage:102 android.os.Looper.loop:148 


非透明背景之间跳转
08-12 02:28:07.454 16141 16141 I zhengyu : MainActivity.onPause
08-12 02:28:07.471 16141 16141 I zhengyu : SecondActivity.onCreate
08-12 02:28:07.475 16141 16141 I zhengyu : SecondActivity.onStart
08-12 02:28:07.476 16141 16141 I zhengyu : SecondActivity.onResume
08-12 02:28:07.752 16141 16141 I zhengyu : </rich_text>
			<rich_text foreground="#ffff00000000">MainActivity.onStop</rich_text>
			<rich_text>

    
 透明背景之间跳转
08-12 02:26:28.818 14840 14840 I zhengyu : MainActivity.onPause
08-12 02:26:28.839 14840 14840 I zhengyu : SecondActivity.onCreate
08-12 02:26:28.843 14840 14840 I zhengyu : SecondActivity.onStart
08-12 02:26:28.844 14840 14840 I zhengyu : SecondActivity.onResume
    
 
</rich_text>
			<rich_text weight="heavy"> ActivityStack.</rich_text>
			<rich_text foreground="#ffff00000000" weight="heavy">startActivityLocked</rich_text>
			<rich_text weight="heavy">()</rich_text>
			<rich_text>
     
2225    </rich_text>
			<rich_text weight="heavy">final</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=startActivityLocked&amp;project=m8996">startActivityLocked</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ActivityRecord&amp;project=m8996">ActivityRecord</rich_text>
			<rich_text> r, </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=newTask&amp;project=m8996">newTask</rich_text>
			<rich_text>,
2226            </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> doResume, </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> keepCurTransition, </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Bundle&amp;project=m8996">Bundle</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=options&amp;project=m8996">options</rich_text>
			<rich_text>) {
 //参数r描述的是打算启动的Activity

....
2310            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> ((r.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=intent&amp;project=m8996">intent</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getFlags&amp;project=m8996">getFlags</rich_text>
			<rich_text>() &amp; </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Intent&amp;project=m8996">Intent</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=FLAG_ACTIVITY_NO_ANIMATION&amp;project=m8996">FLAG_ACTIVITY_NO_ANIMATION</rich_text>
			<rich_text>) != 0) {
2311                mWindowManager.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=prepareAppTransition&amp;project=m8996">prepareAppTransition</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_NONE&amp;project=m8996">TRANSIT_NONE</rich_text>
			<rich_text>, keepCurTransition);
2312                mNoAnimActivities.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=add&amp;project=m8996">add</rich_text>
			<rich_text>(r);
2313            } </rich_text>
			<rich_text weight="heavy">else</rich_text>
			<rich_text> {
2314                mWindowManager.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=prepareAppTransition&amp;project=m8996">prepareAppTransition</rich_text>
			<rich_text>(newTask
2315                        ? r.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mLaunchTaskBehind&amp;project=m8996">mLaunchTaskBehind</rich_text>
			<rich_text>
2316                                ? </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_TASK_OPEN_BEHIND&amp;project=m8996">TRANSIT_TASK_OPEN_BEHIND</rich_text>
			<rich_text>
2317                                : </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_TASK_OPEN&amp;project=m8996">TRANSIT_TASK_OPEN</rich_text>
			<rich_text>
2318                        : </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_ACTIVITY_OPEN&amp;project=m8996">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text>, keepCurTransition);
2319                mNoAnimActivities.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=remove&amp;project=m8996">remove</rich_text>
			<rich_text>(r);
2320            }
    
    
    如果定义了FLAG_ACTIVITY_NO_ANIMATION将会使用AppTransition.TRANSIT_NONE属性表示没有动画
    如果 newTask &amp;&amp; mLaunchTaskBehind -&gt; TANSIT_TASK_OPEN_BEHIND
           newTask &amp;&amp; !mLaunchTaskBehind -&gt; TRANSIT_TASK_OPEN
           !newTask -&gt; TRANSIT_ACTIVITY_OPEN
    
 
</rich_text>
			<rich_text weight="heavy">WindowManagerService.prepareAppTransition()</rich_text>
			<rich_text>    
4184    </rich_text>
			<rich_text weight="heavy">public</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=prepareAppTransition&amp;project=m8996">prepareAppTransition</rich_text>
			<rich_text>(</rich_text>
			<rich_text weight="heavy">int</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>, </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=alwaysKeepCurrent&amp;project=m8996">alwaysKeepCurrent</rich_text>
			<rich_text>) {
4185        </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (!checkCallingPermission(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=android&amp;project=m8996">android</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Manifest&amp;project=m8996">Manifest</rich_text>
			<rich_text>.permission.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=MANAGE_APP_TOKENS&amp;project=m8996">MANAGE_APP_TOKENS</rich_text>
			<rich_text>,    //权限检查
4186                &quot;prepareAppTransition()&quot;)) {
4187            </rich_text>
			<rich_text weight="heavy">throw</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">new</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SecurityException&amp;project=m8996">SecurityException</rich_text>
			<rich_text>(&quot;Requires MANAGE_APP_TOKENS permission&quot;);
4188        }
4189
4190        </rich_text>
			<rich_text weight="heavy">synchronized</rich_text>
			<rich_text>(mWindowMap) {
4191            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (DEBUG_APP_TRANSITIONS) </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Slog&amp;project=m8996">Slog</rich_text>
			<rich_text>.v(TAG, &quot;Prepare app transition:&quot;
4192                    + &quot; transit=&quot; + </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=appTransitionToString&amp;project=m8996">appTransitionToString</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>)
4193                    + &quot; &quot; + mAppTransition
4194                    + &quot; alwaysKeepCurrent=&quot; + alwaysKeepCurrent
4195                    + &quot; Callers=&quot; + </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Debug&amp;project=m8996">Debug</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getCallers&amp;project=m8996">getCallers</rich_text>
			<rich_text>(3));
4196            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (!mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionSet&amp;project=m8996">isTransitionSet</rich_text>
			<rich_text>() || mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionNone&amp;project=m8996">isTransitionNone</rich_text>
			<rich_text>()) { //表示windowmanagerservice接下来没有activity组件切换动画等待执行，这时候参数transit描述的activity组件qiehuan 
4197                mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setAppTransition&amp;project=m8996">setAppTransition</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>);
4198            } </rich_text>
			<rich_text weight="heavy">else</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (!alwaysKeepCurrent) {
4199                </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text> == </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_TASK_OPEN&amp;project=m8996">TRANSIT_TASK_OPEN</rich_text>
			<rich_text>  //接下来的动画， 如果发现接下来的动画是TASK_CLOSE 而当前的transit是TASK_OPEN则覆盖，将接下来要执行的动画改为Task_OPEN, 因为open优先级高于close
4200                        &amp;&amp; mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionEqual&amp;project=m8996">isTransitionEqual</rich_text>
			<rich_text>(
4201                                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_TASK_CLOSE&amp;project=m8996">TRANSIT_TASK_CLOSE</rich_text>
			<rich_text>)) {
4202                    // Opening a new task always supersedes a close for the anim.
4203                    mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setAppTransition&amp;project=m8996">setAppTransition</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>);
4204                } </rich_text>
			<rich_text weight="heavy">else</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text> == </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_ACTIVITY_OPEN&amp;project=m8996">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text>
4205                        &amp;&amp; mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionEqual&amp;project=m8996">isTransitionEqual</rich_text>
			<rich_text>(
4206                            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_ACTIVITY_CLOSE&amp;project=m8996">TRANSIT_ACTIVITY_CLOSE</rich_text>
			<rich_text>)) {
4207                    // Opening a new activity always supersedes a close for the anim.
4208                    mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setAppTransition&amp;project=m8996">setAppTransition</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>);
4209                }
4210            }

4211            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (okToDisplay() &amp;&amp; mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=prepare&amp;project=m8996">prepare</rich_text>
			<rich_text>()) {
4212                mSkipAppTransitionAnimation = </rich_text>
			<rich_text weight="heavy">false</rich_text>
			<rich_text>;   //表示windowmanagerservice是否需要不执行Activity组件的切换动画
4213            }
4214            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionSet&amp;project=m8996">isTransitionSet</rich_text>
			<rich_text>()) {
4215                mH.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=removeMessages&amp;project=m8996">removeMessages</rich_text>
			<rich_text>(H.APP_TRANSITION_TIMEOUT); 
4216                mH.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=sendEmptyMessageDelayed&amp;project=m8996">sendEmptyMessageDelayed</rich_text>
			<rich_text>(H.APP_TRANSITION_TIMEOUT, 5000); //5s后执行timeout， 强制设置动画要在5s内完成，不然认为执行该动画超时
4217            }
4218        }
4219    }
4220
    
    AppTransition.isTransitionSet(){return mNextAppTransition != TRANSIT_UNSET}
    AppTransition.isTransitionNone(){return mNextAppTransition == TRANSIT_NONE}
    所以 </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (!mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionSet&amp;project=m8996">isTransitionSet</rich_text>
			<rich_text>() || mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionNone&amp;project=m8996">isTransitionNone</rich_text>
			<rich_text>()) 表示的是接下来没有需要准备的动画了
    
       </rich_text>
			<rich_text weight="heavy">alwaysKeepCurrent</rich_text>
			<rich_text> 这个参数是在ActivityStackSupervisor被定义然后在startActivityUncheckedLocked中被赋值的赋值代码如下，表示将要启动的Activity是在已经存在的Task中，就设为true。要注意这里的</rich_text>
			<rich_text weight="heavy">alwaysKeepCurrent</rich_text>
			<rich_text>前面！
       
                </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (!</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=addingToTask&amp;project=m8996">addingToTask</rich_text>
			<rich_text> &amp;&amp; (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=launchFlags&amp;project=m8996">launchFlags</rich_text>
			<rich_text>&amp;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Intent&amp;project=m8996">Intent</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=FLAG_ACTIVITY_CLEAR_TOP&amp;project=m8996">FLAG_ACTIVITY_CLEAR_TOP</rich_text>
			<rich_text>) != 0) {
2456                // In this case, we are adding the activity to an existing
2457                // task, but the caller has asked to clear that task if the
2458                // activity is already running.
2459                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ActivityRecord&amp;project=m8996">ActivityRecord</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=top&amp;project=m8996">top</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=sourceTask&amp;project=m8996">sourceTask</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=performClearTaskLocked&amp;project=m8996">performClearTaskLocked</rich_text>
			<rich_text>(r, </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=launchFlags&amp;project=m8996">launchFlags</rich_text>
			<rich_text>);
2460                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=keepCurTransition&amp;project=m8996">keepCurTransition</rich_text>
			<rich_text> = </rich_text>
			<rich_text weight="heavy">true</rich_text>
			<rich_text>;
 ... ...
 }
       
       246    </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=isTransitionEqual&amp;project=m8996">isTransitionEqual</rich_text>
			<rich_text>(</rich_text>
			<rich_text weight="heavy">int</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>) {
247        </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text> mNextAppTransition == </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>;
248    }

254    </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=setAppTransition&amp;project=m8996">setAppTransition</rich_text>
			<rich_text>(</rich_text>
			<rich_text weight="heavy">int</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>) {
255        mNextAppTransition = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>;
256    }
257

-----

//表示屏幕不是处于冻屏且允许显示且屏幕是亮起的
3630    </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=okToDisplay&amp;project=m8996">okToDisplay</rich_text>
			<rich_text>() {
3631        </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text> !mDisplayFrozen &amp;&amp; mDisplayEnabled &amp;&amp; mPolicy.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isScreenOn&amp;project=m8996">isScreenOn</rich_text>
			<rich_text>();
3632    }


  这个时候切换动画准备完成，但是还不能执行， 需要等到前面的激活的activity组件进入到paused状态，并且接下来的activity进入到resume状态后执行
  
   
   
   
   
  接着前面的startActivityLocked在调用完WindowManagerService.prepareAppTransition以后继续调用resumeTopActivitiesLocked
 ActivityStackSupervisor.resumeTopActivitiesLocked  -&gt; </rich_text>
			<rich_text foreground="#ffff00000000" weight="heavy">ActivityStack.resumeTopActivityLocked</rich_text>
			<rich_text> -&gt; </rich_text>
			<rich_text foreground="#ffff00000000" weight="heavy">ActivityStack.resumeTopActivityInnerLocked</rich_text>
			<rich_text>
 resumeTopActivityInnerLocked 是ActivityStack中比较重要的一个方法，这里与AppTransition相关的主要有
  1) 通知当前处以激活状态的Activity所运行的进程，它所运行的Activity将由Resumed -&gt; Paused
  2) 再次调用PrepareAppTransition准备上一个Activity离开的动画
  3）调用ActivityStackSupervisor.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=startSpecificActivityLocked&amp;project=m8996">startSpecificActivityLocked</rich_text>
			<rich_text> 继续启动Activity
  
  
  -&gt; ActivityStackSupervisor.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=startSpecificActivityLocked&amp;project=m8996">startSpecificActivityLocked</rich_text>
			<rich_text>
             --&gt;  ActivityStackSuperviser.realstartactivitylock //检查用来运行当前正在启动的Activity组件的应用进程是否已经启动来了。如果已经启动起来，那么就会直接通知该应用程序进程将正在启动的Activity加载起来，否则的话，就会先将该应用程序进程启动起来，然后再通知它将正在启动的Activity组件加载
  
                    </rich_text>
			<rich_text weight="heavy">  ---&gt;windowManagerService.setAppVisibility</rich_text>
			<rich_text>
                            1.首先通过findWindowToken获取与这个Activity关联的AppWindowToken, 每个Activity在windowManagerService都会有对应的AppWindowToken对象，用来描述Activity在windowManagerService的状态
                             2.然后根据mNextAppTransition的值来确定当前的Activity是否需要动画的跳转， 如果其mNextAppTransition为TRANSIT_UNSET 说明参数token所描述的Activity就是正在等待执行切换操作的Activity组件
                      
                      </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=wtoken&amp;project=m8996">wtoken</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=hiddenRequested&amp;project=m8996">hiddenRequested</rich_text>
			<rich_text> = !</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=visible&amp;project=m8996">visible</rich_text>
			<rich_text>;   //设置为可见
                      </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (okToDisplay() &amp;&amp; mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionSet&amp;project=m8996">isTransitionSet</rich_text>
			<rich_text>()) {
                            //修改token的可见性
                      }
                      
                      
                              okToDisplay(){
                                  </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text> !mDisplayFrozen &amp;&amp; mDisplayEnabled &amp;&amp; mPolicy.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isScreenOn&amp;project=m8996">isScreenOn</rich_text>
			<rich_text>();
                              }
                              1）屏幕不是处于冻结状态 ！mDisplayFrozen
                              2）允许display
                              3）当前屏幕是点亮的 mPolicy.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isScreenOn&amp;project=m8996">isScreenOn</rich_text>
			<rich_text>();
                             
                             mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionSet&amp;project=m8996">isTransitionSet</rich_text>
			<rich_text>()
                             mNextAppTransition != TRANSIT_UNSET;
 
  -&gt; ActivityStack.</rich_text>
			<rich_text weight="heavy">completeResumeLocked</rich_text>
			<rich_text>
  1. mStackSupervisor.scheduleIdleTimeoutLocked(next)
  ActivityStackSupervisor
3870    </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=scheduleIdleTimeoutLocked&amp;project=m8996">scheduleIdleTimeoutLocked</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ActivityRecord&amp;project=m8996">ActivityRecord</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=next&amp;project=m8996">next</rich_text>
			<rich_text>) {
。。。
3873        </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Message&amp;project=m8996">Message</rich_text>
			<rich_text> msg = mHandler.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=obtainMessage&amp;project=m8996">obtainMessage</rich_text>
			<rich_text>(IDLE_TIMEOUT_MSG, next);
3874        mHandler.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=sendMessageDelayed&amp;project=m8996">sendMessageDelayed</rich_text>
			<rich_text>(msg, IDLE_TIMEOUT);
3875    }
   向ActivityManager发送IDLE_TIMEOUT_MSG消息， 这个消息将在IDOLE_TIMEOUT_MSG 毫秒后处理，用来监控WindowManagerService服务能否在IDLE_TIMEOUT毫秒内完成参数Next所描述的动画，并将窗口显示出来，如果能够做到的话，windowmanagerservice就会通知activitymanagerservice， 然后由activitymanagerservice做一些清理服务，如那些已经stopped状态的activity清理掉。即使做不到，ActivityManager还是要完成这个清理的过程
        
  2. mStackSupervisor.</rich_text>
			<rich_text weight="heavy">reportResumedActivityLocked</rich_text>
			<rich_text>
     a. ensureActivitiesComplete -&gt; ActivityStack.ensureActivitiesVisibleLocked
     b. mWindowManager.executeAppTransition
     
  
  
  
  
  
</rich_text>
			<rich_text weight="heavy">  ActivityStack.ensureActivitiesVisibleLocked(ActivityRecord starting, int configChanges)</rich_text>
			<rich_text>
  
  ActivityRecord 是Activity组件在ActivityManagerService的部分，用来表示Activity的状态, starting表示要启动的组件
  1.通过topRunningActivityLocked获取topActivity的ActivityRecord
  2.遍历TaskHistory, 以及每个Tast的activity， 设置正确的状态， 如果一个Activity正在finish， 跳过
  3. r.app == null ， r.app.thread == null 表示应用还没起来， 会先通过r.visible来确定这个activity是否可见， 如果不可见，则通过setVisible通知windowManagerservice将其设为可见， 查看该activity组件是否starting描述的组件，如果不是通过startSpecificActivityLocked启动该组件
  4.如果Activity已经跑起来了且Activity已经是可见，那就什么都不用做
  5.如果Activity已经跑起来了但是仍旧是不可见的，需要将r.visible设为true， 然后查看是否是resume状态， 与starting是否同一个组件， 如果检查图哦功能过， 将其设为可见。
  
  
  WindowManager.executeAppTransition
  
  4279    @</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Override&amp;project=m8996">Override</rich_text>
			<rich_text>
4280    </rich_text>
			<rich_text weight="heavy">public</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=executeAppTransition&amp;project=m8996">executeAppTransition</rich_text>
			<rich_text>() {
              </rich_text>
			<rich_text foreground="#8b8b69691414">//检查权限</rich_text>
			<rich_text>
4281        </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (!checkCallingPermission(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=android&amp;project=m8996">android</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Manifest&amp;project=m8996">Manifest</rich_text>
			<rich_text>.permission.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=MANAGE_APP_TOKENS&amp;project=m8996">MANAGE_APP_TOKENS</rich_text>
			<rich_text>,
4282                &quot;executeAppTransition()&quot;)) {     
4283            </rich_text>
			<rich_text weight="heavy">throw</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">new</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SecurityException&amp;project=m8996">SecurityException</rich_text>
			<rich_text>(&quot;Requires MANAGE_APP_TOKENS permission&quot;);
4284        }
4285
4286        </rich_text>
			<rich_text weight="heavy">synchronized</rich_text>
			<rich_text>(mWindowMap) {
4287            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (DEBUG_APP_TRANSITIONS) </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Slog&amp;project=m8996">Slog</rich_text>
			<rich_text>.w(TAG, &quot;Execute app transition: &quot; + mAppTransition
4288                    + &quot; Callers=&quot; + </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Debug&amp;project=m8996">Debug</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getCallers&amp;project=m8996">getCallers</rich_text>
			<rich_text>(5));
4289            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionSet&amp;project=m8996">isTransitionSet</rich_text>
			<rich_text>()) { </rich_text>
			<rich_text foreground="#8b8b69691414">//当之前一个Activity准备好，即nextAppTransition ！= TRANSIT_UNSET 时候, 执行performLayoutAndPlaceSurfaceLocked</rich_text>
			<rich_text>
4290                mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setReady&amp;project=m8996">setReady</rich_text>
			<rich_text>();
4291                </rich_text>
			<rich_text weight="heavy">final</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">long</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=origId&amp;project=m8996">origId</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Binder&amp;project=m8996">Binder</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=clearCallingIdentity&amp;project=m8996">clearCallingIdentity</rich_text>
			<rich_text>();
4292                </rich_text>
			<rich_text weight="heavy">try</rich_text>
			<rich_text> {
4293                    </rich_text>
			<rich_text weight="heavy">performLayoutAndPlaceSurfacesLocked</rich_text>
			<rich_text>();
4294                } </rich_text>
			<rich_text weight="heavy">finally</rich_text>
			<rich_text> {
4295                    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Binder&amp;project=m8996">Binder</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=restoreCallingIdentity&amp;project=m8996">restoreCallingIdentity</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=origId&amp;project=m8996">origId</rich_text>
			<rich_text>);
4296                }
4297            }
4298        }
4299    }
  
  
  WindowManager.performLayoutAndPlaceSurfacesLocked
  1.检查是否有窗口回收，如果有的话，调用removeWindowInnerLocked将他们从系统中移除
  2.调用</rich_text>
			<rich_text weight="heavy">performLayoutAndPlaceSurcacesLockedInner</rich_text>
			<rich_text>来刷新系统UI， 包括执行在前面准备的Activity组件切换操作
  3.在执行上面的操作中，如果又有一些窗口要被移除，再调用removiWindowInnerLocked来清除， 并再次递归调用performLayoutAndPlaceSurfacesLockedInner
  
  
  WindowManagerService.performLayoutAndPlaceSurfacesLockedInner
   这个方法是整个WindowManagerService的核心
   1. 计算各个窗口大小，updateFocusdWindowLocked中的performLayoutLockedInner来实现
   2. 计算各个窗口接下来要执行的动画
   3. 执行各个窗口动画
   4. 检查当前是否需要执行Activity组件切换操作，也就是检查成员变量mAppTransitionReady是否为true， 如果等于的话，那么接下来就会执行这个Activity组件切换操作，就是给正在切换的Activity组件应用一个切换动作
        adjustWallpaperWindowsLocked   函数来实现保证壁纸窗口目前是位于那些需要显示壁纸的窗口下面的
    a)handleAppTransitionReadyLocked
         数组mOpenningApps表示正在打开的activity, allDrawn表示绘制完成

AppTransition.</rich_text>
			<rich_text background="#ffffff" foreground="#333333">TRANSIT_WALLPAPER_INTRA_OPEN</rich_text>
			<rich_text> 这种类型的切换动画与打开壁纸窗口相关的
AppTransition</rich_text>
			<rich_text background="#ffffff" foreground="#333333">.TRANSIT_WALLPAPER_INTRA_CLOSE</rich_text>
			<rich_text> 这种类型的切换动画是与关闭壁纸窗口相关的
 
AppTransition.TRANSIT_WALLPAPER_CLOSE 这种类型的切换动画是从一个需要显示壁纸的Activity组件切换到一个不需要显示壁纸的Activity组件上去
AppTransition.TRANSIT_WALLPAPER_OPEN 从一个不需要显示壁纸的Activity组件切换到需要显示壁纸的Activity组件上去

在调整壁纸窗口堆栈的位置的时候，如果刚好碰到系统在执行两个Activity组件的切换， 并且这两个Activity组件都需要显示壁纸，那么Z轴较低的窗口就会保存在mLowerWall


   5.
   
   
   
   
   adjustWallpaperWindowsLocked
   在调整壁纸窗口在窗口堆栈的位置之前， 会首先将壁纸窗口当前的目标窗口保存在变量oldWindow中，
</rich_text>
			<rich_text foreground="#808080">// If non-null, this is the currently visible window that is associated
// with the wallpaper.
</rich_text>
			<rich_text>WindowState </rich_text>
			<rich_text foreground="#9876aa">mWallpaperTarget </rich_text>
			<rich_text>= </rich_text>
			<rich_text foreground="#cc7832">null;
</rich_text>
			<rich_text foreground="#808080">// If non-null, we are in the middle of animating from one wallpaper target
// to another, and this is the lower one in Z-order.
</rich_text>
			<rich_text>WindowState </rich_text>
			<rich_text foreground="#9876aa">mLowerWallpaperTarget </rich_text>
			<rich_text>= </rich_text>
			<rich_text foreground="#cc7832">null;
</rich_text>
			<rich_text foreground="#808080">// If non-null, we are in the middle of animating from one wallpaper target
// to another, and this is the higher one in Z-order.
</rich_text>
			<rich_text>WindowState </rich_text>
			<rich_text foreground="#9876aa">mUpperWallpaperTarget </rich_text>
			<rich_text>= </rich_text>
			<rich_text foreground="#cc7832">null;</rich_text>
			<rich_text>
   
WindowStated表示是窗口在WindowMangerService的形态， 用来表示窗口的状态
mWallpaperTarget如果不为空，表示现在可见的窗口是可以看到wallpaper的
mLowerWallpaperTarget 如果不为空，表示目前正在进行动画转换，这个是属于低Z轴的窗口
mUpperWallpaperTarget 如果不为空，表示目前正在进行动画






转换，这个是属于高Z轴的窗口

WindowStateAnimator 追踪 WindowState的动画状态

mOpenningApps和mClosingApps保存的分别是系统当前正在打开和关闭的Activity组件，根据参数visible的值来确定参数token所描述的Activity组件是正在打开的还是正在关闭的


   adjustWallpaperWindowsLocked中会确定三个成员变量的值
   
   
    1.handleAppTransitionReadyLocked
    2.handleAnimatingStoppedAndTransitionLocked
    3.handleNotObscuredLocked
    4.
    
    

    
    
    
    
  --------------------------------------------------------  
 wallpaper_close_enter.xml
 Wallpaper_open_enter.xml  duration:225 -&gt; 150
 wallpaper_open_exit.xml duration
    
   
   小米的
    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;set android:shareInterpolator=&quot;false&quot; android:zAdjustment=&quot;top&quot;
  xmlns:android=&quot;</rich_text>
			<rich_text link="webs http://schemas.android.com/apk/res/android&quot;&gt;">http://schemas.android.com/apk/res/android&quot;&gt;</rich_text>
			<rich_text>
    &lt;alpha android:interpolator=&quot;@interpolator/linear&quot; 
    android:duration=&quot;75&quot; 
    android:fillBefore=&quot;true&quot; 
    android:fillAfter=&quot;true&quot; 
    android:startOffset=&quot;75&quot; 
    android:fromAlpha=&quot;1.0&quot; 
    android:toAlpha=&quot;0.0&quot; 
    android:fillEnabled=&quot;true&quot; /&gt;
    &lt;translate android:interpolator=&quot;@interpolator/linear&quot; 
    android:duration=&quot;150&quot; 
    android:fillBefore=&quot;true&quot; 
    android:fillAfter=&quot;true&quot; 
    android:fromYDelta=&quot;0.0&quot; 
    android:toYDelta=&quot;50.0%&quot; 
    android:fillEnabled=&quot;true&quot; /&gt;
&lt;/set&gt;

    我们的
    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;set android:shareInterpolator=&quot;false&quot; android:zAdjustment=&quot;top&quot;
  xmlns:android=&quot;</rich_text>
			<rich_text link="webs http://schemas.android.com/apk/res/android&quot;&gt;">http://schemas.android.com/apk/res/android&quot;&gt;</rich_text>
			<rich_text>
    &lt;alpha android:interpolator=&quot;@interpolator/linear&quot; 
    android:duration=&quot;75&quot; 
    android:fillBefore=&quot;true&quot; 
    android:fillAfter=&quot;true&quot; 
    android:startOffset=&quot;75&quot; 
    android:fromAlpha=&quot;1.0&quot; 
    android:toAlpha=&quot;0.0&quot; 
    android:fillEnabled=&quot;true&quot; /&gt;
    &lt;translate android:interpolator=&quot;@interpolator/linear&quot; 
    android:duration=&quot;150&quot; 
    android:fillBefore=&quot;true&quot; 
    android:fillAfter=&quot;true&quot; 
    android:fromYDelta=&quot;0.0&quot; 
    android:toYDelta=&quot;50.0%&quot; 
    android:fillEnabled=&quot;true&quot; /&gt;
&lt;/set&gt;
    
    
    
    
    
    新版本Music 切换
    为什么</rich_text>
			<rich_text weight="heavy">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text> 
    新版本的Music
    从 </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=.activities.BaseMusicPlayerActivity&amp;project=m8996">BaseMusicPlayerActivity</rich_text>
			<rich_text> 非透明 -&gt; </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=.activities.BaseJumpActivity&amp;project=m8996">BaseJumpActivity</rich_text>
			<rich_text>  透明
    Theme分别为 android:</rich_text>
			<rich_text weight="heavy">theme=</rich_text>
			<rich_text>&quot;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/&amp;project=m8996">style</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/Music5.Dark.BaseMusicPlayer&amp;project=m8996">Music5.Dark.BaseMusicPlayer</rich_text>
			<rich_text>&quot; 以及android:</rich_text>
			<rich_text weight="heavy">theme=</rich_text>
			<rich_text>&quot;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/&amp;project=m8996">style</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/Music5.Dark&amp;project=m8996">Music5.Dark</rich_text>
			<rich_text>&quot;
    9    &lt;style </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=Music5.Dark.BaseMusicPlayer&amp;project=m8996">Music5.Dark.BaseMusicPlayer</rich_text>
			<rich_text>&quot; </rich_text>
			<rich_text weight="heavy">parent=</rich_text>
			<rich_text>&quot;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=Music5.Dark&amp;project=m8996">Music5.Dark</rich_text>
			<rich_text>&quot;&gt;
</rich_text>
			<rich_text weight="heavy">20        &lt;item name=&quot;android:windowIsTranslucent&quot;&gt;false&lt;/item&gt;</rich_text>
			<rich_text>
21        &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text>&quot;android:windowAnimationStyle&quot;&gt;@null&lt;/item&gt;
22    &lt;/style&gt;

&quot;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=Music5.Dark&amp;project=m8996">Music5.Dark</rich_text>
			<rich_text>&quot;
        &lt;item </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;android:windowIsTranslucent&quot;&gt;true&lt;/item&gt;
        &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text>&quot;android:</rich_text>
			<rich_text weight="heavy">windowAnimationStyle</rich_text>
			<rich_text>&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/&amp;project=m8996">style</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/music_windowAnimationStyle&amp;project=m8996">music_windowAnimationStyle</rich_text>
			<rich_text>&lt;/item&gt;
           
           
79    &lt;style </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;</rich_text>
			<rich_text weight="heavy">music_windowAnimationStyle</rich_text>
			<rich_text>&quot; </rich_text>
			<rich_text weight="heavy">parent=</rich_text>
			<rich_text>&quot;android:</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/&amp;project=m8996">style</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/Animation.Translucent&amp;project=m8996">Animation.Translucent</rich_text>
			<rich_text>&quot;&gt;
80    &lt;!-- add for  2401692 begin--&gt;
81    &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text> &quot;android:windowEnterAnimation&quot;&gt;@null&lt;/item&gt;
82    &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text> &quot;android:windowExitAnimation&quot; &gt;@null&lt;/item&gt;
83    &lt;!-- add for  2401692 end--&gt;
84    &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text>&quot;android:activityOpenEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8996">anim</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_anim_in&amp;project=m8996">activity_anim_in</rich_text>
			<rich_text>&lt;/item&gt;
85    &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text>&quot;android:activityOpenExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8996">anim</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_anim_out&amp;project=m8996">activity_anim_out</rich_text>
			<rich_text>&lt;/item&gt;
86&lt;/style&gt; 。


            
  08-01 16:36:30.977  1434  1505 V WindowManagerService: applyAnimation: atoken=AppWindowToken{37cc0c7 token=Token{3756206 ActivityRecord{518d4e1 u0 com.alcatel.music5.china/com.alcatel.music5.activities.BaseJumpActivity t19}}}
08-01 16:36:30.978  1434  1505 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@cb7a7ea animAttr=0x4 enter:true transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text> isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-01 16:36:30.978  1434  1505 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-01 16:36:30.978  1434  1505 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-01 16:36:30.978  1434  1505 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-01 16:36:30.981  1434  1505 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{cf59892 com.alcatel.music5.china/com.alcatel.music5.activities.BaseJumpActivity} anim=0 attr=0x0 a=android.view.animation.AnimationSet@16fb851 transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393 

    
    老版本Music 切换
   08-01 16:43:58.506  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{7aa6378 token=Token{db80cdb ActivityRecord{e24c1ea u0 com.alcatel.music5.china/com.alcatel.music5.activities.BaseJumpActivity t27}}}
08-01 16:43:58.508  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@959e0a7 animAttr=0x12 enter:true transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> isEntrance=</rich_text>
			<rich_text weight="heavy">true</rich_text>
			<rich_text> Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-01 16:43:58.508  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-01 16:43:58.508  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-01 16:43:58.508  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-01 16:43:58.511  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{a05c289 com.alcatel.music5.china/com.alcatel.music5.activities.BaseJumpActivity} anim=0 attr=0x0 a=null transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393 
    
    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=WindowAnimation_wallpaperCloseEnterAnimation&amp;project=m8996">WindowAnimation_wallpaperCloseEnterAnimation</rich_text>
			<rich_text>
    
    
    
    启动安全管家应用
   08-01 16:46:45.328  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{d0d0f90 token=Token{ef7fa53 ActivityRecord{7129a42 u0 com.tcl.ota/.SystemUpdatesActivity t33}}}
08-01 16:46:45.328  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@d3c1f97 nextAppTransition=ANIM_SCALE_UP transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> isEntrance=</rich_text>
			<rich_text weight="heavy">true</rich_text>
			<rich_text> Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-01 16:46:45.328  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-01 16:46:45.329  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-01 16:46:45.329  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-01 16:46:45.331  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{68423d8 Starting com.tcl.ota} anim=0 attr=0x0 a=null transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393 
08-01 16:46:45.332  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{4b1de78 token=Token{29493db ActivityRecord{81304ea u0 com.tcl.mie.tlauncher/com.android.launcher3.Launcher t26}}}
08-01 16:46:45.332  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AlphaAnimation@a03a584 nextAppTransition=ANIM_SCALE_UP transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> isEntrance=</rich_text>
			<rich_text weight="heavy">false</rich_text>
			<rich_text> Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9532 
08-01 16:46:45.333  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-01 16:46:45.333  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-01 16:46:45.333  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-01 16:46:45.369  1441  2442 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{26ff505 com.tcl.mie.tlauncher/com.android.launcher3.Launcher} anim=0 attr=0x1 a=null transit=2 isEntrance=false Callers com.android.server.wm.WindowManagerService.relayoutWindow:3319 com.android.server.wm.Session.relayout:198 android.view.IWindowSession$Stub.onTransact:284 
08-01 16:46:45.487  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{8d795f0 com.tcl.ota/com.tcl.ota.SystemUpdatesActivity} anim=0 attr=0x0 a=null transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.WindowStateAnimator.commitFinishDrawingLocked:555 
08-01 16:46:45.512  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{68423d8 Starting com.tcl.ota} anim=17432593 attr=0xffffffff a=android.view.animation.AlphaAnimation@cb43308 transit=5 isEntrance=false Callers com.android.server.wm.WindowManagerService.removeWindowLocked:2762 com.android.server.wm.WindowManagerService.removeWindow:2716 com.android.server.wm.Session.remove:187 



A1、A2都带有</rich_text>
			<rich_text foreground="#008000">windowShowWallpaper</rich_text>
			<rich_text> 属性，从A1启动到A2 调用  TRANSIT_WALLPAPER_INTRA_OPEN  两次， 一次是enter， 一次是exit

08-02 08:44:00.497  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{e0bac1b token=Token{792562a ActivityRecord{ea63315 u0 test.example.com.myapplication/.SecondActivity t74}}}
08-02 08:44:00.499  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@c65ffd0 animAttr=0x14 enter:true transit=TRANSIT_WALLPAPER_INTRA_OPEN isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-02 08:44:00.500  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-02 08:44:00.502  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-02 08:44:00.502  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-02 08:44:00.505  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{d7aaf6 test.example.com.myapplication/test.example.com.myapplication.SecondActivity} anim=0 attr=0x0 a=null transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393 
08-02 08:44:00.506  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{641bb5e token=Token{653dc99 ActivityRecord{f9f21e0 u0 test.example.com.myapplication/.MainActivity t74}}}
08-02 08:44:00.507  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@73522ce animAttr=0x15 enter:false transit=TRANSIT_WALLPAPER_INTRA_OPEN isEntrance=false Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9532 
08-02 08:44:00.507  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-02 08:44:00.507  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-02 08:44:00.507  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-02 08:44:00.557  1441  2436 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{677b337 test.example.com.myapplication/test.example.com.myapplication.MainActivity} anim=0 attr=0x1 a=null transit=2 isEntrance=false Callers com.android.server.wm.WindowManagerService.relayoutWindow:3319 com.android.server.wm.Session.relayout:198 android.view.IWindowSession$Stub.onTransact:284 



A1、A2都带有</rich_text>
			<rich_text foreground="#008000">windowIsTranslucent</rich_text>
			<rich_text>属性，从A1启动到A2 调用TRANSIT_WALLPAPER_CLOSE 一次， 表示enter 
08-02 08:48:32.147  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{30f62e2 token=Token{2a11fad ActivityRecord{821f4c4 u0 test.example.com.myapplication/.SecondActivity t76}}}
08-02 08:48:32.148  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@9d39765 animAttr=0x12 enter:true transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-02 08:48:32.148  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-02 08:48:32.148  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-02 08:48:32.148  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-02 08:48:32.150  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{5dd09a9 test.example.com.myapplication/test.example.com.myapplication.SecondActivity} anim=0 attr=0x0 a=null transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393



 </rich_text>
			<rich_text weight="heavy">需要进一步研究</rich_text>
			<rich_text>
A1、 A2都带</rich_text>
			<rich_text foreground="#008000">windowIsTranslucent</rich_text>
			<rich_text> ,且带有下面自定义动画 
&lt;</rich_text>
			<rich_text foreground="#000080">style</rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;myanimation&quot;</rich_text>
			<rich_text foreground="#0000ff">parent=</rich_text>
			<rich_text foreground="#008000">&quot;android:style/Animation.Translucent&quot;</rich_text>
			<rich_text>&gt;
&lt;</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;android:activityOpenEnterAnimation&quot;</rich_text>
			<rich_text>&gt;@anim/activity_anim_in&lt;/</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text>&gt;
&lt;</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;android:activityOpenExitAnimation&quot;</rich_text>
			<rich_text>&gt;@anim/activity_anim_out&lt;/</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text>&gt;

&lt;</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;android:windowEnterAnimation&quot;</rich_text>
			<rich_text>&gt;@null&lt;/</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text>&gt;
&lt;</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;android:windowExitAnimation&quot;</rich_text>
			<rich_text>&gt;@null&lt;/</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text>&gt;
&lt;/</rich_text>
			<rich_text foreground="#000080">style</rich_text>
			<rich_text>&gt;
从A1到A2启动调用TRANSIT_ACTIVITY_OPEN 一次， 表示enter

  08-02 09:05:31.429  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{5576aaa token=Token{7b8c995 ActivityRecord{c17f54c u0 test.example.com.myapplication/.SecondActivity t82}}}
08-02 09:05:31.430  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@e0ea502 animAttr=0x4 enter:true transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text> isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-02 09:05:31.431  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-02 09:05:31.431  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-02 09:05:31.431  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-02 09:05:31.435  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{5296a11 test.example.com.myapplication/test.example.com.myapplication.SecondActivity} anim=0 attr=0x0 a=android.view.animation.AnimationSet@a864a49 transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393 

    
    
 新Music启动， 为什么明明是</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> 却没有调用相应的动画？ 因为其nextAppTransition 是 </rich_text>
			<rich_text weight="heavy">ANIM_SCALE_UP</rich_text>
			<rich_text>， 这个应该是引用启动的动画，优先级比</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text>， 这个时候会直接跳过</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> 执行</rich_text>
			<rich_text weight="heavy">ANIM_SCALE_UP</rich_text>
			<rich_text>动画， AppTranasition中 </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=createScaleUpAnimationLocked&amp;project=m8996">createScaleUpAnimationLocked</rich_text>
			<rich_text>
 
 08-02 09:12:08.715  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{2734149 token=Token{c9f6b50 ActivityRecord{baf6d13 u0 com.alcatel.music5.china/com.alcatel.music5.activities.BaseMusicPlayerActivity t84}}}
08-02 09:12:08.716  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@d7d3567 nextAppTransition=</rich_text>
			<rich_text weight="heavy">ANIM_SCALE_UP</rich_text>
			<rich_text> transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-02 09:12:08.716  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-02 09:12:08.716  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-02 09:12:08.716  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-02 09:12:08.719  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{5256b8b com.alcatel.music5.china/com.alcatel.music5.activities.BaseMusicPlayerActivity} anim=0 attr=0x0 a=null transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393 
08-02 09:12:08.721  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{4b1de78 token=Token{29493db ActivityRecord{81304ea u0 com.tcl.mie.tlauncher/com.android.launcher3.Launcher t26}}}
08-02 09:12:08.722  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AlphaAnimation@93f4f14 nextAppTransition=</rich_text>
			<rich_text weight="heavy">ANIM_SCALE_UP</rich_text>
			<rich_text> transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> isEntrance=false Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9532 
08-02 09:12:08.723  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-02 09:12:08.723  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-02 09:12:08.723  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-02 09:12:08.751  1441  2465 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{26ff505 com.tcl.mie.tlauncher/com.android.launcher3.Launcher} anim=0 attr=0x1 a=null transit=2 isEntrance=false Callers com.android.server.wm.WindowManagerService.relayoutWindow:3319 com.android.server.wm.Session.relayout:198 android.view.IWindowSession$Stub.onTransact:284 
   
    
    
    
    
    
    
    
    
    </rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="时序图" prog_lang="custom-colors" readonly="False" tags="" unique_id="3">
				<rich_text>在线时序图
</rich_text>
				<rich_text link="webs http://echoma.github.io/text_sequence_diagram/">http://echoma.github.io/text_sequence_diagram/</rich_text>
				<rich_text>

# Title And Author
AppTansition @ v1.0 @ 20160703 @ RainHu

# Object And Messages
ActivityStackSupervisor : startActivityLocked
ActivityStackSupervisor -&gt; ActivityStack : startActivityUncheckedLocked
ActivityStack -&gt; WindowManagerService : startActivityLocked
WindowManagerService :  prepareAppTransition
ActivityStackSupervisor -&gt; ActivityStack : resumeTopActivityLocked
ActivityStack  : resumeTopActivityLocked
ActivityStack -&gt;  WindowManagerService : resumeTopActivityInnerLocked
WindowManagerService : prepareAppTransition
ActivityStackSupervisor :  startSpecificActivityLocked
ActivityStackSupervisor -&gt; ActivityStack :  realStartActivityLocked
ActivityStack : minimalResumeActivityLocked 
ActivityStack -&gt; ActivityStackSupervisor : completeResumeLocked
ActivityStackSupervisor -&gt;  WindowManagerService : reportResumedActivityLocked 
WindowManagerService : executeAppTransition
WindowManagerService : performLayoutAndPlaceSurfacesLocked
WindowManagerService : performLayoutAndPlaceSurfacesLockedInner
WindowManagerService : handleAppTransitionReadyLocked
WindowManagerService  : setTokenVisibilityLocked
WindowManagerService -&gt; AppTransition : applyAnimationLocked
AppTransition : loadAnimation

# Bottom Description
[ how an activity transation animation works ]</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Demo中的Style" prog_lang="custom-colors" readonly="False" tags="" unique_id="109">
				<rich_text>&lt;</rich_text>
				<rich_text foreground="#000080">resources</rich_text>
				<rich_text>&gt;
</rich_text>
				<rich_text foreground="#808080">&lt;!--Baseapplicationtheme.--&gt;
</rich_text>
				<rich_text>&lt;</rich_text>
				<rich_text foreground="#000080">style</rich_text>
				<rich_text foreground="#0000ff">name=</rich_text>
				<rich_text foreground="#008000">&quot;AppTheme&quot;</rich_text>
				<rich_text foreground="#0000ff">parent=</rich_text>
				<rich_text foreground="#008000">&quot;Theme.AppCompat.Light.DarkActionBar&quot;</rich_text>
				<rich_text>&gt;
&lt;</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text foreground="#0000ff">name=</rich_text>
				<rich_text foreground="#008000">&quot;android:windowIsTranslucent&quot;</rich_text>
				<rich_text>&gt;false&lt;/</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text>&gt;
&lt;</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text foreground="#0000ff">name=</rich_text>
				<rich_text foreground="#008000">&quot;android:windowShowWallpaper&quot;</rich_text>
				<rich_text>&gt;false&lt;/</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text>&gt;
</rich_text>
				<rich_text foreground="#808080">&lt;!--&lt;itemname=&quot;android:windowAnimationStyle&quot;&gt;@style/myanimation&lt;/item&gt;--&gt;
&lt;!--&lt;itemname=&quot;android:windowAnimationStyle&quot;&gt;@style/myanimation&lt;/item&gt;--&gt;
</rich_text>
				<rich_text>&lt;/</rich_text>
				<rich_text foreground="#000080">style</rich_text>
				<rich_text>&gt;
&lt;</rich_text>
				<rich_text foreground="#000080">style</rich_text>
				<rich_text foreground="#0000ff">name=</rich_text>
				<rich_text foreground="#008000">&quot;myanimation&quot;</rich_text>
				<rich_text foreground="#0000ff">parent=</rich_text>
				<rich_text foreground="#008000">&quot;android:style/Animation.Translucent&quot;</rich_text>
				<rich_text>&gt;
&lt;</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text foreground="#0000ff">name=</rich_text>
				<rich_text foreground="#008000">&quot;android:activityOpenEnterAnimation&quot;</rich_text>
				<rich_text>&gt;@anim/activity_anim_in&lt;/</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text>&gt;
&lt;</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text foreground="#0000ff">name=</rich_text>
				<rich_text foreground="#008000">&quot;android:activityOpenExitAnimation&quot;</rich_text>
				<rich_text>&gt;@anim/activity_anim_out&lt;/</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text>&gt;

&lt;/</rich_text>
				<rich_text foreground="#000080">style</rich_text>
				<rich_text>&gt;


&lt;</rich_text>
				<rich_text foreground="#000080">style</rich_text>
				<rich_text foreground="#0000ff">name=</rich_text>
				<rich_text foreground="#008000">&quot;mywindowAnimationStyle&quot;</rich_text>
				<rich_text foreground="#0000ff">parent=</rich_text>
				<rich_text foreground="#008000">&quot;android:style/Animation.Activity&quot;</rich_text>
				<rich_text>&gt;
&lt;</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text foreground="#0000ff">name=</rich_text>
				<rich_text foreground="#008000">&quot;android:activityOpenEnterAnimation&quot;</rich_text>
				<rich_text>&gt;@anim/activity_anim_in&lt;/</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text>&gt;
&lt;</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text foreground="#0000ff">name=</rich_text>
				<rich_text foreground="#008000">&quot;android:activityOpenExitAnimation&quot;</rich_text>
				<rich_text>&gt;@anim/activity_anim_out&lt;/</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text>&gt;
&lt;/</rich_text>
				<rich_text foreground="#000080">style</rich_text>
				<rich_text>&gt;

&lt;</rich_text>
				<rich_text foreground="#000080">style</rich_text>
				<rich_text foreground="#0000ff">name=</rich_text>
				<rich_text foreground="#008000">&quot;AppTheme2&quot;</rich_text>
				<rich_text foreground="#0000ff">parent=</rich_text>
				<rich_text foreground="#008000">&quot;Theme.AppCompat.Light.DarkActionBar&quot;</rich_text>
				<rich_text>&gt;
&lt;</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text foreground="#0000ff">name=</rich_text>
				<rich_text foreground="#008000">&quot;android:windowShowWallpaper&quot;</rich_text>
				<rich_text>&gt;true&lt;/</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text>&gt;
&lt;</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text foreground="#0000ff">name=</rich_text>
				<rich_text foreground="#008000">&quot;android:windowIsTranslucent&quot;</rich_text>
				<rich_text>&gt;false&lt;/</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text>&gt;
</rich_text>
				<rich_text foreground="#808080">&lt;!--&lt;itemname=&quot;android:windowAnimationStyle&quot;&gt;@style/myanimation2&lt;/item&gt;--&gt;
&lt;!--&lt;itemname=&quot;android:activityOpenEnterAnimation&quot;&gt;@null&lt;/item&gt;--&gt;
&lt;!--&lt;itemname=&quot;android:activityOpenExitAnimation&quot;&gt;@null&lt;/item&gt;--&gt;
&lt;!--&lt;itemname=&quot;android:windowAnimationStyle&quot;&gt;@style/myanimation2&lt;/item&gt;--&gt;
</rich_text>
				<rich_text>&lt;/</rich_text>
				<rich_text foreground="#000080">style</rich_text>
				<rich_text>&gt;

&lt;</rich_text>
				<rich_text foreground="#000080">style</rich_text>
				<rich_text foreground="#0000ff">name=</rich_text>
				<rich_text foreground="#008000">&quot;mywindowAnimationStyle2&quot;</rich_text>
				<rich_text foreground="#0000ff">parent=</rich_text>
				<rich_text foreground="#008000">&quot;android:style/Animation.Activity&quot;</rich_text>
				<rich_text>&gt;
&lt;</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text foreground="#0000ff">name=</rich_text>
				<rich_text foreground="#008000">&quot;android:activityOpenEnterAnimation&quot;</rich_text>
				<rich_text>&gt;@anim/activity_anim_in_for_code&lt;/</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text>&gt;
&lt;</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text foreground="#0000ff">name=</rich_text>
				<rich_text foreground="#008000">&quot;android:activityOpenExitAnimation&quot;</rich_text>
				<rich_text>&gt;@anim/activity_anim_out_for_code&lt;/</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text>&gt;
&lt;/</rich_text>
				<rich_text foreground="#000080">style</rich_text>
				<rich_text>&gt;


&lt;</rich_text>
				<rich_text foreground="#000080">style</rich_text>
				<rich_text foreground="#0000ff">name=</rich_text>
				<rich_text foreground="#008000">&quot;myanimation2&quot;</rich_text>
				<rich_text foreground="#0000ff">parent=</rich_text>
				<rich_text foreground="#008000">&quot;android:style/Animation.Translucent&quot;</rich_text>
				<rich_text>&gt;
&lt;</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text foreground="#0000ff">name=</rich_text>
				<rich_text foreground="#008000">&quot;android:activityOpenEnterAnimation&quot;</rich_text>
				<rich_text>&gt;@anim/activity_anim_in_for_code&lt;/</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text>&gt;
&lt;</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text foreground="#0000ff">name=</rich_text>
				<rich_text foreground="#008000">&quot;android:activityOpenExitAnimation&quot;</rich_text>
				<rich_text>&gt;@anim/activity_anim_out_for_code&lt;/</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text>&gt;
&lt;</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text foreground="#0000ff">name=</rich_text>
				<rich_text foreground="#008000">&quot;android:windowEnterAnimation&quot;</rich_text>
				<rich_text>&gt;@null&lt;/</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text>&gt;
&lt;</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text foreground="#0000ff">name=</rich_text>
				<rich_text foreground="#008000">&quot;android:windowExitAnimation&quot;</rich_text>
				<rich_text>&gt;@null&lt;/</rich_text>
				<rich_text foreground="#000080">item</rich_text>
				<rich_text>&gt;
&lt;/</rich_text>
				<rich_text foreground="#000080">style</rich_text>
				<rich_text>&gt;

&lt;/</rich_text>
				<rich_text foreground="#000080">resources</rich_text>
				<rich_text>&gt;
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Material-Animations Demo" prog_lang="custom-colors" readonly="False" tags="" unique_id="138">
				<rich_text link="webs https://github.com/lgvalle/Material-Animations">https://github.com/lgvalle/Material-Animations</rich_text>
				<rich_text>

frameworks/base/core/java/android/transition

android.transition.Transitionz主要义了三种动画Explode, Slide, Fade

TransitionManager

告诉framework我们要执行一些UI变换
TransitionManager.beginDelayedTransition(sceneRoot);


</rich_text>
				<rich_text foreground="#333333">ViewAnimationUtils</rich_text>
				<rich_text>
</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Multi-Window" prog_lang="custom-colors" readonly="False" tags="" unique_id="108">
			<rich_text> 在 Android N 中，我们为该平台引入了一个新的而且非常需要的多任务处理功能 — 多窗口支持。
 
 需要注意的是，目前Android N的分屏功能只支持为数不多的应用，大部分还是谷歌自家产品，但随着开发者的逐渐适配，越来越多的热门应用应该都会跟进。
 现在，用户可以一次在屏幕上打开两个APP。
•   在运行 Android  N  的手机和平板电脑上，用户可以并排运行两个APP，或者处于分屏模式时一个APP位于另一个APP之上。用户可以通过拖动两个APP之间的分隔线来调整APP。
•   在 Android  TV 设备上，APP可以将自身置于画中画模式，从而让它们可以在用户浏览或与其他APP交互时继续显示内容。如需了解详细信息，请参阅下文。
 多窗口支持为您提供新的吸引用户方式，特别是在平板电脑和其他更大屏幕的设备上。您甚至可以在您的APP中启用拖放，从而使用户可以方便地将内容拖放到您的应用或从其中拖出内容—这是一个非常好的增强用户体验的方式。
 向您的APP添加多窗口支持并配置多窗口显示的处理方式非常简单。例如，您可以指定您的 Activity 允许的最小尺寸，从而防止用户将 Activity 调整到该尺寸以下。您还可以为APP禁用多窗口显示，这可确保系统将仅以全屏模式显示APP。
 在 Android N 中，我们为该平台引入了一个新的而且非常需要的多任务处理功能 — 多窗口支持。
 
 
 需要注意的是，目前Android N的分屏功能只支持为数不多的应用，大部分还是谷歌自家产品，但随着开发者的逐渐适配，越来越多的热门应用应该都会跟进。
 现在，用户可以一次在屏幕上打开两个APP。
•   在运行 Android  N  的手机和平板电脑上，用户可以并排运行两个APP，或者处于分屏模式时一个APP位于另一个APP之上。用户可以通过拖动两个APP之间的分隔线来调整APP。
•   在 Android  TV 设备上，APP可以将自身置于画中画模式，从而让它们可以在用户浏览或与其他APP交互时继续显示内容。如需了解详细信息，请参阅下文。
 多窗口支持为您提供新的吸引用户方式，特别是在平板电脑和其他更大屏幕的设备上。您甚至可以在您的APP中启用拖放，从而使用户可以方便地将内容拖放到您的应用或从其中拖出内容—这是一个非常好的增强用户体验的方式。
 向您的APP添加多窗口支持并配置多窗口显示的处理方式非常简单。例如，您可以指定您的 Activity 允许的最小尺寸，从而防止用户将 Activity 调整到该尺寸以下。您还可以为APP禁用多窗口显示，这可确保系统将仅以全屏模式显示APP
 
 
 1.设备厂商如何启用这个功能？
  
 2. 用户如何开启这个功能，通过Recent
 
 在多窗口模式中，  只有最近与用户交互过的Activity被为活动状态的Activity， 称为顶级Activity， 另外的可见的Activity比不可见的Activity享有更高的优先级，仍旧会处于onPause状态
 所有如果希望这个处于暂停的Activity仍旧能播放视频，建议将暂停视频播放从onPause放到onStop，对应的重新播放也要放到onStart
 
 
 3.应用如何去支持多窗口这个功能？
 如上面所说，视频播放的应用需要进行一定的修改。
 
 布局属性需要做一定的修改，以应对Activity大小的切换
 
 
 WindowManagerService
 关于app-origin
3582        </rich_text>
			<rich_text weight="heavy">final</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=inMultiWindow&amp;project=n8996">inMultiWindow</rich_text>
			<rich_text> = isStackVisibleLocked(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=DOCKED_STACK_ID&amp;project=n8996">DOCKED_STACK_ID</rich_text>
			<rich_text>)
3583                || isStackVisibleLocked(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=FREEFORM_WORKSPACE_STACK_ID&amp;project=n8996">FREEFORM_WORKSPACE_STACK_ID</rich_text>
			<rich_text>);
 
         --
         4974    </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=isStackVisibleLocked&amp;project=n8996">isStackVisibleLocked</rich_text>
			<rich_text>(</rich_text>
			<rich_text weight="heavy">int</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=stackId&amp;project=n8996">stackId</rich_text>
			<rich_text>) {
        4975        </rich_text>
			<rich_text weight="heavy">final</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TaskStack&amp;project=n8996">TaskStack</rich_text>
			<rich_text> stack = mStackIdToStack.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=get&amp;project=n8996">get</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=stackId&amp;project=n8996">stackId</rich_text>
			<rich_text>);
        4976        </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text> (stack != </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=n8996">null</rich_text>
			<rich_text> &amp;&amp; stack.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isVisibleLocked&amp;project=n8996">isVisibleLocked</rich_text>
			<rich_text>());
        4977    }


 WindowState
2418    </rich_text>
			<rich_text weight="heavy">public</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=isInMultiWindowMode&amp;project=n8996">isInMultiWindowMode</rich_text>
			<rich_text>() {
2419        </rich_text>
			<rich_text weight="heavy">final</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Task&amp;project=n8996">Task</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=task&amp;project=n8996">task</rich_text>
			<rich_text> = getTask();
2420        </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=task&amp;project=n8996">task</rich_text>
			<rich_text> != </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=n8996">null</rich_text>
			<rich_text> &amp;&amp; !</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=task&amp;project=n8996">task</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isFullscreen&amp;project=n8996">isFullscreen</rich_text>
			<rich_text>();
2421    }
 
 
 
 View.setSystemUiVisibility()
 -&gt; recomputeViewAttributes
 
 ViewRootImpl -&gt; recomputeViewAttributes
 
 
 
 ActivityManagerService首先根据token查看这个Activity对应的Task是否在堆栈中，如果存在且这个Task并不是处于全屏的状态，那么认为是处于多窗口模式
7624    @</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Override">Override</rich_text>
			<rich_text>
7625    </rich_text>
			<rich_text weight="heavy">public</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isInMultiWindowMode">isInMultiWindowMode</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=IBinder">IBinder</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=token">token</rich_text>
			<rich_text>) {
7626        </rich_text>
			<rich_text weight="heavy">final</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">long</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=origId">origId</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Binder">Binder</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=clearCallingIdentity">clearCallingIdentity</rich_text>
			<rich_text>();
7627        </rich_text>
			<rich_text weight="heavy">try</rich_text>
			<rich_text> {
7628            </rich_text>
			<rich_text weight="heavy">synchronized</rich_text>
			<rich_text>(</rich_text>
			<rich_text weight="heavy">this</rich_text>
			<rich_text>) {
7629                </rich_text>
			<rich_text weight="heavy">final</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ActivityRecord">ActivityRecord</rich_text>
			<rich_text> r = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ActivityRecord">ActivityRecord</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isInStackLocked">isInStackLocked</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=token">token</rich_text>
			<rich_text>);
7630                </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (r == </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null">null</rich_text>
			<rich_text>) {
7631                    </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">false</rich_text>
			<rich_text>;
7632                }
7633                </rich_text>
			<rich_text foreground="#666666">// An activity is consider to be in multi-window mode if its task isn't fullscreen.</rich_text>
			<rich_text>
7634                </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text> !r.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=task">task</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mFullscreen">mFullscreen</rich_text>
			<rich_text>;
7635            }
7636        } </rich_text>
			<rich_text weight="heavy">finally</rich_text>
			<rich_text> {
7637            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Binder">Binder</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=restoreCallingIdentity">restoreCallingIdentity</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=origId">origId</rich_text>
			<rich_text>);
7638        }
7639    }





Activity.scheduleMultiWindowModeChanged 会发送H.MULTI_WINDOW_MODE_CHANGED来调用ActivityThread.handleMultiWindowModeChanged

ActivityThread.handleMultiWindowModeChanged()会调用dispatchMultiWindowModeChanged
2946    </rich_text>
			<rich_text weight="heavy">private</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=handleMultiWindowModeChanged&amp;project=n8996">handleMultiWindowModeChanged</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=IBinder&amp;project=n8996">IBinder</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=token&amp;project=n8996">token</rich_text>
			<rich_text>, </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=isInMultiWindowMode&amp;project=n8996">isInMultiWindowMode</rich_text>
			<rich_text>) {
2947        </rich_text>
			<rich_text weight="heavy">final</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ActivityClientRecord&amp;project=n8996">ActivityClientRecord</rich_text>
			<rich_text> r = mActivities.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=get&amp;project=n8996">get</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=token&amp;project=n8996">token</rich_text>
			<rich_text>);
2948        </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (r != </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=n8996">null</rich_text>
			<rich_text>) {
2949            r.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=activity&amp;project=n8996">activity</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=dispatchMultiWindowModeChanged&amp;project=n8996">dispatchMultiWindowModeChanged</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isInMultiWindowMode&amp;project=n8996">isInMultiWindowMode</rich_text>
			<rich_text>);
2950        }
2951    }
同样的还有ActivityThread.handlePictureInPictureModeChanged()



Activity.dispatchMultiWindowModeChanged调用OnMultiWindowModeChanged

 Activity.onMultiWindowModeChanged将会在Activity从全屏状态到Multi-Window被调用，反之亦然
 在Activity.onMultiWindowModeChanged中代码是空的，可以被继承使用
 
 
 
 WindowManagerService.getAppSpecifiedOrientation 应该是关于app的方向的，与Multi-window相关
 
 
系统确定是否处于Mult-Window 需要借助与此Activity所在Task是否处于全屏，而Android隐藏状态栏的方式是通过FLAG_FULLSCREEN的方式使得Activity全屏的方式来实现隐藏状态栏，所以需要改成对特定应用既能够处于Multi-Window，又能够处于全屏的状态才能满足需求。
也就是说我们需要重新定义一种状态，能够让应用处于“所谓的全屏”又是multi-Window的状态，还需要对这种状态进行管理，维护，要改的太多了。


window attr 状态改变之后 会调用 PhoneWindowManager.updateSystemUiVisibilityLw

2340        mStatusBarHeight =
2341                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=res&amp;project=n8996">res</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getDimensionPixelSize&amp;project=n8996">getDimensionPixelSize</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=com&amp;project=n8996">com</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=android&amp;project=n8996">android</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=internal&amp;project=n8996">internal</rich_text>
			<rich_text>.R.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=dimen&amp;project=n8996">dimen</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=status_bar_height&amp;project=n8996">status_bar_height</rich_text>
			<rich_text>);
2342
 
 
 
 -&gt; updateSystemBarsLw
 
                         </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=IStatusBarService&amp;project=m8996">IStatusBarService</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=statusbar&amp;project=m8996">statusbar</rich_text>
			<rich_text> = getStatusBarService();
8232                        </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=statusbar&amp;project=m8996">statusbar</rich_text>
			<rich_text> != </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=m8996">null</rich_text>
			<rich_text>) {
8233                            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=statusbar&amp;project=m8996">statusbar</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setSystemUiVisibility&amp;project=m8996">setSystemUiVisibility</rich_text>
			<rich_text>(visibility, 0xffffffff, </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=win&amp;project=m8996">win</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=toString&amp;project=m8996">toString</rich_text>
			<rich_text>());
8234                            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=statusbar&amp;project=m8996">statusbar</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=topAppWindowChanged&amp;project=m8996">topAppWindowChanged</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=needsMenu&amp;project=m8996">needsMenu</rich_text>
			<rich_text>);
8235                        }


StatusBarManagerService.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setSystemUiVisibility&amp;project=n8996">setSystemUiVisibility</rich_text>
			<rich_text>

mBar.setSystemUiVisibility

PhoneStatusBar.setSystemUiVisibility

据我所知，目前隐藏状态栏的方式主要有下面两种
1）通过 WindowManager.LayoutParams.FLAG_FULLSCREEN
2)  通过setSystemUiVisibility(View.SYSTEM_UI_FLAG_FULLSCREEN)
也就是说，目前都是通过fullscreen的标识来实现隐藏状态栏， 本身系统就没有提供相应的API去单独隐藏状态栏。而系统判断Activity是否处于Multi-Window模式就是通过其Activity所在的Task是否全屏来实现，所以这是Multi-Window模式下无法隐藏状态栏的原因。

要实现个别应用在Multi-Window下还能该隐藏状态栏，这个就需要实现不全屏的情况下单独隐藏状态栏的API


在MultiWindow模式下点击Home键，靠近StatusBar一侧的Window， 如果处于活动状态，会调用onPause， 如果不是处于活动状态（已经处于onPause），不会调用任何生命周期,。也就是说靠近statusBar的window不会调用onStop

而常规模式下，点击Home，Activity会进入onStop状态。

两个Mult-Split的Window，触摸非活动的window， 当前活动的window 调用onPause， 非活动窗口调用onResume
在Multi-Window模式下锁屏，
活动窗口.onPause
活动窗口.onStop

再解锁以后，原来处于活动的窗口
活动窗口.onStart
活动窗口.onResume
非活动窗口.onStart


ActivityManagerService -&gt; handleAppDiedLocked
 or ActivityManagerService -&gt;keyguardGoingAway
 or ActivityManagerService  -&gt; setTaskResizable
 or ActivityManagerService -&gt; swapDockedAndFullscreenStack
 or  ActivityManagerService -&gt; moveTaskToDockedStack
 or ActivityManagerService -&gt; convertFromTranslucent
 or ActivityManagerService -&gt; convertToTranslucent
 or ActivityManagerService -&gt; updateConfigurationLocked
 

ActivityStackSupervisor -&gt; ensureActivitiesVisibleLocked

ActivityStack-&gt;ensureActivitiesVisibleLocked
    ActivityStack-&gt;makeInvisible
       -&gt;r.app.threadscheduleWindowVisibility


    ActivityStack-&gt;makeVisibleIfNeeded
       &gt;r.app.threadscheduleWindowVisibility

   
普通状态下点击home，会触发ActivityThread的HIDE_WINDOW事件，然后调用下面代码使得Activity调用onstop
ActivityThread-&gt;scheduleWindowVisibility
HIDE_WINDOW事件
ActivityThread-&gt; handleWindowVisibility
ActivityThread-&gt;handleStopActivity
ActivityThread-&gt;performStopActivityInner
Activity-&gt;performstop

而处于Multi-window模式下点击home， 只会触发靠近导航栏的window隐藏事件。


Multiwindow回到home

    type   |  handle  | hint | flag | tr | blnd |   format    |     source crop (l,t,r,b)      |          frame         | name 
-----------+----------+------+------+----+------+-------------+--------------------------------+------------------------+------
       HWC | 7f7fefd4c0 | 0002 | 0000 | 00 | 0100 | RGBx_8888   |    0.0,    0.0, 1080.0, 1920.0 |    0,    0, 1080, 1920 | com.android.systemui.ImageWallpaper
       HWC | 7f83c1b720 | 0002 | 0000 | 00 | 0105 | RGBA_8888   |    0.0,    0.0, 1080.0, 1920.0 |    0,    0, 1080, 1920 | com.android.launcher3/com.android.launcher3.Launcher
       HWC | 7f83c1bba0 | 0002 | 0000 | 00 | 0105 | RGBA_8888   |   </rich_text>
			<rich_text foreground="#ffff00000000"> 0.0,    0.0, 1080.0,   72.0 |    0,    0, 1080,   72 | com.android.browser/com.android.browser.BrowserActivity //缩到状态栏</rich_text>
			<rich_text>
       HWC | 7f83c1b060 | 0002 | 0000 | 00 | 0105 | RGBA_8888   |    0.0,    0.0, 1080.0,  144.0 |    0,   15, 1080,  159 | DockedStackDivider
       HWC | 7f7fe2f2a0 | 0002 | 0000 | 00 | 0105 | RGBA_8888   |    0.0,    0.0, 1080.0,   72.0 |   </rich_text>
			<rich_text foreground="#ffff00000000"> 0,    0, 1080,   72 | StatusBar</rich_text>
			<rich_text>
       HWC | 7f83c1b900 | 0002 | 0000 | 00 | 0105 | RGBA_8888   |    0.0,    0.0, 1080.0,  144.0 |    0, 1776, 1080, 1920 | NavigationBar
 FB TARGET | 7f84230d60 | 0000 | 0000 | 00 | 0105 | RGBA_8888   |    0.0,    0.0, 1080.0, 1920.0 |    0,    0, 1080, 1920 | HWC_FRAMEBUFFER_TARGET


    type   |  handle  | hint | flag | tr | blnd |   format    |     source crop (l,t,r,b)      |          frame         | name 
-----------+----------+------+------+----+------+-------------+--------------------------------+------------------------+------
       HWC | 7f7fefd4c0 | 0002 | 0000 | 00 | 0100 | RGBx_8888   |    0.0,    0.0, 1080.0, 1920.0 |    0,    0, 1080, 1920 | com.android.systemui.ImageWallpaper
       HWC | 7f83c1b7e0 | 0002 | 0000 | 00 | 0105 | RGBA_8888   |    0.0,    0.0, 1080.0, 1920.0 |    0,    0, 1080, 1920 | com.android.launcher3/com.android.launcher3.Launcher
       HWC | 7f7fe2f2a0 | 0002 | 0000 | 00 | 0105 | RGBA_8888   |    0.0,    0.0, 1080.0,   72.0 |    0,    0, 1080,   72 | StatusBar
       HWC | 7f83c1b900 | 0002 | 0000 | 00 | 0105 | RGBA_8888   |    0.0,    0.0, 1080.0,  144.0 |    0, 1776, 1080, 1920 | NavigationBar
 FB TARGET | 7f84230d00 | 0000 | 0000 | 00 | 0105 | RGBA_8888   |    0.0,    0.0, 1080.0, 1920.0 |    0,    0, 1080, 1920 | HWC_FRAMEBUFFER_TARGET





</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="开启FreeForm模式" prog_lang="custom-colors" readonly="False" tags="" unique_id="145">
				<rich_text weight="heavy">1.将下面属性值设为true</rich_text>
				<rich_text>

</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/">n8996</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/">frameworks</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/base/">base</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/base/core/">core</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/base/core/res/">res</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/base/core/res/res/">res</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/base/core/res/res/values/">values</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/base/core/res/res/values/config.xml">config.xml</rich_text>
				<rich_text>
2410    </rich_text>
				<rich_text foreground="#666666">&lt;!-- The device supports freeform window management. Windows have title bars and can be moved
2411         and resized. If you set this to true, you also need to add
2412         </rich_text>
				<rich_text foreground="#666666" link="webs http://172.16.12.204:8080/source/s?path=PackageManager.FEATURE_FREEFORM_WINDOW_MANAGEMENT">PackageManager.FEATURE_FREEFORM_WINDOW_MANAGEMENT</rich_text>
				<rich_text foreground="#666666"> feature to your device specification.
2413         The duplication is necessary, because this information is used before the features are
2414         available to the system.--&gt;</rich_text>
				<rich_text>
2415    &lt;</rich_text>
				<rich_text foreground="#a52a2a">bool</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">name=</rich_text>
				<rich_text>&quot;config_freeformWindowManagement&quot;&gt;false&lt;/</rich_text>
				<rich_text foreground="#a52a2a">bool</rich_text>
				<rich_text>&gt;

</rich_text>
				<rich_text weight="heavy">2. 查看PackageManager</rich_text>
				<rich_text>
   </rich_text>
				<rich_text foreground="#666666">/**
2091     * Feature for {@link #getSystemAvailableFeatures} and
2092     * {@link #</rich_text>
				<rich_text foreground="#666666" weight="heavy">hasSystemFeature</rich_text>
				<rich_text foreground="#666666">}: The device supports freeform window management.
2093     * Windows have title bars and can be moved and resized.
2094     */</rich_text>
				<rich_text>
2095    </rich_text>
				<rich_text foreground="#666666">// If this feature is present, you also need to set</rich_text>
				<rich_text>
2096    </rich_text>
				<rich_text foreground="#666666">// </rich_text>
				<rich_text foreground="#666666" link="webs http://172.16.12.204:8080/source/s?path=com.android.internal.R.conf">com.android.internal.R.conf</rich_text>
				<rich_text foreground="#666666">ig_freeformWindowManagement to true in your configuration overlay.</rich_text>
				<rich_text>
2097    @</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SdkConstant">SdkConstant</rich_text>
				<rich_text>(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SdkConstantType">SdkConstantType</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=FEATURE">FEATURE</rich_text>
				<rich_text>)
2098    </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">final</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=String">String</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=FEATURE_FREEFORM_WINDOW_MANAGEMENT">FEATURE_FREEFORM_WINDOW_MANAGEMENT</rich_text>
				<rich_text>
2099            = &quot;</rich_text>
				<rich_text weight="heavy">android.software.freeform_window_management</rich_text>
				<rich_text>&quot;;
2100


3.在</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/">n8996</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/">frameworks</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/native/">native</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/native/data/">data</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/native/data/etc/">etc</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text>路径
添加
</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/native/data/etc/android.software.freeform_window_management.xml">android.software.freeform_window_management.xml</rich_text>
				<rich_text>
1&lt;?</rich_text>
				<rich_text foreground="#a52a2a">xml</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">version=</rich_text>
				<rich_text>&quot;1.0&quot; </rich_text>
				<rich_text weight="heavy">encoding=</rich_text>
				<rich_text>&quot;utf-8&quot;?&gt;
2</rich_text>
				<rich_text foreground="#666666">&lt;!-- Copyright (C) 2015 The Android Open Source Project
3
4     Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
5     you may not use this file except in compliance with the License.
6     You may obtain a copy of the License at
7
8          </rich_text>
				<rich_text foreground="#666666" link="webs http://www.apache.org/licenses/LICENSE-2.0">http://www.apache.org/licenses/LICENSE-2.0</rich_text>
				<rich_text foreground="#666666">
9
10     Unless required by applicable law or agreed to in writing, software
11     distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
12     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
13     See the License for the specific language governing permissions and
14     limitations under the License.
15--&gt;</rich_text>
				<rich_text>
16
17&lt;</rich_text>
				<rich_text foreground="#a52a2a">permissions</rich_text>
				<rich_text>&gt;
18    &lt;</rich_text>
				<rich_text foreground="#a52a2a">feature</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">name=</rich_text>
				<rich_text>&quot;</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?path=android.software.freeform_window_management&amp;project=n8996">android.software.freeform_window_management</rich_text>
				<rich_text>&quot; /&gt;
19&lt;/</rich_text>
				<rich_text foreground="#a52a2a">permissions</rich_text>
				<rich_text>&gt;
20

4.
</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/">n8996</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/device/">device</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/device/tct/">tct</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/device/tct/simba6t/">simba6t</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/device/tct/simba6t/simba6t.mk">simba6t.mk</rich_text>
				<rich_text>

添加
PRODUCT_COPY_FILES += \
    frameworks/native/data/etc/android.software.freeform_window_management.xml:system/etc/permissions/android.software.freeform_window_management.xml


</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="AndroidSystemService" prog_lang="custom-colors" readonly="False" tags="" unique_id="127">
			<rich_text></rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="WindowManager" prog_lang="custom-colors" readonly="False" tags="" unique_id="128">
				<rich_text>隐藏状态栏
Theme.Holo.NoActionBar.FullScreen

WindowManagerService.LayoutParams.FLAG_FULLSCREEN
这个Flag将会使得SOFT_INPUT_ADJUST_RESIZE失效




int uiOptions = View.SYSTEM_UI_FLAG_FULLSCREEN
view.setSystemUiVisibility()



ContentRegion 去除掉状态栏 以后的显示区域 ， 其周围一圈称为Content Insets，可以用一个四元组表示（Content-left, Content-top, Content-right, Content-bottom）

有输入法的时候 去掉状态栏和输入法以后的显示区域称为Visible Region ， 对应的可见边村区域为(visible-left, visible-top, visible-right, visible-bottom)

状态栏和输入法窗口所占用区域成为屏幕装饰区。

应用Activity从ViewRootImpl开始向WindowManagerService请求计算Activity大小


</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="ActivityManager" prog_lang="custom-colors" readonly="False" tags="" unique_id="129">
				<rich_text>



 onStop流程
          1)

           ....
           ActivityManagerService.activityIdle
          ActivityStackSupervisor-&gt; activityIdleInternalLocked
          ActivityStack -&gt; stopActivityLocked
          ActivityThead -&gt; scheduleStopActivity
          ActivityThread -&gt; handleStopActivity
          ActivityThread -&gt; </rich_text>
				<rich_text weight="heavy">performStopActivityInner</rich_text>
				<rich_text>
          Activity.performstop
          
          2)
          ActivityStackSupervisor.ensureActivitiesVisibleLocked //会遍历每个栈中的Activity并根据Activity的可见性作相应的措施
          ActivityStack.ensureActivitiesVisibleLocked{
                
          }
          
          ActivityStack.makeInvisible
          ActivityThread -&gt; scheduleWindowVisibility
          ActivityThread -&gt; handleWindowVisibility
          ActivityThread -&gt; </rich_text>
				<rich_text weight="heavy">performStopActivityInner</rich_text>
				<rich_text>
          
          
          
   启动Home
          ActivityStackSupervisor -&gt; resumeFocusedStackTopActivityLocked
          ActivityStack -&gt; resumeTopActivityUncheckedLocked
          ActivityStack -&gt; resumeTopActivityInnerLocked
          ActivityStackSupervisor -&gt; resumeHomeStackTask
          -&gt;   ActivityManagerService-&gt; startHomeActivityLocked
          </rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Remote Callbacks" prog_lang="custom-colors" readonly="False" tags="" unique_id="131">
			<rich_text>
WallpaperManagerService.getWallpaper() 中会 通过wallpaper.callbacks.register(cb)注册回调函数
wallpaper是WallpaperData实例
callbacks为RemoteCallbackList实例，有一个成员变量是ArrayMap用来存储callback &lt;Binder , callback&gt;
这个的作用是让调用getWallpaper的进程可以跨进程注册一个callback， 使得在wallpaper变更之后回调cb

</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="按键" prog_lang="custom-colors" readonly="False" tags="" unique_id="133">
			<rich_text></rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="home键流程" prog_lang="custom-colors" readonly="False" tags="" unique_id="132">
				<rich_text>PhoneWindowManager -&gt;interceptKeyBeforeDispatching
KeyEvent.KEYCODE_HOME
handleShortPressOnHome()
| handleLongPressOnHome()

handleShortPressOnHome -&gt; launchHomeFromHotKey()

--sendCloseSystemWindows
     -&gt;PhoneWindow.sendCloseSystemWindows
          -&gt; ActivityManagerNative.getDefault().closeSystemDialogs(reason)
                -&gt;ActivityManagerService.closeSystemDialogs
                      -&gt; ActivityManagerService.closeSystemDialogsLocked
                      
--startDockOrHome
       -&gt; createHomeDockIntent
       -&gt; startActivityAsUser  
           -&gt;mContext.startActivityAsUser
               -&gt;ContextImpl.startActivityAsUser
                  -&gt;ActivityManagerService.startActivityAsUser
                      -&gt;ActivityStarter.startActivityMayWait
                      -&gt;ActivityStarter.startActivityLocked
                    //  -&gt;ActivityStackSupervisor.startActivityUncheckedLocked 将目标stack移到前面
                      
 startHomeActvityLocked
 
     

Activity.performStop
Instrumentation.callActivityOnStop
          
          
          有三个地方会调用onstop
          
          1.ActivityThread.handleSleep
          2.handleDestroyActivity -&gt; ActivityThread.performDestroyActivity  应该是activity销毁的时候
          3.ActivityThread.performStopActivity -&gt; ActivityThread.stopActivityInner
          
          
         DisplayContent.getDockedStackLocked获取docked stack 
         
          
 </rich_text>
				<rich_text weight="heavy">在多窗口模式下点击Home</rich_text>
				<rich_text>
01-02 10:36:49.540  2177  2177 I multiwindow: ActivityThread-&gt;handleWindowVisibility
01-02 10:36:49.615  1569  1569 I multiwindow: ActivityThread -&gt; handleStopActivity
01-02 10:36:49.615  1569  1569 I multiwindow: ActivityThread-&gt;performStopActivityInner Performing stop of ActivityRecord{86915f2 token=android.os.BinderProxy@b1934c3 {com.android.systemui/com.android.systemui.recents.RecentsActivity}}
01-02 10:36:49.615  1569  1569 I multiwindow: Activity-&gt;performstop

</rich_text>
				<rich_text weight="heavy">DockedStackDividerController</rich_text>
				<rich_text> -&gt; notifyDockedStackMinimizedChanged 发送NOTIFY_DOCKED_STACK_MINIMZIED_CHANGED
-&gt; WindowManagerService 接收到这个消息， 调用mAmInternal.notifyDockedStackMinimizedChanged(msg.arg1 == 1);
-&gt; ActivityManagerService -&gt; notifyDockedStackMinmizedChanged
-&gt; ActivityStackSuperVisor.setDockedStackMinimized

01-02 10:36:49.752  1569  1593 I multiwindow: Divider -&gt; updateMinimizedDockedStack
01-02 10:36:49.767  1569  1569 I multiwindow: DividerView -&gt; setMinimizedDockStack2
01-02 10:36:49.767  1569  1569 I multiwindow: DividerView -&gt; updateDockSide
01-02 10:36:49.834  1569  1569 I multiwindow: DividerView -&gt; onLayout mDockSide:2
01-02 10:37:49.821  2177  2177 I multiwindow: ActivityThread -&gt; handleStopActivity      















   
  </rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Recent" prog_lang="custom-colors" readonly="False" tags="" unique_id="134">
				<rich_text>

Phonewindowmanager
keyCode == KeyEvent.KEYCODE_APP_SWITCH

</rich_text>
				<rich_text weight="heavy">else</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">if</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=keyCode&amp;project=n8996">keyCode</rich_text>
				<rich_text> == </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=KeyEvent&amp;project=n8996">KeyEvent</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=KEYCODE_APP_SWITCH&amp;project=n8996">KEYCODE_APP_SWITCH</rich_text>
				<rich_text>) {
3518            </rich_text>
				<rich_text weight="heavy">if</rich_text>
				<rich_text> (!keyguardOn) {
3519                </rich_text>
				<rich_text weight="heavy">if</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=down&amp;project=n8996">down</rich_text>
				<rich_text> &amp;&amp; </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=repeatCount&amp;project=n8996">repeatCount</rich_text>
				<rich_text> == </rich_text>
				<rich_text foreground="#a52a2a">0</rich_text>
				<rich_text>) {
3520                    preloadRecentApps();
3521                } </rich_text>
				<rich_text weight="heavy">else</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">if</rich_text>
				<rich_text> (!</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=down&amp;project=n8996">down</rich_text>
				<rich_text>) {
3522                    toggleRecentApps();
3523                }
3524            }
3525            </rich_text>
				<rich_text weight="heavy">return</rich_text>
				<rich_text> -</rich_text>
				<rich_text foreground="#a52a2a">1</rich_text>
				<rich_text>;
3526        } 

preloadRecentApps会预加载RecentApp所要的信息
toggleRecentApps加载RecentActivity
4048    </rich_text>
				<rich_text weight="heavy">private</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">void</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=toggleRecentApps&amp;project=n8996">toggleRecentApps</rich_text>
				<rich_text>() {
4049        mPreloadedRecentApps = </rich_text>
				<rich_text weight="heavy">false</rich_text>
				<rich_text>; </rich_text>
				<rich_text foreground="#666666">// preloading no longer needs to be canceled</rich_text>
				<rich_text>
4050        </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=StatusBarManagerInternal&amp;project=n8996">StatusBarManagerInternal</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=statusbar&amp;project=n8996">statusbar</rich_text>
				<rich_text> = getStatusBarManagerInternal();
4051        </rich_text>
				<rich_text weight="heavy">if</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=statusbar&amp;project=n8996">statusbar</rich_text>
				<rich_text> != </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=n8996">null</rich_text>
				<rich_text>) {
4052            </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=statusbar&amp;project=n8996">statusbar</rich_text>
				<rich_text>.toggleRecentApps();
4053        }
4054    }

StatusBarManagerService.java
227        @</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Override&amp;project=n8996">Override</rich_text>
				<rich_text>
228        </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">void</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=toggleRecentApps&amp;project=n8996">toggleRecentApps</rich_text>
				<rich_text>() {
229            </rich_text>
				<rich_text weight="heavy">if</rich_text>
				<rich_text> (mBar != </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=n8996">null</rich_text>
				<rich_text>) {
230                </rich_text>
				<rich_text weight="heavy">try</rich_text>
				<rich_text> {
231                    mBar.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=toggleRecentApps&amp;project=n8996">toggleRecentApps</rich_text>
				<rich_text>();
232                } </rich_text>
				<rich_text weight="heavy">catch</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=RemoteException&amp;project=n8996">RemoteException</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ex&amp;project=n8996">ex</rich_text>
				<rich_text>) {}
233            }
234        }


BaseStatusBar.java
调用BaseStatusBar -&gt; toggleRecentApps
-&gt;toggleRecents

1358    </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">void</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=toggleRecentApps&amp;project=n8996">toggleRecentApps</rich_text>
				<rich_text>() {
1359        toggleRecents();
1360    }

1469    protected void toggleRecents() {
1470        if (mRecents != null) {
1471            mRecents.toggleRecents(mDisplay);
1472        }
1473    }


KeyEvent.KEYCODE_APP_SWITCH

PhoneStatusBar
mRecentsClickListener中直接拦截


Recents-&gt;toggleRecents

RecentsImpl-&gt;toggleRecents
                   -&gt;startRecentsActivity
                   
        Intent intent = new Intent();
        intent.setClassName(RECENTS_PACKAGE, RECENTS_ACTIVITY);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
                | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS
                | Intent.FLAG_ACTIVITY_TASK_ON_HOME);
                
  01-02 01:48:04.465  1325  1951 I ActivityManager: START u0 {flg=0x10804000 cmp=com.android.systemui/.recents.RecentsActivity} from uid 10025 on display 0

启动RecentActivity


开启多任务创建：

启动Multiwindow
mRecentsLongClickListener

toggleSplitScreenMode

toggleSplitScreen

PhoneStatusbar toggleSplitScreenMode
Recents-&gt;dockTopTask
RecentsImpl -&gt; dockTopTask{
     1.ssp.moveTaskToDockedStack{
            ActivityManagerService -&gt; moveTaskToDockedStack {
                  mWindowManager.setDockedStackCreateState()
                  mStackSupervisor.moveTaskToStackLocked 
                  mStackSupervisor.ensureActivitiesVisibleLocked
            
            }
     }
     2.发送DockedTopTaskEvent事件
}
EventBus.getDefault().send(new DockedTopTaskEvent(dragMode, initialBounds));
 
 
DividerView 的onBusEvent收到DockedTopTaskEvent事件
从一个全屏的Activity长按Recent会触发这个事件, 还会使得原来的Activity触发一次onstop
01-01 11:17:29.072  1548  1548 I multiwindow: PhoneStatusbar -&gt; toggleSplitScreenMode
01-01 11:17:29.074  1548  1548 I multiwindow: PhoneStatusbar DOCKED_INVALID
01-01 11:17:29.074  1548  1548 I multiwindow: Recents-&gt;dockTopTask
01-01 11:17:29.081  1548  1548 I multiwindow: RecentsImpl -&gt; dockTopTask
01-01 11:17:29.164  1548  1548 I multiwindow: DivederView -&gt; onBusEvent  </rich_text>
				<rich_text weight="heavy">DockedTopTaskEvent</rich_text>
				<rich_text>
01-01 11:17:29.164  1548  1548 I multiwindow: DividerView -&gt; startDragging
01-01 11:17:29.228  1548  1548 I multiwindow: DivederView -&gt; onBusEvent  </rich_text>
				<rich_text weight="heavy">recentsActivityStartingEvent</rich_text>
				<rich_text>
01-01 11:17:29.238  1548  1548 I multiwindow: ActivityThread-&gt;handleWindowVisibility
01-01 11:17:29.303  1548  1548 I multiwindow: DividerView -&gt; onLayout mDockSide:2
01-01 11:17:29.372  1548  1548 I multiwindow: DivederView -&gt; onBusEvent  RecentsDrawnEvent
01-01 11:17:29.373  1548  1548 I multiwindow: DivederView -&gt; onBusEvent  RecentsDrawnEvent
01-01 11:17:29.386  2282  2282 I multiwindow: ActivityThread -&gt; handleDestroyActivity
01-01 11:17:29.386  2282  2282 I multiwindow: Activitythread-&gt;performDestroyActivity 1
01-01 11:17:29.386  2282  2282 I multiwindow: ActivityThread-&gt;performDestroyActivity Performing finish of ActivityRecord{aa49e3f token=android.os.BinderProxy@1f46a07 {com.android.dialer/com.android.dialer.DialtactsActivity}}
01-01 11:17:29.386  2282  2282 I multiwindow: Activity-&gt;performstop

此时原先全屏的Activity会先经历一次onPause , onStop , 然后再onStart，onPostCreate,  onResume, onPause

</rich_text>
				<rich_text weight="heavy">recentsActivityStartingEvent</rich_text>
				<rich_text> 启动RecentActivity


DividerView -&gt; onBusEvent(DockedTopTaskEvent)
         startDragging
         
        { 1. updateDockSide
               {
                 WindowManagerProxy.getDockSide();{
                         WindowManagerProxy.getDockSide()
                    -&gt; WindowManagerGlobal.getWindowManagerService.getDockedStackSide();
                        -&gt; WindowManagerService.getDockedStackSide();{
                                getDefaultDisplayContentLocked() -&gt; DisplayContent.getDockedStackVisibleForUserLocked;
                                dockedStack.getDockSide();
                        }
                           ===
                          WindowManagerService.getDefaultDisplayContentLocked()-&gt;
                                  getDisplayContentLocked(Display.DEFAULT_DISPLAY) -&gt;
                                             mDisplayManager.getDisplay(displayId);
                                             
                           ===                
                             dockedStack.getDockSide();
                              TaskStack.getDockSide() -&gt; TaskStack.getDockSide(mBounds)
                              -&gt; getDockSideUnchecked 确定dock的位置
                 }
                 MinimizedShadow.setDockSide();
               }
           2. resizeStack
                {
                    mWindowManagerProxy.resizeDockedStack(){
                         WindwManagerProxy.resizeDockedStack()
                         -&gt;ActivityManagerNative.getDefault().resizeDockedStack()
                         -&gt;ActivityManagerService -&gt; resizeDockedStack
                         -&gt;ActivityStackSupervisor.resizeDockedStackLocked{
                                mWindowManager.deferSurfaceLayout{
                                     mWindowPlacerLocked.deferLayout
                                }
                                 resizeStackUncheckedLocked(){
                                    mWindowManager.prepareFreezingTaskBounds //保存当前的task边界
                                    stack.mFullscreen = mWindowManager.resizeStack() //改变指定的stack包括它所包含的window尺寸
                                    stack.setBounds();
                                 }
                                 
                                    //stackfullscreen 表示非multi-window ，回复全屏

                                    </rich_text>
				<rich_text weight="heavy">if</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=stack&amp;project=n8996">stack</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mFullscreen&amp;project=n8996">mFullscreen</rich_text>
				<rich_text> || (dockedBounds == </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=n8996">null</rich_text>
				<rich_text> &amp;&amp; !</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=stack&amp;project=n8996">stack</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isAttached&amp;project=n8996">isAttached</rich_text>
				<rich_text>())) {

                                            </rich_text>
				<rich_text foreground="#666666">// The dock stack either was dismissed or went fullscreen, which is kinda the same.</rich_text>
				<rich_text>
                                            </rich_text>
				<rich_text foreground="#666666">// In this case we make all other static stacks fullscreen and move all</rich_text>
				<rich_text>
                                            </rich_text>
				<rich_text foreground="#666666">// docked stack tasks to the fullscreen stack.</rich_text>
				<rich_text>
                                            moveTasksToFullscreenStackLocked(</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=DOCKED_STACK_ID&amp;project=n8996">DOCKED_STACK_ID</rich_text>
				<rich_text>, ON_TOP);
                                            
                                       }else{
                                       
                                       
                                       
                                       }
                                stack.ensureVisibleActivitiesConfigurationLocked()
                         }
                    }
                    
                    mWindowManagerProxy.setResizeDimLayer()
                }
        
        }
        
        recentsActivityStartingEvent
        updateDockSide
        

 DividerSnapAlgorithm
 

 DividerView -&gt; onBusEvent(RecentDrawnEvent)
   正常状态下点击Recent会触发事件</rich_text>
				<rich_text weight="heavy">recentsActivityStartingEvent</rich_text>
				<rich_text>
01-01 11:39:18.503  1548  1548 I multiwindow: DivederView -&gt; onBusEvent  recentsActivityStartingEvent
01-01 11:39:18.509  2191  2191 I multiwindow: ActivityThread -&gt; handleStopActivity
01-01 11:39:18.509  2191  2191 I multiwindow: ActivityThread-&gt;performStopActivityInner Performing stop of ActivityRecord{ca8cdc0 token=android.os.BinderProxy@eb73a88 {com.android.launcher3/com.android.launcher3.Launcher}}
01-01 11:39:18.510  2191  2191 I multiwindow: Activity-&gt;performstop
01-01 11:39:18.524  1548  1548 I multiwindow: ActivityThread-&gt;handleWindowVisibility
01-01 11:39:18.631  1548  1548 I multiwindow: DivederView -&gt; onBusEvent  RecentsDrawnEvent
          
          


mWindowManagerProxy.swapTasks
-&gt; mSwapRunnable.run
   -&gt;ActivityManagerNative.getDefault().swapDockedAndFullscreenStack();
   -&gt;ActivityManagerService.swapDockedAndFullscreenStack 
   
54</rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">interface</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=WindowManager&amp;project=n8996">WindowManager</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">extends</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ViewManager&amp;project=n8996">ViewManager</rich_text>
				<rich_text> {
55
56    </rich_text>
				<rich_text foreground="#666666">/** @hide */</rich_text>
				<rich_text>
57    </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=DOCKED_INVALID&amp;project=n8996">DOCKED_INVALID</rich_text>
				<rich_text> = -</rich_text>
				<rich_text foreground="#a52a2a">1</rich_text>
				<rich_text>;
58    </rich_text>
				<rich_text foreground="#666666">/** @hide */</rich_text>
				<rich_text>
59    </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=DOCKED_LEFT&amp;project=n8996">DOCKED_LEFT</rich_text>
				<rich_text> = </rich_text>
				<rich_text foreground="#a52a2a">1</rich_text>
				<rich_text>;
60    </rich_text>
				<rich_text foreground="#666666">/** @hide */</rich_text>
				<rich_text>
61    </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=DOCKED_TOP&amp;project=n8996">DOCKED_TOP</rich_text>
				<rich_text> = </rich_text>
				<rich_text foreground="#a52a2a">2</rich_text>
				<rich_text>;
62    </rich_text>
				<rich_text foreground="#666666">/** @hide */</rich_text>
				<rich_text>
63    </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=DOCKED_RIGHT&amp;project=n8996">DOCKED_RIGHT</rich_text>
				<rich_text> = </rich_text>
				<rich_text foreground="#a52a2a">3</rich_text>
				<rich_text>;
64    </rich_text>
				<rich_text foreground="#666666">/** @hide */</rich_text>
				<rich_text>
65    </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=DOCKED_BOTTOM&amp;project=n8996">DOCKED_BOTTOM</rich_text>
				<rich_text> = </rich_text>
				<rich_text foreground="#a52a2a">4</rich_text>
				<rich_text>;


       </rich_text>
				<rich_text foreground="#666666">/** ID of stack that occupies a dedicated region of the screen. */</rich_text>
				<rich_text>
515        </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">final</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=DOCKED_STACK_ID&amp;project=n8996">DOCKED_STACK_ID</rich_text>
				<rich_text> = FREEFORM_WORKSPACE_STACK_ID + </rich_text>
				<rich_text foreground="#a52a2a">1</rich_text>
				<rich_text>;


DividerView.java
mWindowManager.setSlippery
DeviderWindowManager -&gt;  setSlippery 
                                 -&gt; 查看是否发生了change， 如果有
                                   WindowManagerImpl.updateViewLayout
                                  -&gt; WindowManagerGlobal.updateViewLayout 
                                  -&gt; ViewRootImpl.setLayoutParams





  StackId定义 ActivityManager
  HOME_STACK_ID = 0
  DOCKED_STACK_ID = 3;
  
  DividerView这个view是负责出现MultiWindow之后可以拖动窗口滑动大小
  
  
        </rich_text>
				<rich_text weight="heavy">DisplayContent</rich_text>
				<rich_text>包含 </rich_text>
				<rich_text weight="heavy">DockedStackDividerController</rich_text>
				<rich_text> 对象， 通过getDockedStackLocked获取dockStack
        通过getHomeStack获取homeStack
        
          </rich_text>
				<rich_text weight="heavy">DividerWindowManager</rich_text>
				<rich_text>
          


    

          
          
          WindowManagerService.attachStack 创建新的stack放到对应的DisplayContent
          
       
       DividerView 主要是多窗口上的分割线，可以被同来拖动来调整Multi-window大小
       
       
       
       
       
       
       
       
          
          
          
          
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Back键" prog_lang="custom-colors" readonly="False" tags="" unique_id="153">
				<rich_text> Activity可以通过重载 onBackPress  来实现对back键的拦截。
  
  系统默认会调用finish() , 正常情况下会相继调用onPause, onStop, onDestroy。
  
   </rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="SystemUI" prog_lang="custom-colors" readonly="False" tags="" unique_id="156">
			<rich_text></rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Recents" prog_lang="custom-colors" readonly="False" tags="" unique_id="157">
				<rich_text>Recents.preLoadRecents

RecentsImpl.preLoadRecents

RecentsTaskLoader.preloadTasks


RecentTasks.java

TaskPersister.java.

缩略图的截图是在Activity进行onPause的时候截图的
ActivityStack#resumeTopActivityInnerLocked



</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="黑莓" prog_lang="custom-colors" readonly="False" tags="" unique_id="158">
			<rich_text></rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="PasswordManager" prog_lang="custom-colors" readonly="False" tags="" unique_id="159">
				<rich_text>

</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/">Avengers</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/vendor/">vendor</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/vendor/bbry/">bbry</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/vendor/bbry/frameworks/">frameworks</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/vendor/bbry/frameworks/passwordmanager/">passwordmanager</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/vendor/bbry/frameworks/passwordmanager/src/">src</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/vendor/bbry/frameworks/passwordmanager/src/com/">com</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/vendor/bbry/frameworks/passwordmanager/src/com/blackberry/">blackberry</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/vendor/bbry/frameworks/passwordmanager/src/com/blackberry/security/">security</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/vendor/bbry/frameworks/passwordmanager/src/com/blackberry/security/passwordmanager/">passwordmanager</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text> java 

 PasswordManager 用户与之交互的service，用来加密，解密，计算尝试次数等。
 
 

</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/vendor/bbry/frameworks/passwordmanager/src/com/blackberry/security/passwordmanager/PasswordManagerService.java">PasswordManagerService.java</rich_text>
				<rich_text> passwordmanager会请求的service.
SystemServer 创建PasswordManagerService对象

794            </rich_text>
				<rich_text weight="heavy">try</rich_text>
				<rich_text> {
795                </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=passwordManager&amp;project=Avengers">passwordManager</rich_text>
				<rich_text> = </rich_text>
				<rich_text weight="heavy">new</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=PasswordManagerService&amp;project=Avengers">PasswordManagerService</rich_text>
				<rich_text>(context);
796                </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ServiceManager&amp;project=Avengers">ServiceManager</rich_text>
				<rich_text>.</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=addService&amp;project=Avengers">addService</rich_text>
				<rich_text>(&quot;password_manager&quot;, </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=passwordManager&amp;project=Avengers">passwordManager</rich_text>
				<rich_text>);
797            } </rich_text>
				<rich_text weight="heavy">catch</rich_text>
				<rich_text> (</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Throwable&amp;project=Avengers">Throwable</rich_text>
				<rich_text> e) {
798                reportWtf(&quot;starting PasswordManagerService service&quot;, e);
799            }

PasswordManagerService初始化创建PasswordManager

PasswordManager 初始化过程中创建一个线程，尝试2000/100 次去调用restoreExtraPasswordData


PasswordManagerConst定制恶劣错误的类型，no_permission, null_service, remote_exception, error_internal

3 </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">class</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=PasswordManagerConst&amp;project=Avengers">PasswordManagerConst</rich_text>
				<rich_text>
4{
5     </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=PASSWORD_TYPE_NONE&amp;project=Avengers">PASSWORD_TYPE_NONE</rich_text>
				<rich_text>        = </rich_text>
				<rich_text foreground="#a52a2a">0</rich_text>
				<rich_text>;
6     </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=PASSWORD_TYPE_TEXTUAL&amp;project=Avengers">PASSWORD_TYPE_TEXTUAL</rich_text>
				<rich_text>     = </rich_text>
				<rich_text foreground="#a52a2a">1</rich_text>
				<rich_text>;
7     </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=PASSWORD_TYPE_NON_TEXTUAL&amp;project=Avengers">PASSWORD_TYPE_NON_TEXTUAL</rich_text>
				<rich_text> = </rich_text>
				<rich_text foreground="#a52a2a">2</rich_text>
				<rich_text>;
8
9      </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=PASSWORD_SUCCESS&amp;project=Avengers">PASSWORD_SUCCESS</rich_text>
				<rich_text>  = </rich_text>
				<rich_text foreground="#a52a2a">0</rich_text>
				<rich_text>;
10    </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=ERROR_NO_PASSWORD_SET&amp;project=Avengers">ERROR_NO_PASSWORD_SET</rich_text>
				<rich_text>     = -</rich_text>
				<rich_text foreground="#a52a2a">100</rich_text>
				<rich_text>;
11    </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=ERROR_INTERNAL&amp;project=Avengers">ERROR_INTERNAL</rich_text>
				<rich_text>            = -</rich_text>
				<rich_text foreground="#a52a2a">101</rich_text>
				<rich_text>;
12    </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=ERROR_REMOTE_EXCEPTION&amp;project=Avengers">ERROR_REMOTE_EXCEPTION</rich_text>
				<rich_text>    = -</rich_text>
				<rich_text foreground="#a52a2a">102</rich_text>
				<rich_text>;
13    </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=ERROR_NO_PERMISSION&amp;project=Avengers">ERROR_NO_PERMISSION</rich_text>
				<rich_text>       = -</rich_text>
				<rich_text foreground="#a52a2a">103</rich_text>
				<rich_text>;
14    </rich_text>
				<rich_text weight="heavy">public</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">static</rich_text>
				<rich_text> </rich_text>
				<rich_text weight="heavy">int</rich_text>
				<rich_text> </rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=ERROR_NULL_SERVICE&amp;project=Avengers">ERROR_NULL_SERVICE</rich_text>
				<rich_text>        = -</rich_text>
				<rich_text foreground="#a52a2a">104</rich_text>
				<rich_text>;
15}
16

LockSettingsService
密码解锁和pattern解锁设置以后，会生成如下文件，用户解锁时输入密码的正确已否通过已保存的文件进行对比
/data/system/gesture.key
/data/system/password.key

另外还有一个数据库: /data/system/locksettings.db 里面只有一个table:locksettings

ILockSettings lockSettingsService = ILockSettings.Stub.asInterface(ServiceManager.getService(&quot;lock_settings&quot;));




</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/">Avengers</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/frameworks/">frameworks</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/frameworks/base/">base</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/frameworks/base/services/">services</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/frameworks/base/services/core/">core</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/frameworks/base/services/core/jni/">jni</rich_text>
				<rich_text foreground="#000000">/</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/frameworks/base/services/core/jni/com_blackberry_security_passwordmanager_PasswordManager.cpp">com_blackberry_security_passwordmanager_PasswordManager.cpp</rich_text>
				<rich_text> jni



</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Setting" prog_lang="custom-colors" readonly="False" tags="" unique_id="160">
			<rich_text></rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Display size" prog_lang="custom-colors" readonly="False" tags="" unique_id="161">
				<rich_text>
n8996/packages/apps/Settings/src/com.android.settings/diaplay

ScreenZoomSetting
</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="屏幕尺寸、像素" prog_lang="custom-colors" readonly="False" tags="" unique_id="162">
			<rich_text>手机屏幕的大小，一般指的是屏幕对角线的长度， 单位一半为英尺inch

像素 pixel  代码中的单位px， 指的是实际像素，这是物理属性，由屏幕的材质决定，不会改变。

分辨率 Resolution  屏幕上垂直方向和水平方向的实际像素个数， 所以硬件确定了就是确定了。

屏幕密度 dpi (dot per inch )每英寸的像素点个数 ，这个值越大，屏幕就越清晰 ， 代码蛰哦功能的

dip 逻辑像素 ， 单位dp     px = dp ( dpi / 160)

如cn的手机，dpi=480， 一个设为200dp 的逻辑像素， 其实际像素是 200*（480/ 160）= 600 px

 




</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="cts测试" prog_lang="custom-colors" readonly="False" tags="" unique_id="164">
			<rich_text>通过android-cts/tools/./cts-tradefed
进入cts环境后

\测试需要去掉锁屏


run cts -p &lt;包名&gt;
list packages 可以列出所有包名

0-26 17:39:43.158  9436  9436 E AndroidRuntime: FATAL EXCEPTION: main
10-26 17:39:43.158  9436  9436 E AndroidRuntime: Process: com.android.cts.print, PID: 9436
10-26 17:39:43.158  9436  9436 E AndroidRuntime: java.lang.NullPointerException: session cannot be null
10-26 17:39:43.158  9436  9436 E AndroidRuntime: 	at android.printservice.PrintService$ServiceHandler.handleMessage(PrintService.java:460)
10-26 17:39:43.158  9436  9436 E AndroidRuntime: 	at android.os.Handler.dispatchMessage(Handler.java:102)
10-26 17:39:43.158  9436  9436 E AndroidRuntime: 	at android.os.Looper.loop(Looper.java:154)
10-26 17:39:43.158  9436  9436 E AndroidRuntime: 	at android.app.ActivityThread.main(ActivityThread.java:6162)
10-26 17:39:43.158  9436  9436 E AndroidRuntime: 	at java.lang.reflect.Method.invoke(Native Method)
10-26 17:39:43.158  9436  9436 E AndroidRuntime: 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:865)
10-26 17:39:43.158  9436  9436 E AndroidRuntime: 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:755)

</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="系统Feature" prog_lang="custom-colors" readonly="False" tags="" unique_id="165">
			<rich_text>查看系统Feature
对应代码和out目录

PRODUCT_COPY_FILES += \
124    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=frameworks/native/data/etc/android.hardware.sensor.accelerometer.xml&amp;project=n8996">frameworks/native/data/etc/android.hardware.sensor.accelerometer.xml</rich_text>
			<rich_text>:</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=system/etc/permissions/android.hardware.sensor.accelerometer.xml&amp;project=n8996">system/etc/permissions/android.hardware.sensor.accelerometer.xml</rich_text>
			<rich_text> \</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="DocumentsUI" prog_lang="custom-colors" readonly="False" tags="" unique_id="169">
			<rich_text>DocumentsUI -&gt; DirectoryFragment#onShareDocuments 分享文件 Settings
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="patch" prog_lang="custom-colors" readonly="False" tags="" unique_id="170">
			<rich_text>Author: Jeff Sharkey &lt;jsharkey@android.com&gt;  2016-06-23 00:35:29
Committer: Jeff Sharkey &lt;jsharkey@android.com&gt;  2016-06-23 02:37:08
Parent: a31460ce1206ad938a809a2e19d51d2283398943 (Start primary storage move outside lock.)
Child:  85f449eaba207d5d3a72bd091855a02ff019404c (When uninstalling, only kill the requested user.)
Child:  18553f5f7309d3c41c0ee92d5bb84f3ac75e7630 (Merge &quot;Avoid runtime restart when storage is missing.&quot; into nyc-dev)
Branches: master, remotes/origin/master, remotes/origin/nougat-cts-release, remotes/origin/nougat-dev, remotes/origin/nougat-dr1-release, remotes/origin/nougat-mr0.5-release, remotes/origin/nougat-release
Follows: android-m-preview-2
Precedes: afw-test-harness-2.1, android-7.0.0_r1, android-7.1.0_r1, android-cts-7.0_r1, android-cts-7.0_r2

    Avoid runtime restart when storage is missing.
    
    When primary shared storage is completely missing, catch the thrown
    exception and treat as if ejected.
    
    Bug: 29461637
    Change-Id: I8eb5cdeb01983efbf26da3d32ab19a6630662156
----- services/core/java/com/android/server/pm/PackageManagerService.java -----
index 2a85694..96513b9 100644
@@ -12526,13 +12526,12 @@ public class PackageManagerService extends IPackageManager.Stub {
             }
 
             if (mSuccess) {
-                final boolean mounted;
-                if (Environment.isExternalStorageEmulated()) {
-                    mounted = true;
-                } else {
+                boolean mounted = false;
+                try {
                     final String status = Environment.getExternalStorageState();
                     mounted = (Environment.MEDIA_MOUNTED.equals(status)
                             || Environment.MEDIA_MOUNTED_READ_ONLY.equals(status));
+                } catch (Exception e) {
                 }
 
                 if (mounted) {



Author: Jeff Sharkey &lt;jsharkey@android.com&gt;  2016-06-22 23:04:33
Committer: Jeff Sharkey &lt;jsharkey@android.com&gt;  2016-06-23 00:32:17
Parent: 2058553b8d57ac7156aad6387c0e9b397ce6f265 (Merge &quot;Don't allow showing an activity if user is stopping or shutting down.&quot; into nyc-dev)
Child:  11f197c3fe24c5fdccf3c2feacb22bc16d73d5fc (Avoid runtime restart when storage is missing.)
Child:  a3290363e19d97014c00dcb2682b1bafc44d13ed (Merge &quot;Start primary storage move outside lock.&quot; into nyc-dev)
Branches: master, remotes/origin/master, remotes/origin/nougat-cts-release, remotes/origin/nougat-dev, remotes/origin/nougat-dr1-release, remotes/origin/nougat-mr0.5-release, remotes/origin/nougat-release
Follows: android-m-preview-2
Precedes: afw-test-harness-2.1, android-7.0.0_r1, android-7.1.0_r1, android-cts-7.0_r1, android-cts-7.0_r2

    Start primary storage move outside lock.
    
    Otherwise there is a potential deadlock when an unsolicited event
    arrives from vold while we're still waiting for the move operation
    to be processed.
    
    The safe fix here is to kick off the move after dropping the lock.
    
    Bug: 29501052
    Change-Id: I2160c6a7a19c1d9981c692a2be2b04019352db2e

----------- services/core/java/com/android/server/MountService.java -----------
index 9c75a00..55464e4 100644
@@ -2030,6 +2030,9 @@ class MountService extends IMountService.Stub
         enforcePermission(android.Manifest.permission.MOUNT_UNMOUNT_FILESYSTEMS);
         waitForReady();
 
+        final VolumeInfo from;
+        final VolumeInfo to;
+
         synchronized (mLock) {
             if (Objects.equals(mPrimaryStorageUuid, volumeUuid)) {
                 throw new IllegalArgumentException(&quot;Primary storage already at &quot; + volumeUuid);
@@ -2049,10 +2052,11 @@ class MountService extends IMountService.Stub
                 onMoveStatusLocked(MOVE_STATUS_COPY_FINISHED);
                 onMoveStatusLocked(PackageManager.MOVE_SUCCEEDED);
                 mHandler.obtainMessage(H_RESET).sendToTarget();
+                return;
 
             } else {
-                final VolumeInfo from = findStorageForUuid(mPrimaryStorageUuid);
-                final VolumeInfo to = findStorageForUuid(volumeUuid);
+                from = findStorageForUuid(mPrimaryStorageUuid);
+                to = findStorageForUuid(volumeUuid);
 
                 if (from == null) {
                     Slog.w(TAG, &quot;Failing move due to missing from volume &quot; + mPrimaryStorageUuid);
@@ -2063,14 +2067,14 @@ class MountService extends IMountService.Stub
                     onMoveStatusLocked(PackageManager.MOVE_FAILED_INTERNAL_ERROR);
                     return;
                 }
-
-                try {
-                    mConnector.execute(&quot;volume&quot;, &quot;move_storage&quot;, from.id, to.id);
-                } catch (NativeDaemonConnectorException e) {
-                    throw e.rethrowAsParcelableException();
-                }
             }
         }
+
+        try {
+            mConnector.execute(&quot;volume&quot;, &quot;move_storage&quot;, from.id, to.id);
+        } catch (NativeDaemonConnectorException e) {
+            throw e.rethrowAsParcelableException();
+        }
     }
 
     @Override
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="内存泄漏" prog_lang="custom-colors" readonly="False" tags="" unique_id="171">
			<rich_text>MAT工具打开Hhprof

hprof抓取可以用DDMS，或者命令
抓取的hprof都需要通过SDK/platform-tools/hprof-conv 转换，不然会出现Unkndow HPROF Version的错误
转换命令 hprof-conv in.hprof out.hprof

命令抓取hprof
adb shell am dumpheap [进程名] /data/local/tmp/a.hprof


adb shell dumpsys meminfo [进程名]</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="长截屏" prog_lang="custom-colors" readonly="False" tags="" unique_id="172">
			<rich_text>入口ScreenshotEditService -&gt; onCreate
先系统截屏，截一张后存入
 

NativeBitmap
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Setupwizard" prog_lang="custom-colors" readonly="False" tags="" unique_id="183">
			<rich_text>
通过下面的方式可以判断setupWizards是否已经完成，0表示未完成，1表示完成
   </rich_text>
			<rich_text weight="heavy">int</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setupWizardsDone&amp;project=m8976">setupWizardsDone</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Settings&amp;project=m8976">Settings</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Secure&amp;project=m8976">Secure</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getInt&amp;project=m8976">getInt</rich_text>
			<rich_text>(        mContext.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getContentResolver&amp;project=m8976">getContentResolver</rich_text>
			<rich_text>(),</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=android&amp;project=m8976">android</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=provider&amp;project=m8976">provider</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Settings&amp;project=m8976">Settings</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Secure&amp;project=m8976">Secure</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=USER_SETUP_COMPLETE&amp;project=m8976">USER_SETUP_COMPLETE</rich_text>
			<rich_text>,0/*default*/);


</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="passwordmanager" prog_lang="custom-colors" readonly="False" tags="" unique_id="190">
			<rich_text>ILockSettingsservice=ILockSettings.Stub.asInterface(
ServiceManager.getService(</rich_text>
			<rich_text foreground="#008000">&quot;lock_settings&quot;</rich_text>
			<rich_text>));

LockSettingsService</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="performance" prog_lang="custom-colors" readonly="False" tags="" unique_id="191">
			<rich_text>Systrace是性能调试分析的重要工具。对于某些问题,可能无法在连接USB时复
现,那么对于这样的问题,如何抓取正确的Systrace呢?
 通过WIFI连接adb
确保PC和手机都已经连接到同一个WIFI网络





通过Atrace抓取离线Systrace






PAGE 10
确保PC和手机都已经连接到同一个WIFI网络
设置tcpip端口 adb tcpip 5555
连接adb adb connect &lt;ip addr&gt;:&lt;port&gt;
通过adb over WIFI形式抓取Systrace可能会增加WIFI负载
atrace –z –b 51200 gfx input view wm am hal res dalvik rs sched freq idle load –t 10 &gt;
/data/local/tmp/trace_output &amp;
-z 压缩trace dump
-b N 设置trace buffer为N kb
-t 抓取trace时间
-s N sleep for N seconds before tracing [default 0]
运行命令后即可断开USB连接
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Stability" prog_lang="custom-colors" readonly="False" tags="" unique_id="192">
			<rich_text>user space stability

ANR  系统无法响应用户的输入
1.输入事件（key press, screen touch events）在5s内没响应
2.BroadcastReceiver 没有在10s内完成执行（background broadcast为60s）
3.ContentProvider 没有在20s内完成操作
4. Service没有在20s内完成操作（background service是200s）

</rich_text>
			<rich_text weight="heavy">如何有效的避免ANR？</rich_text>
			<rich_text>
在UI thread(main thread) 执行耗时的操作会触发anr, 这些操作应该放在worker therad
主要有下面的耗时操作
1) Network operations
2) Database operations
3) Disk I/O operations
4) 复杂的计算

对于需要在BroadcastReceiver处理的耗时操作， 可以使用IntentService来响应广播

</rich_text>
			<rich_text weight="heavy">解决ANR问题：</rich_text>
			<rich_text>
logcat可以获取的信息
1） 发生ANR的应用名
2） ANR的原因（key dispatching time out, broadcast time out or service time out）
3)  CPU 负载信息
4)  IO wait infomation

同时系统会写ANR Log到  /data/anr/traces.txt
查看主线程的状态，
如果主线程处于MONITOR ，有可能处于dead lock 状态
如果主线程处于TIMED_WAIT状态，可以找代码中sleep ， wait的方法
同时需要关注anrlogcat的上下文，找到可能会引起ANR的信息。

线程状态
ZOMBIE ： 中止的线程
RUNNABLE ： 处于运行过程中
TIME_WAIT :  等待Object.wait()，且等待较长时间
MONITOR : 线程被block住，处于monitor状态
WAIT ： 等待其他Object.wait()
INITIALIZING : 分配完资源，还没开始运行状态
STARTING ： 线程刚开始运行，还没加入到thread list
NATIVE :  挂掉的时候运行在jni方法
VMWAIT： 等待VM资源
SUSPENDED：线程被挂起，通常是被GC和debugger
UNKNOWN： 线程处于未定义状态




Android Watchdog
Android Jva Exception
Android JNI References
Android Native Crash
Memory Leak
Binder Issues
UI Freeze
UI corruption and Flicker








</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="touch事件分发" prog_lang="custom-colors" readonly="False" tags="" unique_id="194">
			<rich_text>
dispatchTouchEvent
Activity -&gt; ViewGroup -&gt; View

Activity.java
 public boolean dispatchTouchEvent(MotionEvent ev) {
     ... ...
  
     if (getWindow().superDispatchTouchEvent(ev)) {
            return true;
        }
        return onTouchEvent(ev);
}


getWindow().superDispatchTouchEvent() -&gt; PhoneWindow

    PhoneWindow.java
    public boolean superDispatchTouchEvent(MotionEvent event) {
        return mDecor.superDispatchTouchEvent(event);
    }

DecorView是window顶层的view，dispatch方法最终会找到window的跟ViewGroup进行分发。


dispatchTouchEvent 返回true表示事件被处理了




onTouchEvent
View -&gt; View Group -&gt; Activity


</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="设计模式" prog_lang="custom-colors" readonly="False" tags="" unique_id="195">
			<rich_text>MVC  Model-View-Contoller
MVP  Model-View-Presenter

MPC的View是Controller接收到action后渲染出来
而MVP的Presenter与View通过data binding进行了绑定，会根据用户的不同选择显示不同的view



RxJava + Retrofit + MVP
RxJava 基于事件， 异步调用
Retrofit 封装OKHttp ， 简化网络请求

</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="SystemProperties" prog_lang="custom-colors" readonly="False" tags="" unique_id="201">
			<rich_text>xref: /Avengers/system/sepolicy/property_contexts

在adb shell 下可以用getptop  setprop
ro.开头，只读属性
persist开头 关机不会小时， /data/property.
通过调用SystemProperties.get 、 SystemProperties.set  对系统的属性进行读取
使用这个api需要Platform签名，

xref: /Avengers/frameworks/base/core/java/android/os/SystemProperties.java

    public static void set(String key, String val) {
        if (key.length() &gt; PROP_NAME_MAX) {
            throw new IllegalArgumentException(&quot;key.length &gt; &quot; + PROP_NAME_MAX);
        }
        if (val != null &amp;&amp; val.length() &gt; PROP_VALUE_MAX) {
            throw new IllegalArgumentException(&quot;val.length &gt; &quot; +
                PROP_VALUE_MAX);
        }
        </rich_text>
			<rich_text weight="heavy">native_set</rich_text>
			<rich_text>(key, val);
    }
    
    调用native_set
    
    
JNI
xref: /Avengers/frameworks/base/core/jni/android_os_SystemProperties.cpp

随之调用
static void </rich_text>
			<rich_text weight="heavy">SystemProperties_set</rich_text>
			<rich_text>(JNIEnv *env, jobject clazz,
                                      jstring keyJ, jstring valJ)
{
    int err;
    const char* key;
    const char* val;

    if (keyJ == NULL) {
        jniThrowNullPointerException(env, &quot;key must not be null.&quot;);
        return ;
    }
    key = env-&gt;GetStringUTFChars(keyJ, NULL);

    if (valJ == NULL) {
        val = &quot;&quot;;       /* NULL pointer not allowed here */
    } else {
        val = env-&gt;GetStringUTFChars(valJ, NULL);
    }

    err = </rich_text>
			<rich_text weight="heavy">property_set</rich_text>
			<rich_text>(key, val);

    env-&gt;ReleaseStringUTFChars(keyJ, key);

    if (valJ != NULL) {
        env-&gt;ReleaseStringUTFChars(valJ, val);
    }

    if (err &lt; 0) {
        jniThrowException(env, &quot;java/lang/RuntimeException&quot;,
                          &quot;failed to set system property&quot;);
    }
}

xref: /Avengers/system/core/libcutils/properties.c
随之调用
int </rich_text>
			<rich_text weight="heavy">property_set</rich_text>
			<rich_text>(const char *key, const char *value)
{
    return </rich_text>
			<rich_text weight="heavy">__system_property_set</rich_text>
			<rich_text>(key, value);
}

随之调用
xref: /Avengers/bionic/libc/bionic/system_properties.cpp
int </rich_text>
			<rich_text weight="heavy">__system_property_set</rich_text>
			<rich_text>(const char *key, const char *value)
{
    if (key == 0) return -1;
    if (value == 0) value = &quot;&quot;;
    if (strlen(key) &gt;= PROP_NAME_MAX) return -1;
    if (strlen(value) &gt;= PROP_VALUE_MAX) return -1;

    prop_msg msg;
    memset(&amp;msg, 0, sizeof msg);
    msg.cmd = PROP_MSG_SETPROP;
    strlcpy(msg.name, key, sizeof msg.name);
    strlcpy(msg.value, value, sizeof msg.value);

    const int err = send_prop_msg(&amp;msg);
    if (err &lt; 0) {
        return err;
    }

    return 0;
}







</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Bluetooth" prog_lang="custom-colors" readonly="False" tags="" unique_id="203">
			<rich_text>设置菜单 BluetoothSettings  extends DeviceListPreferenceFragment

进入bluetooth的设置菜单以后
   BluetoothSettings#onResume
-&gt;BluetoothSettings#updateContent //更新列表显示
-&gt;BluetoothSettings#addDeviceCategory 

-&gt;DeviceListPreferenceFragment#addCachedDevices
-&gt;DeviceListPreferenceFragment#onDeviceAdded
-&gt;DeviceListPreferenceFragment#createDevicePreference

CachedBluetoothDevice 
Setting端操作蓝牙设备的对象，成员变量mDevice 的类型为BluetoothDevice

BluetoothDevice
蓝牙远程对象的客户端代理，对应AdapterService，通过AdapterService来过去对应的name，address

BluetoothAdapter
用来创建BluetoothDevice

LocalBluetoothManager 
LocalBluetoothAdapter 对应BluetoothAdapter的本地

CachedBluetoothDeviceManager
管理CachedBluetoothDevice对象，用一个map存储

BluetoothManagerService负责管理一些蓝牙相关的service的创建，如AdapterService



            </rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Permission" prog_lang="custom-colors" readonly="False" tags="" unique_id="207">
			<rich_text>查询所有dangerous的权限
adb shell pm list permissions -g -d 

安装app并对所有列在AndroidManafest的app
adb install -g &lt;path_to_apk&gt;

授予某个应用某个权限
pm grant [--user USER_ID] PACKAGE PERMISSION
撤销某个某个应用某个权限
pm revoke [--user USER_ID] PACKAGE PERMISSION

pm grant, revoke: these commands either grant or revoke permissions
    to apps. The permissions must be declared as used in the app's
    manifest, be runtime permissions (protection level dangerous),
    and the app targeting SDK greater than Lollipop MR1.


pm reset-permissions: revert all runtime permissions to their default state.

内置应用的预授权通过 DefaultPermissionGrantPolicy 来控制</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Android编译系统" prog_lang="custom-colors" readonly="False" tags="" unique_id="208">
			<rich_text>envsetup
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="MeetingRecord" prog_lang="custom-colors" readonly="False" tags="" unique_id="4">
			<rich_text></rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="麦博威尔" prog_lang="custom-colors" readonly="False" tags="" unique_id="25">
				<rich_text>1.开发项目的介绍需要加强
对于Applock项目，可以这么说： 在开发之前做过一定的调研，要实现这个功能主要有两种方式，一种是通过一个Service不断监听topActivity的状态，然后获取到这个Activity所在的packageName，另一种是直接在framework中的Activity的启动流程中进行拦截，在Activity正式启动之前进行判断是否需要加锁; 前者的方式不需要修改framework代码，但是会存在前启动activity后启动解锁界面的情况;后者实现会更完美.
对于sdcard加密项目，需要设置好一个安全分区去存储密钥，通过这个密钥来实现加密解密的过程，加密的功能是通过文件系统实现的。

</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="UML" prog_lang="custom-colors" readonly="False" tags="" unique_id="34">
			<rich_text>表示的强弱程度
组合&gt;聚合&gt;关联&gt;依赖

</rich_text>
			<rich_text scale="h3">依赖关系(dependency)</rich_text>
			<rich_text> ，依赖关系体现为类B作为参数在A的方法中使用
这种关系表示A使用到了类B，这个使用关系具有偶然性，临时性，但是B类的变化会影响到A，如某人要过年回家，需要做火车回家，此时人与火车之间的关系就是依赖关系。
依赖一般是单向的，双向的依赖会造成代码的强耦合，不推荐使用。

</rich_text>
			<rich_text justification="left"></rich_text>
			<rich_text>


</rich_text>
			<rich_text scale="h3">关联关系(association)</rich_text>
			<rich_text>， 一般是用成员变量的方式实现
这种关系比依赖关系更强，关系并不是偶然性、临时性，而是长期性的，关联有单向的和双向的

</rich_text>
			<rich_text justification="left"></rich_text>
			<rich_text>

</rich_text>
			<rich_text scale="h3">聚合关系(aggregation)</rich_text>
			<rich_text>，一般是用成员变量的方式实现
聚合可以当做关联关系的一种特例，从语义级别进行区分，它体现的是整体与部分、拥有的关系，has-a
整体和部分是可以分离的，他们有各自的生命周期，部分可以属于多个整体，也可以为多个整体i共享。如公司和员工，学校和学生
A聚合B，B由A组成

</rich_text>
			<rich_text justification="left"></rich_text>
			<rich_text>


</rich_text>
			<rich_text scale="h3">组合关系(composition)</rich_text>
			<rich_text>
自合也是关联关系的一种特例，只能从语义级别来区分，体现contains-a，这种关系比聚合更强，成为强聚合
组合关系的两者是密不可分的，生命周期也是一致的，如你和你的心脏
B由A组成，整体不存在了，个体也不存在

</rich_text>
			<rich_text justification="left"></rich_text>
			<rich_text>


</rich_text>
			<encoded_png char_offset="172"></encoded_png>
			<encoded_png char_offset="253"></encoded_png>
			<encoded_png char_offset="408"></encoded_png>
			<encoded_png char_offset="537"></encoded_png>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Context" prog_lang="custom-colors" readonly="False" tags="" unique_id="76">
			<rich_text>




Context
抽象类

ContextImpl
ContextImpl的实现类，很多资源都是通过LoadedApk类型的mPackageInfo来获取的， 而类似于startActivity的操作都是通过ActivityManagerNative.getDefault()来获取AMS的代理对象ActivityManagerProxy，然后通过代理来操作。

ContextWrapper
对Context类进行封装，含有ContextImpl实例对象的引用，在Activity、Service、Application创建的时候通过attachBaseContext进行添加

ContextThemeWrapper
包含了Theme相关的接口，通过android:theme来指定。因为只有Activity需要主题，所以Service是直接继承ContextWrapper的

ContextImpl是什么时候创建过程
1）Activity中的创建

在调用startActivity后，会通过ActivityThread.performLauncher添加Context
  private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) {
        if (activity != null) {
                Context appContext = </rich_text>
			<rich_text weight="heavy">createBaseContextForActivity</rich_text>
			<rich_text>(r, activity);
                CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());
                Configuration config = new Configuration(mCompatConfiguration);
                if (r.overrideConfig != null) {
                    config.updateFrom(r.overrideConfig);
                }
              
                ... ...
                activity.</rich_text>
			<rich_text weight="heavy">attach</rich_text>
			<rich_text>(appContext, this, getInstrumentation(), r.token,
                        r.ident, app, r.intent, r.activityInfo, title, r.parent,
                        r.embeddedID, r.lastNonConfigurationInstances, config,
                        r.referrer, r.voiceInteractor, window); 


    private Context </rich_text>
			<rich_text weight="heavy">createBaseContextForActivity</rich_text>
			<rich_text>(ActivityClientRecord r, final Activity activity) {
       //创建ContextImpl对象，可以看到创建的是ActivityContext
        ContextImpl appContext = ContextImpl.createActivityContext(
                this, r.packageInfo, r.token, displayId, r.overrideConfig);
        appContext.setOuterContext(activity);
        Context baseContext = appContext;
        ... ...
        return baseContext;
    }


2）Service中的创建
在Activity中通过bindService后，会在ActivityThread中通过调用handlerCreateService来创建ContextImpl
可以看到Service创建的是AppContext

 private void handleCreateService(CreateServiceData data) {
 
            ContextImpl context = </rich_text>
			<rich_text weight="heavy">ContextImpl.createAppContext</rich_text>
			<rich_text>(this, packageInfo);
            context.setOuterContext(service);

            Application app = packageInfo.makeApplication(false, mInstrumentation);
            service.attach(context, this, data.info.name, data.token, app,
                    ActivityManagerNative.getDefault());

 }
 




3）Application中的创建
应用启动的时候会首先创建Application对象，每个应用仅有一个Application对象，生命周期与应用保持一致。
应用启动的过程中会在ActivityThread中的handleBindApplication

private void handleBindApplication(AppBindData data) {
          ... ...
          Application app = data.info.makeApplication(data.restrictedBackupMode, null);
          ... ...
}

调用的是LoadedApk#makeApplication， 首先创建AppContext，然后调用 Instrumentation#newApplication
 public Application makeApplication(boolean forceDefaultAppClass,
            Instrumentation instrumentation) {

             ...
            ContextImpl appContext = ContextImpl.createAppContext(mActivityThread, this);
            app = mActivityThread.mInstrumentation.newApplication(
                    cl, appClass, appContext);

        ... ...   
        return app;
    }


    static public Application newApplication(Class&lt;?&gt; clazz, Context context)
            throws InstantiationException, IllegalAccessException,
            ClassNotFoundException {
        Application app = (Application)clazz.newInstance();
        app.attach(context);
        return app;
    }





getApplication与getApplicationContext区别
getApplication是Activity和Service中定义的方法，返回的是各自类型为Application的成员变量mApplciation,他们是在创建的时候在ActivityThread中被赋值的，两者返回的是同一个全局变量
而getApplicationContext 定义在抽象类Context中被，ContextWrapper、ContextImpl重载，其中ContextWrapper是通过ContextImpl的引用mBase调用实现，返回的是与上面一样是同一个全局变量，只不过类型是Context的而非Application的。





Context使用不当可能造成的内存泄露
将一个Activity的context作为引用传入到一个应用程序中一直存活的类，
如数据库管理工具是单例模式，构造函数中传入Activity的Context，则这个activity将一直不会被销毁





























</rich_text>
			<encoded_png char_offset="2"></encoded_png>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="Bug" prog_lang="custom-colors" readonly="False" tags="" unique_id="11">
		<rich_text>adb shell mount
adb shell dumpsys mount

internal 指的是应用无法共享的路径 如 /data/data
external 指的是应用能够共享的路径 ， 如 /storage/emulated/0/
Environment.getExternalStorageDirectory 会返回一个路径能够让所有APP共享，有可能是SDcard路径，但现在更多的是内置的存储的路径（叫做internal shared storage）。





收到com.android.settings/.func.broadcastreceiver.FuncSettingsReceiver
广播后disable GMS包 FuncSettingsReceiver


12-25 15:23:09.374  7678  7678 E Launcher: Unable to launch. tag=ShortcutInfo(title=YouTubeintent=Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=com.google.android.youtube/.app.honeycomb.Shell$HomeActivity bnds=[540,1236][798,1518] (has extras) }id=5 type=0 container=3 screen=0 cellX=2 cellY=0 spanX=1 spanY=1 dropPos=null user=UserHandle{0}) intent=Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER]

上面的日志应该是想从快捷方式启动youtube，却无法启动

感觉应该是拆卸应用的时候没能够把快捷方式去除掉

01-01 12:06:55.317  9751  9751 E FuncSettingsReceiver: Uninstall Success APP:&gt;&gt;com.android.chrome
01-01 12:06:55.326  9751 10556 E TctColorService: cMgr is null
01-01 12:06:55.342  4902  5254 D InputMethodUtils: --ro.default.locale.input:
01-01 12:06:55.375  8503 13298 D PackageBroadcastService: Received broadcast action=android.intent.action.PACKAGE_CHANGED and uri=com.android.chrome
01-01 12:06:55.392 10704 13300 I UpdateIcingCorporaServi: Updating corpora: APPS=com.android.chrome, CONTACTS=MAYBE
01-01 12:06:55.426  9751 10556 E TctColorService: cMgr is null
01-01 12:06:55.527  9751 10556 E TctColorService: cMgr is null
01-01 12:06:55.600  4902  7766 W art     : Long monitor contention event with owner method=android.content.pm.ParceledListSlice com.android.server.pm.PackageManagerService.getInstalledPackages(int, int) from PackageManagerService.java:5523 waiters=2 for 205ms
01-01 12:06:55.610  8503 13301 I PeopleContactsSync: CP2 sync disabled
01-01 12:06:55.627  9751 10556 E TctColorService: cMgr is null
01-01 12:06:55.631  8503  8619 I Icing   : doRemovePackageData com.android.chrome
01-01 12:06:55.631  8503  8619 I Icing   : Removing corpus key F4955BCF0F0BEE2FC5254A39791AA9D244814B89 for package com.android.chrome
01-01 12:06:55.727  9751 10556 E TctColorService: cMgr is null
01-01 12:06:55.828  9751 10556 E TctColorService: cMgr is null
01-01 12:06:55.831  4902  7974 W BackupManagerService: dataChanged but no participant pkg='com.tct.launcher' uid=10037
01-01 12:06:55.873  4902  7340 W BackupManagerService: dataChanged but no participant pkg='com.tct.launcher' uid=10037
01-01 12:06:55.899 10704 13300 I UpdateIcingCorporaServi: UpdateCorporaTask done [took 507 ms] updated apps [took 507 ms] 

</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/frameworks/opt/telephony/src/java/com/android/internal/telephony/gsm/">gsm</rich_text>
		<rich_text>/</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/frameworks/opt/telephony/src/java/com/android/internal/telephony/gsm/GsmServiceStateTracker.java">GsmServiceStateTracker.java</rich_text>
		<rich_text>
</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=EVENT_SIM_RECORDS_LOADED&amp;project=m8976">EVENT_SIM_RECORDS_LOADED</rich_text>
		<rich_text>


start process google apps

sudo adb shell am broadcast -a action.google.app.changed -e googleConfig 0

 START u0 {act=android.intent.action.VIEW dat=file:///storage/emulated/0/bluetooth/爱乐团 - 放开.mp3 typ=audio/mpeg cmp=android/com.android.internal.app.ResolverActivity} from uid 10098 on display 0

ActivityManager: START u0 {act=android.intent.action.CHOOSER cmp=android/com.android.internal.app.ChooserActivity (has extras)} from uid 10095 on display 0


died 





12-25 03:27:33.550 17568 17591 E AndroidRuntime: FATAL EXCEPTION: AlertService
12-25 03:27:33.550 17568 17591 E AndroidRuntime: Process: com.google.android.calendar, PID: 17568
12-25 03:27:33.550 17568 17591 E AndroidRuntime: java.lang.NullPointerException: Attempt to invoke virtual method 'java.util.List android.content.pm.ParceledListSlice.getList()' on a null object reference
12-25 03:27:33.550 17568 17591 E AndroidRuntime: 	at android.app.NotificationManager.getActiveNotifications(NotificationManager.java:683)
12-25 03:27:33.550 17568 17591 E AndroidRuntime: 	at com.android.calendar.alerts.AlertService$NotificationMgrWrapper.notify(AlertService.java:179)
12-25 03:27:33.550 17568 17591 E AndroidRuntime: 	at com.android.calendar.alerts.AlertService.postNotification(AlertService.java:745)
12-25 03:27:33.550 17568 17591 E AndroidRuntime: 	at com.android.calendar.alerts.AlertService.generateAlerts(AlertService.java:368)
12-25 03:27:33.550 17568 17591 E AndroidRuntime: 	at com.android.calendar.alerts.AlertService.updateAlertNotification(AlertService.java:330)
12-25 03:27:33.550 17568 17591 E AndroidRuntime: 	at com.android.calendar.alerts.AlertService.processMessage(AlertService.java:252)
12-25 03:27:33.550 17568 17591 E AndroidRuntime: 	at com.android.calendar.alerts.AlertService$ServiceHandler.handleMessage(AlertService.java:937)
12-25 03:27:33.550 17568 17591 E AndroidRuntime: 	at android.os.Handler.dispatchMessage(Handler.java:102)
12-25 03:27:33.550 17568 17591 E AndroidRuntime: 	at android.os.Looper.loop(Looper.java:148)
12-25 03:27:33.550 17568 17591 E AndroidRuntime: 	at android.os.HandlerThread.run(HandlerThread.java:61)


=======================================================================================================

 15:17:12.267   553   553 F DEBUG   : Build fingerprint: 'TCL/6070K/idol4s:6.0/MRA58K/vA1N-0:user/release-keys'
12-30 15:17:12.267   553   553 F DEBUG   : Revision: '0'
12-30 15:17:12.267   553   553 F DEBUG   : ABI: 'arm64'
12-30  15:17:12.268   553   553 F DEBUG   : pid: 12296, tid: 12347, name:  IntentService[G  &gt;&gt;&gt; com.google.android.gm &lt;&lt;&lt;
12-30 15:17:12.268   553   553 F DEBUG   : signal 4 (SIGILL), code 1 (ILL_ILLOPC), fault addr 0x7f6b5dc9a4
12-30  15:17:12.284   553   553 F DEBUG   :     x0   0000000000000000  x1    0000000012e8ea00  x2   0000000012eb05c0  x3   0000007f7b5bc070
12-30  15:17:12.284   553   553 F DEBUG   :     x4   0000000000000000  x5    0000007f7b5bc070  x6   000000000025dd8c  x7   0000000012eec620
12-30  15:17:12.284   553   553 F DEBUG   :     x8   000000000001345c  x9    0000007f82207a80  x10  0000000000000003  x11  0000000000000009
12-30  15:17:12.284   553   553 F DEBUG   :     x12  0000007f82207a80  x13   00000055968fb430  x14  00000055968fb230  x15  0000000000000010
12-30  15:17:12.284   553   553 F DEBUG   :     x16  0000007f6b5dc43c  x17   0000000000000000  x18  00000055968f34e0  x19  0000000012d1da20
12-30  15:17:12.284   553   553 F DEBUG   :     x20  0000007f7d6bb7e8  x21   0000000000000001  x22  0000000000000000  x23  0000000012e620d0
12-30  15:17:12.284   553   553 F DEBUG   :     x24  00000000708f7b88  x25   0000000012eb05c0  x26  0000000012e8ea00  x27  0000000012ea62e0
12-30 15:17:12.284   553   553 F DEBUG   :     x28  0000000000000001  x29  0000007f6a27a128  x30  0000007f6b5e8aa4
12-30 15:17:12.284   553   553 F DEBUG   :     sp   0000007f6a279d40  pc   0000007f6b5dc9a4  pstate 0000000060000000
12-30 15:17:12.285   553   553 F DEBUG   : 
12-30 15:17:12.285   553   553 F DEBUG   : backtrace:
12-30  15:17:12.286   553   553 F DEBUG   :     #00 pc 0000000000e489a4   /system/app/Gmail2/oat/arm64/Gmail2.odex (offset 0x829000)
12-30  15:17:12.286   553   553 F DEBUG   :     #01 pc 0000000000e54aa0   /system/app/Gmail2/oat/arm64/Gmail2.odex (offset 0x829000)
12-30 15:17:12.319  5561  5580 I sync    : [com.android.calendar,0,2,-947925084]
 


 
// CRASH: com.alcatel.music5 (pid 9382)
// Short Msg: Native crash
// Long Msg: Native crash: Aborted
// Build Label: TCL/6070K/idol4s:6.0/MRA58K/vA1S-0:user/release-keys
// Build Changelist: vA1S-0
// Build Time: 1452313953000
// *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
// Build fingerprint: 'TCL/6070K/idol4s:6.0/MRA58K/vA1S-0:user/release-keys'
// Revision: '0'
// ABI: 'arm'
// pid: 9382, tid: 9447, name: Load_audio_hand &gt;&gt;&gt; com.alcatel.music5 &lt;&lt;&lt;
// signal 6 (SIGABRT), code -6 (SI_TKILL), fault addr --------
// Abort message: 'art/runtime/indirect_reference_table.cc:65] JNI ERROR (app bug): see above.'
// r0 00000000 r1 000024e7 r2 00000006 r3 dee9e978
// r4 dee9e980 r5 dee9e930 r6 00000000 r7 0000010c
// r8 f4f4d800 r9 f4f4be44 sl acebcc53 fp f4f31220
// ip 00000006 sp dee9de98 lr f6fc2ec5 pc f6fc4f20 cpsr 40070010
//
// backtrace:
// #00 pc 00043f20 /system/lib/libc.so (tgkill+12)
// #01 pc 00041ec1 /system/lib/libc.so (pthread_kill+32)
// #02 pc 0001ba5f /system/lib/libc.so (raise+10)
// #03 pc 00018c01 /system/lib/libc.so (__libc_android_abort+34)
// #04 pc 000167c0 /system/lib/libc.so (abort+4)
// #05 pc 00321631 /system/lib/libart.so (art::Runtime::Abort()+212)
// #06 pc 000f3c6d /system/lib/libart.so (art::LogMessage::~LogMessage()+2212)
// #07 pc 000f03a3 /system/lib/libart.so (art::Barrier::~Barrier()+182)
//  #08 pc 003479e9 /system/lib/libart.so  (art::ThreadList::Dump(std::__1::basic_ostream&lt;char,  std::__1::char_traits&lt;char&gt; &gt;&amp;)+144)
// #09 pc 003216f3 /system/lib/libart.so (art::Runtime::Abort()+406)
// #10 pc 000f3c6d /system/lib/libart.so (art::LogMessage::~LogMessage()+2212)
// #11 pc 001d484b /system/lib/libart.so (art::IndirectReferenceTable::AbortIfNoCheckJNI()+62)
// #12 pc 0024e0a3 /system/lib/libart.so (art::JavaVMExt::DecodeGlobal(art::Thread*, void*)+498)
// #13 pc 0033dde9 /system/lib/libart.so (art::Thread::DecodeJObject(_jobject*) const+140)
//  #14 pc 0031aacf /system/lib/libart.so  (art::InvokeVirtualOrInterfaceWithVarArgs(art::ScopedObjectAccessAlreadyRunnable  const&amp;, _jobject*, _jmethodID*, std::__va_list)+30)
// #15 pc 0026bc8f /system/lib/libart.so (art::JNI::CallVoidMethodV(_JNIEnv*, _jobject*, _jmethodID*, std::__va_list)+330)
// #16 pc 00194035 /system/priv-app/Music/Music.apk (offset 0x1cbe000)
// #17 pc 00196bbf /system/priv-app/Music/Music.apk (offset 0x1cbe000)
// #18 pc 00197057 /system/priv-app/Music/Music.apk (offset 0x1cbe000)
// #19 pc 00197539 /system/priv-app/Music/Music.apk (offset 0x1cbe000)
// #20 pc 0019743f /system/priv-app/Music/Music.apk (offset 0x1cbe000)
// #21 pc 001aa1ef /system/priv-app/Music/Music.apk (offset 0x1cbe000)
// #22 pc 007c06a9 /system/priv-app/Music/oat/arm/Music.odex (offset 0x500000)



TelephonyConnection -&gt; TelephonyConnectionListener


</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/packages/services/Telephony/src/com/android/phone/NetworkQueryService.java">NetworkQueryService.java</rich_text>
		<rich_text>


Alpha用户提供的附件中没有Log
Situation: 与alpha用户沟通，手机是在2016.03.27，23点左右 正常上网使用微信或其他软件的时候突然出现的重启。在之前大概两小时之前因为不能注册网络等问题重启过几次
查看alpha用户手机中现存的Log，
有一份Log 2016.03.27 只有到13：50 为止
下一份是2016.03.28 03-28 16:00开始的
远远不再重启发生的时间段，所以无法进行分析






</rich_text>
		<rich_text weight="heavy">void</rich_text>
		<rich_text> ClassLinker::</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?refs=LoadClassMembers&amp;project=m8976">LoadClassMembers</rich_text>
		<rich_text>(</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Thread&amp;project=m8976">Thread</rich_text>
		<rich_text>* </rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?refs=self&amp;project=m8976">self</rich_text>
		<rich_text>, </rich_text>
		<rich_text weight="heavy">const</rich_text>
		<rich_text> </rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=DexFile&amp;project=m8976">DexFile</rich_text>
		<rich_text>&amp; </rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?refs=dex_file&amp;project=m8976">dex_file</rich_text>
		<rich_text>,
2309                                   </rich_text>
		<rich_text weight="heavy">const</rich_text>
		<rich_text> </rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=uint8_t&amp;project=m8976">uint8_t</rich_text>
		<rich_text>* </rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=class_data&amp;project=m8976">class_data</rich_text>
		<rich_text>,
2310                                   </rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Handle&amp;project=m8976">Handle</rich_text>
		<rich_text>&lt;</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mirror&amp;project=m8976">mirror</rich_text>
		<rich_text>::</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Class&amp;project=m8976">Class</rich_text>
		<rich_text>&gt; </rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=klass&amp;project=m8976">klass</rich_text>
		<rich_text>,
2311                                   </rich_text>
		<rich_text weight="heavy">const</rich_text>
		<rich_text> </rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=OatFile&amp;project=m8976">OatFile</rich_text>
		<rich_text>::</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=OatClass&amp;project=m8976">OatClass</rich_text>
		<rich_text>* </rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=oat_class&amp;project=m8976">oat_class</rich_text>
		<rich_text>) {

</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ScopedAssertNoThreadSuspension&amp;project=m8976">ScopedAssertNoThreadSuspension</rich_text>
		<rich_text> </rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=nts&amp;project=m8976">nts</rich_text>
		<rich_text>(</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=self&amp;project=m8976">self</rich_text>
		<rich_text>, </rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=__FUNCTION__&amp;project=m8976">__FUNCTION__</rich_text>
		<rich_text>)
</rich_text>
		<rich_text foreground="#ffff00000000" scale="h2"> </rich_text>
		<rich_text foreground="#ffff00000000" link="webs http://172.16.12.204:8080/source/s?defs=WriterMutexLock&amp;project=m8976" scale="h2">WriterMutexLock</rich_text>
		<rich_text foreground="#ffff00000000" scale="h2"> </rich_text>
		<rich_text foreground="#ffff00000000" link="webs http://172.16.12.204:8080/source/s?defs=mu&amp;project=m8976" scale="h2">mu</rich_text>
		<rich_text foreground="#ffff00000000" scale="h2">(</rich_text>
		<rich_text foreground="#ffff00000000" link="webs http://172.16.12.204:8080/source/s?defs=self&amp;project=m8976" scale="h2">self</rich_text>
		<rich_text foreground="#ffff00000000" scale="h2">, *</rich_text>
		<rich_text foreground="#ffff00000000" link="webs http://172.16.12.204:8080/source/s?defs=Locks&amp;project=m8976" scale="h2">Locks</rich_text>
		<rich_text foreground="#ffff00000000" scale="h2">::</rich_text>
		<rich_text foreground="#ffff00000000" link="webs http://172.16.12.204:8080/source/s?defs=classlinker_classes_lock_&amp;project=m8976" scale="h2">classlinker_classes_lock_</rich_text>
		<rich_text foreground="#ffff00000000" scale="h2">);</rich_text>
		<rich_text scale="h2">
</rich_text>
		<rich_text>
如果一个APK在多线程环境下使用BitMap，在recycled资源以后再此使用，由于Skia图像库并非线程安全，会出现问题








</rich_text>
		<rich_text scale="h2" weight="heavy">【anr】</rich_text>
		<rich_text>
2016-04-14 02:01:31,690 : 04-14 02:01:32.359  1404  1424 I am_anr  : [0,27917,com.facebook.appmanager,952647365,Broadcast of Intent { act=android.intent.action.</rich_text>
		<rich_text weight="heavy">PACKAGE_ADDED </rich_text>
		<rich_text>dat=package:</rich_text>
		<rich_text weight="heavy">com.android.tbks</rich_text>
		<rich_text> flg=0x4000010 cmp=com.facebook.appmanager/com.facebook.oxygen.appmanager.common.packages.PackageReceiver (has extras) }]
2016-04-14 02:01:39,299 : 04-14 02:01:39.947  1404  1424 I ActivityManager: Killing 27917:com.facebook.appmanager/u0a180 (adj 5): </rich_text>
		<rich_text weight="heavy">bg anr</rich_text>
		<rich_text>

和之前出现的ANR基本上一致， 不过上次收到的广播是android.intent.action.</rich_text>
		<rich_text weight="heavy">PACKAGE_REMOVED</rich_text>
		<rich_text>

</rich_text>
		<rich_text scale="h2" weight="heavy">【Analysis】</rich_text>
		<rich_text>
1.//首先是com.android.tbks 可能是在自动更新，使得系统发出了</rich_text>
		<rich_text weight="heavy">android.intent.action.PACKAGE_ADDED</rich_text>
		<rich_text>广播 ，之前那一次是com.android,vendor(google play)这个应用发生了更新，触发了</rich_text>
		<rich_text weight="heavy">android.intent.action.PACKAGE_REPLACED</rich_text>
		<rich_text>这个广播
u0_a198   4963  582   1031520 53164 SyS_epoll_ 0000000000 S com.android.tbks

</rich_text>
		<rich_text weight="heavy">Main-Radio log</rich_text>
		<rich_text>
2016-04-14 02:01:51,409 : 04-14 02:01:51.515 I/PackageManager.DexOptimizer( 1413): Running dexopt (dex2oat) on: /data/app/vmdl701375799.tmp/base.apk pkg=</rich_text>
		<rich_text weight="heavy">com.android.tbks</rich_text>
		<rich_text> isa=arm vmSafeMode=false debuggable=false oatDir = /data/app/vmdl701375799.tmp/oat bootComplete=true
2016-04-14 02:01:52,893 : 04-14 02:01:52.995 E/FuncSettingsReceiver(10512): Uninstall or PACKAGE_CHANGED APP:&gt;&gt;com.android.tbks,isEnable:&gt;&gt;true
2016-04-14 02:01:55,893 : 04-14 02:01:55.998 I/OtaApp@@@DownloadReceiver( 5087): where = apkPackName='com.android.tbks' AND update_status = 198===query count = 0
2016-04-14 02:01:56,097 : 04-14 02:01:56.200 I/UpdateIcingCorporaServi(16890): Updating corpora: APPS=com.android.tbks, CONTACTS=MAYBE

</rich_text>
		<rich_text weight="heavy">System log</rich_text>
		<rich_text>
2016-04-14 02:01:51,346 : 04-14 02:01:51.434  1413  1444 I PackageManager: Verification timed out for file:///storage/emulated/0/Android/data/com.android.tbks/files/app/t-876056853.apk
2016-04-14 02:01:51,346 : 04-14 02:01:51.434  1413  1444 I PackageManager: Continuing with installation of file:///storage/emulated/0/Android/data/com.android.tbks/files/app/t-876056853.apk
2016-04-14 02:01:52,128 : 04-14 02:01:52.218  1413  1434 I ActivityManager: </rich_text>
		<rich_text weight="heavy">Force stopping com.android.tbks</rich_text>
		<rich_text> appid=10198 user=-1: replace sys pkg
2016-04-14 02:01:52,128 : 04-14 02:01:52.221  1413  1444 W PackageManager: Trying to update system app code path from /system/custpack/app/priv-app/Activateapk_V1.0.2_20160408_103547_release_global.apk to /data/app/</rich_text>
		<rich_text weight="heavy">com.android.tbks-1</rich_text>
		<rich_text>
2016-04-14 02:01:52,128 : 04-14 02:01:52.224  1413  1444 W PackageManager: Code path for com.android.tbks changing from /system/custpack/app/priv-app/Activateapk_V1.0.2_20160408_103547_release_global.apk to /data/app/com.android.tbks-1
2016-04-14 02:01:52,128 : 04-14 02:01:52.224  1413  1444 W PackageManager: Resource path for com.android.tbks changing from /system/custpack/app/priv-app/Activateapk_V1.0.2_20160408_103547_release_global.apk to /data/app/com.android.tbks-1



</rich_text>
		<rich_text weight="heavy">2.//facebook.appmanager接收到这个广播以后</rich_text>
		<rich_text>
首先是有一个这样的错误，看上去是</rich_text>
		<rich_text weight="heavy">com.facebook.appmanager/app_light_prefs/com.facebook.appmanager/analytics_flexible_sampling_policy</rich_text>
		<rich_text> 文件没有找到

2016-04-14 02:01:55,628 : 04-14 02:01:55.721 W/appmanager(:&lt;default&gt;):LightSharedPreferencesImpl(16986): Failed to load preference file from Disk!
2016-04-14 02:01:55,628 : 04-14 02:01:55.721 W/appmanager(:&lt;default&gt;):LightSharedPreferencesImpl(16986): java.io.FileNotFoundException: /data/user/0/</rich_text>
		<rich_text weight="heavy">com.facebook.appmanager/app_light_prefs/com.facebook.appmanager/analytics_flexible_sampling_policy:</rich_text>
		<rich_text> open failed: ENOENT (No such file or directory)
2016-04-14 02:01:55,628 : 04-14 02:01:55.721 W/appmanager(:&lt;default&gt;):LightSharedPreferencesImpl(16986): 	at libcore.io.IoBridge.open(IoBridge.java:452)
2016-04-14 02:01:55,628 : 04-14 02:01:55.721 W/appmanager(:&lt;default&gt;):LightSharedPreferencesImpl(16986): 	at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:76)
2016-04-14 02:01:55,628 : 04-14 02:01:55.721 W/appmanager(:&lt;default&gt;):LightSharedPreferencesImpl(16986): 	at com.facebook.crudolib.d.k.a(LightSharedPreferencesStorage.java:56)
2016-04-14 02:01:55,628 : 04-14 02:01:55.721 W/appmanager(:&lt;default&gt;):LightSharedPreferencesImpl(16986): 	at com.facebook.crudolib.d.g.run(LightSharedPreferencesImpl.java:61)
2016-04-14 02:01:55,628 : 04-14 02:01:55.721 W/appmanager(:&lt;default&gt;):LightSharedPreferencesImpl(16986): 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:423)
2016-04-14 02:01:55,628 : 04-14 02:01:55.721 W/appmanager(:&lt;default&gt;):LightSharedPreferencesImpl(16986): 	at com.facebook.common.executors.dt.run(WrappingExecutorService.java:77)
2016-04-14 02:01:55,628 : 04-14 02:01:55.721 W/appmanager(:&lt;default&gt;):LightSharedPreferencesImpl(16986): 	at com.facebook.common.executors.aa.run(DefaultConstrainedListeningExecutorService.java:327)
2016-04-14 02:01:55,628 : 04-14 02:01:55.721 W/appmanager(:&lt;default&gt;):LightSharedPreferencesImpl(16986): 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113)
2016-04-14 02:01:55,628 : 04-14 02:01:55.721 W/appmanager(:&lt;default&gt;):LightSharedPreferencesImpl(16986): 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)
2016-04-14 02:01:55,628 : 04-14 02:01:55.721 W/appmanager(:&lt;default&gt;):LightSharedPreferencesImpl(16986): 	at com.facebook.common.executors.cs.run(NamedThreadFactory.java:42)
2016-04-14 02:01:55,628 : 04-14 02:01:55.721 W/appmanager(:&lt;default&gt;):LightSharedPreferencesImpl(16986): 	at java.lang.Thread.run(Thread.java:818)
2016-04-14 02:01:55,628 : 04-14 02:01:55.721 W/appmanager(:&lt;default&gt;):LightSharedPreferencesImpl(16986): Caused by: android.system.ErrnoException: open failed: ENOENT (No such file or directory)
2016-04-14 02:01:55,628 : 04-14 02:01:55.721 W/appmanager(:&lt;default&gt;):LightSharedPreferencesImpl(16986): 	at libcore.io.Posix.open(Native Method)
2016-04-14 02:01:55,628 : 04-14 02:01:55.721 W/appmanager(:&lt;default&gt;):LightSharedPreferencesImpl(16986): 	at libcore.io.BlockGuardOs.open(BlockGuardOs.java:186)
2016-04-14 02:01:55,628 : 04-14 02:01:55.721 W/appmanager(:&lt;default&gt;):LightSharedPreferencesImpl(16986): 	at libcore.io.IoBridge.open(IoBridge.java:438)
2016-04-14 02:01:55,628 : 04-14 02:01:55.721 W/appmanager(:&lt;default&gt;):LightSharedPreferencesImpl(16986): 	... 10 more
2016-04-14 02:01:55,675 : 04-14 02:01:55.766 W/appmanager(:&lt;default&gt;):b(16986): Called user scoped provider with no viewer. ViewerContextManager was created with no ViewerContext. Using EmptyViewerContextManager to return fake logged in instance.
2016-04-14 02:01:55,690 : 04-14 02:01:55.781 W/appmanager(:&lt;default&gt;):b(16986): Called user scoped provider with no viewer. ViewerContextManager was created with no ViewerContext. Using EmptyViewerContextManager to return fake logged in instance.
2016-04-14 02:01:55,737 : 04-14 02:01:55.829 E/NetworkScheduler.SchedulerReceiver( 5583): Invalid parameter app
2016-04-14 02:01:55,815 : 04-14 02:01:55.914 W/appmanager(:&lt;default&gt;):QuickExperimentControllerImpl(16986): Exposure of experiment com.facebook.</rich_text>
		<rich_text link="webs http.g.c@8fc27b">http.g.c@8fc27b</rich_text>
		<rich_text> occurred when no user was logged in

接着又出现了之前一样的网络错误
2016-04-14 02:02:26,988 : 04-14 02:02:27.087 W/appmanager(:&lt;default&gt;):ae(16986): Got org.apache.</rich_text>
		<rich_text link="webs http.conn.ConnectTimeoutException:">http.conn.ConnectTimeoutException:</rich_text>
		<rich_text> Connect to /37.61.54.158:443 timed out while executing fetchSessionlessGKInfo, retrying on a safe network stack
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): Sessionless gatekeeper fetch with SingleMethodRunner failed
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): org.apache.</rich_text>
		<rich_text link="webs http.conn.ConnectTimeoutException:">http.conn.ConnectTimeoutException:</rich_text>
		<rich_text> </rich_text>
		<rich_text weight="heavy">Connect to /37.61.54.158:443 timed out</rich_text>
		<rich_text>
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at org.apache.</rich_text>
		<rich_text link="webs http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:126)">http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:126)</rich_text>
		<rich_text>
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at org.apache.</rich_text>
		<rich_text link="webs http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:149)">http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:149)</rich_text>
		<rich_text>
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at org.apache.</rich_text>
		<rich_text link="webs http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:169)">http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:169)</rich_text>
		<rich_text>
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at org.apache.</rich_text>
		<rich_text link="webs http.impl.conn.AbstractPooledConnAdapter.open(AbstractPooledConnAdapter.java:124)">http.impl.conn.AbstractPooledConnAdapter.open(AbstractPooledConnAdapter.java:124)</rich_text>
		<rich_text>
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at org.apache.</rich_text>
		<rich_text link="webs http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:369)">http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:369)</rich_text>
		<rich_text>
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at org.apache.</rich_text>
		<rich_text link="webs http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:560)">http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:560)</rich_text>
		<rich_text>
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at org.apache.</rich_text>
		<rich_text link="webs http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:492)">http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:492)</rich_text>
		<rich_text>
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at org.apache.</rich_text>
		<rich_text link="webs http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:470)">http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:470)</rich_text>
		<rich_text>
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at android.net.</rich_text>
		<rich_text link="webs http.AndroidHttpClient.execute(AndroidHttpClient.java:250)">http.AndroidHttpClient.execute(AndroidHttpClient.java:250)</rich_text>
		<rich_text>
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at com.facebook.</rich_text>
		<rich_text link="webs http.common.ae.a(FbHttpRequestProcessor.java:477)">http.common.ae.a(FbHttpRequestProcessor.java:477)</rich_text>
		<rich_text>
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at com.facebook.</rich_text>
		<rich_text link="webs http.common.ae.c(FbHttpRequestProcessor.java:398)">http.common.ae.c(FbHttpRequestProcessor.java:398)</rich_text>
		<rich_text>
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at com.facebook.</rich_text>
		<rich_text link="webs http.common.ae.b(FbHttpRequestProcessor.java:342)">http.common.ae.b(FbHttpRequestProcessor.java:342)</rich_text>
		<rich_text>
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at com.facebook.</rich_text>
		<rich_text link="webs http.common.ae.a(FbHttpRequestProcessor.java:328)">http.common.ae.a(FbHttpRequestProcessor.java:328)</rich_text>
		<rich_text>
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at com.facebook.</rich_text>
		<rich_text link="webs http.common.ae.a(FbHttpRequestProcessor.java:256)">http.common.ae.a(FbHttpRequestProcessor.java:256)</rich_text>
		<rich_text>
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at com.facebook.</rich_text>
		<rich_text link="webs http.common.ae.a(FbHttpRequestProcessor.java:1183)">http.common.ae.a(FbHttpRequestProcessor.java:1183)</rich_text>
		<rich_text>
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at com.facebook.</rich_text>
		<rich_text link="webs http.common.ai.run(FbHttpRequestProcessor.java:1204)">http.common.ai.run(FbHttpRequestProcessor.java:1204)</rich_text>
		<rich_text>
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:423)
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at com.facebook.common.executors.dt.run(WrappingExecutorService.java:77)
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:423)
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at java.util.concurrent.FutureTask.run(FutureTask.java:237)
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at com.facebook.common.executors.aa.run(DefaultConstrainedListeningExecutorService.java:327)
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113)
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at com.facebook.common.executors.cs.run(NamedThreadFactory.java:42)
2016-04-14 02:02:58,067 : 04-14 02:02:58.162 E/appmanager(:&lt;default&gt;):p(16986): 	at java.lang.Thread.run(Thread.java:818)

</rich_text>
		<rich_text scale="h2" weight="heavy">[总结]</rich_text>
		<rich_text>
不管是资源没找到的错误，还是网络连接没连上，我觉得都是facebook应用的错误，而且会在收到类似 </rich_text>
		<rich_text weight="heavy">android.intent.action.PACKAGE_ADDED</rich_text>
		<rich_text>, </rich_text>
		<rich_text weight="heavy">android.intent.action.PACKAGE_REPLACED</rich_text>
		<rich_text>，</rich_text>
		<rich_text weight="heavy">android.intent.action.PACKAGE_REMOVED</rich_text>
		<rich_text> 这类广播之后可能出错

















01-01 15:27:05.045  1985  2027 E SQLiteDatabase: Error inserting bucket_id=-2068125349 height=2790 date_modified=26824 bucket_display_name=supershot datetaken=26824598 parent=159 format=14347 storage_id=65537 media_type=1 mime_type=image/png _data=/storage/emulated/0/supershot/IMG_19700101_152704.jpg title=IMG_19700101_152704.jpg _size=545268 date_added=26825 width=1080 _display_name=IMG_19700101_152704.jpg
01-01 15:27:05.045  1985  2027 E SQLiteDatabase: android.database.sqlite.SQLiteConstraintException: UNIQUE constraint failed: files._data (code 2067)
01-01 15:27:05.045  1985  2027 E SQLiteDatabase: 	at android.database.sqlite.SQLiteConnection.nativeExecuteForLastInsertedRowId(Native Method)
01-01 15:27:05.045  1985  2027 E SQLiteDatabase: 	at android.database.sqlite.SQLiteConnection.executeForLastInsertedRowId(SQLiteConnection.java:780)
01-01 15:27:05.045  1985  2027 E SQLiteDatabase: 	at android.database.sqlite.SQLiteSession.executeForLastInsertedRowId(SQLiteSession.java:788)
01-01 15:27:05.045  1985  2027 E SQLiteDatabase: 	at android.database.sqlite.SQLiteStatement.executeInsert(SQLiteStatement.java:86)
01-01 15:27:05.045  1985  2027 E SQLiteDatabase: 	at android.database.sqlite.SQLiteDatabase.insertWithOnConflict(SQLiteDatabase.java:1471)
01-01 15:27:05.045  1985  2027 E SQLiteDatabase: 	at android.database.sqlite.SQLiteDatabase.insert(SQLiteDatabase.java:1341)
01-01 15:27:05.045  1985  2027 E SQLiteDatabase: 	at com.android.providers.media.MediaProvider.insertFile(MediaProvider.java:3580)
01-01 15:27:05.045  1985  2027 E SQLiteDatabase: 	at com.android.providers.media.MediaProvider.insertInternal(MediaProvider.java:3773)
01-01 15:27:05.045  1985  2027 E SQLiteDatabase: 	at com.android.providers.media.MediaProvider.insert(MediaProvider.java:3231)
01-01 15:27:05.045  1985  2027 E SQLiteDatabase: 	at android.content.ContentProvider$Transport.insert(ContentProvider.java:263)
01-01 15:27:05.045  1985  2027 E SQLiteDatabase: 	at android.content.ContentProviderNative.onTransact(ContentProviderNative.java:163)
01-01 15:27:05.045  1985  2027 E SQLiteDatabase: 	at android.os.Binder.execTransact(Binder.java:453)




05-17 14:33:45.412  3806  3806 D AndroidRuntime: Shutting down VM
05-17 14:33:45.414  3806  3806 E AndroidRuntime: FATAL EXCEPTION: main
05-17 14:33:45.414  3806  3806 E AndroidRuntime: Process: com.android.systemui:screenshot, PID: 3806
05-17 14:33:45.414  3806  3806 E AndroidRuntime: java.lang.IllegalArgumentException: pointerIndex out of range
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.MotionEvent.nativeGetAxisValue(Native Method)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.MotionEvent.getY(MotionEvent.java:2087)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.ViewRootImpl$ViewPostImeInputStage.processPointerEvent(ViewRootImpl.java:4507)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:4198)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3731)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3784)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3750)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:3876)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3758)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:3933)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3731)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3784)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3750)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3758)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3731)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.ViewRootImpl.deliverInputEvent(ViewRootImpl.java:6282)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.ViewRootImpl.doProcessInputEvents(ViewRootImpl.java:6256)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.ViewRootImpl.enqueueInputEvent(ViewRootImpl.java:6217)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.ViewRootImpl$WindowInputEventReceiver.onInputEvent(ViewRootImpl.java:6385)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.InputEventReceiver.dispatchInputEvent(InputEventReceiver.java:185)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.InputEventReceiver.nativeConsumeBatchedInputEvents(Native Method)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.InputEventReceiver.consumeBatchedInputEvents(InputEventReceiver.java:176)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.ViewRootImpl.doConsumeBatchedInput(ViewRootImpl.java:6356)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.ViewRootImpl$ConsumeBatchedInputRunnable.run(ViewRootImpl.java:6408)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.Choreographer$CallbackRecord.run(Choreographer.java:858)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.Choreographer.doCallbacks(Choreographer.java:670)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.Choreographer.doFrame(Choreographer.java:600)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:844)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.os.Handler.handleCallback(Handler.java:739)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.os.Handler.dispatchMessage(Handler.java:95)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.os.Looper.loop(Looper.java:148)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at android.app.ActivityThread.main(ActivityThread.java:5473)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at java.lang.reflect.Method.invoke(Native Method)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)
05-17 14:33:45.414  3806  3806 E AndroidRuntime: 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616)



</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=bool&amp;project=m8976">bool</rich_text>
		<rich_text>.</rich_text>
		<rich_text link="webs http://172.16.12.204:8080/source/s?defs=feature_fp_enabled&amp;project=m8976">feature_fp_enabled</rich_text>
		<rich_text>










07-21 14:04:41.387  4468  4468 I FingerprintController: releasing fp wakelock




07-21 14:04:41.434  1590  1651 I sysui_view_visibility: [223,0]

07-21 14:04:41.434  1590  1651 I sysui_histogram: [dozing_minutes,0]

07-21 14:04:41.446  1590  4417 I </rich_text>
		<rich_text weight="heavy">am_resume_activity</rich_text>
		<rich_text>: [0,155801710,13,com.android.settings/.fingerprint.FingerprintSettings]

07-21 14:04:41.465  1590  1668 I DisplayPowerController: updatePowerState

07-21 14:04:41.465  1590  1666 E WindowAnimator: Timeout waiting for animation to startup

07-21 14:04:41.469  7891  7891 I Instrumentation: [AppLaunch] activity.onStart +

07-21 14:04:41.469  7891  7891 I Instrumentation: [AppLaunch] activity.onStart -

07-21 14:04:41.469  7891  7891 I Instrumentation: [AppLaunch] activity.onResume +

07-21 14:04:41.472   554  4572 E bt_a2dp_hw: adev_set_parameters: ERROR: set param called even when stream out is null

07-21 14:04:41.482  7891  7891 I Instrumentation: [AppLaunch] activity.onResume -

07-21 14:04:41.482  7891  7891 I sysui_view_visibility: [49,100]

07-21 14:04:41.485  1590  5014 I libsensor1: libsensor_log_ctl_write_pkt: fd 70; svc 31; msg 0; txn 0; cmd WRITE_QMI

07-21 14:04:41.486  1590  1590 I sysui_histogram: [fingerprint_token,0]

07-21 14:04:41.486  7891  7891 I </rich_text>
		<rich_text weight="heavy">am_on_resume_called</rich_text>
		<rich_text>: [0,com.android.settings.fingerprint.FingerprintSettings]











</rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Multi-windowBUG" prog_lang="custom-colors" readonly="False" tags="" unique_id="147">
			<rich_text weight="heavy">1. 3247984  [File Manager] Screen flash when change full/split screen]</rich_text>
			<rich_text>

在Filemanager 选择一个多媒体或其他文件的时候，弹出ChooserActivity的时候，切换进入Multi-window， 发现会有闪烁。

 ChooserActivity已经配置了configchange， 不会因为进出multi-window 而销毁， 发生的闪烁是后面的阴影部分。
 
目前Nexus 6P  7.1的版本也会有这个问题。



</rich_text>
			<rich_text weight="heavy">2. Defect-</rich_text>
			<rich_text foreground="#000000" weight="heavy">3044243</rich_text>
			<rich_text> Email白屏问题


</rich_text>
			<rich_text foreground="#000000">因为正常情况下，Activity会在onPause的时候进行截屏。而在Multi-window模式下，通过DividerView向上拖动这种方式推出Multi-window， 系统是无法进行有效的截屏的，因为截屏的触发点刚好是整个Window消失的那一刻，所以造成了OverView中的Task出现白屏。</rich_text>
			<rich_text>

分屏状态下按power键，如果keygurad是swipe的状态，则 stackid 为1的堆栈变为全屏， 解锁后弹出的对话框属于全屏的堆栈，造成这个问题。
huzhengyu@51187-26-1:~$ adb shell am stack list
</rich_text>
			<rich_text foreground="#ff0000">Stack id=1 bounds=[0,0][1080,1920]</rich_text>
			<rich_text> displayId=0 userId=0  taskId=289: com.android.settings/com.android.settings.Settings bounds=[0,939][1080,1920] userId=0 visible=true topActivity=ComponentInfo{com.android.settings/com.android.settings.Settings$SecuritySettingsActivity}

Stack id=0 bounds=[0,0][1080,1920] displayId=0 userId=0  taskId=276: com.android.launcher3/com.android.launcher3.Launcher bounds=[0,0][1080,1920] userId=0 visible=false topActivity=ComponentInfo{com.android.systemui/com.android.systemui.recents.RecentsActivity}  taskId=277: com.android.systemui/com.android.systemui.recents.RecentsActivity bounds=[0,939][1080,1920] userId=0 visible=false topActivity=ComponentInfo{com.android.systemui/com.android.systemui.recents.RecentsActivity}

Stack id=3 bounds=[0,0][1080,909] displayId=0 userId=0  taskId=285: com.android.dialer/com.android.dialer.DialtactsActivity bounds=[0,0][1080,909] userId=0 visible=false topActivity=ComponentInfo{com.android.dialer/com.android.dialer.DialtactsActivity}

分屏状态下按power键，如果keygurad是none的状态，则 stackid 为1的堆栈则是正常的半屏状态，解锁后 stackid=1为半屏huzhengyu@51187-26-1:~$ adb shell am stack list
</rich_text>
			<rich_text foreground="#ff0000">Stack id=1 bounds=[0,939][1080,1920]</rich_text>
			<rich_text> displayId=0 userId=0  taskId=289: com.android.settings/com.android.settings.Settings bounds=[0,939][1080,1920] userId=0 visible=true topActivity=ComponentInfo{com.android.settings/com.android.settings.Settings$SecuritySettingsActivity}

Stack id=0 bounds=[0,939][1080,1920] displayId=0 userId=0  taskId=276: com.android.launcher3/com.android.launcher3.Launcher bounds=[0,0][1080,1920] userId=0 visible=false topActivity=ComponentInfo{com.android.systemui/com.android.systemui.recents.RecentsActivity}  taskId=277: com.android.systemui/com.android.systemui.recents.RecentsActivity bounds=[0,939][1080,1920] userId=0 visible=false topActivity=ComponentInfo{com.android.systemui/com.android.systemui.recents.RecentsActivity}

Stack id=3 bounds=[0,0][1080,909] displayId=0 userId=0  taskId=285: com.android.dialer/com.android.dialer.DialtactsActivity bounds=[0,0][1080,909] userId=0 visible=true topActivity=ComponentInfo{com.android.dialer/com.android.dialer.DialtactsActivity}



Email
accounts_welcome -&gt; </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel4/JrdEmail/Email/src/main/res/layout/account_setup_basics_fragment.xml">account_setup_basics_fragment</rich_text>
			<rich_text>.xml -&gt;  </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel4/JrdEmail/Email/src/main/java/com/tct/email/activity/setup/AccountSetupBasicsFragment.java">AccountSetupBasicsFragment</rich_text>
			<rich_text>.java
AccountSetupFinal 是调动的activity



InCallActivity所在的stack 没有能够及时销毁造成了这个问题。 
 
Stack id=0 bounds=[0,0][1080,1920] displayId=0 userId=0
  taskId=23: com.tct.launcher/com.tct.launcher.Launcher bounds=[0,0][1080,1920] userId=0 visible=true topActivity=ComponentInfo{com.android.systemui/com.android.systemui.recents.RecentsActivity}  taskId=30: com.android.systemui/com.android.systemui.recents.RecentsActivity bounds=[0,939][1080,1920] userId=0 visible=true topActivity=ComponentInfo{com.android.systemui/com.android.systemui.recents.RecentsActivity}
</rich_text>
			<rich_text foreground="#ff0000">Stack id=3 bounds=[0,0][1080,909] displayId=0 userId=0  taskId=49: com.android.dialer/com.android.incallui.InCallActivity bounds=[0,0][1080,909] userId=0 visible=true</rich_text>
			<rich_text>
Stack id=1 bounds=[0,0][1080,1920] displayId=0 userId=0  taskId=34: com.android.chrome/org.chromium.chrome.browser.ChromeTabbedActivity bounds=[0,939][1080,1920] userId=0 visible=false topActivity=ComponentInfo{com.android.mms/com.android.mms.ui.ConversationList}  taskId=41: com.tct.soundrecorder/com.tct.soundrecorder.SoundRecorder bounds=[0,939][1080,1920] userId=0 visible=false topActivity=ComponentInfo{com.android.mms/com.android.mms.ui.ConversationList}  taskId=24: com.jrdcom.filemanager/com.jrdcom.filemanager.activity.FileBrowserActivity bounds=[0,939][1080,1920] userId=0 visible=false topActivity=ComponentInfo{com.android.mms/com.android.mms.ui.ConversationList}  taskId=29: com.android.mms/com.android.mms.ui.ConversationList bounds=[0,939][1080,1920] userId=0 visible=false topActivity=ComponentInfo{com.android.mms/com.android.mms.ui.ConversationList}


Android 7.0的问题，在Android 7.1上Fix 了，可以找一下相应的patch。

此问题通过问题现象及多窗口原理分析，现在发现的问题:
1.出现此问题时，Call是分屏后单独一屏唯一的初始分屏界面
2.Call界面在分屏后没有焦点,没有焦点就会出现该问题，如果Call界面有焦点就不会复现.
综上在Call界面没有焦点时出现了分屏退出的问题，与原生的分屏设计相关.
需要针对分屏及焦点切换问题进一步的分析.



From 7faa33dd705456591959ee0aac3d8d4bb8f830f6 Mon Sep 17 00:00:00 2001
From: Hu Peng &lt;peng-hu@jrdcom.com&gt;
Date: Fri, 02 Dec 2016 17:04:47 +0800
Subject: [PATCH] [1 of 1][3097564]Fix finishing activity in non-focused stack

 ###%%%comment:[1 of 1]Fix finishing activity in non-focused stack
 ###%%%bug number:3097564
 ###%%%product name:simba6t
 ###%%%root cause:Coding
 ###%%%Bug category:Platform
 ###%%%regression response:---
 ###%%%regression comments:
 ###%%%Module_Impact:split-screen
 ###%%%Test_Suggestion:ok
 ###%%%Solution:Fix finishing activity in non-focused stack
 ###%%%Test_Report:ok
 ###%%%VAL Can Test:Yes

Change-Id: I4ec992f923d40488f36f35722a9b5a495251a78d
---

diff --git a/services/core/java/com/android/server/am/ActivityStack.java b/services/core/java/com/android/server/am/ActivityStack.java
index 9d86d28..8c49f67 100644
--- a/services/core/java/com/android/server/am/ActivityStack.java
+++ b/services/core/java/com/android/server/am/ActivityStack.java
@@ -3689,13 +3689,27 @@
         if (DEBUG_STATES) Slog.v(TAG_STATES, &quot;Moving to FINISHING: &quot; + r);
         r.state = ActivityState.FINISHING;
 
+        //add by zongbao.shang 20161202 start 3097564
+        final boolean finishingActivityInNonFocusedStack
+                 = r.task.stack != mStackSupervisor.getFocusedStack()
+                 &amp;&amp; prevState == ActivityState.PAUSED &amp;&amp; mode == FINISH_AFTER_VISIBLE;
+        //add by zongbao.shang 20161202 end 3097564
+
         if (mode == FINISH_IMMEDIATELY
                 || (prevState == ActivityState.PAUSED
                     &amp;&amp; (mode == FINISH_AFTER_PAUSE || mStackId == PINNED_STACK_ID))
+                //add by zongbao.shang 20161202 start 3097564
+                || finishingActivityInNonFocusedStack
+                //add by zongbao.shang 20161202 end 3097564
                 || prevState == ActivityState.STOPPED
                 || prevState == ActivityState.INITIALIZING) {
             r.makeFinishingLocked();
             boolean activityRemoved = destroyActivityLocked(r, true, &quot;finish-imm&quot;);
+            //add by zongbao.shang 20161202 start 3097564
+            if (finishingActivityInNonFocusedStack) {
+                mStackSupervisor.ensureActivitiesVisibleLocked(null, 0, !PRESERVE_WINDOWS);
+            }
+            //add by zongbao.shang 20161202 end 3097564
             if (activityRemoved) {
                 mStackSupervisor.resumeFocusedStackTopActivityLocked();
             }
</rich_text>
			<rich_text weight="heavy">3.Defect-</rich_text>
			<rich_text foreground="#000000" weight="heavy">2989563</rich_text>
			<rich_text weight="heavy"> Recent 无法显示Task内容问题</rich_text>
			<rich_text>
-&gt; ActivityStack#screenshotActivitiesLocked
-&gt; WindowManagerService#screenshotApplications 
-&gt; WindowManagerService #screenshotApplicationsInner
Multi-window往上滑动堆栈：
01-02 08:28:23.318  1310  1467 I mazda   : java.lang.Throwable
01-02 08:28:23.318  1310  1467 I mazda   : 	at com.android.server.wm.WindowManagerService.screenshotApplicationsInner(WindowManagerService.java:6241)
01-02 08:28:23.318  1310  1467 I mazda   : 	at com.android.server.wm.WindowManagerService.screenshotApplications(WindowManagerService.java:6231)
01-02 08:28:23.318  1310  1467 I mazda   : 	at com.android.server.am.ActivityStack.screenshotActivitiesLocked(ActivityStack.java:1074)
01-02 08:28:23.318  1310  1467 I mazda   : 	at com.android.server.am.ActivityStack.setVisible(ActivityStack.java:1458)
01-02 08:28:23.318  1310  1467 I mazda   : 	at com.android.server.am.ActivityStack.makeInvisible(ActivityStack.java:1921)
01-02 08:28:23.318  1310  1467 I mazda   : 	at com.android.server.am.ActivityStack.ensureActivitiesVisibleLocked(ActivityStack.java:1803)
01-02 08:28:23.318  1310  1467 I mazda   : 	at com.android.server.am.ActivityStackSupervisor.positionTaskInStackLocked(ActivityStackSupervisor.java:2666)
01-02 08:28:23.318  1310  1467 I mazda   : 	at com.android.server.am.ActivityStackSupervisor.moveTasksToFullscreenStackLocked(ActivityStackSupervisor.java:2187)
01-02 08:28:23.318  1310  1467 I mazda   : 	at com.android.server.am.ActivityManagerService.moveTasksToFullscreenStack(ActivityManagerService.java:18753)
01-02 08:28:23.318  1310  1467 I mazda   : 	at android.app.ActivityManagerNative.onTransact(ActivityManagerNative.java:2888)
01-02 08:28:23.318  1310  1467 I mazda   : 	at com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:2784)
01-02 08:28:23.318  1310  1467 I mazda   : 	at android.os.Binder.execTransact(Binder.java:565)



这个问题受到Android目前框架的显限制，无法修改。
 
Recents界面中的显示的Task其实是Activity的截屏。 正常情况下，一个Activity是在onPause的时候调用相关的API进行截屏作为这个Task最后的活动状态出现在Recents中， 堆栈的情况如下， 即onPause -&gt; 截屏 -&gt; onStop -&gt; 出现Recents界面
01-02 08:52:28.633  3635  3635 I mazda   : onPause
01-02 08:52:28.642  1310  2251 I mazda   : java.lang.Throwable
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.wm.WindowManagerService.screenshotApplicationsInner(WindowManagerService.java:6241)
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.wm.WindowManagerService.screenshotApplications(WindowManagerService.java:6231)
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.am.ActivityStack.screenshotActivitiesLocked(ActivityStack.java:1074)
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.am.ActivityStack.setVisible(ActivityStack.java:1458)
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.am.ActivityStack.makeInvisible(ActivityStack.java:1921)
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.am.ActivityStack.ensureActivitiesVisibleLocked(ActivityStack.java:1803)
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.am.ActivityStackSupervisor.ensureActivitiesVisibleLocked(ActivityStackSupervisor.java:3014)
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.am.ActivityStack.completePauseLocked(ActivityStack.java:1381)
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.am.ActivityStack.startPausingLocked(ActivityStack.java:1185)
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.am.ActivityStackSupervisor.pauseBackStacks(ActivityStackSupervisor.java:964)
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.am.ActivityStack.resumeTopActivityInnerLocked(ActivityStack.java:2276)
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.am.ActivityStack.resumeTopActivityUncheckedLocked(ActivityStack.java:2131)
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.am.ActivityStackSupervisor.resumeFocusedStackTopActivityLocked(ActivityStackSupervisor.java:1833)
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.am.ActivityStackSupervisor.resumeFocusedStackTopActivityLocked(ActivityStackSupervisor.java:1823)
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.am.ActivityStack.moveTaskToFrontLocked(ActivityStack.java:4341)
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.am.ActivityStarter.setTargetStackAndMoveToFrontIfNeeded(ActivityStarter.java:1477)
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.am.ActivityStarter.startActivityUnchecked(ActivityStarter.java:1020)
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.am.ActivityStarter.startActivityLocked(ActivityStarter.java:535)
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.am.ActivityStarter.startActivityMayWait(ActivityStarter.java:819)
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.am.ActivityManagerService.startActivityAsUser(ActivityManagerService.java:4375)
01-02 08:52:28.642  1310  2251 I mazda   : at android.app.ActivityManagerNative.onTransact(ActivityManagerNative.java:189)
01-02 08:52:28.642  1310  2251 I mazda   : at com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:2784)
01-02 08:52:28.642  1310  2251 I mazda   : at android.os.Binder.execTransact(Binder.java:565)
01-02 08:52:28.715  3635  3635 I mazda   : onStop


而在Multi-window通过往上滑动进入Recent的过程是这样的，即先截屏 -&gt; onPause -&gt; onStop

01-02 08:54:40.157  1310  2242 I mazda   : java.lang.Throwable
01-02 08:54:40.157  1310  2242 I mazda   : 	at com.android.server.wm.WindowManagerService.screenshotApplicationsInner(WindowManagerService.java:6241)
01-02 08:54:40.157  1310  2242 I mazda   : 	at com.android.server.wm.WindowManagerService.screenshotApplications(WindowManagerService.java:6231)
01-02 08:54:40.157  1310  2242 I mazda   : 	at com.android.server.am.ActivityStack.screenshotActivitiesLocked(ActivityStack.java:1074)
01-02 08:54:40.157  1310  2242 I mazda   : 	at com.android.server.am.ActivityStack.setVisible(ActivityStack.java:1458)
01-02 08:54:40.157  1310  2242 I mazda   : 	at com.android.server.am.ActivityStack.makeInvisible(ActivityStack.java:1921)
01-02 08:54:40.157  1310  2242 I mazda   : 	at com.android.server.am.ActivityStack.ensureActivitiesVisibleLocked(ActivityStack.java:1803)
01-02 08:54:40.157  1310  2242 I mazda   : 	at com.android.server.am.ActivityStackSupervisor.positionTaskInStackLocked(ActivityStackSupervisor.java:2666)
01-02 08:54:40.157  1310  2242 I mazda   : 	at com.android.server.am.ActivityStackSupervisor.moveTasksToFullscreenStackLocked(ActivityStackSupervisor.java:2187)
01-02 08:54:40.157  1310  2242 I mazda   : 	at com.android.server.am.ActivityManagerService.moveTasksToFullscreenStack(ActivityManagerService.java:18753)
01-02 08:54:40.157  1310  2242 I mazda   : 	at android.app.ActivityManagerNative.onTransact(ActivityManagerNative.java:2888)
01-02 08:54:40.157  1310  2242 I mazda   : 	at com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:2784)
01-02 08:54:40.157  1310  2242 I mazda   : 	at android.os.Binder.execTransact(Binder.java:565)
01-02 08:54:40.170  3635  3635 I mazda   : onPause
01-02 08:54:40.228  3635  3635 I mazda   : onMultiWindowModeChanged
01-02 08:54:40.229  3635  3635 I mazda   : onStop



DividerView网上滑动
DividerView.commitSnapFlags(){
     mWindowManagerProxy.dismissDockedStack();
}



这个问题受到Android目前框架的显限制，无法修改。 Recents界面中的显示的Task是Activity的截屏。 正常情况下，一个Activity是在onPause的时候调用相关的API进行截屏作为这个Task最后的活动状态出现在Recents中， 堆栈的情况如下， 即onPause -&gt; 截屏 -&gt; onStop -&gt; 出现Recents界面
 
在Multi-window通过往上滑动进入Recent的过程是这样的，即先截屏 -&gt; onPause -&gt; onStop ，首先在截屏的时候会因为不符合
WindowManagerService.java中 的winAnim.getShown 而无法获取Activity截屏 
          </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ws&amp;project=n8996">ws</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mAppToken&amp;project=n8996">mAppToken</rich_text>
			<rich_text> != </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=n8996">null</rich_text>
			<rich_text> &amp;&amp; </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ws&amp;project=n8996">ws</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mAppToken&amp;project=n8996">mAppToken</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=token&amp;project=n8996">token</rich_text>
			<rich_text> == </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=appToken&amp;project=n8996">appToken</rich_text>
			<rich_text> &amp;&amp;
6362                        </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ws&amp;project=n8996">ws</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isDisplayedLw&amp;project=n8996">isDisplayedLw</rich_text>
			<rich_text>() &amp;&amp; </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=winAnim&amp;project=n8996">winAnim</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getShown&amp;project=n8996">getShown</rich_text>
			<rich_text>()) {
6363                    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=screenshotReady&amp;project=n8996">screenshotReady</rich_text>
			<rich_text> = </rich_text>
			<rich_text weight="heavy">true</rich_text>
			<rich_text>;
6364                } 6365 



</rich_text>
			<rich_text weight="heavy">4.3044243][[Pretest][Hot Swap][Split screen] The operate pop display incomplete when in Split-screen] </rich_text>
			<rich_text>

</rich_text>
			<rich_text justification="left"></rich_text>
			<rich_text>      

分屏状态下按power键，如果keygurad是swipe的状态，则 stackid 为1的堆栈变为全屏， 解锁后弹出的对话框属于全屏的堆栈，造成这个问题。
huzhengyu@51187-26-1:~$ adb shell am stack list</rich_text>
			<rich_text foreground="#ff0000">Stack id=1 bounds=[0,0][1080,1920]</rich_text>
			<rich_text> displayId=0 userId=0  taskId=289: com.android.settings/com.android.settings.Settings bounds=[0,939][1080,1920] userId=0 visible=true topActivity=ComponentInfo{com.android.settings/com.android.settings.Settings$SecuritySettingsActivity}
Stack id=0 bounds=[0,0][1080,1920] displayId=0 userId=0  taskId=276: com.android.launcher3/com.android.launcher3.Launcher bounds=[0,0][1080,1920] userId=0 visible=false topActivity=ComponentInfo{com.android.systemui/com.android.systemui.recents.RecentsActivity}  taskId=277: com.android.systemui/com.android.systemui.recents.RecentsActivity bounds=[0,939][1080,1920] userId=0 visible=false topActivity=ComponentInfo{com.android.systemui/com.android.systemui.recents.RecentsActivity}
Stack id=3 bounds=[0,0][1080,909] displayId=0 userId=0  taskId=285: com.android.dialer/com.android.dialer.DialtactsActivity bounds=[0,0][1080,909] userId=0 visible=false topActivity=ComponentInfo{com.android.dialer/com.android.dialer.DialtactsActivity}

分屏状态下按power键，如果keygurad是none的状态，则 stackid 为1的堆栈则是正常的半屏状态，解锁后 stackid=1为半屏huzhengyu@51187-26-1:~$ adb shell am stack list</rich_text>
			<rich_text foreground="#ff0000">Stack id=1 bounds=[0,939][1080,1920]</rich_text>
			<rich_text> displayId=0 userId=0  taskId=289: com.android.settings/com.android.settings.Settings bounds=[0,939][1080,1920] userId=0 visible=true topActivity=ComponentInfo{com.android.settings/com.android.settings.Settings$SecuritySettingsActivity}
Stack id=0 bounds=[0,939][1080,1920] displayId=0 userId=0  taskId=276: com.android.launcher3/com.android.launcher3.Launcher bounds=[0,0][1080,1920] userId=0 visible=false topActivity=ComponentInfo{com.android.systemui/com.android.systemui.recents.RecentsActivity}  taskId=277: com.android.systemui/com.android.systemui.recents.RecentsActivity bounds=[0,939][1080,1920] userId=0 visible=false topActivity=ComponentInfo{com.android.systemui/com.android.systemui.recents.RecentsActivity}
Stack id=3 bounds=[0,0][1080,909] displayId=0 userId=0  taskId=285: com.android.dialer/com.android.dialer.DialtactsActivity bounds=[0,0][1080,909] userId=0 visible=true topActivity=ComponentInfo{com.android.dialer/com.android.dialer.DialtactsActivity}

Google原生问题，在Nexus 6P 7.1.1上还是能够复现。




</rich_text>
			<rich_text weight="heavy">4.</rich_text>
			<rich_text foreground="#000000" weight="heavy">2989567</rich_text>
			<rich_text weight="heavy">-[GAPP][Android N][Contacts]The interface will flash when add to contacts switch split-window and single window</rich_text>
			<rich_text>
activity在切进切初multi-window的时候会闪。

通过configchange来catchmulti-window






==========
Multi-window 
nSnapMode 三种模式
2445    </rich_text>
			<rich_text foreground="#666666">&lt;!-- Controls the snap mode for the docked stack divider
2446             0 - 3 snap targets: </rich_text>
			<rich_text foreground="#666666" link="webs http://172.16.12.204:8080/source/s?path=left/">left</rich_text>
			<rich_text foreground="#666666">/</rich_text>
			<rich_text foreground="#666666" link="webs http://172.16.12.204:8080/source/s?path=left/top">top</rich_text>
			<rich_text foreground="#666666"> has 16:9 ratio, 1:1, and </rich_text>
			<rich_text foreground="#666666" link="webs http://172.16.12.204:8080/source/s?path=right/">right</rich_text>
			<rich_text foreground="#666666">/</rich_text>
			<rich_text foreground="#666666" link="webs http://172.16.12.204:8080/source/s?path=right/bottom">bottom</rich_text>
			<rich_text foreground="#666666"> has 16:9 ratio
2447             1 - 3 snap targets: fixed ratio, 1:1, (1 - fixed ratio)
2448             2 - 1 snap target: 1:1
2449    --&gt;</rich_text>
			<rich_text>
2450    &lt;</rich_text>
			<rich_text foreground="#a52a2a">integer</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;config_dockedStackDividerSnapMode&quot;&gt;0&lt;/</rich_text>
			<rich_text foreground="#a52a2a">integer</rich_text>
			<rich_text>&gt;

&lt;</rich_text>
			<rich_text foreground="#a52a2a">item</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">type=</rich_text>
			<rich_text>&quot;fraction&quot; </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;docked_stack_divider_fixed_ratio&quot;&gt;34.15%&lt;/</rich_text>
			<rich_text foreground="#a52a2a">item</rich_text>
			<rich_text>&gt;

mMinimalSizeResizableTask  220dp

这个问题的原因是这样的
创建一个Target的有个大小限制，就是最小需要220dp
在 dpi=480 的条件下 220dp的实际像素点为660px （ 480/160 * 220, 160是基准单位）
就是说一个至少大于660px的区域才能够成为multi-window的一个档位。
显然在这样的情况下(1920px - 72px (Statusbar)- 144px(NavagationBar)) / 3 (总共分三个档位)= 568 px &lt; 660px的
而当Displaysize变小， dpi会降低，如CN降一档会到408的DPI
408，此时所需要的像素尺寸为 408/160*220 = 561px
在这样情况下，Statusbar也会缩小到61px， Navigation Bar 缩小到122px
所以每个档位的尺寸为(1920-61-122)/3 = 579px &gt; 561px 所以能显示三个档位


5. </rich_text>
			<rich_text foreground="#000000">3526556</rich_text>
			<rich_text> 分屏模式下，Launcher菜单无法显示
id=available_items_pager 的ViewPager 是空的，





















</rich_text>
			<encoded_png char_offset="15118"></encoded_png>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="关注的Bug" prog_lang="custom-colors" readonly="False" tags="" unique_id="53">
			<rich_text>
1552105 VR 屏幕闪烁
1527438 手机放一块，自动启动vr
 
1442782  system fc caused by whatsapp

</rich_text>
			<rich_text weight="heavy">1005544 恢复出厂设置以后setup wizard 只显示英语，怀疑是多任务扫描apk的patch导致</rich_text>
			<rich_text>


1419266 mix hand问题

1653749 camera造成掉电
1644589 camera闪光灯一直开启

1464729 qq 切换输入法出现乱码

 1567357 充电慢
 
 1533399 Mix问题
 
 
</rich_text>
			<rich_text weight="heavy">1706882 黑屏状态下按Boom key唤醒系统经常失败</rich_text>
			<rich_text>
Root cause:
boom key点亮屏幕的动作是收到boom key按键以后，起一个400ms延时的timetask 做的。
当系统深度休眠以后， 延时的内容将不被执行的。
Solution：
仿照Power key的处理，在起延时以前申请一个weaklock，在延时的需要执行的内容执行完毕以后，释放weaklock

1653745 插上充电 重启
ava.lang.OutOfMemoryError: Could not allocate JNI Envat java.lang.Thread.nativeCreate(Native Method)at java.lang.Thread.start(Thread.java:1063)
at com.android.server.am.ActivityManagerService.</rich_text>
			<rich_text weight="heavy">jrdrecord</rich_text>
			<rich_text>(ActivityManagerService.java:1472)

1564451 插上电源，图标未显示充电， 广播已经发出，但似乎都没有接收

1714393 Diagnostics 数据库存储

1711507 ota无法及时收到， booster restricted 限制

1527830 微信注册发生crash weixin在第一次启动时会申请Storage/Media/   Dialer /  Location 三个权限但是没有申请Mms的权限，在注册时需要重新申请mms read  权限，但是weixin应该自己内部权限逻辑处理有问题，导致注册返回页面crash了，是weixin自身的一个问题，当mms权限赋予之后，就没有问题了 

1567215 铃声原先选择sd卡上的，fota到25后，变成没用铃声了
1650774 Chrome保存书签出现ANR

1653068 低内存提醒 &lt;50MB  </rich_text>
			<rich_text link="webs http://172.16.11.162:8081/#/c/266530/1/services/core/java/com/android/server/storage/DeviceStorageMonitorService.java">http://172.16.11.162:8081/#/c/266530/1/services/core/java/com/android/server/storage/DeviceStorageMonitorService.java</rich_text>
			<rich_text>

1863454  系统死机
1883485 sound recorder
1536366 music ANR

1928633 [三指长截屏]有些游戏应用不支持三指长截屏功能
2125046 VDF fingerprint功耗高


</rich_text>
			<rich_text foreground="#44546A">2239417</rich_text>
			<rich_text> storage提示存储满了
2217110 低电量卡顿

895879 SD卡隐藏，Android for work | MultiUser

1662410 应用锁

</rich_text>
			<rich_text foreground="#000000">2516075</rich_text>
			<rich_text> MTP 传输速度慢

</rich_text>
			<rich_text foreground="#000000">3474509</rich_text>
			<rich_text> 分屏时候Camera问题
</rich_text>
			<rich_text foreground="#000000">3524295</rich_text>
			<rich_text> Wallpaper on device doesnt match content in /oem/media files

3461722 Search box doesn't display in center of screen and can't input character
3616528 The devices happen force close when add user in settings

</rich_text>
			<rich_text foreground="#000000">3644764</rich_text>
			<rich_text> 切换到guest 重启


3685393 通知栏显示不全
</rich_text>
			<rich_text foreground="#000000">3616595</rich_text>
			<rich_text> 格式化超时失败

</rich_text>
			<rich_text foreground="#000000">3309816</rich_text>
			<rich_text> 拔出Sdcard的时候 SystemUI crash
</rich_text>
			<rich_text foreground="#000000">3615319</rich_text>
			<rich_text> MTP传输过程中拔出Sdcard，传输没有中断
3469285 CDD - Exclusive Core
3708013 蓝牙切换以后出现命名

BluetoothDevice.java 客户端
AdapterService.java Service端
BluetoothSettings
-&gt;onResume
-&gt;updateContent


</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="处理过的Bug" prog_lang="custom-colors" readonly="False" tags="" unique_id="46">
			<rich_text>1399835 Mix Monkey crash
1663123 stability onetouchbooster 空指针异常，已转移给GAPP
1714393 diagnose问题转给GAPP
</rich_text>
			<rich_text weight="heavy">1554124 settings 只显示english, 目前转给测试monitor</rich_text>
			<rich_text>
1158945 循环重启问题odex，push 高通，一直未能够解决，后来通过高通平台升级对虚拟机的优化close
1653749 powerdown, camera底层一直请求数据，并打印相关日志，造成功耗过高
</rich_text>
			<rich_text weight="heavy">1467549 switch guest时候发生reboot，目前测试在monitor</rich_text>
			<rich_text>
1216839 Android System has stopped when in a file manager , ChooserTargetActivity with whatsapp again
1719373 mail无法发出去

1690459 Mix Crash
1749883 Chrome ANR

1810947 google map : can not perform this action after onSaveInstanceState

1810956 swiftkey crash， 手机没电关机，shutdownthread 关掉了mountservice, swiftkey无法读取数据库的文件
1529481 wifi anr
1814895 powerdown  可能是Log打印太多
1821115 蓝牙
1808087 [Monkey] Device reboot during installing one apk

</rich_text>
			<rich_text link="webs http://alm.tclcom.com:7001/im/issues?selection=1858818">1858818</rich_text>
			<rich_text> GMS ANR service数据库操作


CN storage bug
1814544 
1839803
1841161


1863454 dump
1871708 手机突然重启，无LOG


1528018 GMS sqlite


1963155 格式化SD卡提示SD卡损坏
1976704 内存低于50时信息应用可以正常使用
1962878 [stability][store download][crash]java.lang.OutOfMemoryError: Could not allocate JNI Env
1991706 [stability][menu_navigation][crash]com.gameloft.android.HEP.GloftAEHP,NullPointerException

2044433 高于100MB，wifi数据流量没有自动打开
1004090 performance patch
956687 MTP usb switch
958525 HOME TASK相关问题
966686 输入法与窗口标志
968373 LED off when battery charging level is  more than 90% </rich_text>
			<rich_text weight="heavy">BatteryService</rich_text>
			<rich_text>
976101 usb默认设置
978371 指纹解锁
996860 预装应用库无法找到
</rich_text>
			<rich_text foreground="#000000">2902940</rich_text>
			<rich_text> soundrecord无法保存









</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="General-Bug" prog_lang="custom-colors" readonly="False" tags="" unique_id="21">
			<rich_text weight="heavy">1.关于开发者选项中CPU利用率进程数量显示过少的问题</rich_text>
			<rich_text> DR1193732
 此问题为Android M原生Bug, 由于SELinux的限制导致进程stat文件无法被读取
 
 下面是分析过程：
1）CPU利用率这个功能打开以后会启动一个service，即LoadAerageService
2） LoadAverageService.java中由int N = stats.countWorkingStats(); 决定显示进程的数量，
3）  再一个for循环中通过</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=CpuTracker&amp;project=m8976">CpuTracker</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Stats&amp;project=m8976">Stats</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=st&amp;project=m8976">st</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=stats&amp;project=m8976">stats</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getWorkingStats&amp;project=m8976">getWorkingStats</rich_text>
			<rich_text>(i); 来获取每个当前工作进程的信息
4） 上面两个函数都定义在ProcessCpuTracker.java中.   此类通过 </rich_text>
			<rich_text foreground="#9876aa">mWorkingProcs</rich_text>
			<rich_text>这个数组变量来存储当前工作的进程, 这个数组通过下面的函数添加元素 
 final void buildWorkingProcs() {
        if (!mWorkingProcsSorted) {
            mWorkingProcs.clear();
           </rich_text>
			<rich_text foreground="#ffff00000000"> final int N = mProcStats.size();</rich_text>
			<rich_text>
            for (int i=0; i&lt;N; i++) {
           </rich_text>
			<rich_text foreground="#ffff00000000">     Stats stats = mProcStats.get(i);
                if (stats.working) {
                    mWorkingProcs.add(stats);</rich_text>
			<rich_text>
                        ...
                        
                    }
                }
            }
            Collections.sort(mWorkingProcs, sLoadComparator);
            mWorkingProcsSorted = true;
        }
    }
由上述代码可知，通过获取所有mProcStats记录的是所有的进程，通过stats.working找到正在工作中的进程加入到</rich_text>
			<rich_text foreground="#9876aa">mWorkingProcs</rich_text>
			<rich_text>中
5） 那么记录所有进程的数组mProcStats是如何得到的呢？
他是通过ProcessCpuTracker.java下的函数collectStats（）遍历/proc目录下的pid对应的文件夹得到
6）在collectStats()函数中华
所以我觉得到这里代码应该都没有问题，关键是/proc下是否有所有的进程的文件夹
7）/proc/[进程ID]/stat 下面确实有对应的文件。通过对Android_Util_Process.cpp打印日志发现这些stat在open的时候发生了错误，推测应该是权限问题。
</rich_text>
			<rich_text foreground="#cc0000">01-13 01:06:10.959  5753  5753 W       ndroid.systemui: type=1400 audit(0.0:927582): avc: denied { search       } for name=&quot;9&quot; dev=&quot;proc&quot; ino=86841       scontext=u:r:platform_app:s0:c512,c768 tcontext=u:r:kernel:s0       tclass=dir permissive=0</rich_text>
			<rich_text>

8）确实是SELinux的限制导致了文件无法读取. SystemUI所在的进程只能读取platform_app这个domain的进程。
9)通过在/device/tct/sepolicy/platform_app.te 添加下面的规则，Bug fix
allow platform_app { domain -kernel } : dirsearch;
allow platform_app { domain -kernel } : file{ read open getattr };
#-kernel表示除了kernel之外的domain

===================================================================================================

</rich_text>
			<rich_text scale="h2" weight="heavy">2. Galley分享界面Message没有按顺序排在其他图标后面，而是单独起一排   pR988607</rich_text>
			<rich_text>

    一、分析结论：经过艰难痛苦的分析定位以后，发现是</rich_text>
			<rich_text foreground="#ff0000">Gallery2</rich_text>
			<rich_text>的代码有问题，    具体为/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/">gapp_rel3</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Gallery2/">Gallery2</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Gallery2/src/">src</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Gallery2/src/com/">com</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Gallery2/src/com/tct/">tct</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Gallery2/src/com/tct/gallery3d/">gallery3d</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Gallery2/src/com/tct/gallery3d/app/">app</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Gallery2/src/com/tct/gallery3d/app/ShareDefaultPage.java">ShareDefaultPage.java</rich_text>
			<rich_text> 中</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=initMoreShare&amp;project=gapp_rel3"> initMoreShare</rich_text>
			<rich_text>()函数中，Intent.createChooser中输入的 Intent有问题。
      
    二、具体分析：
    通过对Share相关的Framework部分中ChooseActivity与ResolveActivity分析发现，输入的Intent日    志如下
     target Intent { act=android.intent.action.SEND typ=image/*</rich_text>
			<rich_text foreground="#ff0000">cmp=com.android.mms/.ui.ComposeMessageActivity</rich_text>
			<rich_text>    (has extras) }
    多了一个ComposeMessageActivity，这不正是咱们Bug截图中多出来的Messaging吗？</rich_text>
			<rich_text foreground="#ff0000">
       </rich_text>
			<rich_text>
    第一张图中点击Share弹出的是正常的Share，
   </rich_text>
			<rich_text foreground="#9876aa">shareBtn</rich_text>
			<rich_text>.setOnClickListener(</rich_text>
			<rich_text foreground="#cc7832">new </rich_text>
			<rich_text>View.OnClickListener() {
    </rich_text>
			<rich_text foreground="#bbb529">@Override
    </rich_text>
			<rich_text foreground="#cc7832">public void </rich_text>
			<rich_text foreground="#ffc66d">onClick</rich_text>
			<rich_text>(View v) {
        Uri imageUri = Uri.parse(</rich_text>
			<rich_text foreground="#6a8759">&quot;content://media/external/images/media/52&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
        </rich_text>
			<rich_text>Intent intent = </rich_text>
			<rich_text foreground="#cc7832">new </rich_text>
			<rich_text>Intent(Intent.</rich_text>
			<rich_text foreground="#9876aa">ACTION_SEND</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
        </rich_text>
			<rich_text>intent.setType(</rich_text>
			<rich_text foreground="#6a8759">&quot;image/*&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
        </rich_text>
			<rich_text>intent.putExtra(Intent.</rich_text>
			<rich_text foreground="#9876aa">EXTRA_STREAM</rich_text>
			<rich_text foreground="#cc7832">, </rich_text>
			<rich_text>imageUri)</rich_text>
			<rich_text foreground="#cc7832">;
        </rich_text>
			<rich_text>startActivity(Intent.createChooser(intent</rich_text>
			<rich_text foreground="#cc7832">, </rich_text>
			<rich_text foreground="#6a8759">&quot;share&quot;</rich_text>
			<rich_text>))</rich_text>
			<rich_text foreground="#cc7832">;
    </rich_text>
			<rich_text>}
})</rich_text>
			<rich_text foreground="#cc7832">;</rich_text>
			<rich_text>    
    点击Bad View弹出的是显示有问题的页面(图3),按照Gallery2中的ShareDefaultPage方式编写
    </rich_text>
			<rich_text foreground="#ff0000">            </rich_text>
			<rich_text>    </rich_text>
			<rich_text foreground="#9876aa">badViewBtn</rich_text>
			<rich_text>.setOnClickListener(</rich_text>
			<rich_text foreground="#cc7832">new </rich_text>
			<rich_text>View.OnClickListener() {
    </rich_text>
			<rich_text foreground="#bbb529">@Override
    </rich_text>
			<rich_text foreground="#cc7832">public void </rich_text>
			<rich_text foreground="#ffc66d">onClick</rich_text>
			<rich_text>(View v) {
        Intent intent = </rich_text>
			<rich_text foreground="#cc7832">new </rich_text>
			<rich_text>Intent(Intent.</rich_text>
			<rich_text foreground="#9876aa">ACTION_SEND</rich_text>
			<rich_text foreground="#cc7832">, null</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
        </rich_text>
			<rich_text>intent.addCategory(Intent.</rich_text>
			<rich_text foreground="#9876aa">CATEGORY_DEFAULT</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
        </rich_text>
			<rich_text>intent.setType(</rich_text>
			<rich_text foreground="#6a8759">&quot;image/*&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
        </rich_text>
			<rich_text foreground="#9876aa">mResolveInfos </rich_text>
			<rich_text>= mPackageManager.queryIntentActivities(intent</rich_text>
			<rich_text foreground="#cc7832">,
                </rich_text>
			<rich_text>PackageManager.</rich_text>
			<rich_text foreground="#9876aa">COMPONENT_ENABLED_STATE_DEFAULT</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
        </rich_text>
			<rich_text foreground="#9876aa">mTargetIntents </rich_text>
			<rich_text>= </rich_text>
			<rich_text foreground="#cc7832">new </rich_text>
			<rich_text>ArrayList&lt;&gt;()</rich_text>
			<rich_text foreground="#cc7832">;
        </rich_text>
			<rich_text>Uri imageUri = Uri.parse(</rich_text>
			<rich_text foreground="#6a8759">&quot;content://media/external/images/media/52&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;

        for </rich_text>
			<rich_text>(ResolveInfo mInfo : </rich_text>
			<rich_text foreground="#9876aa">mResolveInfos</rich_text>
			<rich_text>) {
            Intent targetIntent = </rich_text>
			<rich_text foreground="#cc7832">new </rich_text>
			<rich_text>Intent()</rich_text>
			<rich_text foreground="#cc7832">;
            </rich_text>
			<rich_text>targetIntent.setType(</rich_text>
			<rich_text foreground="#6a8759">&quot;image/*&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
            </rich_text>
			<rich_text>targetIntent.setAction(Intent.</rich_text>
			<rich_text foreground="#9876aa">ACTION_SEND</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
            </rich_text>
			<rich_text>targetIntent.putExtra(Intent.</rich_text>
			<rich_text foreground="#9876aa">EXTRA_STREAM</rich_text>
			<rich_text foreground="#cc7832">, </rich_text>
			<rich_text>imageUri)</rich_text>
			<rich_text foreground="#cc7832">;
            if </rich_text>
			<rich_text>(mInfo.</rich_text>
			<rich_text foreground="#9876aa">activityInfo</rich_text>
			<rich_text>.</rich_text>
			<rich_text foreground="#9876aa">name</rich_text>
			<rich_text>.contains(</rich_text>
			<rich_text foreground="#6a8759">&quot;gallery3d&quot;</rich_text>
			<rich_text>))
                </rich_text>
			<rich_text foreground="#cc7832">continue;
            </rich_text>
			<rich_text>targetIntent.setComponent(</rich_text>
			<rich_text foreground="#cc7832">new </rich_text>
			<rich_text>ComponentName(
                    mInfo.</rich_text>
			<rich_text foreground="#9876aa">activityInfo</rich_text>
			<rich_text>.</rich_text>
			<rich_text foreground="#9876aa">packageName</rich_text>
			<rich_text foreground="#cc7832">, </rich_text>
			<rich_text>mInfo.</rich_text>
			<rich_text foreground="#9876aa">activityInfo</rich_text>
			<rich_text>.</rich_text>
			<rich_text foreground="#9876aa">name</rich_text>
			<rich_text>))</rich_text>
			<rich_text foreground="#cc7832">;
            </rich_text>
			<rich_text foreground="#9876aa">mTargetIntents</rich_text>
			<rich_text>.add(targetIntent)</rich_text>
			<rich_text foreground="#cc7832">;
        </rich_text>
			<rich_text>}</rich_text>
			<rich_text foreground="#cc7832">
</rich_text>
			<rich_text>
        Intent mChooserIntent = Intent.createChooser(</rich_text>
			<rich_text foreground="#9876aa">mTargetIntents</rich_text>
			<rich_text>.remove(</rich_text>
			<rich_text foreground="#6897bb">0</rich_text>
			<rich_text>)，</rich_text>
			<rich_text foreground="#6a8759">&quot;share&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
            </rich_text>
			<rich_text>mChooserIntent.putExtra(Intent.</rich_text>
			<rich_text foreground="#9876aa">EXTRA_INITIAL_INTENTS</rich_text>
			<rich_text foreground="#cc7832">,
                                </rich_text>
			<rich_text foreground="#9876aa">mTargetIntents</rich_text>
			<rich_text>.toArray(</rich_text>
			<rich_text foreground="#cc7832">new </rich_text>
			<rich_text>Parcelable[] {}))</rich_text>
			<rich_text foreground="#cc7832">;
        </rich_text>
			<rich_text>startActivity(mChooserIntent)</rich_text>
			<rich_text foreground="#cc7832">;
    </rich_text>
			<rich_text>}
})</rich_text>
			<rich_text foreground="#cc7832">;</rich_text>
			<rich_text>    
通过代码比较可以发现，咱们要弹出这个Share的页面其实仅仅需要这个Intent的Type,Action，ImageURI就可以了。而在    ShareDefaultPage确多了很多不必要又有问题的代码。比如说通过packageManager遍历IntentAcitvity，    这些其实在Framework对应的代码都会做。而代码中    Intent.createChooser(mTargetIntents.remove(0)，&quot;share&quot;);    这句话mTargetIntents.remove(0)这个Intent就是包含Messaging这个Intent，也就是这个Bug的罪魁祸首。</rich_text>
			<rich_text foreground="#ff0000">
       
</rich_text>
			<rich_text>============================================================================================================
</rich_text>
			<rich_text scale="h2" weight="heavy">3. Vrglass desk 预装应用快捷方式点击时候出现App isn't installed , 在菜单栏里面点击应用出现FC</rich_text>
			<rich_text>
此Bug并非应用， 而是Tcl perso需要配置



    </rich_text>
			<rich_text justification="left"></rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#ff0000">

</rich_text>
			<rich_text scale="h2" weight="heavy">4. Defect- 1546464 启动了 sim lock  然后关机， 开机的时候用手按住半边屏幕，直到开机完成，发现无法输入数字</rich_text>
			<rich_text>

经过测试，在sim lock界面无法输入数字的时候不会打印初adb shell getevent事件, 所以认为是驱动固件的问题，将有问题出现的4A23版本push成最新的固件以后，不再出现问题。 
相应的固件（ /system/etc/firmware/st_fts_wqhd.bin ）已经在2016/1/29号进行了更新，故4A24以后的版本都不会出现这个问题


</rich_text>
			<rich_text scale="h2" weight="heavy">5. wandoujia crash</rich_text>
			<rich_text>

出错的日志如下， 其中红色的三行应该是豌豆荚加入了反混淆的缘故，无法看到具体的函数调用，出错的原因 :</rich_text>
			<rich_text foreground="#3333FF">java.lang.NoSuchMethodError: No interface method isRadioOn()</rich_text>
			<rich_text>
但是我看到com/android/internal/telephony/ITelephony是定义了isRadioOn这个函数的，错误 发生在com.wandoujia.phoenix2.usbproxy进程内部，又把函数名进行了混淆，不太好分析root cause.

在百度上搜到HTC A9也有这样的问题， 是使用豌豆荚连接服务时停止工作，然后出现下面的Log.所以出现这个原因要不是Android原生问题，要么就是豌豆荚本身的问题。

02-29 09:23:19.979 12867 13034 E AndroidRuntime: FATAL EXCEPTION: IntentService[sms-service]
02-29 09:23:19.979 12867 13034 E AndroidRuntime: Process: com.wandoujia.phoenix2.usbproxy, PID: 12867
02-29 09:23:19.979 12867 13034 E AndroidRuntime: </rich_text>
			<rich_text foreground="#3333FF">java.lang.NoSuchMethodError: No interface method isRadioOn()</rich_text>
			<rich_text>Z in class Lcom/android/internal/telephony/ITelephony; or its super classes (declaration of 'com.android.internal.telephony.ITelephony' appears in /system/framework/framework.jar:classes2.dex)
02-29 09:23:19.979 12867 13034 E AndroidRuntime:     at o.ﭕ.ʽ(:515)
 02-29 09:23:19.979 12867 13034 E AndroidRuntime:     at o.רּ.ʽ(:135)
 02-29 09:23:19.979 12867 13034 E AndroidRuntime:     at o.רּ.･(:32)
02-29 09:23:19.979 12867 13034 E AndroidRuntime:     at com.wandoujia.pmp.services.SmsService.onHandleIntent(:71)
02-29 09:23:19.979 12867 13034 E AndroidRuntime:     at android.app.IntentService$ServiceHandler.handleMessage(IntentService.java:66)
02-29 09:23:19.979 12867 13034 E AndroidRuntime:     at android.os.Handler.dispatchMessage(Handler.java:102)
02-29 09:23:19.979 12867 13034 E AndroidRuntime:     at android.os.Looper.loop(Looper.java:148)
02-29 09:23:19.979 12867 13034 E AndroidRuntime:     at android.os.HandlerThread.run(HandlerThread.java:61)

isRadioOn在L系统上是没有参数的，在M上有参数，而豌豆荚没有能够即使更新，造成crash

</rich_text>
			<rich_text scale="h2" weight="heavy">6. Defect-1554124 设置菜单里面仅仅剩下english</rich_text>
			<rich_text>
 
 显示端在m8976/packages/apps/Settings/src/com/android/settings/LocalePicker.java 

数据载入在frameworks/base/core/java/com/android/internal/app/LocalPicker
在getAllAssetLocales 方法中通过Resources.getSystem().getAssets().getLocales() 
此语句通过JNI类android_util_AssetManager.cpp调用Native层代码AssetManager.cpp的getLocales代码

与Bug1005544 相似

语言的资源是在/vendor/overlay/framework-res-overlay.apk
同时需要一个idmap值来进行映射
data/resource-cache/vendor@overlay@framework-res-overlay.apk@idmap

无法显示其他语言可能是由于framework-res-overlay.apk无法正确的加载
这个资源是通过AssetManager.cpp在 addSystemOverlays 来加载的


AssetManager.cpp -&gt; getResouces -&gt; getResTable //对象第一次调用时，解析资源路径列表中所有资源包，再次调用会返回mResource -&gt; appendPathToResTable

AssetManager.cpp -&gt;addDefaultAssets -&gt; addAssetPath -&gt;appendPathToResTable


言的资源是在/vendor/overlay/framework-res-overlay.apk 同时需要一个idmap值来进行映射
data/resource-cache/vendor@overlay@framework-res-overlay.apk@idmap
查看了问题的手机这两个文件都是存在的,

此Bug可能存在两种情况，1) 手机启动时资源未正确加载   2) 手机启动的时候资源正常加载，在使用的过程中出现了丢失
出现问题的手机多在使用的过程中出现问题，但是谁也不能保证上一次查看语言菜单跟出现问题的时候查看语言菜单中间没有重启过，所以上面两种情况都有可能。我通过自己写的APP强行将系统语言切换程中文，也只是替换了部分的元素，效果跟刷了L5没有中文语言的版本进行强行切换一样，说明overlay资源确实没有被载入
 
出现第一种情况 ，很有可能是framework-res-overlay.apk未能加载进去， 可能是对应的函数是addSystemOverlays未被调用
出现第二种情况 ，这个情况就比较复杂，存在很多不确定的因素，因为framework-res-overlay.apk作为系统资源只会在手机启动的时候通过Zygote被加载，之后就一直存储在内存里面，而且加载之后的framework-res.apk与frameowork-res-overlay.apk应该是属于同一个资源，不存在overlay包单独消失的情况，所以感觉这种情况不太可能发生，更倾向于第一种情况




系统的资源包是在Zygote进程中装载进来的，并且在所有子进程中共享，子进程可以直接使用，对于其他应用资源包，他们的sharedZip对象只会通过mResouceTableAsset变量来保存resouce.arsc文件对象

复现的方式：
在setupwized界面连续重启五六此会重现

出现问题的原因：开机的时候执行addsystemoverlay的函数的时候 pathOverlaysList 也就是 /data/resource-cache/vendor/overlays.list 还未加载，fin读取失败，直接return，导致framework-res-overlay.apk资源没有被加载

861    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=FILE&amp;project=m8976">FILE</rich_text>
			<rich_text>* </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=fin&amp;project=m8976">fin</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=fopen&amp;project=m8976">fopen</rich_text>
			<rich_text>(pathOverlaysList, &quot;r&quot;);
862    </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (fin == </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=NULL&amp;project=m8976">NULL</rich_text>
			<rich_text>) {
863        </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text>;
864    }


Android系统中有些hide的代码并不会在SDK中公开，可以通过反射的方式去调用

Object objIActMag</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>objActMagNative</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>Class clzActMag=Class.forName(</rich_text>
			<rich_text foreground="#6a8759">&quot;android.app.IActivityManager&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>Class clzActMagNative=Class.forName(</rich_text>
			<rich_text foreground="#6a8759">&quot;android.app.ActivityManagerNative&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;

</rich_text>
			<rich_text>Method mtsActMagNative$getDefault=clzActMagNative.getDeclaredMethod(</rich_text>
			<rich_text foreground="#6a8759">&quot;getDefault&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;

</rich_text>
			<rich_text>objIActMag=mtsActMagNative$getDefault.invoke(clzActMagNative)</rich_text>
			<rich_text foreground="#cc7832">;

</rich_text>
			<rich_text>Method mtdIActMag$getConfiguration=clzActMag.getDeclaredMethod(</rich_text>
			<rich_text foreground="#6a8759">&quot;getConfiguration&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>Configuration config=(Configuration)mtdIActMag$getConfiguration.invoke(objIActMag)</rich_text>
			<rich_text foreground="#cc7832">;

</rich_text>
			<rich_text>config.locale=Locale.CHINA</rich_text>
			<rich_text foreground="#cc7832">;

</rich_text>
			<rich_text>Class[] clzParams={Configuration.</rich_text>
			<rich_text foreground="#cc7832">class</rich_text>
			<rich_text>}</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>Method mtdActMag$updateConfiguration=clzActMag.getDeclaredMethod(</rich_text>
			<rich_text foreground="#6a8759">&quot;updateConfiguration&quot;</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>clzParams)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>mtdActMag$updateConfiguration.invoke(objIActMag</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>config)</rich_text>
			<rich_text foreground="#cc7832">;

</rich_text>
			<rich_text>BackupManager.dataChanged(</rich_text>
			<rich_text foreground="#6a8759">&quot;com.android.providers.settings&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;</rich_text>
			<rich_text>
--------------------------

IActivityManageram=ActivityManagerNative.getDefault()</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>Configurationconfig=am.getConfiguration()</rich_text>
			<rich_text foreground="#cc7832">;

</rich_text>
			<rich_text>config.setLocale(locale)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>config.userSetLocale=</rich_text>
			<rich_text foreground="#cc7832">true;

</rich_text>
			<rich_text>am.updateConfiguration(config)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text foreground="#808080">//TriggerthedirtybitfortheSettingsProvider.
</rich_text>
			<rich_text>BackupManager.dataChanged(</rich_text>
			<rich_text foreground="#6a8759">&quot;com.android.providers.settings&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;</rich_text>
			<rich_text>



    看此Bug的Comment，你打印的分析的是addSystemOverlay没有调用，会不会是Log抓的太迟了，我这边测试了一下，这个加载的Log需要在开机动画出来的时候就要抓取，不然Zyg会被后面的Log覆盖。



   之前你处理过开机在setupwized界面只显示english的bug， 在新的版本上有复现了，测试找到了一个大概率复现的方式，基本上能通过在这个界面连续重启5～20此左右重现。
   所以我这边能在想要的地方加Log，相对好分析点(相应的BugId )

   我这边分析的情况是addSystemOverlays每次都会进去，但是异常情况下进入到这个函数以后，overlay.list这个文件还不存在或者数据还没写入，导致fin为Null而return，使得framework-res-overlay.apk未能够加载。这个可以在必要时sleep几十毫秒来Fix

861    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=FILE&amp;project=m8976">FILE</rich_text>
			<rich_text>* </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=fin&amp;project=m8976">fin</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=fopen&amp;project=m8976">fopen</rich_text>
			<rich_text>(pathOverlaysList, &quot;r&quot;);
862    </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (fin == </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=NULL&amp;project=m8976">NULL</rich_text>
			<rich_text>) {
863        </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text>;
864    }

   
异常的Log
01-01 03:55:18.055   578   578 E asset   : hzy *******overlaysListPath in : /data/resource-cache/overlays.list    ap.path: $s   nextEntryIdx:366924290488 
01-01 03:55:18.055   578   578 I asset   : hzy </rich_text>
			<rich_text weight="heavy">addSystemOverlays</rich_text>
			<rich_text> pathOverlaysList : /data/resource-cache/overlays.list 
</rich_text>
			<rich_text weight="heavy">01-01 03:55:18.055   578   578 I asset   : hzy fin is null</rich_text>
			<rich_text>
01-01 03:55:18.055   578   578 E asset   : hzy after addSystemOverlays
01-01 03:55:18.056   578   578 I asset   : hzy Installing resource asset 0x556e646050 in to table 0x556e645e50
01-01 03:55:18.056   578   578 I asset   : hzy Copying existing resources for /system/framework/framework-res.apk

正常的Log
01-01 01:25:31.998   598   598 E asset   : hzy *******overlaysListPath in : /data/resource-cache/overlays.list    ap.path: $s   nextEntryIdx:368332388792 
01-01 01:25:31.998   598   598 I asset   : hzy </rich_text>
			<rich_text weight="heavy">addSystemOverlays</rich_text>
			<rich_text> pathOverlaysList : /data/resource-cache/overlays.list 
</rich_text>
			<rich_text weight="heavy">01-01 01:25:31.998   598   598 I asset   : hzy fin != null</rich_text>
			<rich_text>
01-01 01:25:31.998   598   598 I asset   : hzy getZipFileLocked() in 0x55c2523a80
01-01 01:25:31.998   598   598 V asset   : +++ opening zip '/vendor/overlay/framework-res-overlay.apk'
01-01 01:25:31.999   598   598 V asset   : Opened uncompressed entry resources.arsc in zip /vendor/overlay/framework-res-overlay.apk mode 3: 0x55c2571720
01-01 01:25:31.999   598   598 V asset   : loading idmap /data/resource-cache/vendor@overlay@framework-res-overlay.apk@idmap


1020375 移除了优化的代码，原因是cts测试无法通过
android.jdwpsecurity.cts.JdwpSecurityHostTest-- testNonZygoteProgramIsNotDebuggablefailjava.lang.InterruptedException: sleep interrupted at java.lang.Thread.sleep(Native Method)

android.jdwpsecurity.cts.</rich_text>
			<rich_text weight="heavy">JdwpSecurityHostTest</rich_text>
			<rich_text>
-- testNonZygoteProgramIsNotDebuggable
fail



</rich_text>
			<rich_text weight="heavy">7. Defect-1713761 app权限在fota之后又消失了</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#44546A"> </rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#44546A">15418            for (int userId : UserManagerService.getInstance().getUserIds()) {</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#44546A">15419                if (!</rich_text>
			<rich_text>mSettings.areDefaultRuntimePermissionsGrantedLPr(userId)) </rich_text>
			<rich_text foreground="#44546A">{</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#44546A">15420                    grantPermissionsUserIds = ArrayUtils.appendInt(</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#44546A">15421                            grantPermissionsUserIds, userId);</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#44546A">15422                }</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#44546A">15423            }</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#44546A">15424        }</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#44546A">15425        sUserManager.systemReady();</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#44546A">15425        sUserManager.systemReady();</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#44546A">15426</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#44546A">15427        // If we upgraded grant all default permissions before kicking off.</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#44546A">15428        for (int userId : grantPermissionsUserIds) {</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#44546A">15429            mDefaultPermissionPolicy.grantDefaultPermissions(userId);</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#44546A">15430        }</rich_text>
			<rich_text>

/data/system/users/0/runtime-permissions.xml


</rich_text>
			<rich_text scale="h2" weight="heavy">8. Defect-1718429 GooglePlay白屏</rich_text>
			<rich_text>
网络问题，连上没有密码的WIFI，不登录，打开play store，出现blank界面
    
2016-03-01 03:19:20,657 : 03-01 03:19:20.726 D/WifiStateMachine(    1450):  ConnectedState !CMD_RSSI_POLL  rt=33491863/36641702 4 0    &quot;Auto-korea&quot; 20:3a:07:32:0e:2e rssi=-53 f=5805 sc=60 link=54    tx=158.8, 0.0, 0.0  rx=313.9 bcn=0 [on:0 tx:0 rx:0 period:3002] from    screen [on:0 period:779647382] gl rssi=-53 ag=0 hr ticks 0,0,0 ls-=0    [56,56,60,60,65] brc=0 lrc=0 offload-stopped
    2016-03-01 03:19:20,657 : 03-01 03:19:20.727 D/WifiStateMachine(    1450):  L2ConnectedState !CMD_RSSI_POLL  rt=33491864/36641703 4 0    &quot;Auto-korea&quot; 20:3a:07:32:0e:2e rssi=-53 f=5805 sc=60 link=54    tx=158.8, 0.0, 0.0  rx=313.9 bcn=0 [on:0 tx:0 rx:0 period:1] from    screen [on:0 period:779647383] gl rssi=-53 ag=0 hr ticks 0,0,0 ls-=0    [56,56,60,60,65] brc=0 lrc=0 offload-stopped



==========================

cmp=com.androidesk/com.adesk.picasso.view.screenlocker.SlLauncher2

Launcher反复切换的原因找到了，是因为这个patch http://172.16.11.162:8081/#/c/249709/

3768    final boolean moveTaskToBackLocked(int taskId) {
3769        final TaskRecord tr = taskForIdLocked(taskId);
3770        if (tr == null) {
3771            Slog.i(TAG, &quot;moveTaskToBack: bad taskId=&quot; + taskId);
3772            return false;
3773        }
3774
</rich_text>
			<rich_text foreground="#ff0000">3775        // Add by guangyu.xu for defect1236844 begin
 3776        if (tr.isHomeTask()) {
 3777            Slog.i(TAG, &quot;moveTaskToBack: this is home task, start home&quot;);
 3778            return mService.startHomeActivityLocked(mCurrentUser, &quot;moveTaskToBack&quot;);
 3779        }
 3780        // Add by guangyu.xu for defect1236844 end</rich_text>
			<rich_text>
3781        Slog.i(TAG, &quot;moveTaskToBack: &quot; + tr);
3782        mStackSupervisor.removeLockedTaskLocked(tr)

安卓壁纸在设置锁屏的过程中需要
1.设置为默认安卓壁纸Launcher（Launcher1）
2.选择解锁后的桌面idol4s launcher （Launcher2）

也就是说解锁以后本身就有一个默认壁纸的切换过程，但是由于Launcher1 -&gt; Launcher2 的时候进入上面红色部分的代码，又重新作为Launcher启动，造成Launcer2调用moveTaskToBackLocked，然后进入红色代码部分后又重新启动。Launcher1和Launcher2轮流从启动-&gt;试图到后台-&gt;启动 ， 造成不断循环

</rich_text>
			<rich_text scale="h2" weight="heavy">9.Defect-1876419 存储卡在使用的时候突然拔出，再插入需要格式化</rich_text>
			<rich_text>

framework中接收到的vold 传递上来的sd卡状态是VolumeInfo.STATE_UNMOUNTABLE,  然后StorageNotifaction中接收到sd卡状态的改变，发现是VolumeInfo.STATE_UNMOUNTABLE  这个状态所以发出sd卡损坏，需要格式化的状态
 
 /system/vold/VolumeBase.cpp
208</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=status_t&amp;project=m8996">status_t</rich_text>
			<rich_text> VolumeBase::</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=mount&amp;project=m8996">mount</rich_text>
			<rich_text>() {
209    </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> ((</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mState&amp;project=m8996">mState</rich_text>
			<rich_text> != </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=State&amp;project=m8996">State</rich_text>
			<rich_text>::</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=kUnmounted&amp;project=m8996">kUnmounted</rich_text>
			<rich_text>) &amp;&amp; (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mState&amp;project=m8996">mState</rich_text>
			<rich_text> != </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=State&amp;project=m8996">State</rich_text>
			<rich_text>::</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=kUnmountable&amp;project=m8996">kUnmountable</rich_text>
			<rich_text>)) {
210        </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=LOG&amp;project=m8996">LOG</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=WARNING&amp;project=m8996">WARNING</rich_text>
			<rich_text>) &lt;&lt; </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getId&amp;project=m8996">getId</rich_text>
			<rich_text>() &lt;&lt; &quot; mount requires state unmounted or unmountable&quot;;
211        </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text> -</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=EBUSY&amp;project=m8996">EBUSY</rich_text>
			<rich_text>;
212    }
213
214    setState(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=State&amp;project=m8996">State</rich_text>
			<rich_text>::</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=kChecking&amp;project=m8996">kChecking</rich_text>
			<rich_text>);
215    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=status_t&amp;project=m8996">status_t</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=res&amp;project=m8996">res</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=doMount&amp;project=m8996">doMount</rich_text>
			<rich_text>();
216    </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=res&amp;project=m8996">res</rich_text>
			<rich_text> == </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=OK&amp;project=m8996">OK</rich_text>
			<rich_text>) {
217        setState(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=State&amp;project=m8996">State</rich_text>
			<rich_text>::</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=kMounted&amp;project=m8996">kMounted</rich_text>
			<rich_text>);
218    } </rich_text>
			<rich_text weight="heavy">else</rich_text>
			<rich_text> {
219        setState(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=State&amp;project=m8996">State</rich_text>
			<rich_text>::</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=kUnmountable&amp;project=m8996">kUnmountable</rich_text>
			<rich_text>);
220    }
221
222    </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=res&amp;project=m8996">res</rich_text>
			<rich_text>;

/system/vold/PublicVolume.cpp
doMount()
doUnmount()

问题处在doUnmount的时候没有把正在使用的路径给kill.
status_t PublicVolume::doUnmount() {
 
    if (mFusePid &gt; 0) {
        kill(mFusePid, SIGTERM);
        TEMP_FAILURE_RETRY(waitpid(mFusePid, nullptr, 0));
        mFusePid = 0;
    }

    ForceUnmount(kAsecPath);

</rich_text>
			<rich_text weight="heavy">    KillProcessesUsingPath(getPath());</rich_text>
			<rich_text>
    
    ForceUnmount(mFuseDefault);
    ForceUnmount(mFuseRead);
    ForceUnmount(mFuseWrite);
    ForceUnmount(mRawPath);

    rmdir(mFuseDefault.c_str());
    rmdir(mFuseRead.c_str());
    rmdir(mFuseWrite.c_str());
    rmdir(mRawPath.c_str());

    mFuseDefault.clear();
    mFuseRead.clear();
    mFuseWrite.clear();
    mRawPath.clear();

    return OK;
}

=======================================================
</rich_text>
			<rich_text scale="h2" weight="heavy">10.Defect-1899293</rich_text>
			<rich_text> </rich_text>
			<rich_text scale="h2" weight="heavy">jrdlog</rich_text>
			<rich_text>

Java (JE),20160401141055357,unknown,system_server_crash,0000,
Process: unknown
Build: TCL/6070K/idol4s:6.0.1/MMB29M/vA29-0:user/release-keys

</rich_text>
			<rich_text weight="heavy">java.lang.RuntimeException: Unable to create service com.android.mms.transaction.TransactionService: java.lang.SecurityException</rich_text>
			<rich_text>: Unable to find app for caller android.app.ApplicationThreadProxy@4f70c15 (pid=13019) when registering receiver android.content.IIntentReceiver$Stub$Proxy@1cbb2a
	at android.app.ActivityThread.handleCreateService(ActivityThread.java:2929)
	at android.app.ActivityThread.access$1900(ActivityThread.java:158)
	at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1458)
	at android.os.Handler.dispatchMessage(Handler.java:102)
	at android.os.Looper.loop(Looper.java:148)
	at android.app.ActivityThread.main(ActivityThread.java:5515)
	at java.lang.reflect.Method.invoke(Native Method)
	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:764)
	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:654)
Caused by: java.lang.SecurityException: Unable to find app for caller android.app.ApplicationThreadProxy@4f70c15 (pid=13019) when registering receiver android.content.IIntentReceiver$Stub$Proxy@1cbb2a
	at android.os.Parcel.readException(Parcel.java:1620)
	at android.os.Parcel.readException(Parcel.java:1573)
	at android.app.ActivityManagerProxy.registerReceiver(ActivityManagerNative.java:3040)
	at android.app.ContextImpl.registerReceiverInternal(ContextImpl.java:1184)
	at android.app.ContextImpl.registerReceiver(ContextImpl.java:1152)
	at android.app.ContextImpl.registerReceiver(ContextImpl.java:1146)
	at android.content.ContextWrapper.registerReceiver(ContextWrapper.java:558)
	at com.android.mms.transaction.TransactionService.onCreate(TransactionService.java:396)
	at android.app.ActivityThread.handleCreateService(ActivityThread.java:2919)
	... 8 more


</rich_text>
			<rich_text weight="heavy">代码是在注册receiver的时候挂掉</rich_text>
			<rich_text>
379    public void onCreate() {
380        if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
381            TctMmsLog.v(TAG, &quot;Creating TransactionService&quot;);
382        }
383        sInstance = this;
384        // Start up the thread running the service. Note that we create a
385        // separate thread because the service normally runs in the process's
386        // main thread, which we don't want to block.
387        HandlerThread thread = new HandlerThread(&quot;TransactionService&quot;);
388        thread.start();
389
390        mServiceLooper = thread.getLooper();
391        mServiceHandler = new ServiceHandler(mServiceLooper);
392
393        mReceiver = new ConnectivityBroadcastReceiver();
394        IntentFilter intentFilter = new IntentFilter();
395        intentFilter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
</rich_text>
			<rich_text weight="heavy">396        registerReceiver(mReceiver, intentFilter);</rich_text>
			<rich_text>
397    }


</rich_text>
			<rich_text weight="heavy"> 进入ActivityManagerService流程，异常出现在ActivityManagerService.java中16785行，由于callApp==null 抛出</rich_text>
			<rich_text>
16774    public Intent registerReceiver(IApplicationThread caller, String callerPackage,
16775            IIntentReceiver receiver, IntentFilter filter, String permission, int userId) {
16776        enforceNotIsolatedCaller(&quot;registerReceiver&quot;);
16777        ArrayList&lt;Intent&gt; stickyIntents = null;
16778        ProcessRecord callerApp = null;
16779        int callingUid;
16780        int callingPid;
16781        synchronized(this) {
16782            if (caller != null) {
16783                callerApp = </rich_text>
			<rich_text weight="heavy">getRecordForAppLocked</rich_text>
			<rich_text>(caller);
16784                if (</rich_text>
			<rich_text weight="heavy">callerApp == nul</rich_text>
			<rich_text>l) {
16785                    throw new SecurityException(
16786                            &quot;Unable to find app for caller &quot; + caller
16787                            + &quot; (pid=&quot; + Binder.getCallingPid()
16788                            + &quot;) when registering receiver &quot; + receiver);
16789                }
16790                if (callerApp.info.uid != Process.SYSTEM_UID &amp;&amp;
16791                        !callerApp.pkgList.containsKey(callerPackage) &amp;&amp;
16792                        !&quot;android&quot;.equals(callerPackage)) {
16793                    throw new SecurityException(&quot;Given caller package &quot; + callerPackage
16794                            + &quot; is not running in process &quot; + callerApp);
16795                }
 
 
查看callApp通过上面的</rich_text>
			<rich_text weight="heavy">getRecordForAppLocked</rich_text>
			<rich_text>赋值
ActivityManagerService-&gt;RegisterReceiver

16774    public Intent registerReceiver(IApplicationThread caller, String callerPackage,
16775            IIntentReceiver receiver, IntentFilter filter, String permission, int userId) {
16776        enforceNotIsolatedCaller(&quot;registerReceiver&quot;);
16777        ArrayList&lt;Intent&gt; stickyIntents = null;
16778        ProcessRecord callerApp = null;
16779        int callingUid;
16780        int callingPid;
16781        synchronized(this) {
</rich_text>
			<rich_text weight="heavy">16782            if (caller != null) {
16783                callerApp = getRecordForAppLocked(caller);
16784                if (callerApp == null) {
16785                    throw new SecurityException(
16786                            &quot;Unable to find app for caller &quot; + caller
16787                            + &quot; (pid=&quot; + Binder.getCallingPid()
16788                            + &quot;) when registering receiver &quot; + receiver);
16788                            + &quot;) when registering receiver &quot; + receiver);
16789                }</rich_text>
			<rich_text>
16790                if (callerApp.info.uid != Process.SYSTEM_UID &amp;&amp;
16791                        !callerApp.pkgList.containsKey(callerPackage) &amp;&amp;
16792                        !&quot;android&quot;.equals(callerPackage)) {
16793                    throw new SecurityException(&quot;Given caller package &quot; + callerPackage
16794                            + &quot; is not running in process &quot; + callerApp);
16795                }

callerApp为null 造成了throw Exception

4790    final ProcessRecord </rich_text>
			<rich_text weight="heavy">getRecordForAppLocked</rich_text>
			<rich_text>(
4791            IApplicationThread thread) {
4792        if (thread == null) {
4793            return null;
4794        }
4795
4796        int appIndex = </rich_text>
			<rich_text weight="heavy">getLRURecordIndexForAppLocked</rich_text>
			<rich_text>(thread);
4797        return appIndex &gt;= 0 ? mLruProcesses.get(appIndex) : null;
4798    }



4778    private final int </rich_text>
			<rich_text weight="heavy">getLRURecordIndexForAppLocked</rich_text>
			<rich_text>(IApplicationThread thread) {
4779        IBinder threadBinder = thread.asBinder();
4780        // Find the application record.
4781        for (int i=mLruProcesses.size()-1; i&gt;=0; i--) {
4782            ProcessRecord rec = mLruProcesses.get(i);
4783            if (rec.thread != null &amp;&amp; rec.thread.asBinder() == threadBinder) {
4784                return i;
4785            }
4786        }
4787        return -1;
4788    }

异常出现在ActivityManagerService.java中16785行，由于callApp==null 抛出。也就是说这个Service启动到一半的时候，发现启动它的进程异常挂掉了
也就是说这是由于事主进程突然挂掉所产生的一个连锁反映，代码没有什么问题。至于事主进程为什么会突然挂掉，LOG也没有，这个就不得而知了，也许是由于低内存被系统杀掉了。



</rich_text>
			<rich_text scale="h2" weight="heavy">11. Bug-1872397</rich_text>
			<rich_text> </rich_text>
			<rich_text scale="h2" weight="heavy">从音乐添加铃声然后重启手机再进入发现铃声名称变成一串数字</rich_text>
			<rich_text>

我查验了最新的几个版本，都没有这个问题，从V1D1R这个版本是有问题的，V1D1S开始都是没问题了，暂时没有找到是哪个patch的提交修复了这个问题
 
URI只要还在数据库中，重启应该都是不会变化的 ，下面是有问题的版本打出的Log，显示重启以后URI 并没有发生变化，只是没有能够将URI进行转化显示在tab中。

重启前： 

08-01 09:06:45.528  2747  2747 I zhengyu : onSaveRingtone:  </rich_text>
			<rich_text weight="heavy"> content://media/external/audio/media/230</rich_text>
			<rich_text>
08-01 09:06:45.545  2747  3500 I zhengyu : mPhoneRingtonePreference
08-01 09:06:45.545  2747  3500 I zhengyu : updateRingtoneName type:1 subId-1
08-01 09:06:45.546  2747  3500 I zhengyu : updateRingtoneName  uri:</rich_text>
			<rich_text weight="heavy"> content://media/external/audio/media/230</rich_text>
			<rich_text>
 
重启后
08-01 09:07:27.712  2701  3517 I zhengyu : mPhoneRingtonePreference
08-01 09:07:27.713  2701  3517 I zhengyu : updateRingtoneName type:1 subId-1
08-01 09:07:27.714  2701  3517 I zhengyu : updateRingtoneName  uri: </rich_text>
			<rich_text weight="heavy">content://media/external/audio/media/230</rich_text>
			<rich_text>

 

</rich_text>
			<rich_text scale="h2" weight="heavy">12. Defect-2002639-MTP重启的时候只能显示一个盘符</rich_text>
			<rich_text>

【root cause】 
sd卡在本身会在开机后慢个10s左右才会进行挂载，而MTP连接目前只会在刚连接到电脑端的时候通过</rich_text>
			<rich_text foreground="#660e7a">mStorageManager</rich_text>
			<rich_text>.getVolumeList() 获取挂载的存储设备，此时sd卡还没来得及挂在上去，导致无法在电脑端显示sd卡的盘符
【solution】
通过监听sd卡挂在事件，等sd卡挂在完成的时候，添加
【attention】
修改以后的状态是这样的：
1.开机连接电脑的话，sd卡盘符一开始仍旧没有，过了几秒以后才会出现
2.sd卡盘符刚开始出现点进去发现是空的，过了几秒以后才会出现里面的文件内容
这是一个正常的挂载过程，无法再进行改进


另外这个问题还涉及到一个重复挂在盘的问题，需要在后面的map中校验，如果发现这个盘符已经进入map中了，及时return


</rich_text>
			<rich_text scale="h2" weight="heavy">13.Defect- 2044433: [存储]删除数据手机存储大于100M以上，数据连接没有自动打开</rich_text>
			<rich_text>
 【问题描述】
正常的状态：手机存储少于100MB的时候，系统会记录Wifi和数据连 接的开闭状态，然后强制关闭；当存储恢复到大于100MB的时候，将Wifi和数据连接恢复之前的状态。
但是CN现在的状态是：少于100MB的时候Wifi和数据连接会关闭，但当恢复到大于100MB的时候，之前打开的Wifi或者数据连接仍旧是关闭状态。

【结论】
双应用的功能造成了这个问题，关闭双应用功能以后无此问题。           
</rich_text>
			<rich_text weight="heavy">双应用这个功能可能会使得许多应用广播会重复接收多次，可能需要双应用那边去改进</rich_text>
			<rich_text>
         
 【分析过程】
1.通过Log发现, 当存储高于100MB的时候广播启动数据连接广播是正常发送的 
 05-04 14:06:55.636  1521  1521 I           DeviceStorageMonitorService:  sendDataEnabledNotification      
2. 但是处于Setting端接收广播的Receiver却收到了两次，此Receiver在Settings中静态注册，双应用的功能可能使得系统中其实存在两个Setting的实例，导致段时间内一个广播重复接收了两次
第一次接收到广播后，代码按照Wifi和数据连接之前的状态会正常开启开关，但是还没来得及更新状态的时候又收到了第二次，此时误把还没来得及更新的全部关闭的状态当作了之前的状态，导致最后Wifi和数据连接全部关闭。
Log如下
05-13 18:14:55.515  1434  1479 I ActivityManager: Start proc 6935:com.android.settings/1000 for broadcast com.android.settings/.LowMemoryReceiver
05-13 18:14:55.580  6935  6935 I LowMemoryReceiver: action=storageforcemode.enabled.dataconnection  </rich_text>
			<rich_text weight="heavy">//第一次收到</rich_text>
			<rich_text>
05-13 18:14:55.591  6935  6935 I LowMemoryReceiver: isMobileDataEnable=</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">true</rich_text>
			<rich_text> isWifiEnable=false   </rich_text>
			<rich_text weight="heavy">//之前的状态</rich_text>
			<rich_text>
05-13 18:14:55.618  3525  3525 I LowMemoryReceiver: action=storageforcemode.enabled.dataconnection  </rich_text>
			<rich_text weight="heavy">//第二次收到</rich_text>
			<rich_text>
05-13 18:14:55.618  3525  3525 I LowMemoryReceiver: isMobileDataEnable=</rich_text>
			<rich_text weight="heavy">false</rich_text>
			<rich_text> isWifiEnable=false  </rich_text>
			<rich_text weight="heavy">//</rich_text>
			<rich_text>


</rich_text>
			<rich_text scale="h2" weight="heavy">14.1963155 [Storage]格式化64G SD 提示SD损坏</rich_text>
			<rich_text>
PublicVolume.cpp

    if (fsType == &quot;auto&quot;) {
        if (nr_sec &lt; 67108864UL/* 67108864B * 512 = 32GB */) {
            ret = vfat::Format(mDevPath, 0);
        } else { /* &gt;= 32GB */
            ret = exfat::Format(mDevPath);
        }
    } else if (fsType == &quot;exfat&quot;) {



</rich_text>
			<rich_text scale="h2" weight="heavy">15.Defect-1962473 [Storage]64GSD文件不能完全读取出来</rich_text>
			<rich_text>
 查看Log对应时间节点，我认为测试在SD卡满载并且正在使用SD卡中资源的内容 的时候进行了插播SD卡的操作，而后查看MTP以及filemanager，发现一个加载慢，一个资源未显示，而此时MediaProvider应该正在 处于重新启动然后扫描SD卡的阶段，应该属于正常的现象。
故认为 Not bug , 建议close
 
</rich_text>
			<rich_text foreground="#ff0000" weight="heavy"> //sd卡拔出</rich_text>
			<rich_text>
04-18 14:12:50.216 4452 4452 D MtpService: onStorageStateChanged /storage/sdcard1 mounted -&gt; ejecting
04-18 14:12:50.217 4452 4452 D MtpService: Removing MTP storage ba790001 at /storage/sdcard1

 
</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">//sd卡拔出之前正在使用Yang这个文件，导致android.process.media挂掉</rich_text>
			<rich_text>
04-18 14:12:50.875 433 438 E ProcessKiller: Process android.process.media (4452) has open file /storage/sdcard1/Yang
04-18 14:12:50.875 433 438 W ProcessKiller: Sending Interrupt to process 4452
04-18 14:12:50.941 685 685 I Zygote : Process 4452 exited due to signal (2)
04-18 14:12:50.945 1477 2322 I ActivityManager: Process android.process.media (pid 4452) has died
04-18 14:12:50.945 1477 2322 I am_proc_died: [0,4452,android.process.media]
 
</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">//MediaProvider重新启动，扫描SD卡</rich_text>
			<rich_text>
04-18  14:12:50.946 1477 2322 W ActivityManager: Scheduling restart of crashed  service com.android.providers.media/.MediaScannerService in 911316ms
04-18  14:12:50.947 1477 2322 I ActivityManager: Killing  3607:com.jrdcom.filemanager/u0a164 (adj 0): depends on provider  com.android.providers.media/.MediaProvider in dying proc  android.process.media
04-18 14:12:51.097 1477 2400 W ActivityManager:  Force removing ActivityRecord{6782550 u0  com.jrdcom.filemanager/.activity.FileBrowserActivity t189}: app died, no  saved state
04-18 14:12:51.097 1477 2400 I am_finish_activity:  [0,108537168,189,com.jrdcom.filemanager/.activity.FileBrowserActivity,proc  died without state saved]
</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">//MediaProvider清除属于SD卡资源在数据库中的缓存</rich_text>
			<rich_text>
04-18 14:12:54.185 5606 5621 D MediaProvider: object removed 30060
04-18 14:12:54.186 5606 5621 D MediaProvider: object removed 30061
..... .....
04-18 14:12:54.187 5606 5621 D MediaProvider: object removed 30068
04-18 14:12:54.187 5606 5621 D MediaProvider: object removed 30069
 
 </rich_text>
			<rich_text foreground="#ff0000" weight="heavy">//sd卡重新挂载</rich_text>
			<rich_text>
04-18 14:12:55.634  5606  5606 D MtpService: onStorageStateChanged /dev/null unmounted -&gt; checking
04-18 14:12:55.634  5606  5606 D MtpService: onStorageStateChanged /dev/null unmounted -&gt; checking


</rich_text>
			<rich_text scale="h2" weight="heavy">16. Defect-2199331 setupwizard wifi addnewwifi显示异常</rich_text>
			<rich_text>
WifiSettingsForSetupWizard.java -&gt;mAddOtherNetworkItem
      WifiSettings.java -&gt; onAddNetworkPressed() -&gt; showDialog() -&gt;onCreateDialog() WIFI_DIALOG_ID
          WifiDialog -&gt; R.layout.wifi_dialog  -&gt; wifi_advanced_togglebox-&gt; new WifiConfigController
          
         	  &lt;RelativeLayout 
                    android:layout_width=&quot;match_parent&quot;
                    android:layout_height=&quot;wrap_content&quot;
                    android:orientation=&quot;horizontal&quot;&gt;
                &lt;Spinner android:id=&quot;@+id/ip_settings&quot;
                        android:layout_width=&quot;wrap_content&quot;
                        android:layout_height=&quot;wrap_content&quot;
                        android:layout_alignParentLeft=&quot;true&quot;
                        style=&quot;@style/wifi_item_content&quot;
                        android:prompt=&quot;@string/wifi_ip_settings&quot;
                        android:entries=&quot;@array/wifi_ip_settings&quot; /&gt;
				&lt;ImageView 
				   android:id=&quot;@+id/ip_settings_imageview&quot;
				   android:layout_width=&quot;wrap_content&quot;
				   android:layout_height=&quot;wrap_content&quot;
				   android:layout_alignParentRight=&quot;true&quot;	
				   android:layout_marginRight=&quot;10dip&quot;  
				   android:src=&quot;@drawable/ic_expand&quot;/&gt;
				&lt;/RelativeLayout&gt;




</rich_text>
			<rich_text scale="h2" weight="heavy">17. Defect-2459736  手机USB连接电脑，无法显示照片  截图等</rich_text>
			<rich_text>

MediaProvider数据库导出来以后发现
_id            data                                                   parent          data_added
789          /storage/emulated/0/DCIM/Camera          9              1467115217       
16872       /storage/emulated/0/DCIM/                     0              1464931342 (北京时间: 2016/6/3 13:22:22)
 
DCIM更新了，其对应的子目录没有更新，parent值仍旧是原来的9， 造成MTP连接无法显示, 出问题的时间点在2016/6/3 13:22:22 左右
查看2016/6/3 13：19分的时候出现了系统启动，MediaScanner重新扫描，怀疑是MediaScanner的问题

研究了一下，发现只要将MediaProvider数据库中/storage/emulated/0/DCIM 删除， 就能够复现这个问题。而</rich_text>
			<rich_text foreground="#ff0000">任何应用</rich_text>
			<rich_text> 只要赋予了android.permission.WRITE_EXTERNAL_STORAGE ，就可以执行这样的操作，造成MTP连接的时候PC端无法查看文件夹下内容，在手机端确存在。
发现导出的数据库中与DCIM同级的目录在统一时间都被删除然后又创建（Music, Alarms, Movies...）， 怀疑是有应用在清理的时候进行了对数据库中的内容进行了误删




</rich_text>
			<rich_text scale="h2" weight="heavy">18. Defect- 2165591 [OTG][图库]使用OTG连接数码相机，再次查看照片显示“未连接MTP设备”</rich_text>
			<rich_text>

08-01 12:52:50.023  4083  4083 E MtpDevice: </rich_text>
			<rich_text foreground="#ff0000">usb_device_claim_interface</rich_text>
			<rich_text> failed errno: 16
08-01 12:31:40.299  4410  4410 D UsbDeviceConnectionJNI: close 
返回的errno=16 应该表示的是在尝试打开USB设备时进行usb_device_claim_interface声明时候发现设备是处于忙碌的状态，导致返回错误，然后关闭了连接。
Root Cause]
MtpDevice 通道打开后未及时关闭，下次调用时设备繁忙
[solution]
应用退出时及时关闭MtpDevice通道

    if (mtpDevice != null) {
            for (UsbDevice usbDevice : mUsbManager.getDeviceList().values()) {
                String deviceName = usbDevice.getDeviceName();
                if(null != deviceName) {
                   mDevices.remove(deviceName);
                   mRequestPermissionDevices.remove(deviceName);
                   mIgnoredDevices.remove(deviceName);
                }
            }

            mtpDevice.close();
    }





</rich_text>
			<rich_text scale="h2" weight="heavy">19. </rich_text>
			<rich_text foreground="#000000" scale="h2" weight="heavy">3534662</rich_text>
			<rich_text scale="h2" weight="heavy">- [Mercury] Device reset while attempting to turn work mode on</rich_text>
			<rich_text>

下面两个线程发生死锁

&quot;ActivityManager&quot; prio=5 tid=10 Blocked
  | group=&quot;main&quot; sCount=1 dsCount=0 obj=0x12c4e380 self=0x7f6fbb7000
  | sysTid=1896 nice=0 cgrp=default sched=0/0 handle=0x7f6560d070
  | state=S schedstat=( 0 0 0 ) utm=2400 stm=4348 core=1 HZ=100
  | stack=0x7f6550b000-0x7f6550d000 stackSize=1036KB
  | held mutexes=
  at com.android.server.am.ActivityManagerService.registerReceiver(ActivityManagerService.java:17641)
  - waiting to lock &lt;0x07aa9763&gt; (a com.android.server.am.ActivityManagerService) held by thread 97
  at android.app.ContextImpl.registerReceiverInternal(ContextImpl.java:1342)
  at android.app.ContextImpl.registerReceiver(ContextImpl.java:1310)
  at android.app.ContextImpl.registerReceiver(ContextImpl.java:1304)
  at com.android.providers.settings.BlackberrySettingsProvider.&lt;init&gt;(BlackberrySettingsProvider.java:68)
  at com.android.providers.settings.SettingsProvider$SettingsRegistry$UpgradeController.&lt;init&gt;(SettingsProvider.java:2105)
  at com.android.providers.settings.SettingsProvider$SettingsRegistry.ensureSettingsForUserLocked(SettingsProvider.java:1686)
  at com.android.providers.settings.SettingsProvider$SettingsRegistry.peekSettingsStateLocked(SettingsProvider.java:1805)
  at com.android.providers.settings.SettingsProvider$SettingsRegistry.getSettingLocked(SettingsProvider.java:1768)
  at com.android.providers.settings.SettingsProvider.getSecureSetting(SettingsProvider.java:892)
  - locked &lt;0x0a8bbc19&gt; (a java.lang.Object)
  at com.android.providers.settings.SettingsProvider.call(SettingsProvider.java:276)
  at android.content.ContentProvider$Transport.call(ContentProvider.java:400)
  at android.provider.Settings$NameValueCache.getStringForUser(Settings.java:1625)
  at android.provider.Settings$Secure.getStringForUser(Settings.java:4457)
  at com.android.server.vr.EnabledComponentsObserver.loadComponentNamesFromSetting(EnabledComponentsObserver.java:277)
  at com.android.server.vr.EnabledComponentsObserver.rebuildAll(EnabledComponentsObserver.java:178)
  - locked &lt;0x0524e4de&gt; (a java.lang.Object)
  at com.android.server.vr.EnabledComponentsObserver.onUsersChanged(EnabledComponentsObserver.java:164)
  at com.android.server.vr.VrManagerService.onStartUser(VrManagerService.java:530)
  - locked &lt;0x0524e4de&gt; (a java.lang.Object)
  at com.android.server.SystemServiceManager.startUser(SystemServiceManager.java:160)
  at com.android.server.am.ActivityManagerService$MainHandler.handleMessage(ActivityManagerService.java:2066)
  at android.os.Handler.dispatchMessage(Handler.java:102)
  at android.os.Looper.loop(Looper.java:154)
  at android.os.HandlerThread.run(HandlerThread.java:61)
  at com.android.server.ServiceThread.run(ServiceThread.java:46)


&quot;Binder:1793_12&quot; prio=5 tid=97 Blocked
  | group=&quot;main&quot; sCount=1 dsCount=0 obj=0x12eee310 self=0x7f5afb4a00
  | sysTid=3503 nice=-2 cgrp=default sched=0/0 handle=0x7f4fca3c00
  | state=S schedstat=( 0 0 0 ) utm=2265 stm=1326 core=3 HZ=100
  | stack=0x7f4fba9000-0x7f4fbab000 stackSize=1007KB
  | held mutexes=
  at com.android.providers.settings.SettingsProvider.getSecureSetting(SettingsProvider.java:891)
  - waiting to lock &lt;0x0a8bbc19&gt; (a java.lang.Object) held by thread 10
  at com.android.providers.settings.SettingsProvider.call(SettingsProvider.java:276)
  at android.content.ContentProvider$Transport.call(ContentProvider.java:400)
  at android.provider.Settings$NameValueCache.getStringForUser(Settings.java:1625)
  at android.provider.Settings$Secure.getStringForUser(Settings.java:4457)
  at android.provider.Settings$Secure.getIntForUser(Settings.java:4527)
  at com.android.server.am.TaskRecord.setIntent(TaskRecord.java:458)
  at com.android.server.am.TaskRecord.&lt;init&gt;(TaskRecord.java:289)
  at com.android.server.am.ActivityStack.createTaskRecord(ActivityStack.java:5181)
  at com.android.server.am.ActivityStarter.setTaskFromReuseOrCreateNewTask(ActivityStarter.java:1628)
  at com.android.server.am.ActivityStarter.startActivityUnchecked(ActivityStarter.java:1091)
  at com.android.server.am.ActivityStarter.startActivityLocked(ActivityStarter.java:535)
  at com.android.server.am.ActivityStarter.startActivityMayWait(ActivityStarter.java:819)
  - locked &lt;0x07aa9763&gt; (a com.android.server.am.ActivityManagerService)
  at com.android.server.am.ActivityManagerService.startActivityInPackage(ActivityManagerService.java:4866)
  at com.android.server.am.PendingIntentRecord.sendInner(PendingIntentRecord.java:301)
  - locked &lt;0x07aa9763&gt; (a com.android.server.am.ActivityManagerService)
  at com.android.server.am.ActivityManagerService.startActivityIntentSender(ActivityManagerService.java:4628)
  at android.app.ActivityManagerNative.onTransact(ActivityManagerNative.java:287)
  at com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:2853)
  at android.os.Binder.execTransact(Binder.java:565)



将产生死锁的代码放到handler执行

</rich_text>
			<rich_text link="webs http://172.16.11.162:8081/#/c/337730/">http://172.16.11.162:8081/#/c/337730/</rich_text>
			<rich_text>



</rich_text>
			<rich_text scale="h2" weight="heavy">20. </rich_text>
			<rich_text foreground="#000000" scale="h2" weight="heavy">3526629</rich_text>
			<rich_text scale="h2" weight="heavy"> [Mercury][Launcher]Search bar in Phone page on recent list display incompeltely.</rich_text>
			<rich_text>

NOT BUG
 
RecentActivity见到的Task是Activity的截屏，系统会对其进行裁剪用以得到最合适的尺寸来显示。
 
 WindowManagerService.java
6237    Bitmap screenshotApplicationsInner(IBinder appToken, int displayId, int width, int height,
6238            boolean includeFullDisplay, float frameScale, Bitmap.Config config) {
 
                       ... ... 
           // Tell surface flinger what part of the image to crop. Take the top
6413            // right part of the application, and crop the larger dimension to fit.
6414            Rect crop = new Rect(frame);
6415            if (width / (float) frame.width() &lt; height / (float) frame.height()) {
6416                int cropWidth = (int)((float)width / (float)height * frame.height());
6417                crop.right = crop.left + cropWidth;
6418            } else {
6419                int cropHeight = (int)((float)height / (float)width * frame.width());
6420                crop.bottom = crop.top + cropHeight; 
6421 } 
                           .... .... 
 }





</rich_text>
			<rich_text weight="heavy">21.3525528-</rich_text>
			<rich_text foreground="#000000" weight="heavy">[Google Play Music]The first time tab play button has no response after again plug in headset.</rich_text>
			<rich_text weight="heavy">
</rich_text>
			<rich_text foreground="#000000">耳机拔出和拔进的时候，左上角会弹出SystemUI的</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/Avengers/frameworks/base/packages/SystemUI/src/com/android/systemui/hardware/HardwareInfoDialog.java">HardwareInfoDialog</rich_text>
			<rich_text foreground="#000000"> ， 所以在这个dialog没消失前点任何地方都会消耗在这个dialog上</rich_text>
			<rich_text>

    public HardwareInfoDialog(final Context context, Handler handler, UserHandle userHandle) {
        super(context, android.R.style.Theme_Holo_Dialog);
        mHandler = handler;
        mCurrentUserHandle = userHandle;

        Window window = getWindow();
        window.requestFeature(Window.FEATURE_NO_TITLE);
        window.setType(WindowManager.LayoutParams.TYPE_SYSTEM_DIALOG);
        window.clearFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);
        window.addFlags(WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH);
        /*[BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu, 2016/11/21, Defect-3525528*/
</rich_text>
			<rich_text weight="heavy">        window.addFlags(WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE);</rich_text>
			<rich_text>
        /*[BUGFIX]-Add-END by TCTNB.zhengyu.hu */



</rich_text>
			<rich_text weight="heavy">22.3526629 - [Mercury][Launcher]Search bar in Phone page on recent list display incompeltely.</rich_text>
			<rich_text>
Overview显示Activity不全

NOT BUG
 
RecentActivity见到的Task是Activity的截屏，系统会对其进行裁剪用以得到最合适的尺寸来显示。
 
 
6237    Bitmap screenshotApplicationsInner(IBinder appToken, int displayId, int width, int height,
6238            boolean includeFullDisplay, float frameScale, Bitmap.Config config) {
 
                       ... ... 
           // Tell surface flinger what part of the image to crop. Take the top
6413            // right part of the application, and crop the larger dimension to fit.
6414            Rect crop = new Rect(frame);
6415            if (width / (float) frame.width() &lt; height / (float) frame.height()) {
6416                int cropWidth = (int)((float)width / (float)height * frame.height());
6417                crop.right = crop.left + cropWidth;
6418            } else {
6419                int cropHeight = (int)((float)height / (float)width * frame.width());
6420                crop.bottom = crop.top + cropHeight; 
6421 } 
                           .... .... 
 }


</rich_text>
			<rich_text weight="heavy">23. FR-</rich_text>
			<rich_text foreground="#000000" weight="heavy">3469285</rich_text>
			<rich_text weight="heavy"> [FROM JIRA][AVNTCLN-1752] CDD 7.0 [8.5] - Exclusive Core</rich_text>
			<rich_text>

Device implementations with two or more CPU cores </rich_text>
			<rich_text foreground="#ff0000" weight="heavy">SHOULD</rich_text>
			<rich_text> provide at least one exclusive core that can be reserved by the top foreground application
最新7.0 cdd 8.5 章节的描述是 should ， 也就是说不一定要实现exclusivecores ， 目前通过代码验证</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Process&amp;project=Avengers">Process</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getExclusiveCores&amp;project=Avengers">getExclusiveCores</rich_text>
			<rich_text>() 返回空数组，所以Mercury暂时没有开启这个功能
满足CDD的定义

如果一定要求开启，可能会对功耗有影响，需要system Team对可能带来的功耗等问题作综合评估。


</rich_text>
			<rich_text weight="heavy">24. </rich_text>
			<rich_text foreground="#000000" weight="heavy">3408834</rich_text>
			<rich_text weight="heavy"> - [SD card]The SD card files shows on PC is not sync with phone after copy or delete files in SD card.</rich_text>
			<rich_text>
在sdcard setting菜单中删除文件，对应的URI有点不一样。

    </rich_text>
			<rich_text weight="heavy">ExternalStorageProvider.java</rich_text>
			<rich_text>   
    @Override
    public void deleteDocument(String docId) throws FileNotFoundException {
        final File file = getFileForDocId(docId, true); // VERTU - cheng.zhao-nb - BUG-3408834


</rich_text>
			<rich_text weight="heavy">25.3526528-[Mercury][Launcher]Double-click the Recent button will not return to the current page.V</rich_text>
			<rich_text>

这个是android N原生的行为，之前打算修改的方式如下。

</rich_text>
			<rich_text weight="heavy">BbRecentsView</rich_text>
			<rich_text>.java
    public final void onBusEvent(LaunchNextTaskRequestEvent event) {
        if (mAdapter.getTaskCount() != 0) {
            // Launch the next task
            /*[BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu, 2016/11/21, Defect-3541448 */
            //final Task task = mAdapter.getNextLaunchTask();
            final Task task = mAdapter.getTask(1);
            /*[BUGFIX]-Add-END by TCTNB.zhengyu.hu, 2016/11/22 
            
            
</rich_text>
			<rich_text weight="heavy">26.</rich_text>
			<rich_text foreground="#000000" weight="heavy">3232355</rich_text>
			<rich_text weight="heavy">- [Storage] Sometimes appears fail when doing Format as internal</rich_text>
			<rich_text>


</rich_text>
			<rich_text foreground="#000000">问题应该出现在System 底层， MountService通过NativeDaemonConnector 向底层发送Socket的命令， 经过底层处理以后，应该会通过CommandListener的RunCommand上报的上层，上层也是一直在等待这个消息，却一直没有等到。</rich_text>
			<rich_text>

MountService 在partionProvate中调用 mConnector.execute(&quot;volume&quot;, &quot;partition&quot;, diskId, &quot;private&quot;); 出现了超时 
 
 mConnector 是</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/n8996/frameworks/base/services/core/java/com/android/server/NativeDaemonConnector.java">NativeDaemonConnector</rich_text>
			<rich_text>对象， 在执行execute中会逐步调用其成员函数remove 
最终卡在了result = found.responses.poll(timeoutMs, TimeUnit.MILLISECONDS);
这个调用是一个阻塞调用，一直从一个队列中轮寻，直到有对象出现的时候作为reponse对象进行返回，但是由于某些原因，一直没有添加message到这个队列中，导致最终的超时。


通过log和代码分析 发现StorageWizardFormatProgress抛出异常超时导致Failed to partition以下是关键log，请 SDcard 模块的同事分析解决,如果需要我继续协助请联系我，谢谢
10-26 17:16:48.047 D/HeadsetPhoneState( 1651): Exit onSignalStrengthsChanged
10-26 17:16:48.431 E/NativeDaemonConnector.ResponseQueue( 1323): Timeout waiting for response
10-26 17:16:48.431 E/VoldConnector( 1323): timed-out waiting for response to 61 volume partition disk:179,64 private
10-26 17:16:48.439 E/StorageSettings( 5272): Failed to partition
10-26 17:16:48.439 E/StorageSettings( 5272): java.lang.IllegalStateException: command '61 volume partition disk:179,64 private' failed with 'null'
10-26 17:16:48.439 E/StorageSettings( 5272):     at android.os.Parcel.readException(Parcel.java:1691)
10-26 17:16:48.439 E/StorageSettings( 5272):     at android.os.Parcel.readException(Parcel.java:1636)
10-26 17:16:48.439 E/StorageSettings( 5272):     at android.os.storage.IMountService$Stub$Proxy.partitionPrivate(IMountService.java:1085)
10-26 17:16:48.439 E/StorageSettings( 5272):     at android.os.storage.StorageManager.partitionPrivate(StorageManager.java:729)
10-26 17:16:48.439 E/StorageSettings( 5272):     at com.android.settings.deviceinfo.StorageWizardFormatProgress$PartitionTask.doInBackground(StorageWizardFormatProgress.java:98)
10-26 17:16:48.439 E/StorageSettings( 5272):     at com.android.settings.deviceinfo.StorageWizardFormatProgress$PartitionTask.doInBackground(StorageWizardFormatProgress.java:93)
10-26 17:16:48.439 E/StorageSettings( 5272):     at android.os.AsyncTask$2.call(AsyncTask.java:304)
10-26 17:16:48.439 E/StorageSettings( 5272):     at java.util.concurrent.FutureTask.run(FutureTask.java:237)
10-26 17:16:48.439 E/StorageSettings( 5272):     at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:243)
10-26 17:16:48.439 E/StorageSettings( 5272):     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1133)
10-26 17:16:48.439 E/StorageSettings( 5272):     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:607)
10-26 17:16:48.439 E/StorageSettings( 5272):     at java.lang.Thread.run(Thread.java:761)
10-26 17:16:48.466 D/ActivityTrigger( 1323): ActivityTrigger activityPauseTrigger 

</rich_text>
			<rich_text weight="heavy">27.3823684-otg通知重启后无法点击通知进入</rich_text>
			<rich_text>
不算bug， 只能说是原生的行为是这样的，所有设置pendingIntent的通知， 如sdcard格式化后显示的“For transferring photos and media”这样的通知，重启以后一样无法点进去。
 
原因是这样的，Notification.Builder设置完pendingIntent之后会存储在ActivityManagerService的 mIntentSenderRecords这个成员变量里面，点击通知的时候就会获取出对应的Intent然后进行跳转。但是这个变量的值只是存在内存里面，重启以后就没了，除非重新再生成通知，不然就都无法跳转。

通过adb shell dumpsys actiivty i 可以查看所有intent

</rich_text>
			<rich_text weight="heavy">28.3705483 packageinstaller安装时候出现FC.</rich_text>
			<rich_text>

这个Bug跟系统无关，产生是因为启动这个安装过程的应用（有可能是Chrome）传入了错误的Uri导致，Pixel上同样能够复现，建议close，具体分析如下

 首先，反编译googlepackageinstaller发现其本身就没有去申请过INTERNET，ACCESS_ALL_DOWNLOADS 这些权限。
 然后，通过对PackageInstallerActivity分析发现，出现问题的时候的packageUri都是试图通过contentprovider查询downloadprovider的数据；而正常情况下packageUri指向的是apk安装以后base apk所在的路径，或者安装前apk所在的路径（对应ApplicationInfo.sourceDir。而安装APK的时候，这个路径可以通过代码传入，如果传入的是“content://downloads/my_downloads/9” 就会出现问题
 所以，这个问题是启动安装的应用传入了错误的Uri引起，通过下面代码可以复现。而这个应用有可能是某个浏览器，在启动安装界面的时候传入了错误的Uri。 在Google BBS上看到别人也贴出类似的问题， 说是在PIXIEL上也能够复现。
       String path = &quot;content://downloads/my_downloads/9&quot;;
        Intent intent = new Intent(Intent.ACTION_VIEW);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.setDataAndType(Uri.parse(path) ,&quot;application/vnd.android.package-archive&quot;);
        getBaseContext().startActivity(intent);


java.lang.RuntimeException: An error occurred while executing doInBackground()
at android.os.AsyncTask$3.done(AsyncTask.java:318)
at java.util.concurrent.FutureTask.finishCompletion(FutureTask.java:354)
at java.util.concurrent.FutureTask.setException(FutureTask.java:223)
at java.util.concurrent.FutureTask.run(FutureTask.java:242)
at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:243)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1133)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:607)
at java.lang.Thread.run(Thread.java:761)
</rich_text>
			<rich_text weight="heavy">Caused by: java.lang.SecurityException: Permission Denial: reading com.android.providers.downloads.DownloadProvider uri content://downloads/my_downloads/9 from pid=8126, uid=10017 requires</rich_text>
			<rich_text> android.permission.INTERNET, or grantUriPermission()
at android.os.Parcel.readException(Parcel.java:1683)
at android.database.DatabaseUtils.readExceptionFromParcel(DatabaseUtils.java:183)
at android.database.DatabaseUtils.readExceptionWithFileNotFoundExceptionFromParcel(DatabaseUtils.java:146)
at android.content.ContentProviderProxy.openTypedAssetFile(ContentProviderNative.java:692)
at android.content.ContentResolver.openTypedAssetFileDescriptor(ContentResolver.java:1148)
at android.content.ContentResolver.openAssetFileDescriptor(ContentResolver.java:985)
at android.content.ContentResolver.openInputStream(ContentResolver.java:705)
at com.android.packageinstaller.PackageInstallerActivity$StagingAsyncTask.doInBackground(PackageInstallerActivity.java:770)
at com.android.packageinstaller.PackageInstallerActivity$StagingAsyncTask.doInBackground(PackageInstallerActivity.java:761)
at android.os.AsyncTask$2.call(AsyncTask.java:304)
at java.util.concurrent.FutureTask.run(FutureTask.java:237)
... 4 more

==
12-20 02:25:02.207  9024  9089 E AndroidRuntime: FATAL EXCEPTION: AsyncTask #1
12-20 02:25:02.207  9024  9089 E AndroidRuntime: Process: com.google.android.packageinstaller, PID: 9024
12-20 02:25:02.207  9024  9089 E AndroidRuntime: java.lang.RuntimeException: An error occurred while executing doInBackground()
12-20 02:25:02.207  9024  9089 E AndroidRuntime: at android.os.AsyncTask$3.done(AsyncTask.java:318)
12-20 02:25:02.207  9024  9089 E AndroidRuntime: at java.util.concurrent.FutureTask.finishCompletion(FutureTask.java:354)
12-20 02:25:02.207  9024  9089 E AndroidRuntime: at java.util.concurrent.FutureTask.setException(FutureTask.java:223)
12-20 02:25:02.207  9024  9089 E AndroidRuntime: at java.util.concurrent.FutureTask.run(FutureTask.java:242)
12-20 02:25:02.207  9024  9089 E AndroidRuntime: at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:243)
12-20 02:25:02.207  9024  9089 E AndroidRuntime: at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1133)
12-20 02:25:02.207  9024  9089 E AndroidRuntime: at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:607)
12-20 02:25:02.207  9024  9089 E AndroidRuntime: at java.lang.Thread.run(Thread.java:761)
12-20 02:25:02.207  9024  9089 E AndroidRuntime: Caused by: java.lang.SecurityException: Permission Denial: reading com.android.providers.downloads.DownloadProvider uri content://downloads/all_downloads/4 from </rich_text>
			<rich_text weight="heavy">pid=9024, uid=10019 requires android.permission.ACCESS_ALL_DOWNLOADS, or grantUriPermission()</rich_text>
			<rich_text>
12-20 02:25:02.207  9024  9089 E AndroidRuntime: at android.os.Parcel.readException(Parcel.java:1683)
12-20 02:25:02.207  9024  9089 E AndroidRuntime: at android.database.DatabaseUtils.readExceptionFromParcel(DatabaseUtils.java:183)
12-20 02:25:02.207  9024  9089 E AndroidRuntime: at android.database.DatabaseUtils.readExceptionWithFileNotFoundExceptionFromParcel(DatabaseUtils.java:146)
12-20 02:25:02.207  9024  9089 E AndroidRuntime: at android.content.ContentProviderProxy.openTypedAssetFile(ContentProviderNative.java:692)
12-20 02:25:02.207  9024  9089 E AndroidRuntime: at android.content.ContentResolver.openTypedAssetFileDescriptor(ContentResolver.java:1148)
12-20 02:25:02.207  9024  9089 E AndroidRuntime: at android.content.ContentResolver.openAssetFileDescriptor(ContentResolver.java:985)
12-20 02:25:02.207  9024  9089 E AndroidRuntime: at android.content.ContentResolver.openInputStream(ContentResolver.java:705)
12-20 02:25:02.207  9024  9089 E AndroidRuntime: at com.android.packageinstaller.PackageInstallerActivity$StagingAsyncTask.doInBackground(PackageInstallerActivity.java:770)
12-20 02:25:02.207  9024  9089 E AndroidRuntime: at com.android.packageinstaller.PackageInstallerActivity$StagingAsyncTask.doInBackground(PackageInstallerActivity.java:761)
12-20 02:25:02.207  9024  9089 E AndroidRuntime: at android.os.AsyncTask$2.call(AsyncTask.java:304)
12-20 02:25:02.207  9024  9089 E AndroidRuntime: at java.util.concurrent.FutureTask.run(FutureTask.java:237)
12-20 02:25:02.207  9024  9089 E AndroidRuntime: ... 4 more





</rich_text>
			<table char_offset="4808" col_max="1000" col_min="40">
				<row>
					<cell>            1471191          </cell>
					<cell>            [VR Launcher]Desktop shortcut to enter the                 VR launcher prompt&quot;App isn't installed&quot;          </cell>
				</row>
				<row>
					<cell>            1471304          </cell>
					<cell>            [VR launcher]VR launcher FC when click VR                 launcher in the app list</cell>
				</row>
				<row>
					<cell>click me</cell>
					<cell>click me</cell>
				</row>
			</table>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Reboot-Bug" prog_lang="custom-colors" readonly="False" tags="" unique_id="52">
			<rich_text scale="h2" weight="heavy">1.Defect-1467549  android restart after switch to guest mode</rich_text>
			<rich_text>
 
 根据1/19号的日志（4A1V版本，1/15）分析，在出现一堆Service die之前几百毫秒的时间内有下面的watchdog打印出来的线程堆栈，显示四个线程发生了block，推测是核心线程发生了死锁导致watchdog强制重启. 比较尴尬的是由于没有提供trace， 从下面的堆栈情况仅仅只能发现下面的锁依赖关系， 根据现有的堆栈，无法找到main thread和foreground拥有mLock的锁而形成循环依赖的关系， 所以死锁也只能停留在推测的阶段. 另外，display thread中WallpaperManagerService.</rich_text>
			<rich_text foreground="#ffff00000000">setReversibleStatus</rich_text>
			<rich_text>由于另外一个Monkey测试所造成的死锁已经在1/18号进行了相关代码修改，去掉了</rich_text>
			<rich_text foreground="#ffff00000000">setReversibleStatus</rich_text>
			<rich_text>所需要的mLock锁，所以如果不是昨天疑似为同一个行为的复现, 我觉得应该是不会再出现这样的死锁状况了.
 
 ActivityManager thread       拥有ActivityManagerService的锁         需要mWindowMap的锁
 display thread                     拥有mWindowMap的锁                       需要mLock的锁
 main thread                                                                                需要ActivityManagerService的锁
 foreground thread                                                                       需要ActivityManagerService的锁
 

 01-19 08:36:09.942  1448  3821 E Watchdog: Triggering SysRq for system_server watchdog
01-19 08:36:09.968  1448  3821 W Watchdog: *** WATCHDOG KILLING SYSTEM PROCESS: </rich_text>
			<rich_text foreground="#ffff00000000">Blocked in handler on foreground thread (android.fg), Blocked in handler on main thread (main), Blocked in handler on display</rich_text>
			<rich_text> thread (android.display), Blocked in handler on ActivityManager (ActivityManager)
01-19 08:36:09.968  1448  3821 W Watchdog: foreground thread stack trace:
01-19 08:36:09.969  1448  3821 W Watchdog:     at com.android.server.am.ActivityManagerService.broadcastIntent(ActivityManagerService.java:17660)
01-19 08:36:09.969  1448  3821 W Watchdog:     at android.app.ContextImpl.sendStickyBroadcastAsUser(ContextImpl.java:1084)
01-19 08:36:09.969  1448  3821 W Watchdog:     at com.android.server.usb.UsbDeviceManager$UsbHandler.updateUsbStateBroadcast(UsbDeviceManager.java:643)
01-19 08:36:09.969  1448  3821 W Watchdog:     at com.android.server.usb.UsbDeviceManager$UsbHandler.handleMessage(UsbDeviceManager.java:740)
01-19 08:36:09.969  1448  3821 W Watchdog:     at android.os.Handler.dispatchMessage(Handler.java:102)
01-19 08:36:09.969  1448  3821 W Watchdog:     at android.os.Looper.loop(Looper.java:148)
01-19 08:36:09.969  1448  3821 W Watchdog:     at android.os.HandlerThread.run(HandlerThread.java:61)
01-19 08:36:09.969  1448  3821 W Watchdog:     at com.android.server.ServiceThread.run(ServiceThread.java:46)
01-19 08:36:09.969  1448  3821 W Watchdog: main thread stack trace:
01-19 08:36:09.969  1448  3821 W Watchdog:     at com.android.server.am.ActivityManagerService.refContentProvider(ActivityManagerService.java:10547)
01-19 08:36:09.969  1448  3821 W Watchdog:     at android.app.ActivityThread.incProviderRefLocked(ActivityThread.java:4921)
01-19 08:36:09.969  1448  3821 W Watchdog:     at android.app.ActivityThread.acquireExistingProvider(ActivityThread.java:4984)
01-19 08:36:09.969  1448  3821 W Watchdog:     at android.app.ActivityThread.acquireProvider(ActivityThread.java:4863)
01-19 08:36:09.969  1448  3821 W Watchdog:     at android.app.ContextImpl$ApplicationContentResolver.acquireProvider(ContextImpl.java:2003)
01-19 08:36:09.969  1448  3821 W Watchdog:     at android.content.ContentResolver.acquireProvider(ContentResolver.java:1424)
01-19 08:36:09.969  1448  3821 W Watchdog:     at android.content.ContentResolver.query(ContentResolver.java:517)
01-19 08:36:09.969  1448  3821 W Watchdog:     at android.content.ContentResolver.query(ContentResolver.java:435)
01-19 08:36:09.969  1448  3821 W Watchdog:     at com.android.server.notification.CalendarTracker.checkEvent(CalendarTracker.java:161)
01-19 08:36:09.970  1448  3821 W Watchdog:     at com.android.server.notification.EventConditionProvider.evaluateSubscriptionsW(EventConditionProvider.java:218)
01-19 08:36:09.970  1448  3821 W Watchdog:     at com.android.server.notification.EventConditionProvider.access$500(EventConditionProvider.java:49)
01-19 08:36:09.970  1448  3821 W Watchdog:     at com.android.server.notification.EventConditionProvider$4.run(EventConditionProvider.java:326)
01-19 08:36:09.970  1448  3821 W Watchdog:     at android.os.Handler.handleCallback(Handler.java:739)
01-19 08:36:09.970  1448  3821 W Watchdog:     at android.os.Handler.dispatchMessage(Handler.java:95)
01-19 08:36:09.970  1448  3821 W Watchdog:     at android.os.Looper.loop(Looper.java:148)
01-19 08:36:09.970  1448  3821 W Watchdog:     at com.android.server.SystemServer.run(SystemServer.java:325)
01-19 08:36:09.970  1448  3821 W Watchdog:     at com.android.server.SystemServer.main(SystemServer.java:181)
01-19 08:36:09.970  1448  3821 W Watchdog:     at java.lang.reflect.Method.invoke(Native Method)
01-19 08:36:09.970  1448  3821 W Watchdog:     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:732)
01-19 08:36:09.970  1448  3821 W Watchdog:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:622)
01-19 08:36:09.970  1448  3821 W Watchdog: </rich_text>
			<rich_text foreground="#ffff00000000">display thread stack trace</rich_text>
			<rich_text>:
01-19 08:36:09.970  1448  3821 W Watchdog:     at com.android.server.wallpaper.WallpaperManagerService.</rich_text>
			<rich_text foreground="#ffff00000000">setReversibleStatus</rich_text>
			<rich_text>(WallpaperManagerService.java:1586)
01-19 08:36:09.970  1448  3821 W Watchdog:     at android.app.WallpaperManager.setWallpaperReversibleStatus(WallpaperManager.java:1333)
01-19 08:36:09.970  1448  3821 W Watchdog:     at com.android.server.wm.ScreenRotationAnimation.kill(ScreenRotationAnimation.java:976)
01-19 08:36:09.970  1448  3821 W Watchdog:     at com.android.server.wm.WindowAnimator.animateLocked(WindowAnimator.java:662)
01-19 08:36:09.970  1448  3821 W Watchdog:     at com.android.server.wm.WindowAnimator.access$000(WindowAnimator.java:53)
01-19 08:36:09.970  1448  3821 W Watchdog:     at com.android.server.wm.WindowAnimator$1.doFrame(WindowAnimator.java:123)
01-19 08:36:09.970  1448  3821 W Watchdog:     at android.view.Choreographer$CallbackRecord.run(Choreographer.java:856)
01-19 08:36:09.970  1448  3821 W Watchdog:     at android.view.Choreographer.doCallbacks(Choreographer.java:670)
01-19 08:36:09.970  1448  3821 W Watchdog:     at android.view.Choreographer.doFrame(Choreographer.java:603)
01-19 08:36:09.970  1448  3821 W Watchdog:     at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:844)
01-19 08:36:09.970  1448  3821 W Watchdog:     at android.os.Handler.handleCallback(Handler.java:739)
01-19 08:36:09.970  1448  3821 W Watchdog:     at android.os.Handler.dispatchMessage(Handler.java:95)
01-19 08:36:09.970  1448  3821 W Watchdog:     at android.os.Looper.loop(Looper.java:148)
01-19 08:36:09.970  1448  3821 W Watchdog:     at android.os.HandlerThread.run(HandlerThread.java:61)
01-19 08:36:09.970  1448  3821 W Watchdog:     at com.android.server.ServiceThread.run(ServiceThread.java:46)
01-19 08:36:09.970  1448  3821 W Watchdog: ActivityManager stack trace:
01-19 08:36:09.970  1448  3821 W Watchdog:     at com.android.server.wm.WindowManagerService.stopAppFreezingScreen(WindowManagerService.java:4884)
01-19 08:36:09.970  1448  3821 W Watchdog:     at com.android.server.am.ActivityRecord.stopFreezingScreenLocked(ActivityRecord.java:942)
01-19 08:36:09.970  1448  3821 W Watchdog:     at com.android.server.am.ActivityStack.completePauseLocked(ActivityStack.java:1059)
01-19 08:36:09.970  1448  3821 W Watchdog:     at com.android.server.am.ActivityStack.activityPausedLocked(ActivityStack.java:957)
01-19 08:36:09.971  1448  3821 W Watchdog:     at com.android.server.am.ActivityStack$ActivityStackHandler.handleMessage(ActivityStack.java:298)
01-19 08:36:09.971  1448  3821 W Watchdog:     at android.os.Handler.dispatchMessage(Handler.java:102)
01-19 08:36:09.971  1448  3821 W Watchdog:     at android.os.Looper.loop(Looper.java:148)
01-19 08:36:09.971  1448  3821 W Watchdog:     at android.os.HandlerThread.run(HandlerThread.java:61)
01-19 08:36:09.971  1448  3821 W Watchdog:     at com.android.server.ServiceThread.run(ServiceThread.java:46)
 
========

现在来看2/2号疑似复现的日志情况. 之所以称之为疑似复现，是因为与此Bug第一次出现的时候有下面区别：
1. 虽然都是在切换用户的时候出现的重启，1/19号那次的Bug出现以后重启、恢复出厂设置也不能解决，而2/2号这次重启以后就正常，所以外在行为存在一定的区别
2. 由于2/2那次Log日志在service die出现前的关键2s发生了日志的缺失（可能是手机重启的时候出现的日志跑飞的情况），所以这里不能找到出现重启去的根本原因，但是从我后来抓取的trace去看，还是跟1/19号那次有很大的区别

</rich_text>
			<rich_text foreground="#ffff00000000">01-22 23:11:30.273 I/Watchdog_N( 1416): dumpKernelStacks</rich_text>
			<rich_text>
01-22 23:11:30.287 D/Launcher.Workspace( 3985): page moving end 
01-22 23:11:30.287 W/GAV2    (26407): Thread[Service Reconnect,5,main]: Service unavailable (code=1), using local store.
01-22 23:11:30.289 W/GAV2    (26424): Thread[Service Reconnect,5,main]: Service unavailable (code=1), using local store.
01-22 23:11:30.382 I/ParallaxUI( 3985): WallpaperEffects.unblurWallpaper()
01-22 23:11:30.396 I/ParallaxUI( 3985): WallpaperEffects.blurWallpaper()
01-22 23:11:30.396 I/ParallaxUI( 3985): WallpaperEffects.tryToBlurWallpaper()
01-22 23:11:30.397 I/ParallaxUI( 3985): WallpaperEffects.resizeWallpaperBlurViews(Point(1656, 2944))
01-22 23:11:30.397 I/ParallaxUI( 3985): ContinuousValueAnimator.animate(WallpaperBlur, from: 1.0, to: 0.0, duration: 150, currentValue: 0.0, mHasEverStarted: true)
01-22 23:11:30.458 D/Launcher.Workspace( 3985): page begin to moving 
01-22 23:11:30.476 I/ParallaxUI( 3985): WallpaperEffects.displayBlurredWallpaper(progress: 1.0, mBlurring: true, mUnblurring: false, mWallpaperChecker running: false, image view: 1656x2944)
01-22 23:11:30.493 I/ParallaxUI( 3985): WallpaperEffects.displayBlurredWallpaper(progress: 1.0, mBlurring: true, mUnblurring: false, mWallpaperChecker running: false, image view: 1656x2944)
01-22 23:11:30.499 I/ParallaxUI( 3985): WallpaperEffects.unblurWallpaper()
01-22 23:11:30.499 D/PagedView( 3985): onTouchEvent  mTouchState is 1 mFreeScroll = false
01-22 23:11:30.499 D/PagedView( 3985): onTouchEvent  returnToOriginalPage/mCurrentPage/isFling is false/2/true
01-22 23:11:30.499 D/PagedView( 3985):  paged view snap page to 1
01-22 23:11:30.499 D/PagedView( 3985): snapToPage   startX:1.0 dx:-1159 duration:308
01-22 23:11:30.527 I/ParallaxUI( 3985): WallpaperEffects.displayBlurredWallpaper(progress: 1.0, mBlurring: true, mUnblurring: false, mWallpaperChecker running: false, image view: 1656x2944)
01-22 23:11:30.563 I/ParallaxUI( 3985): WallpaperEffects.displayBlurredWallpaper(progress: 1.0, mBlurring: true, mUnblurring: false, mWallpaperChecker running: false, image view: 1656x2944)
01-22 23:11:30.596 I/ParallaxUI( 3985): WallpaperEffects.displayBlurredWallpaper(progress: 1.0, mBlurring: true, mUnblurring: false, mWallpaperChecker running: false, image view: 1656x2944)
01-22 23:11:30.631 I/ParallaxUI( 3985): WallpaperEffects.displayBlurredWallpaper(progress: 1.0, mBlurring: true, mUnblurring: false, mWallpaperChecker running: false, image view: 1656x2944)
</rich_text>
			<rich_text foreground="#ffff00000000">01-22 23:11:30.666</rich_text>
			<rich_text> I/ParallaxUI( 3985): WallpaperEffects.displayBlurredWallpaper(progress: 1.0, mBlurring: true, mUnblurring: false, mWallpaperChecker running: false, image view: 1656x2944)
01-22 23:11:32.789 I/Process ( 1416): Sending signal. PID: 1416 SIG: 9
01-22 23:11:32.806 I/ParallaxUI( 3985): WallpaperEffects.displayBlurredWallpaper(progress: 1.0, mBlurring: true, mUnblurring: false, mWallpaperChecker running: false, image view: 1656x2944)
</rich_text>
			<rich_text foreground="#ffff00000000">01-22 23:11:32.947</rich_text>
			<rich_text> E/installd(  559): eof
01-22 23:11:32.947 E/installd(  559): failed to read size
01-22 23:11:32.947 I/installd(  559): closing connection
01-22 23:11:32.953 E/WifiManager( 9398): Channel connection lost
01-22 23:11:32.954 E/WifiManager(11233): Channel connection lost
01-22 23:11:32.954 I/SurfaceFlinger(  452): start /proc/bootprof 106
01-22 23:11:32.954 W/Sensors ( 8385): sensorservice died [0x55b7604f20]
01-22 23:11:32.955 W/Sensors (25001): sensorservice died [0x55b7626700]
01-22 23:11:32.957 W/Sensors ( 4492): sensorservice died [0x55b75a7df0]
01-22 23:11:32.958 E/WifiManager( 4492): Channel connection lost
01-22 23:11:32.959 W/Sensors (11207): sensorservice died [0x55b73db930]


3. 在出现导致重启的关键原因之前出现了一些错误的日志（看着不像是会直接引起重启，但不能排除最终导致重启），相关代码是在1/26号添加，可能会对重启造成影响

01-22 22:52:27.321 W/System  (17561): ClassLoader referenced unknown path: /system/priv-app/GooglePartnerSetup/lib/arm64
01-22 22:52:27.325 W/System.err( 3346): android.provider.Settings$SettingNotFoundException: flashlight_state
01-22 22:52:27.326 W/System.err( 3346): 	at android.provider.Settings$System.getIntForUser(Settings.java:1781)
01-22 22:52:27.326 W/System.err( 3346): 	at android.provider.Settings$System.getInt(Settings.java:1771)
01-22 22:52:27.326 W/System.err( 3346): 	at com.android.systemui.func.FuncUtilSystemUI.getLockScreenResId(FuncUtilSystemUI.java:85)
01-22 22:52:27.326 W/System.err( 3346): 	at com.android.systemui.func.FuncList.initData(FuncList.java:436)
01-22 22:52:27.326 W/System.err( 3346): 	at com.android.systemui.func.FuncList.refreshUI(FuncList.java:459)
01-22 22:52:27.326 W/System.err( 3346): 	at com.android.systemui.func.FuncList$5.onUserSwitched(FuncList.java:290)
01-22 22:52:27.326 W/System.err( 3346): 	at com.android.systemui.settings.CurrentUserTracker.onReceive(CurrentUserTracker.java:45)
01-22 22:52:27.326 W/System.err( 3346): 	at android.app.LoadedApk$ReceiverDispatcher$Args.run(LoadedApk.java:881)
01-22 22:52:27.326 W/System.err( 3346): 	at android.os.Handler.handleCallback(Handler.java:739)
01-22 22:52:27.326 W/System.err( 3346): 	at android.os.Handler.dispatchMessage(Handler.java:95)
01-22 22:52:27.326 W/System.err( 3346): 	at android.os.Looper.loop(Looper.java:148)
01-22 22:52:27.326 W/System.err( 3346): 	at android.app.ActivityThread.main(ActivityThread.java:5515)
01-22 22:52:27.326 W/System.err( 3346): 	at java.lang.reflect.Method.invoke(Native Method)
01-22 22:52:27.326 W/System.err( 3346): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:764)
01-22 22:52:27.326 W/System.err( 3346): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:654)


==============================================================================================================

</rich_text>
			<rich_text scale="h2" weight="heavy">2.Defcet-1551793 VoiceInteractionServiceInfo空指针异常</rich_text>
			<rich_text>

(点击重启后手机一直处在循环开机中而且每次都有Android update，过程有6分钟以上了)
REPRODUCING PROCEDURES:
1.Disable voice search.
2. Enter voice search from the lock screen interface
3. Disable voice search.
4.Repeat step 2-3 many times5.Restart phone

Log显示si空指针异常，通过添加下面判断解决
  public VoiceInteractionServiceInfo(PackageManager pm, ServiceInfo si) {
        if (si == null) {
            mParseError = &quot;Service not available&quot;;
            return;
        }
        


</rich_text>
			<rich_text scale="h2" weight="heavy">3. Accessibility 放大镜开关处连续点击，当连续点击三次的第三次刚好触发放大的效果同时关闭这个功能，就会造成WindowManagerService的setMagnificationSpec抛出了异常，造成手机重启. Defect-1135609</rich_text>
			<rich_text>

AccessibilityInputFilter.. =&gt; ScreenMagnifier =&gt; WindowManagerService-&gt;setMagnificationCallbacks


通过下面的方式规避即可
        public void setMagnificationSpec(MagnificationSpec spec) {
            synchronized (mWindowMap) {

                if (mAccessibilityController != null) {
                    Log.i(TAG,&quot;hzy setMagnificationSpec mAccessibilityController != null&quot;);
                    mAccessibilityController.setMagnificationSpecLocked(spec);
                } </rich_text>
			<rich_text foreground="#ffff00000000" weight="heavy">else if(Settings.Secure.getInt(mContext.getContentResolver(),
                        Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_ENABLED , 1) == 0) {
                    Log.i(TAG,&quot;catch the situation: triple-tap triggers the magnification gesture at the sametime the thirdly tap closing the magnification function &quot;);
                    if (Binder.getCallingPid() != android.os.Process.myPid()) {
                         spec.recycle();
                    }
                    return;
                }</rich_text>
			<rich_text>else{
                    throw new IllegalStateException(&quot;Magnification callbacks not set!&quot;);
                }
            }
            if (Binder.getCallingPid() != android.os.Process.myPid()) {
                spec.recycle();
            }
        }


12-11 17:54:57.171  1343  1343 E AndroidRuntime: *** FATAL EXCEPTION IN SYSTEM PROCESS: main

</rich_text>
			<rich_text foreground="#ffff00000000" weight="heavy">12-11 17:54:57.171  1343  1343 E AndroidRuntime: java.lang.RuntimeException: java.lang.IllegalStateException: Magnification callbacks not set!</rich_text>
			<rich_text>

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at android.util.ReflectiveProperty.set(ReflectiveProperty.java:122)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at android.animation.PropertyValuesHolder.setAnimatedValue(PropertyValuesHolder.java:937)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at android.animation.ObjectAnimator.animateValue(ObjectAnimator.java:981)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at android.animation.ValueAnimator.animationFrame(ValueAnimator.java:1384)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at android.animation.ValueAnimator.doAnimationFrame(ValueAnimator.java:1427)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at android.animation.ValueAnimator$AnimationHandler.doAnimationFrame(ValueAnimator.java:759)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at android.animation.ValueAnimator$AnimationHandler$1.run(ValueAnimator.java:801)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at android.view.Choreographer$CallbackRecord.run(Choreographer.java:858)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at android.view.Choreographer.doCallbacks(Choreographer.java:670)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at android.view.Choreographer.doFrame(Choreographer.java:603)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:844)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at android.os.Handler.handleCallback(Handler.java:739)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at android.os.Handler.dispatchMessage(Handler.java:95)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at android.os.Looper.loop(Looper.java:148)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at com.android.server.SystemServer.run(SystemServer.java:286)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at com.android.server.SystemServer.main(SystemServer.java:171)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at java.lang.reflect.Method.invoke(Native Method)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616)

</rich_text>
			<rich_text weight="heavy">12-11 17:54:57.171  1343  1343 E AndroidRuntime: Caused by: java.lang.IllegalStateException: Magnification callbacks not set!</rich_text>
			<rich_text>

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at com.android.server.wm.WindowManagerService$LocalService.setMagnificationSpec(WindowManagerService.java:11913)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at com.android.server.accessibility.ScreenMagnifier$MagnificationController.setMagnificationSpec(ScreenMagnifier.java:1122)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at java.lang.reflect.Method.invoke(Native Method)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	at android.util.ReflectiveProperty.set(ReflectiveProperty.java:118)

12-11 17:54:57.171  1343  1343 E AndroidRuntime: 	... 18 more



</rich_text>
			<rich_text scale="h2" weight="heavy">4. stability- reboot-  Defect: 1561364</rich_text>
			<rich_text>
这个Bug是通过stablility测试跑出来的， 而且每次都是在测试Telephony的时候出现的crash， 所以一开是的调查方向都是从Telephony开始

出现的Crash如下， 显示是system_server挂掉，原因是全局引用表溢出

2016-02-04 04:27:41,180 : 02-03 21:27:42.523  1407  3470 F libc    : Fatal signal 6 (SIGABRT), code -6 in tid 3470 (Binder_C)
2016-02-04 04:27:41,289 : 02-03 21:27:42.657   550   550 I auditd  : SELinux: Loaded file_contexts contexts from /file_contexts.
2016-02-04  04:27:41,289 : 02-03 21:27:42.663   550   550 F DEBUG   : *** *** ***  *** *** *** *** *** *** *** *** *** *** *** *** ***
2016-02-04  04:27:41,289 : 02-03 21:27:42.663   550   550 F DEBUG   : Build  fingerprint: 'TCL/6070Y/idol4s:6.0.1/MMB29M/vA23-0:user/release-keys'
2016-02-04 04:27:41,289 : 02-03 21:27:42.663   550   550 F DEBUG   : Revision: '0'
2016-02-04 04:27:41,289 : 02-03 21:27:42.663   550   550 F DEBUG   : ABI: 'arm64'
2016-02-04  04:27:41,289 : 02-03 21:27:42.663   550   550 F DEBUG   : </rich_text>
			<rich_text weight="heavy">pid: 1407,  tid: 3470, name: Binder_C  &gt;&gt;&gt; system_server &lt;&lt;&lt;</rich_text>
			<rich_text>
2016-02-04 04:27:41,289 : 02-03 21:27:42.663   550   550 F DEBUG   : signal 6 (SIGABRT), code -6 (SI_TKILL), fault addr --------
2016-02-04  04:27:41,382 : 02-03 21:27:42.757   550   550 F DEBUG   : Abort  </rich_text>
			<rich_text weight="heavy">message: 'art/runtime/indirect_reference_table.cc:115] JNI ERROR (app  bug):</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">global reference table overflow</rich_text>
			<rich_text> (max=51200)'
2016-02-04  04:27:41,382 : 02-03 21:27:42.758   550   550 F DEBUG   :     x0    0000000000000000  x1   0000000000000d8e  x2   0000000000000006  x3    0000000000000000
2016-02-04 04:27:41,382 : 02-03 21:27:42.758   550    550 F DEBUG   :     x4   0000000000000000  x5   0000000000000001  x6    0000000000000000  x7   0000000000000000
2016-02-04 04:27:41,382 :  02-03 21:27:42.758   550   550 F DEBUG   :     x8   0000000000000083   x9   0000007f8b558a70  x10  0000000000000003  x11  0000000000000140
2016-02-04  04:27:41,382 : 02-03 21:27:42.758   550   550 F DEBUG   :     x12   00000055ac52a450  x13  00000055ab44e000  x14  0000000000000000  x15   0000000000000000
2016-02-04 04:27:41,382 : 02-03 21:27:42.758   550    550 F DEBUG   :     x16  0000007f8b5516a8  x17  0000007f8b513b2c  x18   0000000000000000  x19  0000007f608c2510
2016-02-04 04:27:41,382 :  02-03 21:27:42.758   550   550 F DEBUG   :     x20  0000007f608c2450   x21  000000000000000b  x22  0000000000000006  x23  00000055abb7cfd0
2016-02-04  04:27:41,382 : 02-03 21:27:42.758   550   550 F DEBUG   :     x24   00000055acc39f50  x25  0000000000000000  x26  00000055ab4825f0  x27   0000000000000000
2016-02-04 04:27:41,382 : 02-03 21:27:42.758   550    550 F DEBUG   :     x28  00000055abb7cfd0  x29  0000007f608c15d0  x30   0000007f8b5112c8
2016-02-04 04:27:41,382 : 02-03 21:27:42.758   550    550 F DEBUG   :     sp   0000007f608c15d0  pc   0000007f8b513b34   pstate 0000000020000000
2016-02-04 04:27:41,398 : 02-03 21:27:42.764   550   550 F DEBUG   :
2016-02-04 04:27:41,398 : 02-03 21:27:42.764   550   550 F DEBUG   : backtrace:
2016-02-04  04:27:41,398 : 02-03 21:27:42.764   550   550 F DEBUG   :     #00 pc  000000000006bb34  /system/lib64/libc.so (tgkill+8)
2016-02-04  04:27:41,398 : 02-03 21:27:42.764   550   550 F DEBUG   :     #01 pc  00000000000692c4  /system/lib64/libc.so (pthread_kill+68)
2016-02-04  04:27:41,398 : 02-03 21:27:42.764   550   550 F DEBUG   :     #02 pc  00000000000212b8  /system/lib64/libc.so (raise+28)
2016-02-04  04:27:41,398 : 02-03 21:27:42.764   550   550 F DEBUG   :     #03 pc  000000000001ba58  /system/lib64/libc.so (abort+60)
2016-02-04  04:27:41,398 : 02-03 21:27:42.764   550   550 F DEBUG   :     #04 pc  00000000004325b8  /system/lib64/libart.so (art::Runtime::Abort()+324)
2016-02-04  04:27:41,398 : 02-03 21:27:42.764   550   550 F DEBUG   :     #05 pc  0000000000137224  /system/lib64/libart.so  (art::LogMessage::~LogMessage()+3136)
2016-02-04 04:27:41,398 : 02-03  21:27:42.764   550   550 F DEBUG   :     #06 pc 00000000002724c8   /system/lib64/libart.so (art::IndirectReferenceTable::Add(unsigned int,  art::mirror::Object*)+372)
2016-02-04 04:27:41,398 : 02-03  21:27:42.764   550   550 F DEBUG   :     #07 pc 000000000030946c   /system/lib64/libart.so (art::JavaVMExt::AddGlobalRef(art::Thread*,  art::mirror::Object*)+56)
2016-02-04 04:27:41,398 : 02-03  21:27:42.764   550   550 F DEBUG   :     #08 pc 000000000033f384   /system/lib64/libart.so (art::JNI::NewGlobalRef(_JNIEnv*,  _jobject*)+320)
2016-02-04 04:27:41,398 : 02-03 21:27:42.764   550    550 F DEBUG   :     #09 pc 00000000000dfe6c   /system/lib64/libandroid_runtime.so  (android::javaObjectForIBinder(_JNIEnv*,  android::sp&lt;android::IBinder&gt; const&amp;)+412)
2016-02-04  04:27:41,398 : 02-03 21:27:42.764   550   550 F DEBUG   :     #10 pc  00000000000d4b3c  /system/lib64/libandroid_runtime.so
2016-02-04  04:27:41,398 : 02-03 21:27:42.764   550   550 F DEBUG   :     #11 pc  0000000002312db0  /system/framework/arm64/boot.oat (offset 0x1f5b000)
2016-02-04 04:27:45,672 : 02-03 21:27:47.041   550   550 F DEBUG   :
2016-02-04 04:27:45,672 : 02-03 21:27:47.041   550   550 F DEBUG   : Tombstone written to: /data/tombstones/tombstone_03


如果开启了CheckJni 接口，会在Radio日志中打印全局引用表中各个对象占用的数量，可以用下面的方法开启
sudo adb root;
sudo adb shell setenforce 0;
sudo adb remount;
sudo adb shell stop;
sudo adb shell setprop dalvik.vm.checkjni true
sudo adb shell start;

可以用sudo adb shell getprop dalvik.vm.checkjni 查看是否开启


Log显示有48830个 </rich_text>
			<rich_text foreground="#ff0000">android.os.RemoteCallbackList$Callback </rich_text>
			<rich_text foreground="#000000">的实例存在，内存泄漏很可能发生在RemoteCallbackList的回调函数上，可能register这个回调函数而并没有unregister，造成了泄漏</rich_text>
			<rich_text>

2016-02-26  04:23:48,010 : 02-26 04:23:47.952 F/art     (22381):  art/runtime/indirect_reference_table.cc:115] JNI ERROR (app bug): global  reference table overflow (max=51200)
2016-02-26 04:23:48,010 : 02-26  04:23:47.952 F/art     (22381):  art/runtime/indirect_reference_table.cc:115] global reference table  dump:
2016-02-26 04:23:48,010 : 02-26 04:23:47.952 F/art     (22381):  art/runtime/indirect_reference_table.cc:115]   Last 10 entries (of  51200):
2016-02-26 04:23:48,010 : 02-26 04:23:47.952 F/art      (22381): art/runtime/indirect_reference_table.cc:115]     51199:  0x149304c0 java.lang.ref.WeakReference
2016-02-26 04:23:48,010 :  02-26 04:23:47.952 F/art     (22381):  art/runtime/indirect_reference_table.cc:115]     51198: 0x137b83d0
...
2016-02-26 04:23:48,010 : 02-26 04:23:47.952 F/art     (22381): art/runtime/indirect_reference_table.cc:115]   Summary:
...
2016-02-26 04:23:48,010 : 02-26 04:23:47.953 F/art     (22381): art/runtime/indirect_reference_table.cc:115]     </rich_text>
			<rich_text foreground="#ff0000">48830 of android.os.RemoteCallbackList$Callback</rich_text>
			<rich_text> (48830 unique instanc


知道是这个回调函数的泄漏，直接在Opengrop找相关的代码比较困难，因为你无法定位到出问题的代码

通过直接在RemoteCallbackList添加下面的Log， 可以知道是谁进行了注册
/frameworks/base/core/java/android/os/RemoteCallbackList.java 
......
17package android.os;
18
19import android.util.ArrayMap;
+ import android.util.Log;
......
49public class RemoteCallbackList&lt;E extends IInterface&gt; {
+      private static final String TAG = &quot;RemoteCallbackList&quot;;
......
......
107    public boolean register(E callback, Object cookie) {
108        synchronized (mCallbacks) {
109            if (mKilled) {
110                return false;
111            }
</rich_text>
			<rich_text weight="heavy">+              Log.d(TAG,Log.getStackTraceString(new Throwable()));</rich_text>
			<rich_text>
112            IBinder binder = callback.asBinder();
113            try {
114                Callback cb = new Callback(callback, cookie);
115                binder.linkToDeath(cb, 0);
116                mCallbacks.put(binder, cb);
117                return true;
118            } catch (RemoteException e) {
119                return false;
120            }
121        }
122    }

141    public boolean unregister(E callback) {
142        synchronized (mCallbacks) {
</rich_text>
			<rich_text weight="heavy">+              Log.d(TAG,Log.getStackTraceString(new Throwable()));</rich_text>
			<rich_text>
143            Callback cb = mCallbacks.remove(callback.asBinder());
144            if (cb != null) {
145                cb.mCallback.asBinder().unlinkToDeath(cb, 0);
146                return true;
147            }
148            return false;
149        }
150    

     刷了本地添加LOG的版本跑了一段Telephony， 一直出现下面的Log.
      其中注册</rich_text>
			<rich_text weight="heavy">RemoteCallbackList</rich_text>
			<rich_text>为WallpaperManagerService ， 打开代码确实没有unregister代码，但是变量本身为局部变量，所以不确定是否最终会造成内存泄漏。
      
      03-07 18:13:35.143  1402  6214 E RemoteCallbackList:      java.lang.Throwable
      03-07 18:13:35.143  1402  6214 E RemoteCallbackList:     at      android.os.RemoteCallbackList.register(RemoteCallbackList.java:112)
      03-07 18:13:35.143  1402  6214 E RemoteCallbackList:     at      android.os.RemoteCallbackList.register(RemoteCallbackList.java:79)
      03-07 18:13:35.143  1402  6214 E RemoteCallbackList:     atcom.android.server.wallpaper.WallpaperManagerService.getWallpaper(WallpaperManagerService.java:854)
      03-07 18:13:35.143  1402  6214 E RemoteCallbackList:     atandroid.app.IWallpaperManager$Stub.onTransact(IWallpaperManager.java:101)
      03-07 18:13:35.143  1402  6214 E RemoteCallbackList:     at      android.os.Binder.execTransact(Binder.java:453)
      03-07 18:13:35.244  1402  6206 E RemoteCallbackList:      java.lang.Throwable
      03-07 18:13:35.244  1402  6206 E RemoteCallbackList:     at      android.os.RemoteCallbackList.register(RemoteCallbackList.java:112)
      03-07 18:13:35.244  1402  6206 E RemoteCallbackList:     at      android.os.RemoteCallbackList.register(RemoteCallbackList.java:79)
      03-07 18:13:35.244  1402  6206 E RemoteCallbackList:     atcom.android.server.wallpaper.WallpaperManagerService.getWallpaper(WallpaperManagerService.java:854)
      03-07 18:13:35.244  1402  6206 E RemoteCallbackList:     atandroid.app.IWallpaperManager$Stub.onTransact(IWallpaperManager.java:101)
      03-07 18:13:35.244  1402  6206 E RemoteCallbackList:     at      android.os.Binder.execTransact(Binder.java:453)
      
      
      用下面的脚本去测试， 发现也会跑出上面的日志，后来发现是开启了Paralax的Launcher不知到什么原因，一回到桌面就会触发壁纸切换的动作
       #!/bin/bash
      
      for((i=0;i&lt;1000000000000000;i++))
      do
      adb shell input keyevent KEYCODE_APP_SWITCH
      sleep 1
      adb shell input keyevent KEYCODE_APP_SWITCH
      done
      
      问题处在WallpaperManagerService的getWallpaper中，每一次调用都会进行一次注册， 而在wallpapaerManagger.getCurrentWallpaperLocked进行客户端的调用，如果发现成员变量wallpaper和defaultwallpaper为null，就会调用mService.getWallpaper从而导致注册， 而什么时候会使得成员变量wallpaper和defaultwallpaper为null，就是触发onWallpaperChanged的时候，在Nexus 5也会出现这样的问题。
      

WallpaperManager -&gt; getDrawable()
                            -&gt;sGlobals.peekWallpaperBitmap
                            -&gt;peekWallpaperBitmap
                            -&gt;getCurrentWallpaperLocked
                            -&gt;mService.getWallpaper
WallpaperManagerService.getWallpaper()                        


Fix：




 </rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="ANR-Bug" prog_lang="custom-colors" readonly="False" tags="" unique_id="64">
			<rich_text scale="h2" weight="heavy">1. JRD-LOG systemui anr Defect-1714561</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#ffff00000000" weight="heavy"> Broadcast of Intent { act=android.intent.action.TIME_TICK flg=0x50000014 (has extras) }</rich_text>
			<rich_text>
 推测可能是由于LOG打印过多
 
System-UI-anr 
&quot;main&quot; prio=5 tid=1 Runnable
  | group=&quot;main&quot; sCount=0 dsCount=0 obj=0x758d7fa0 self=0x55a7f002b0
  | sysTid=7107 nice=0 cgrp=default sched=0/0 handle=0x7f835d4fe8
  | state=R schedstat=( 177728387395 43136397792 295760 ) utm=14018 stm=3754 core=4 HZ=100
  | stack=0x7fef71a000-0x7fef71c000 stackSize=8MB
  | held mutexes= &quot;mutator lock&quot;(shared held)
  at android.os.MessageQueue.removeMessages(MessageQueue.java:651)
  - locked &lt;0x007d1347&gt; (a android.os.MessageQueue)
  at android.os.Handler.removeMessages(Handler.java:648)
  at android.view.ViewRootImpl.cancelInvalidate(ViewRootImpl.java:6634)
  at android.view.View.cleanupDraw(View.java:14453)
  at android.view.View.onDetachedFromWindowInternal(View.java:14446)
  at android.view.View.dispatchDetachedFromWindow(View.java:14608)
  at android.view.ViewGroup.dispatchDetachedFromWindow(ViewGroup.java:3085)
  at android.view.ViewGroup.dispatchDetachedFromWindow(ViewGroup.java:3085)
  at android.view.ViewGroup.dispatchDetachedFromWindow(ViewGroup.java:3085)
  at android.view.ViewGroup.removeViewInternal(ViewGroup.java:4631)
  at android.view.ViewGroup.removeViewInternal(ViewGroup.java:4604)
  at android.view.ViewGroup.removeView(ViewGroup.java:4535)
</rich_text>
			<rich_text weight="heavy">  at com.android.systemui.statusbar.stack.NotificationStackScrollLayout.changeViewPosition(NotificationStackScrollLayout.java:1940)
  at com.android.systemui.statusbar.phone.PhoneStatusBar.updateNotificationShade(PhoneStatusBar.java:1711)
  at com.android.systemui.statusbar.phone.PhoneStatusBar.updateNotifications(PhoneStatusBar.java:1839)
  at com.android.systemui.statusbar.BaseStatusBar.addNotificationViews(BaseStatusBar.java:1848)
  at com.android.systemui.statusbar.phone.PhoneStatusBar.addNotification(PhoneStatusBar.java:1543)
  at com.android.systemui.statusbar.BaseStatusBar$6$2.run(BaseStatusBar.java:510)</rich_text>
			<rich_text>
  at android.os.Handler.handleCallback(Handler.java:739)
  at android.os.Handler.dispatchMessage(Handler.java:95)
  at android.os.Looper.loop(Looper.java:148)
  at android.app.ActivityThread.main(ActivityThread.java:5515)
  at java.lang.reflect.Method.invoke!(Native method)
  at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:764)
  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:654)



</rich_text>
			<rich_text scale="h2" weight="heavy">2. JRD-LOG system-ui ANR Defect-1841751</rich_text>
			<rich_text>

</rich_text>
			<rich_text foreground="#ffff00000000" weight="heavy">Input dispatching timed out</rich_text>
			<rich_text foreground="#ffff00000000"> (Waiting  to send non-key event because the touched window has not finished  processing certain input events that were delivered to it over 500.0ms  ago.  Wait queue length: 9.  Wait queue head age: 5532.6ms.</rich_text>
			<rich_text>
 
也许是主线程isVRMode函数IPC通讯出现了block

&quot;main&quot; prio=5 tid=1 Native
  | group=&quot;main&quot; sCount=1 dsCount=0 obj=0x747c8fa0 self=0x55b0e342b0
  | sysTid=5907 nice=0 cgrp=default sched=0/0 handle=0x7fb107efe8
  | state=S schedstat=( 25645923493 6253278725 50824 ) utm=1985 stm=579 core=0 HZ=100
  | stack=0x7fdf88e000-0x7fdf890000 stackSize=8MB
  | held mutexes=
  kernel: __switch_to+0x70/0x7c
  kernel: binder_thread_read+0x468/0xec8
  kernel: binder_ioctl_write_read+0x178/0x24c
  kernel: binder_ioctl+0x2b0/0x5e0
  kernel: do_vfs_ioctl+0x4a4/0x578
  kernel: SyS_ioctl+0x5c/0x88
  kernel: cpu_switch_to+0x48/0x4c
  native: #00 pc 000000000006ac90  /system/lib64/libc.so (__ioctl+4)
  native: #01 pc 0000000000074cb4  /system/lib64/libc.so (ioctl+100)
  native: #02 pc 000000000002d498  /system/lib64/libbinder.so (android::IPCThreadState::talkWithDriver(bool)+164)
   native: #03 pc 000000000002df70  /system/lib64/libbinder.so  (android::IPCThreadState::waitForResponse(android::Parcel*, int*)+104)
   native: #04 pc 000000000002e1e4  /system/lib64/libbinder.so  (android::IPCThreadState::transact(int, unsigned int, android::Parcel  const&amp;, android::Parcel*, unsigned int)+176)
  native: #05 pc  00000000000255f4  /system/lib64/libbinder.so  (android::BpBinder::transact(unsigned int, android::Parcel const&amp;,  android::Parcel*, unsigned int)+64)
  native: #06 pc 00000000000e1108  /system/lib64/libandroid_runtime.so (???)
   native: #07 pc 000000000135b384  /system/framework/arm64/boot.oat  (Java_android_os_BinderProxy_transactNative__ILandroid_os_Parcel_2Landroid_os_Parcel_2I+200)
  at android.os.BinderProxy.transactNative(Native method)
  at android.os.BinderProxy.transact(Binder.java:503)
</rich_text>
			<rich_text weight="heavy">  at android.content.pm.IVrGlass$Stub$Proxy.isVRMode(IVrGlass.java:135)
  at android.content.pm.VrGlassManager.isVRMode(VrGlassManager.java:98)</rich_text>
			<rich_text>
  at android.view.ViewRootImpl$ViewPostImeInputStage.processPointerEvent(ViewRootImpl.java:4552)
  at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:4261)
  at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3794)
  at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3847)
  at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3813)
  at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:3939)
  at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3821)
  at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:3996)
  at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3794)
  at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3847)
  at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3813)
  at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3821)
  at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3794)
  at android.view.ViewRootImpl.deliverInputEvent(ViewRootImpl.java:6376)
  at android.view.ViewRootImpl.doProcessInputEvents(ViewRootImpl.java:6350)
  at android.view.ViewRootImpl.enqueueInputEvent(ViewRootImpl.java:6311)
  at android.view.ViewRootImpl$WindowInputEventReceiver.onInputEvent(ViewRootImpl.java:6479)
  at android.view.InputEventReceiver.dispatchInputEvent(InputEventReceiver.java:185)
  at android.os.MessageQueue.nativePollOnce(Native method)
  at android.os.MessageQueue.next(MessageQueue.java:323)
  at android.os.Looper.loop(Looper.java:135)
  at android.app.ActivityThread.main(ActivityThread.java:5515)
  at java.lang.reflect.Method.invoke!(Native method)
  at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:764)
  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:654)

      这个Bug System UI ANR , 从trace来看，是由于isVrMode    在IPC通讯的时候出现了堵塞。但是我自己也单独测试过，一般IPC通讯耗时零点几毫秒，毕竟这是Android非常常用的调用方式，所有的    service服务都需要依赖这种方式通讯。正常情况下跑的时候这个isVRMode耗时是不会超过1ms的，所以代码是没有问题的.
             出现这样的问题可能是Android系统整体架构上的问题，也有可能是之前那几个版本Log打印过多造成CPU、内存占用过大导致，毕竟那几个版本出现了    许多莫名的ANR. 考虑到4A29这个版本比较老，后来也没有出现过这种IPC通信导致的ANR（也许归功与Log的清理），是否可以考虑关闭此BUG.
             
</rich_text>
			<rich_text scale="h2" weight="heavy">3. </rich_text>
			<rich_text foreground="#1F497D" scale="h2" weight="heavy">Defcet-1929954</rich_text>
			<rich_text scale="h2" weight="heavy">     [stability][wifi][ANR]ANR in com.facebook.appmanager</rich_text>
			<rich_text>

    显示是facebook的background anr
    2016-04-11 07:28:03,364 : 04-11 07:28:03.229  1422  1436 I       ActivityManager: Killing 5452:com.facebook.appmanager/u0a180 (adj       8): </rich_text>
			<rich_text weight="heavy">bg anr
       </rich_text>
			<rich_text>
    Root Cause:  连接网站超时...  应该是当时这个ip地址无法访问把，       导致了客户端挂掉了，facebook没处理好，处于应用内部问题
     
    2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452): Sessionless gatekeeper       fetch with SingleMethodRunner failed
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):       org.apache.http.conn.ConnectTimeoutException:</rich_text>
			<rich_text weight="heavy"> Connect to         /37.61.54.158:443 timed out</rich_text>
			<rich_text>
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at org.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:126)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:149)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at org.apache.http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:169)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at org.apache.http.impl.conn.AbstractPooledConnAdapter.open(AbstractPooledConnAdapter.java:124)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:370)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:560)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:492)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:470)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at       android.net.http.AndroidHttpClient.execute(AndroidHttpClient.java:250)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at       com.facebook.http.common.ae.a(FbHttpRequestProcessor.java:477)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at       com.facebook.http.common.ae.c(FbHttpRequestProcessor.java:398)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at       com.facebook.http.common.ae.b(FbHttpRequestProcessor.java:342)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at       com.facebook.http.common.ae.a(FbHttpRequestProcessor.java:328)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at       com.facebook.http.common.ae.a(FbHttpRequestProcessor.java:256)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at       com.facebook.http.common.ae.a(FbHttpRequestProcessor.java:1183)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at       com.facebook.http.common.ai.run(FbHttpRequestProcessor.java:1204)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at       java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:423)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at       com.facebook.common.executors.dt.run(WrappingExecutorService.java:77)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at       java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:423)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at       java.util.concurrent.FutureTask.run(FutureTask.java:237)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at com.facebook.common.executors.aa.run(DefaultConstrainedListeningExecutorService.java:327)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at       com.facebook.common.executors.cs.run(NamedThreadFactory.java:42)
       2016-04-11 07:27:55,829 : 04-11 07:27:55.700       E/appmanager(:&lt;default&gt;):p( 5452):     at       java.lang.Thread.run(Thread.java:818) 



</rich_text>
			<rich_text scale="h2" weight="heavy">4. Defect-1956205 [monkey][system][com.tcl.gc]ANR in com.tcl.gc</rich_text>
			<rich_text>
01-01 07:59:25.538 E/ActivityManager( 1354): ANR in com.tcl.gc (com.tcl.gc/.activity.StartupActivity)
01-01  07:59:25.538 E/ActivityManager( 1354): Reason: Input dispatching timed  out (Waiting because no window has focus but there is a focused  application that may eventually add a window when it finishes starting  up.)

Log反复打印
01-01 07:52:48.713 E/ActivityThread(13239): </rich_text>
			<rich_text weight="heavy">Failed to find provider info for</rich_text>
			<rich_text> com.tct.gapp.middleman
01-01 07:52:48.714 I/PhoneInterfaceManager( 3583): </rich_text>
			<rich_text weight="heavy">callingPackage=</rich_text>
			<rich_text> com.tcl.gc
01-01 07:52:48.722 E/ActivityThread(13239): Failed to find provider info for com.tct.gapp.middleman
01-01 07:52:48.722 I/PhoneInterfaceManager( 3583): callingPackage= com.tcl.gc
01-01 07:52:48.725 E/ActivityThread(13239): Failed to find provider info for com.tct.gapp.middleman
01-01 07:52:48.774 W/Activity(13239): </rich_text>
			<rich_text weight="heavy">Can reqeust only one set of permissions at a time</rich_text>
			<rich_text>

相关trace空缺，猜测一下把：
[猜测]
1.com.tct.gapp.middleman获取到了申请权限的锁，请求provider , 但似乎provider被 com.tcl.gc获取到，所以请求失败，继续请求    
   01-01 07:52:48.713 E/ActivityThread(13239): </rich_text>
			<rich_text weight="heavy">Failed to find provider info for</rich_text>
			<rich_text> com.tct.gapp.middleman
2. com.tcl.gc 获取到了provider，因为什么原因需要申请权限，请求权限锁  
   01-01 07:52:48.714 I/PhoneInterfaceManager( 3583): </rich_text>
			<rich_text weight="heavy">callingPackage=</rich_text>
			<rich_text> com.tcl.gc
   01-01 07:52:48.774 W/Activity(13239): </rich_text>
			<rich_text weight="heavy">Can reqeust only one set of permissions at a time</rich_text>
			<rich_text>
3.两者相互依赖发生死锁

复现以后发现trace如下，为com.tcl.gc.activity.StartupActivity.这个应用的问题
at android.app.Activity.requestPermissions(Activity.java:4009)
  at com.tcl.gc.permission.IPermissionAction.interrupt(IPermissionAction.java:78)
  at com.tcl.gc.permission.IAction.run(IAction.java:32)
  at com.tcl.gc.permission.IAction.runChild(IAction.java:39)
  at com.tcl.gc.permission.IPermissionAction.doAction(IPermissionAction.java:140)
  at com.tcl.gc.permission.IPermissionAction.onRequestPermissionsResult(IPermissionAction.java:128)
  at com.tcl.gc.activity.StartupActivity.onRequestPermissionsResult(StartupActivity.java:118)
  at android.app.Activity.</rich_text>
			<rich_text weight="heavy">requestPermissions</rich_text>
			<rich_text>(Activity.java:4009)
  at com.tcl.gc.permission.IPermissionAction.interrupt(IPermissionAction.java:78)
  at com.tcl.gc.permission.IAction.run(IAction.java:32)
  at com.tcl.gc.permission.IAction.runChild(IAction.java:39)
  at com.tcl.gc.permission.IPermissionAction.doAction(IPermissionAction.java:140)
  at com.tcl.gc.permission.IPermissionAction.onRequestPermissionsResult(IPermissionAction.java:128)
  at com.tcl.gc.activity.StartupActivity.onRequestPermissionsResult(StartupActivity.java:118)
  at android.app.Activity.</rich_text>
			<rich_text weight="heavy">requestPermissions</rich_text>
			<rich_text>(Activity.java:4009)
  at com.tcl.gc.permission.IPermissionAction.interrupt(IPermissionAction.java:78)
  at com.tcl.gc.permission.IAction.run(IAction.java:32)
  at com.tcl.gc.permission.IAction.runChild(IAction.java:39)
  at com.tcl.gc.permission.IPermissionAction.doAction(IPermissionAction.java:140)
  at com.tcl.gc.permission.IPermissionAction.onRequestPermissionsResult(IPermissionAction.java:128)
  at com.tcl.gc.activity.StartupActivity.onRequestPermissionsResult(StartupActivity.java:118)
  at android.app.Activity.</rich_text>
			<rich_text weight="heavy">requestPermissions</rich_text>
			<rich_text>(Activity.java:4009)
  at com.tcl.gc.permission.IPermissionAction.interrupt(IPermissionAction.java:78)
  at com.tcl.gc.permission.IAction.run(IAction.java:32)
  at com.tcl.gc.activity.StartupActivity.</rich_text>
			<rich_text weight="heavy">onResume</rich_text>
			<rich_text>(StartupActivity.java:212)
  at android.app.Instrumentation.callActivityOnResume(Instrumentation.java:1279)
  at android.app.Activity.performResume(Activity.java:6524)
 




</rich_text>
			<rich_text scale="h2" weight="heavy">
5.Defect-1992258 [Stability][messaging][anr]ANR in com.android.mms, Input dispatching timed out</rich_text>
			<rich_text>

查看main Log发现在 </rich_text>
			<rich_text foreground="#FF0000" weight="heavy">13:22:24.684</rich_text>
			<rich_text> 之前 ， 应用其实已经出现了不能点击的情况
此时应该是UIautomator在Mms中拍摄录像结束后准备点击完成的按钮，确发现一直无法点击到

2016-04-25 13:21:08,056 : 04-25 13:21:08.473 W/JsonRpcServer( 6312): Error in JSON-RPC Service
2016-04-25 13:21:08,056 : 04-25 13:21:08.473 W/JsonRpcServer( 6312): java.lang.reflect.InvocationTargetException
2016-04-25 13:21:08,056 : 04-25 13:21:08.473 W/JsonRpcServer( 6312):     at java.lang.reflect.Method.invoke(Native Method)
2016-04-25  13:21:08,056 : 04-25 13:21:08.473 W/JsonRpcServer( 6312):     at  com.googlecode.jsonrpc4j.JsonRpcServer.invoke(JsonRpcServer.java:513)
2016-04-25  13:21:08,056 : 04-25 13:21:08.473 W/JsonRpcServer( 6312):     at  com.googlecode.jsonrpc4j.JsonRpcServer.handleObject(JsonRpcServer.java:384)
2016-04-25  13:21:08,056 : 04-25 13:21:08.473 W/JsonRpcServer( 6312):     at  com.googlecode.jsonrpc4j.JsonRpcServer.handleNode(JsonRpcServer.java:293)
2016-04-25  13:21:08,056 : 04-25 13:21:08.473 W/JsonRpcServer( 6312):     at  com.googlecode.jsonrpc4j.JsonRpcServer.handle(JsonRpcServer.java:230)
2016-04-25  13:21:08,056 : 04-25 13:21:08.473 W/JsonRpcServer( 6312):     at  com.github.uiautomatorstub.AutomatorHttpServer.serve(AutomatorHttpServer.java:70)
2016-04-25 13:21:08,056 : 04-25 13:21:08.473 W/JsonRpcServer( 6312):     at fi.iki.elonen.NanoHTTPD.serve(NanoHTTPD.java:298)
2016-04-25  13:21:08,056 : 04-25 13:21:08.473 W/JsonRpcServer( 6312):     at  fi.iki.elonen.NanoHTTPD$HTTPSession.execute(NanoHTTPD.java:922)
2016-04-25 13:21:08,056 : 04-25 13:21:08.473 W/JsonRpcServer( 6312):     at fi.iki.elonen.NanoHTTPD$1$1.run(NanoHTTPD.java:175)
2016-04-25 13:21:08,056 : 04-25 13:21:08.473 W/JsonRpcServer( 6312):     at java.lang.Thread.run(Thread.java:818)
2016-04-25  13:21:08,056 : 04-25 13:21:08.473 W/JsonRpcServer( 6312): Caused by:  com.android.uiautomator.core.UiObjectNotFoundException:  UiSelector[RESOURCE_ID=</rich_text>
			<rich_text foreground="#FF0000" weight="heavy">com.android.mms:id/button_done</rich_text>
			<rich_text>]
2016-04-25  13:21:08,056 : 04-25 13:21:08.473 W/JsonRpcServer( 6312):     at  com.android.uiautomator.core.UiObject.click(UiObject.java:396)
2016-04-25  13:21:08,056 : 04-25 13:21:08.473 W/JsonRpcServer( 6312):     at  com.github.uiautomatorstub.AutomatorServiceImpl.click(AutomatorServiceImpl.java:574)
2016-04-25 13:21:08,056 : 04-25 13:21:08.473 W/JsonRpcServer( 6312):     ... 10 more 

 
main Log

2016-04-25 </rich_text>
			<rich_text foreground="#FF0000" weight="heavy">13:15:03,519 </rich_text>
			<rich_text>: 04-25 13:15:03.933 E/QueryController( 6312): Got null root node from accessibility - Retrying...
... ... 
2016-04-25 13:22:13,748 : 04-25 13:22:14.170 E/QueryController( 6312): Got null root node from accessibility - Retrying...
2016-04-25 13:22:19,005 : 04-25 13:22:19.421 E/QueryController( 6312): Got null root node from accessibility - Retrying...
2016-04-25 </rich_text>
			<rich_text foreground="#FF0000" weight="heavy">13:22:24,262</rich_text>
			<rich_text> : 04-25 13:22:24.673 E/QueryController( 6312): Cannot proceed when root node is null. Aborted search

 
也就是说其实在 </rich_text>
			<rich_text foreground="#FF0000" weight="heavy">13:22:24,262  </rich_text>
			<rich_text foreground="#000000">这个时间节点，应用已经是处于无法触摸状态了， 此时自动化测试工具发送了一个KeyCode4（返回按键）的Event， 过了5s以后， 才报出MMS anr. </rich_text>
			<rich_text>
所以要真正了解为什么会出现ANR， 需要知道</rich_text>
			<rich_text foreground="#FF0000" weight="heavy">13:15:03,519 </rich_text>
			<rich_text foreground="#000000" weight="heavy">到</rich_text>
			<rich_text foreground="#000000"> </rich_text>
			<rich_text foreground="#FF0000" weight="heavy">13:22:24,262</rich_text>
			<rich_text> 之前做了一些什么操作让Mms处于假死状态
 
-------------------------------


首先查看 </rich_text>
			<rich_text foreground="#FF0000" weight="heavy">13:15:03</rich_text>
			<rich_text>  之前的时间点发生了什么事情：
 
2016-04-25 13:14:40,961 : 04-25 13:14:41.382  1415  4436 I ActivityManager: Process com.android.contacts (pid 20155) has died 
2016-04-25  13:14:44,393 : 04-25 13:14:44.815  1415  4460 I ActivityManager:  Process com.google.android.youtube (pid 24215) has died
2016-04-25 13:15:00,602 : 04-25 13:15:01.015  1415  1430 I ActivityManager: Start proc 24590:com.google.android.deskclock/u0a124 for broadcast com.google.android.deskclock/com.android.alarmclock.DigitalAppWidgetProvider
2016-04-25 13:15:00,695 : 04-25 13:15:01.111  1415  4436 I ActivityManager: Process com.android.mms (pid 2472) has died2016-04-25 13:15:00,742 : 04-25 13:15:01.153  1415  1427 I ActivityManager: Process android.process.acore (pid 13410) has died


2016-04-25 13:20:31,849 : 160425 13:20:31.848: [INFO] [Message] [save_send_draft] recipient is Auto10010
2016-04-25 </rich_text>
			<rich_text weight="heavy">13:20:34,953</rich_text>
			<rich_text> : 160425 13:20:34.953: [INFO] [Message] [save_send_draft] save a  video mms
2016-04-25 13:21:30,193 : 160425 13:21:30.193: [ERROR] [Message] [case_send_draft] JsonRPC Error code: -32002, Message: com.android.uiautomator.core.UiObjectNotFoundException: UiSelector[RESOURCE_ID=com.android.mms:id/button_done]
2016-04-25 13:21:30,193 : 160425 13:21:30.193: [DEBUG] [Message] [save_fail_img] Take snapshot.
2016-04-25 13:21:31,394 : 160425 13:21:31.394: [ERROR] [Message] [save_fail_img] Fail: C:\Program Files\TAT\Logs\2cd0de2b\20160422201246\2016-04-25-13-21-30.p




原来是Mms中下面的代码有问题，启动了一个线程却用了obj作为锁，还是会锁住主线程的代码

1376        public void stopVideoRecording(boolean delete) {
1377            TctMmsLog.v(TAG, &quot;stopVideoRecording&quot;);
1378            // [BUGFIX]-Add-BEGIN by AMNJ.meng.peng,12/10/2015,1059817 ,
1379            // [Android6.0][FM Radio_v5.1.6.1.0314.0] FM not stop when take
1380            // vedio attachment in message
1381            /* MODIFIED-BEGIN by meng.peng, 2016-03-25,BUG-1863242 */
1382            if (mAudioManager != null) {
1383                mAudioManager.abandonAudioFocus(this);
1384            }
1385            /* MODIFIED-END by meng.peng,BUG-1863242 */
1386            // [BUGFIX]-Add-END by AMNJ.meng.peng
</rich_text>
			<rich_text foreground="#ffff00000000" weight="heavy">1387            final Object obj = new Object();</rich_text>
			<rich_text>
1388            new Thread(new Runnable() {
1389                @Override
1390                public void run() {
</rich_text>
			<rich_text foreground="#ffff00000000" weight="heavy">1391                    synchronized (obj) {</rich_text>
			<rich_text>
1392                        try {
1393                            mMediaRecorder.setOnErrorListener(null);
1394                            mMediaRecorder.setOnInfoListener(null);
1395                            mMediaRecorder.stop();
1396                         // [BUGFIX]-ADD-BEGIN by AMNJ.jing.ji,17/12/2015,PR-1133108
1397                            StringBuffer videoPath = new StringBuffer();
1398                            videoPath.append(&quot;file://&quot;).append(
1399                                    mVideoFile.getAbsolutePath());
1400                            Uri uri = Uri.parse(videoPath.toString());
1401                            mUI.mUri = uri;
1402                            mStopFlag = true;
1403                         // [BUGFIX]-ADD-END by AMNJ.jing.ji,17/12/2015,PR-1133108
1404                        } catch (Exception e) {// MODIFIED by meng.peng, 2016-03-25,BUG-1863242
1405                            TctMmsLog.e(TAG, &quot;stop fail&quot;, e);
1406                            mVideoFile = null;
1407                        } finally {
1408                            obj.notify();
1409                            mMediaRecorderRecording = false;
1410                        }
1411                    }
1412                }
1413            }).start();
1414
</rich_text>
			<rich_text foreground="#ffff00000000" weight="heavy">1415            synchronized (obj) {</rich_text>
			<rich_text>
1416                try {
1417                    obj.wait();
1418                } catch (InterruptedException ex) {
1419                    TctMmsLog.e(TAG, &quot;Failed to interrup&quot;, ex);
1420                }
1421                if (mVideoFile != null) {
1422                    if (!delete) {
1423                        mUI.showCapturedImageForReview(mVideoFile.getAbsolutePath(),
1424                                mSelectPanel, mControlPanel);
1425                    } else {
1426                        mVideoFile.delete();
1427                        mVideoFile = null;
1428                    }
1429                }
1430            }
1431            //mSwitcher.setVisibility(View.VISIBLE);
1432            //mRecordTimeTextView.setVisibility(View.GONE);//[BUGFIX]-Del by AMNJ.jin.liu1, 2015/01/18,ALM-1564881
1433            //[BUGFIX]-Add BEGIN by AMNJ.jin.liu1, 2015/01/18,ALM-1401576
1434            mRecordingStopedTime = SystemClock.uptimeMillis();
1435            mRecordingStartTime = 0;
1436            //[BUGFIX]-Add END by AMNJ.jin.liu1, 2015/01/18,ALM-1401576
1437        }




</rich_text>
			<rich_text scale="h2" weight="heavy">6.Defect-2127398 google map anr</rich_text>
			<rich_text>

        </rich_text>
			<rich_text scale="h2" weight="heavy">内存泄漏造成的anr</rich_text>
			<rich_text>
        </rich_text>
			<rich_text scale="h2">应该是GMS内部错误造成的ANR</rich_text>
			<rich_text>
         
        1. </rich_text>
			<rich_text weight="heavy">trace显示主线程一直在等待GC</rich_text>
			<rich_text>&quot;main&quot; prio=5 tid=1 </rich_text>
			<rich_text weight="heavy">WaitingPerformingGc</rich_text>
			<rich_text>
          | group=&quot;main&quot; sCount=1 dsCount=0 obj=0x74e75fa0 self=0x55b2b602b0
          | sysTid=8362 nice=0 cgrp=default sched=0/0 handle=0x7f7e932ff0
          | state=S schedstat=( 112477585347 33188831926 214605 ) utm=8857 stm=2390 core=4 HZ=100
          | stack=0x7fe3134000-0x7fe3136000 stackSize=8MB
          | held mutexes=
          kernel: __switch_to+0x70/0x7c
          kernel: futex_wait_queue_me+0xd4/0x12c
          kernel: futex_wait+0xdc/0x1e4
          kernel: do_futex+0xc8/0x8d0
          kernel: SyS_futex+0xf8/0x174
          kernel: cpu_switch_to+0x48/0x4c
          native: #00 pc 0000000000019980  /system/lib64/libc.so (syscall+28)
          native: #01 pc 000000000013a654  /system/lib64/libart.so (art::ConditionVariable::Wait(art::Thread*)+136)
           native: #02 pc 00000000002445e8  /system/lib64/libart.so  (art::gc::Heap::CollectGarbageInternal(art::gc::collector::GcType,  art::gc::GcCause, bool)+3972)
          native: #03 pc 0000000000247b8c   /system/lib64/libart.so  (art::gc::Heap::AllocateInternalWithGc(art::Thread*,  art::gc::AllocatorType, unsigned long, unsigned long*, unsigned long*,  unsigned long*, art::mirror::Class**)+568)
          native: #04 pc 000000000017a438  /system/lib64/libart.so (art::mirror::Class::AllocObject(art::Thread*)+268)
           native: #05 pc 0000000000367c80  /system/lib64/libart.so  (art::JNI::NewObjectV(_JNIEnv*, _jclass*, _jmethodID*,  std::__va_list)+888)
          native: #06 pc 000000000032d2b0  /system/lib64/libart.so (_JNIEnv::NewObject(_jclass*, _jmethodID*, ...)+124)
           native: #07 pc 000000000042f990  /system/lib64/libart.so  (art::InvokeMethod(art::ScopedObjectAccessAlreadyRunnable const&amp;,  _jobject*, _jobject*, _jobject*, unsigned long)+1036)
          native: #08 pc 00000000003c71ec  /system/lib64/libart.so (art::Method_invoke(_JNIEnv*, _jobject*, _jobject*, _jobject*)+40)
           native: #09 pc 0000000000350ab4  /system/framework/arm64/boot.oat  (Java_java_lang_reflect_Method_invoke__Ljava_lang_Object_2_3Ljava_lang_Object_2+184)
          at java.lang.reflect.Method.invoke!(Native method)
          at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:764)
          at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:654)  
         

        </rich_text>
			<rich_text weight="heavy">2.LOG显示在出现ANR前持续初次按starting a blocking GC 以及waiting GC
</rich_text>
			<rich_text>        2016-05-11 06:55:17,253 : 05-11 06:55:17.176 I/art     ( 8362): Clamp target GC heap from 515MB to 512MB
        2016-05-11 06:55:17,409 : 05-11 06:55:17.338 I/art     ( 8362): Starting a blocking GC Alloc
        2016-05-11 06:55:17,409 : 05-11 06:55:17.338 I/art     ( 8362): Starting a blocking GC Alloc
        2016-05-11  06:55:17,440 : 05-11 06:55:17.361 I/art     ( 8362): Alloc sticky  concurrent mark sweep GC freed 3729(373KB) AllocSpace objects, 0(0B) LOS  objects, 0% free, 510MB/512MB, paused 1.717ms total 22.643ms
        2016-05-11 06:55:17,440 : 05-11 06:55:17.361 I/art     ( 8362): Starting a blocking GC Alloc
        2016-05-11 06:55:17,534 : 05-11 06:55:17.464 I/art     ( 8362): Clamp target GC heap from 521MB to 512MB
        2016-05-11  06:55:17,534 : 05-11 06:55:17.465 I/art     ( 8362): Alloc partial  concurrent mark sweep GC freed 1369(81KB) AllocSpace objects, 4(4MB) LOS  objects, 1% free, 505MB/512MB, paused 706us total 103.654ms
        2016-05-11 06:55:17,596 : 05-11 06:55:17.519 I/art     ( 8362): Starting a blocking GC Alloc
        2016-05-11 06:55:17,596 : 05-11 06:55:17.519 I/art     ( 8362): Starting a blocking GC Alloc
        2016-05-11  06:55:17,596 : 05-11 06:55:17.526 I/art     ( 8362): Alloc sticky  concurrent mark sweep GC freed 1089(151KB) AllocSpace objects, 0(0B) LOS  objects, 0% free, 508MB/512MB, paused 563us total 6.265ms
        2016-05-11 06:55:17,596 : 05-11 06:55:17.526 I/art     ( 8362): Starting a blocking GC Alloc
        2016-05-11 06:55:17,706 : 05-11 06:55:17.636 I/art     ( 8362): Clamp target GC heap from 519MB to 512MB
        2016-05-11  06:55:17,706 : 05-11 06:55:17.636 I/art     ( 8362): Alloc partial  concurrent mark sweep GC freed 2130(178KB) AllocSpace objects, 3(4MB)  LOS objects, 1% free, 503MB/512MB, paused 793us total 109.846ms
        2016-05-11 06:55:17,784 : 05-11 06:55:17.706 I/art     ( 8362): Starting a blocking GC Alloc
        2016-05-11 06:55:17,784 : 05-11 06:55:17.707 I/art     ( 8362): Starting a blocking GC Alloc
        2016-05-11  06:55:17,784 : 05-11 06:55:17.713 I/art     ( 8362): Alloc sticky  concurrent mark sweep GC freed 1216(107KB) AllocSpace objects, 0(0B) LOS  objects, 0% free, 510MB/512MB, paused 579us total 6.039ms
        2016-05-11 06:55:17,784 : 05-11 06:55:17.713 I/art     ( 8362): Starting a blocking GC Alloc
        2016-05-11 06:55:17,893 : 05-11 06:55:17.817 I/art     ( 8362): Clamp target GC heap from 526MB to 512MB
        2016-05-11  06:55:17,893 : 05-11 06:55:17.817 I/art     ( 8362): Alloc partial  concurrent mark sweep GC freed 1022(77KB) AllocSpace objects, 0(0B) LOS  objects, 0% free, 510MB/512MB, paused 648us total 104.331ms
        2016-05-11 06:55:17,893 : 05-11 06:55:17.817 I/art     ( 8362): Starting a blocking GC Alloc
        2016-05-11 06:55:17,940 : 05-11 06:55:17.860 D/AES     ( 1393): RT Monitor ERROR: open /dev/RT_Monitor failed.
         
        </rich_text>
			<rich_text weight="heavy"> </rich_text>
			<rich_text>
        </rich_text>
			<rich_text weight="heavy">3.往前查看发现GC的block是从下面的Log开始， 而下面的Log显示com.google.android.apps.gmm.navigation.ui.guidednav.views.SqueezedLabelView错误地调用了requestLayout()</rich_text>
			<rich_text>2016-05-11 06:55:14,237 : 05-11 06:55:14.162 W/View    ( 8362):</rich_text>
			<rich_text weight="heavy"> requestLayout() improperly called by com.google.android.apps.gmm.navigation.ui.guidednav.views.SqueezedLabelView</rich_text>
			<rich_text>{adadbf2  V.ED..... ......ID 0,0-764,160 #7f0e01f3  app:id/navigation_stepcuefirstline_textbox} during layout: running  second layout pass
        2016-05-11 06:55:14,237 : 05-11 06:55:14.162  W/View    ( 8362): requestLayout() improperly called by  com.google.android.apps.gmm.navigation.ui.guidednav.views.SqueezedLabelView{95d24b5  V.ED..... ......ID 0,0-1028,160 #7f0e01f3  app:id/navigation_stepcuefirstline_textbox} during layout: running  second layout pass
        2016-05-11 06:55:14,925 : 05-11 06:55:14.851  I/art     ( 8362): Background partial concurrent mark sweep GC freed  14806(962KB) AllocSpace objects, 32(10MB) LOS objects, 3% free,  408MB/424MB, paused 949us total 105.874ms
         
        </rich_text>
			<rich_text weight="heavy">4.所以应该是GMS内部错误造成的ANR </rich_text>
			<rich_text>


        ---
        发生ANR的时候存在内存泄露，手机的内存非常紧张
         
           580321 kB: com.google.android.apps.maps (pid 8362 / activities)

           336591 kB: com.android.settings (pid 2236 / activities)
         

        Setting中也存在内存泄漏
         
        </rich_text>
			<rich_text background="#ffffe1" foreground="#000000">105 instances of </rich_text>
			<rich_text weight="heavy">&quot;com.android.settings.applications.InstalledAppDetails&quot;</rich_text>
			<rich_text background="#ffffe1" foreground="#000000">, loaded by </rich_text>
			<rich_text weight="heavy">&quot;dalvik.system.PathClassLoader @ 0x12f80ba0&quot;</rich_text>
			<rich_text background="#ffffe1" foreground="#000000"> </rich_text>
			<rich_text>occupy </rich_text>
			<rich_text weight="heavy">286,056,504 (76.41%)</rich_text>
			<rich_text background="#ffffe1" foreground="#000000">bytes. These instances are referenced from one instance of </rich_text>
			<rich_text weight="heavy">&quot;java.lang.Object[]&quot;</rich_text>
			<rich_text background="#ffffe1" foreground="#000000">, loaded by </rich_text>
			<rich_text weight="heavy">&quot;&lt;system class loader&gt;&quot;</rich_text>
			<rich_text>

        </rich_text>
			<rich_text weight="heavy">Keywords</rich_text>
			<rich_text>
        </rich_text>
			<rich_text background="#ffffe1" foreground="#000000">dalvik.system.PathClassLoader @ 0x12f80ba0</rich_text>
			<rich_text>
        </rich_text>
			<rich_text background="#ffffe1" foreground="#000000">java.lang.Object[]</rich_text>
			<rich_text>
        </rich_text>
			<rich_text background="#ffffe1" foreground="#000000">com.android.settings.applications.InstalledAppDetails</rich_text>
			<rich_text>


</rich_text>
			<rich_text weight="heavy">7。</rich_text>
			<rich_text foreground="#000000" weight="heavy">3856456</rich_text>
			<rich_text weight="heavy"> [jrdlogger]com.google.android.apps.photos ANR</rich_text>
			<rich_text>
12-27 03:29:35.661  1515  1562 E ActivityManager: ANR in com.google.android.apps.photos (com.google.android.apps.photos/.pager.HostPhotoPagerActivity)
12-27 03:29:35.661  1515  1562 E ActivityManager: PID: 14807
12-27 03:29:35.661  1515  1562 E ActivityManager: Reason: Input dispatching timed out (Waiting to send non-key event because the touched window has not finished processing certain input events that were delivered to it over 500.0ms ago.  Wait queue length: 2.  Wait queue head age: 15460.5ms.)
12-27 03:29:35.661  1515  1562 E ActivityManager: Load: 5.62 / 5.59 / 5.43
12-27 03:29:35.661  1515  1562 E ActivityManager: CPU usage from 19422ms to 0ms ago (2016-12-27 03:29:13.771 to 2016-12-27 03:29:33.194) with 99% awake:
12-27 03:29:35.661  1515  1562 E ActivityManager:   5% 1515/system_server: 2.9% user + 2.1% kernel / faults: 1615 minor 3 major
12-27 03:29:35.661  1515  1562 E ActivityManager:   2.2% 357/msm-core:sampli: 0% user + 2.2% kernel
12-27 03:29:35.661  1515  1562 E ActivityManager:   1.7% 510/surfaceflinger: 0.7% user + 0.9% kernel / faults: 422 minor 1 major
12-27 03:29:35.661  1515  1562 E ActivityManager:   1.3% 286/irq/171-tsens_i: 0% user + 1.3% kernel
12-27 03:29:35.661  1515  1562 E ActivityManager:   1.3% 8687/com.android.systemui: 1% user + 0.3% kernel / faults: 746 minor
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.9% 13782/kworker/u16:8: 0% user + 0.9% kernel
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.8% 2269/com.google.android.gms.persistent: 0.6% user + 0.2% kernel / faults: 66 minor
12-27 03:29:35.661  1515  1562 E ActivityManager:   0% 664/audioserver: 0% user + 0% kernel / faults: 28 minor
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.4% 2795/com.google.android.gms: 0.4% user + 0% kernel / faults: 37 minor
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.4% 14831/kworker/u16:3: 0% user + 0.4% kernel
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.2% 398/logd: 0.2% user + 0% kernel / faults: 20 minor
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.2% 15155/com.android.documentsui: 0.1% user + 0.1% kernel / faults: 1651 minor 75 major
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.2% 132/kswapd0: 0% user + 0.2% kernel
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.2% 2668/com.blackberry.infrastructure: 0.1% user + 0% kernel / faults: 61 minor
12-27 03:29:35.661  1515  1562 E ActivityManager:   0% 4311/com.blackberry.infrastructure:com.blackberry.unifiedsync.process: 0% user + 0% kernel / faults: 275 minor 392 major
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.2% 12051/android.process.media: 0.2% user + 0% kernel / faults: 370 minor 77 major
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.2% 13779/kworker/u16:6: 0% user + 0.2% kernel
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.1% 3/ksoftirqd/0: 0% user + 0.1% kernel
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.1% 61/system: 0% user + 0.1% kernel
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.1% 1869/wpa_supplicant: 0.1% user + 0% kernel / faults: 178 minor
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.1% 2681/com.blackberry.deviceconfig: 0.1% user + 0% kernel / faults: 88 minor 72 major
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.1% 3524/com.blackberry.productivityedge: 0.1% user + 0% kernel / faults: 383 minor 553 major
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.1% 13984/kworker/2:0: 0% user + 0.1% kernel
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.1% 15045/mdss_fb0: 0% user + 0.1% kernel
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.1% 15092/kworker/3:1: 0% user + 0.1% kernel
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.1% 7/rcu_preempt: 0% user + 0.1% kernel
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.1% 694/reset_cause: 0% user + 0.1% kernel
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.1% 1802/VosMCThread: 0% user + 0.1% kernel
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.1% 1891/com.blackberry.keyboard: 0.1% user + 0% kernel / faults: 98 minor
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.1% 2065/com.android.phone: 0.1% user + 0% kernel / faults: 9 minor
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.1% 2391/com.google.process.gapps: 0% user + 0.1% kernel / faults: 81 minor 58 major
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.1% 2533/com.android.nfc: 0.1% user + 0% kernel / faults: 3 minor
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.1% 2689/com.blackberry.blackberrylauncher: 0.1% user + 0% kernel / faults: 32 minor
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.1% 3745/com.blackberry.batterycenter: 0% user + 0.1% kernel / faults: 122 minor 97 major
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.1% 4000/com.android.chrome: 0.1% user + 0% kernel / faults: 136 minor 127 major
12-27 03:29:35.661  1515  1562 E ActivityManager:   0% 4999/com.qti.csm: 0% user + 0% kernel / faults: 460 minor 266 major
12-27 03:29:35.661  1515  1562 E ActivityManager:   0.1% 5082/com.tct.endusertest: 0.1% user + 0% kernel / faults: 167 minor 194 major
12-27 03:29:35.661  1515  1562 E ActivityManager:   0% 6095/com.bbm: 0% user + 0% kernel / faults: 113 minor 360 major


主线程trace显示 卡在了MediaPlayer的初始化 
 
&quot;main&quot; prio=5 tid=1 Native
 ...
  kernel: (couldn't read /proc/self/task/15485/stack)
  native: #00 pc 000000000006ab90  /system/lib64/libc.so (__ioctl+4))
 ... 
  native: #10 pc 000000000065a5dc  /system/framework/arm64/boot-framework.oat (Java_android_media_MediaPlayer_native_1setup__Ljava_lang_Object_2+152)
</rich_text>
			<rich_text weight="heavy">  at android.media.MediaPlayer.native_setup(Native method)</rich_text>
			<rich_text>
  at android.media.MediaPlayer.&lt;init&gt;(MediaPlayer.java:642)
 ...
 
 
2. 查看anr进程photos所在的14807进程，发现MediaPlayer初始化失败。 
12-27 03:29:04.047 14807 14807 E ExtMediaPlayer-JNI: env-&gt;IsInstanceOf fails
12-27 03:29:04.047 14807 14807 E MediaPlayer-JNI: JNIMediaPlayerFactory: bIsQCMediaPlayerPresent 0
12-27 03:29:04.047 14807 14807 E ExtMediaPlayer-JNI: env-&gt;IsInstanceOf fails
12-27 03:29:04.047 14807 14807 E MediaPlayer-JNI: JNIMediaPlayerFactory: bIsQCMediaPlayerPresent 0
 
3. 查看media所在进程号为 12051 ， 找到12051所在进行，发现被DownloadManager占用且存在connect time out 的情况。 
 12-27 03:29:35.661  1515  1562 E ActivityManager:   0.2% </rich_text>
			<rich_text weight="heavy">12051</rich_text>
			<rich_text>/android.process.media: 0.2% user + 0% kernel / faults: 370 minor 77 major

 12-27 03:28:42.327 </rich_text>
			<rich_text weight="heavy">12051</rich_text>
			<rich_text> 15069 W DownloadManager: [14] Stop requested with status HTTP_DATA_ERROR: connect timed out
12-27 03:28:42.328 </rich_text>
			<rich_text weight="heavy">12051</rich_text>
			<rich_text> 15069 D DownloadManager: [14] Finished with status WAITING_TO_RETRY

4. Defect-</rich_text>
			<rich_text foreground="#000000">3882577</rich_text>
			<rich_text> imeout of broadcast BroadcastRecord{8932a98 u-1 android.intent.action.TIME_TICK}

广播超过10s没有处理
这类anr一般有下面几种情况：
1）广播被阻塞，造成发出的这个广播一直在broadcast队列里面，或者在receiverlist队列里面
2）接收广播的reciever所在的进程die了，有可能是因为lowmemorykiller ，造成receiver没有被注销，底层有时候无法从这个错误中恢复过来
3） 广播被接收了，但是receiver对应的onReceive中处理时间过长导致

12-30 13:51:10.004  2050  2080 W BroadcastQueue: Receiver during timeout: BroadcastFilter{e209bf3 u0 </rich_text>
			<rich_text weight="heavy">ReceiverList</rich_text>
			<rich_text>{b183e62 3258 com.android.systemui/10037/u0 remote:f1e392d}}


还有一个可能就是接收这个广播的service  android.os.BinderProxy@f5cb1e2 被kill掉了， 毕竟前面出现了许多lowmemorykiller的log.

12-30 13:51:39.041  6563  6574 D LicensingService: call: method=1
12-30 13:51:39.042  4400  6623 I ProfileManager: (profile 0) CALL content://com.blackberry.licensing.service; method 1
12-30 13:51:39.044  4070  6643 I ProfileManager: (profile 0) CALL content://com.blackberry.licensing.service; method 1
12-30 13:51:39.045   513   513 E lowmemorykiller: Error writing /proc/5029/oom_score_adj; errno=22
12-30 13:51:39.046  1618  1618 I ExtendedExtractor: QTIParser is prefered
12-30 13:51:39.046  1618  1618 I ExtendedExtractor: ExtendedExtractor::create 0xe0aa4270
12-30 13:51:39.047  6563  6575 D LicensingService: call: method=1
12-30 13:51:39.048   513   513 E lowmemorykiller: Error writing /proc/5029/oom_score_adj; errno=22
12-30 13:51:39.049  2050  4213 I ActivityManager: Process com.facebook.orca (pid 5029) has died
---------------------------------------------------------------------------------------------------------------------------------------
Comments #2

Zhengyu, HU(WMD PIC NB SWD-1-NB-TCT) (zhengyu.hu), 2017-01-04 15:17:14:


怀疑是网络问题引起的anr。
 
首先，看下面的log应该不是Receiver 处理超时引起，怀疑是广播堵塞造成的。
 12-30 13:51:23.401  2050  2080 W BroadcastQueue: Timeout of broadcast BroadcastRecord{8932a98 u-1 android.intent.action.TIME_TICK} - receiver=android.os.BinderProxy@f5cb1e2, started 10004ms ago
  
然后，如Comment #1 中的log， Google drive 做了一些网络请求一直没有得到相应，虽然是后台处理， 但是没有及时接收到想要的数据应用可能反复发送了广播去请求，最后造成了广播的堵塞。下面的log似乎也显示网络有问题。
12-30 13:48:07.373  2050  3216 D ConnectivityService: getNetworkForWork - retrieved Work Network for uid [ 10082 ]: null ]
12-30 13:48:07.375  2050  4230 D ConnectivityService: g
etNetworkForWork - retrieved Work Network for uid [ 10082 ]: null ]
12-30 13:48:07.379  2050  2072 D ConnectivityService: getNetworkForWork - retrieved Work Network for uid [ 10082 ]: null ]
 
当然，这些都是基于log的猜测，看描述复现概率极低。 log中看不出来有其他问题，倾向于网络问题。
 
 
---------------------------------------------------------------------------------------------------------------------------------------
Comments #1

Zhengyu, HU(WMD PIC NB SWD-1-NB-TCT) (zhengyu.hu), 2017-01-03 17:08:23:

12-30 13:51:10.004  2050  2080 W BroadcastQueue: Receiver during timeout: BroadcastFilter{e209bf3 u0 ReceiverList{b183e62 3258 com.android.systemui/10037/u0 remote:f1e392d}}
12-30 13:51:10.078  2050  2080 I Process : Sending signal. PID: 3258 SIG: 3
 
 
12-30 13:51:13.339  2050  2080 E ActivityManager: ANR in com.android.systemui
12-30 13:51:13.339  2050  2080 E ActivityManager: PID: 3258
12-30 13:51:13.339  2050  2080 E ActivityManager: Reason: Broadcast of Intent { act=android.intent.action.TIME_TICK flg=0x50000014 (has extras) }
12-30 13:51:13.339  2050  2080 E ActivityManager: Load: 6.65 / 6.15 / 5.88
12-30 13:51:13.339  2050  2080 E ActivityManager: CPU usage from 380729ms to 0ms ago (2016-12-30 13:44:49.305 to 2016-12-30 13:51:10.034) with 99% awake:
12-30 13:51:13.339  2050  2080 E ActivityManager:   16% 3258/com.android.systemui: 15% user + 0.4% kernel / faults: 29152 minor 68 major
12-30 13:51:13.339  2050  2080 E ActivityManager:   10% 516/surfaceflinger: 5.9% user + 4.4% kernel / faults: 42480 minor 3 major
12-30 13:51:13.339  2050  2080 E ActivityManager:   9.9% 2050/system_server: 6.9% user + 3% kernel / faults: 74411 minor 241 major
12-30 13:51:13.339  2050  2080 E ActivityManager:   4.2% 31263/com.google.android.gm: 3.1% user + 1% kernel / faults: 41704 minor 1814 major
12-30 13:51:13.339  2050  2080 E ActivityManager:   0.9% 1634/mm-qcamera-daemon: 0.7% user + 0.2% kernel / faults: 27547 minor 142 major
12-30 13:51:13.339  2050  2080 E ActivityManager:   1.6% 11838/com.google.android.gms.persistent: 1% user + 0.5% kernel / faults: 30165 minor 68 major
12-30 13:51:13.339  2050  2080 E ActivityManager:   1.3% 1610/audioserver: 0.7% user + 0.6% kernel / faults: 2138 minor 8 major
12-30 13:51:13.339  2050  2080 E ActivityManager:   1.3% 2562/kworker/u16:9: 0% user + 1.3% kernel
12-30 13:51:13.339  2050  2080 E ActivityManager:   1.1% 2227/kworker/u16:3: 0% user + 1.1% kernel
12-30 13:51:13.339  2050  2080 E ActivityManager:   0.9% 2563/kworker/u16:10: 0% user + 0.9% kernel
12-30 13:51:13.339  2050  2080 E ActivityManager:   1% 7/rcu_preempt: 0% user + 1% kernel 
 
&quot;Okio Watchdog&quot; daemon prio=5 tid=33 Waiting
  | group=&quot;main&quot; sCount=1 dsCount=0 obj=0x12ffc9d0 self=0x54dcc66e00
  | sysTid=12283 nice=0 cgrp=default sched=0/0 handle=0x54d1622b90
  | state=S schedstat=( 0 0 0 ) utm=0 stm=2 core=2 HZ=100
  | stack=0x54d1520000-0x54d1522000 stackSize=1038KB
  | held mutexes=
  at java.lang.Object.wait!(Native method)
  - waiting on &lt;0x072fa622&gt; (a java.lang.Class&lt;com.android.ok</rich_text>
			<rich_text link="webs http.okio.AsyncTimeout&gt;)">http.okio.AsyncTimeout&gt;)</rich_text>
			<rich_text>
  at com.android.ok</rich_text>
			<rich_text link="webs http.okio.AsyncTimeout.awaitTimeout(AsyncTimeout.java:311)">http.okio.AsyncTimeout.awaitTimeout(AsyncTimeout.java:311)</rich_text>
			<rich_text>
  - locked &lt;0x072fa622&gt; (a java.lang.Class&lt;com.android.ok</rich_text>
			<rich_text link="webs http.okio.AsyncTimeout&gt;)">http.okio.AsyncTimeout&gt;)</rich_text>
			<rich_text>
  at com.android.ok</rich_text>
			<rich_text link="webs http.okio.AsyncTimeout.-wrap0(AsyncTimeout.java:-1)">http.okio.AsyncTimeout.-wrap0(AsyncTimeout.java:-1)</rich_text>
			<rich_text>
  at com.android.ok</rich_text>
			<rich_text link="webs http.okio.AsyncTimeout$Watchdog.run(AsyncTimeout.java:286)">http.okio.AsyncTimeout$Watchdog.run(AsyncTimeout.java:286)</rich_text>
			<rich_text>



</rich_text>
			<rich_text foreground="#000000">12-30 13:51:39.041  6563  6574 D LicensingService: call: method=1</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#000000">12-30 13:51:39.042  4400  6623 I ProfileManager: (profile 0) CALL content://com.blackberry.licensing.service; method 1</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#000000">12-30 13:51:39.044  4070  6643 I ProfileManager: (profile 0) CALL content://com.blackberry.licensing.service; method 1</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#000000">12-30 13:51:39.045   513   513 E lowmemorykiller: Error writing /proc/5029/oom_score_adj; errno=22</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#000000">12-30 13:51:39.046  1618  1618 I ExtendedExtractor: QTIParser is prefered</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#000000">12-30 13:51:39.046  1618  1618 I ExtendedExtractor: ExtendedExtractor::create 0xe0aa4270</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#000000">12-30 13:51:39.047  6563  6575 D LicensingService: call: method=1</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#000000">12-30 13:51:39.048   513   513 E lowmemorykiller: Error writing /proc/5029/oom_score_adj; errno=22</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#000000">12-30 13:51:39.049  2050  4213 I ActivityManager: Process com.facebook.orca (pid 5029) has died</rich_text>
			<rich_text>---------------------------------------------------------------------------------------------------------------------------------------
Comments #2</rich_text>
			<rich_text link="webs http://mailto:zhengyu.hu@tcl.com?subject=Defect:3882577">Zhengyu, HU(WMD PIC NB SWD-1-NB-TCT) (zhengyu.hu)</rich_text>
			<rich_text>, 2017-01-04 15:17:14:

怀疑是网络问题引起的anr。
 
首先，看下面的log应该不是Receiver 处理超时引起，怀疑是广播堵塞造成的。
 12-30 13:51:23.401  2050  2080 W BroadcastQueue: Timeout of broadcast BroadcastRecord{8932a98 u-1 android.intent.action.TIME_TICK} - receiver=android.os.BinderProxy@f5cb1e2, started 10004ms ago
  
然后，如Comment #1 中的log， Google drive 做了一些网络请求一直没有得到相应，虽然是后台处理， 但是没有及时接收到想要的数据应用可能反复发送了广播去请求，最后造成了广播的堵塞。下面的log似乎也显示网络有问题。
12-30 13:48:07.373  2050  3216 D ConnectivityService: getNetworkForWork - retrieved Work Network for uid [ 10082 ]: null ]
12-30 13:48:07.375  2050  4230 D ConnectivityService: g
etNetworkForWork - retrieved Work Network for uid [ 10082 ]: null ]
12-30 13:48:07.379  2050  2072 D ConnectivityService: getNetworkForWork - retrieved Work Network for uid [ 10082 ]: null ]
 
当然，这些都是基于log的猜测，看描述复现概率极低。 log中看不出来有其他问题，倾向于网络问题。
 
 
---------------------------------------------------------------------------------------------------------------------------------------
Comments #1</rich_text>
			<rich_text link="webs http://mailto:zhengyu.hu@tcl.com?subject=Defect:3882577">Zhengyu, HU(WMD PIC NB SWD-1-NB-TCT) (zhengyu.hu)</rich_text>
			<rich_text>, 2017-01-03 17:08:23:12-30 13:51:10.004  2050  2080 W BroadcastQueue: Receiver during timeout: BroadcastFilter{e209bf3 u0 ReceiverList{b183e62</rich_text>
			<rich_text foreground="#ff0000">3258</rich_text>
			<rich_text> com.android.systemui/10037/u0 remote:f1e392d}}
12-30 13:51:10.078  2050  2080 I Process : Sending signal. PID: 3258 SIG: 3
 
 
12-30 13:51:13.339  2050  2080 E ActivityManager: ANR in com.android.systemui
12-30 13:51:13.339  2050  2080 E ActivityManager: PID: </rich_text>
			<rich_text foreground="#ff0000">3258</rich_text>
			<rich_text>
12-30 13:51:13.339  2050  2080 E ActivityManager: Reason: Broadcast of Intent { act=android.intent.action.TIME_TICK flg=0x50000014 (has extras) }
12-30 13:51:13.339  2050  2080 E ActivityManager: Load: 6.65 / 6.15 / 5.88
12-30 13:51:13.339  2050  2080 E ActivityManager: CPU usage from 380729ms to 0ms ago (2016-12-30 13:44:49.305 to 2016-12-30 13:51:10.034) with 99% awake:
12-30 13:51:13.339  2050  2080 E ActivityManager:   16% 3258/com.android.systemui: 15% user + 0.4% kernel / faults: 29152 minor 68 major
12-30 13:51:13.339  2050  2080 E ActivityManager:   10% 516/surfaceflinger: 5.9% user + 4.4% kernel / faults: 42480 minor 3 major
12-30 13:51:13.339  2050  2080 E ActivityManager:   9.9% 2050/system_server: 6.9% user + 3% kernel / faults: 74411 minor 241 major
12-30 13:51:13.339  2050  2080 E ActivityManager:   4.2% 31263/com.google.android.gm: 3.1% user + 1% kernel / faults: 41704 minor 1814 major
12-30 13:51:13.339  2050  2080 E ActivityManager:   0.9% 1634/mm-qcamera-daemon: 0.7% user + 0.2% kernel / faults: 27547 minor 142 major
12-30 13:51:13.339  2050  2080 E ActivityManager:   1.6% 11838/com.google.android.gms.persistent: 1% user + 0.5% kernel / faults: 30165 minor 68 major
12-30 13:51:13.339  2050  2080 E ActivityManager:   1.3% 1610/audioserver: 0.7% user + 0.6% kernel / faults: 2138 minor 8 major
12-30 13:51:13.339  2050  2080 E ActivityManager:   1.3% 2562/kworker/u16:9: 0% user + 1.3% kernel
12-30 13:51:13.339  2050  2080 E ActivityManager:   1.1% 2227/kworker/u16:3: 0% user + 1.1% kernel
12-30 13:51:13.339  2050  2080 E ActivityManager:   0.9% 2563/kworker/u16:10: 0% user + 0.9% kernel
12-30 13:51:13.339  2050  2080 E ActivityManager:   1% 7/rcu_preempt: 0% user + 1% kernel 
 
&quot;Okio Watchdog&quot; daemon prio=5 tid=33 Waiting
  | group=&quot;main&quot; sCount=1 dsCount=0 obj=0x12ffc9d0 self=0x54dcc66e00  | sysTid=12283 nice=0 cgrp=default sched=0/0 handle=0x54d1622b90  | state=S schedstat=( 0 0 0 ) utm=0 stm=2 core=2 HZ=100  | stack=0x54d1520000-0x54d1522000 stackSize=1038KB  | held mutexes=  at java.lang.Object.wait!(Native method)  - waiting on &lt;0x072fa622&gt; (a java.lang.Class&lt;com.android.okhttp.okio.AsyncTimeout&gt;)  at com.android.okhttp.okio.AsyncTimeout.awaitTimeout(AsyncTimeout.java:311)  - locked &lt;0x072fa622&gt; (a java.lang.Class&lt;com.android.okhttp.okio.AsyncTimeout&gt;)  at com.android.okhttp.okio.AsyncTimeout.-wrap0(AsyncTimeout.java:-1)  at com.android.okhttp.okio.AsyncTimeout$Watchdog.run(AsyncTimeout.java:286)


</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="FC-Bug" prog_lang="custom-colors" readonly="False" tags="" unique_id="15">
			<rich_text>FC问题主要通过Thread.UncaughExceptionHandler这个类来捕获异常，通过实现类里面的uncaughtException来实现应用在捕获到异常后进行相关的处理


ChooseActiivty中的ChooserListAdapter决定Share列表的显示。要显示的有三组数据，分别是</rich_text>
			<rich_text foreground="#808080">CallerTarget</rich_text>
			<rich_text>， ServerTarget 和 </rich_text>
			<rich_text foreground="#808080">StandardTarget</rich_text>
			<rich_text>. 每一组数据都是单独一段。
在Share中CallerTarget，ServerTarget, StandardTarget除了Messaging是属于StandardTarget其余应用均属于CallerTarget。

如果需要改动需要将ChooserRowAdapter的getCount进行修改，让其不为其他组数据单独列出来。由于现在并不了解ChooseActivity还被用于哪些地方，不太清楚这么做会对其他地方的功能造成什么影响，所以并不建议进行修改。




======================================================================================

</rich_text>
			<rich_text scale="h2" weight="heavy">1. Service bind问题导致句柄泄漏，Defect 1247072 </rich_text>
			<rich_text>
FMRadio has fd leak.  具体表现为/proc/&lt;FMRADIO所在进程&gt;/fd 文件数量超过1024个，超过了进程能够创建的数量，</rich_text>
			<rich_text foreground="#ff0000">此问题为FMActivity代码编写问题造成没有及时释放句柄资源,很可能为onStart，onStop与bindService、unBindService相关代码写的有问题</rich_text>
			<rich_text>。ulimit -a可以查看fd数量限制
 
复现方式：打开FMRadio后，点击Recent按键500～600次，可以通过执行下面脚本实现。期间可以在  /proc/&lt;FMRADIO所在进程&gt;/fd # 目录下执行</rich_text>
			<rich_text weight="heavy">ls -al|wc -l</rich_text>
			<rich_text>  查看fd文件数量不断增长，直到超过1024阀值发生FC.

#!/bin/bash

for((i=0 ;i&lt;600 ;i++))
do
adb shell input keyevent KEYCODE_APP_SWITCH
sleep 1
adb shell input keyevent KEYCODE_APP_SWITCH
done

日志中在这个问题的前面有许多的ServiceConnection leak

12-28 21:35:21.569 E/art     (11308): </rich_text>
			<rich_text foreground="#ffff00000000">ashmem_create_region failed for 'indirect ref table':</rich_text>
			<rich_text> </rich_text>
			<rich_text foreground="#ffff00000000">Too many open files</rich_text>
			<rich_text>
12-28 21:35:21.570 W/art     (11308): Throwing OutOfMemoryError &quot;Could not allocate JNI Env&quot;
12-28 21:35:21.570 D/AndroidRuntime(11308): Shutting down VM
12-28 21:35:21.571 W/Adreno-GSL(11308): &lt;gsl_ldd_control:475&gt;: ioctl fd 31 code 0xc0200933 (IOCTL_KGSL_TIMESTAMP_EVENT) failed: errno 24 Too many open files
12-28 21:35:21.571 W/Adreno-GSL(11308): &lt;ioctl_kgsl_syncobj_create:2979&gt;: (20, 7, 46028) fail 24 Too many open files
12-28 21:35:21.571 E/AndroidRuntime(11308): FATAL EXCEPTION: main
12-28 21:35:21.571 E/AndroidRuntime(11308): Process: com.tct.fmradio, PID: 11308
12-28 21:35:21.571 E/AndroidRuntime(11308): java.lang.OutOfMemoryError: Could not allocate JNI Env
12-28 21:35:21.571 E/AndroidRuntime(11308): 	at java.lang.Thread.nativeCreate(Native Method)
12-28 21:35:21.571 E/AndroidRuntime(11308): 	at java.lang.Thread.start(Thread.java:1063)
12-28 21:35:21.571 E/AndroidRuntime(11308): 	at com.tct.fmradio.platform.QcomFMDeviceImpl.createRecordSinkThread(QcomFMDeviceImpl.java:391)
12-28 21:35:21.571 E/AndroidRuntime(11308): 	at com.tct.fmradio.platform.QcomFMDeviceImpl.&lt;init&gt;(QcomFMDeviceImpl.java:295)
12-28 21:35:21.571 E/AndroidRuntime(11308): 	at com.tct.fmradio.device.FMDeviceImpl.createFMDevice(FMDeviceImpl.java:18)
12-28 21:35:21.571 E/AndroidRuntime(11308): 	at com.tct.fmradio.service.FMService.onCreate(FMService.java:1231)
12-28 21:35:21.571 E/AndroidRuntime(11308): 	at android.app.ActivityThread.handleCreateService(ActivityThread.java:2918)
12-28 21:35:21.571 E/AndroidRuntime(11308): 	at android.app.ActivityThread.access$1900(ActivityThread.java:157)
12-28 21:35:21.571 E/AndroidRuntime(11308): 	at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1457)
12-28 21:35:21.571 E/AndroidRuntime(11308): 	at android.os.Handler.dispatchMessage(Handler.java:102)
12-28 21:35:21.571 E/AndroidRuntime(11308): 	at android.os.Looper.loop(Looper.java:148)
12-28 21:35:21.571 E/AndroidRuntime(11308): 	at android.app.ActivityThread.main(ActivityThread.java:5509)
12-28 21:35:21.571 E/AndroidRuntime(11308): 	at java.lang.reflect.Method.invoke(Native Method)
12-28 21:35:21.571 E/AndroidRuntime(11308): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)
12-28 21:35:21.571 E/AndroidRuntime(11308): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616)
12-28 21:35:21.572 I/ActivityManager( 6054): handleApplicationCrash
12-28 21:35:21.572 I/JRDRecordService( 6054): jrdCrashHandler invoke ytf...

最后FMRadio那边修改情况：
在FMService.java 在每次oncreate都会创建一个handlerthread，并且没有释放，而通过Recent方式也许会反复的调用这个service的oncreate代码，造成了泄漏。

public void onCreate() {
        Log.i(TAG, &quot;onCreate()&quot;);
        super.onCreate();
        mDefaultName = getString(R.string.default_name_text);
        // create a thread that messages will be processed on
</rich_text>
			<rich_text weight="heavy">        HandlerThread thread = new HandlerThread(&quot;FMService&quot;);
        thread.start();</rich_text>
			<rich_text>
        mMessenger = new FMMessenger(thread.getLooper(), mOnActionListener,
                null, null);
         ... ...
  }

通过将HandlerThread定义在函数体的外部，然后在onDetroy添加下面语句，可以释放句柄
    mMessenger.disconnectAll();
    mHandlerThread.quitSafely();

    
=======================================================


</rich_text>
			<rich_text scale="h2">2. Defect- 1216839</rich_text>
			<rich_text> </rich_text>
			<rich_text scale="h2" weight="heavy">systemui fc
</rich_text>
			<rich_text>
12-26 09:57:39.945  4160  4173 I ActivityManager: START u0 {act=android.intent.action.CHOOSER cmp=android/com.android.internal.app.ChooserActivity (has extras)} from uid 10095 on display 0


12-26 09:57:31.161 13052 13071 V TctDrmLog/TctDrmManagerClient: File path after standardized is: /storage/emulated/0/02_Test Objects/Audio/Lanka ablum/132-1.jpg
12-26 09:57:31.660 13052 14859 D MtpServer: path: /storage/sdcard1/02_Test Objects/Audio/100 songs/Justin Bieber-Believe-One Love.mp3 parent: 2036 storageID: 68900001
12-26 09:57:31.667 13052 13071 V TctDrmLog/TctDrmManagerClient: File path after standardized is: /storage/emulated/0/02_Test Objects/Audio/Lanka ablum/132-1.jpg


allow untrusted_app init:dir { getattr search };
allow untrusted_app kernel:dir getattr;
allow untrusted_app kernel:file read;

 
</rich_text>
			<rich_text weight="heavy">这个BUG发生的直接原因是</rich_text>
			<rich_text foreground="#FF0000" weight="heavy">ChooserActivity</rich_text>
			<rich_text weight="heavy">与应用WhatsApp的</rich_text>
			<rich_text foreground="#FF0000" weight="heavy">ContactChooserTargetService</rich_text>
			<rich_text foreground="#000000" weight="heavy">交互发生错误Service not register,导致ChooserActivity所在的进程Android:ui挂掉，发生FC</rich_text>
			<rich_text> ，出现这个错误很可能是unbind已经destroy 的Service ， 具体表现为重复unbindservie或者unbindservice的时候这个service已经destroy. 

 
对于ContactChooserTargetService被destroy的推测：
1）有可能是这个service需要读取读取一些数据，但是由于SeLinux的限制，无法获取到，结果导致自身挂掉。如果是这个原因，就并不能随便修改，因为这会让所有的untrusted_app拥有这些权限
    type=1400 audit(0.0:1484): avc: denied { getattr } for path=&quot;/proc/1&quot;  dev=&quot;proc&quot; ino=168240 scontext=u:r:untrusted_app:s0:c512,c768  tcontext=u:r:init:s0 tclass=dir permissive=0
2)    ContactChooserTargetService由于某些原因被Kill掉。
 
 
 </rich_text>
			<rich_text weight="heavy">java.lang.IllegalArgumentException: Service not registered</rich_text>
			<rich_text>
当activity已经与service unbind ， 然后再次调用unbindService时会出现


12-26 09:57:39.071 18221 18221 E AndroidRuntime: java.lang.IllegalArgumentException: Service not registered: ActivityInfo{4e95b30 com.whatsapp.ContactPicker}

12-26 09:57:39.071 18221 18221 E AndroidRuntime: 	at android.app.LoadedApk.forgetServiceDispatcher(LoadedApk.java:1044)

12-26 09:57:39.071 18221 18221 E AndroidRuntime: 	at android.app.ContextImpl.unbindService(ContextImpl.java:1337)

12-26 09:57:39.071 18221 18221 E AndroidRuntime: 	at android.content.ContextWrapper.unbindService(ContextWrapper.java:616)

12-26 09:57:39.071 18221 18221 E AndroidRuntime: 	at com.android.internal.app.ChooserActivity.unbindRemainingServices(ChooserActivity.java:427)

12-26 09:57:39.071 18221 18221 E AndroidRuntime: 	at com.android.internal.app.ChooserActivity$1.handleMessage(ChooserActivity.java:118)

12-26 09:57:39.071 18221 18221 E AndroidRuntime: 	at android.os.Handler.dispatchMessage(Handler.java:102)

12-26 09:57:39.071 18221 18221 E AndroidRuntime: 	at android.os.Looper.loop(Looper.java:148)

12-26 09:57:39.071 18221 18221 E AndroidRuntime: 	at android.app.ActivityThread.main(ActivityThread.java:5509)

12-26 09:57:39.071 18221 18221 E AndroidRuntime: 	at java.lang.reflect.Method.invoke(Native Method)

12-26 09:57:39.071 18221 18221 E AndroidRuntime: 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)

12-26 09:57:39.071 18221 18221 E AndroidRuntime: 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616)
 
 
 
 Defect-1442782 有相同的日志
 
================================================================================================== 

==============================================================================================


4. Defect-1048259  [Boot]Contacts storage and android.process.acore has stoppes after reboot.
01-01 08:01:16.176 I/ActivityManager( 1345): Start proc 7480:android.process.acore/u0a60 for content provider com.android.providers.contacts/.ContactsProvider2
01-01 08:01:16.443 F/DEBUG   (  518): signal 4 (SIGILL), code 1 (ILL_ILLOPC), fault addr 0x73836000
01-01 08:01:17.122 F/libc    ( 7531): Fatal signal 4 (SIGILL), code 1, fault addr 0x73836000 in tid 7531 (d.process.acore)
01-01 08:01:19.924 I/ActivityThread( 4394): Removing dead content provider:android.content.ContentProviderProxy@a787462

通过对日志的分析，可以看到contacts和com.process.acore出现Crash应该都是因为ContactsProvider2 在进行相关数据操作的时候，Native Code出现了非法指令的访问，具体的定位需要查看  /data/tombstones/tombstone_06相关的数据，这里没有提供。
 
如果问题有复现，除了需要提供之前的Log金额Trace以外，还需要提供/data/tombstones目录下所有文件。


日志的出错信息： 

 
01-01 08:01:11.433 F/DEBUG   (  518):  pid: 7041, tid: 7041, name: d.process.acore  &gt;&gt;&gt;  android.process.acore &lt;&lt;&lt;
01-01 08:01:11.433 F/DEBUG   (  518): signal 4 (SIGILL), code 1 (ILL_ILLOPC), fault addr 0x73836000 
01-01 08:01:11.452 F/DEBUG   (  518): backtrace:
01-01 08:01:11.452 F/DEBUG   (  518):     #00 pc 00000000032d9000  /system/framework/arm64/boot.oat (offset 0x1f2e000)
01-01 08:01:11.452 F/DEBUG   (  518):     #01 pc 00000000032d8fd8  /system/framework/arm64/boot.oat (offset 0x1f2e000)
01-01 08:01:11.562 F/DEBUG   (  518): 
01-01 08:01:11.562 F/DEBUG   (  518): Tombstone written to: /data/tombstones/tombstone_06 
</rich_text>
			<rich_text foreground="#1F497D"> 
01-01 08:01:11.691 I/ActivityManager( 1345): Process android.process.acore (pid 7041) has died
01-01  08:01:11.692 I/ActivityManager( 1345): Killing  6330:com.google.process.gapps/u0a107 (adj 1): depends on provider  com.android.providers.contacts/.ContactsProvider2 in dying proc  android.process.acore</rich_text>
			<rich_text>


=====================================================================================================

5. Defect- 1238848 Calendar的Event事件在通知栏划掉后出现FC, 空指针异常

出错日志如下：
12-25 03:27:33.550 17568 17591 E AndroidRuntime: FATAL EXCEPTION: AlertService
12-25 03:27:33.550 17568 17591 E AndroidRuntime: Process: com.google.android.calendar, PID: 17568
12-25  03:27:33.550 17568 17591 E AndroidRuntime:  java.lang.NullPointerException: Attempt to invoke virtual method  'java.util.List android.content.pm</rich_text>
			<rich_text foreground="#ff0000">.ParceledListSlice.getLis</rich_text>
			<rich_text>t()' on a null object reference
12-25 03:27:33.550 17568 17591 E AndroidRuntime:     at android.app</rich_text>
			<rich_text foreground="#ff0000">.NotificationManager.getActiveNotifications</rich_text>
			<rich_text>(NotificationManager.java:683)
12-25  03:27:33.550 17568 17591 E AndroidRuntime:     at  com.android.calendar.alerts.AlertService$NotificationMgrWrapper.notify(AlertService.java:179)
12-25  03:27:33.550 17568 17591 E AndroidRuntime:     at  com.android.calendar.alerts.AlertService.postNotification(AlertService.java:745)
12-25  03:27:33.550 17568 17591 E AndroidRuntime:     at  com.android.calendar.alerts.AlertService.generateAlerts(AlertService.java:368)
12-25  03:27:33.550 17568 17591 E AndroidRuntime:     at  com.android.calendar.alerts.AlertService.updateAlertNotification(AlertService.java:330)
12-25 03:27:33.550 17568 17591 E AndroidRuntime:     at com.android.calendar.alerts.</rich_text>
			<rich_text foreground="#ff0000">AlertService.processMessage</rich_text>
			<rich_text>(AlertService.java:252)


 
根据日志，Calendar的AlertService在调用processMessage，并逐步调用</rich_text>
			<rich_text foreground="#ff0000">NotificationManager.getActiveNotifications</rich_text>
			<rich_text>时，在</rich_text>
			<rich_text foreground="#ff0000">ParceledListSlice.getList</rich_text>
			<rich_text>中出现了空指针异常。
 NotificationManager.</rich_text>
			<rich_text foreground="#ff0000">getActiveNotifications</rich_text>
			<rich_text> 的代码如下：由代码可以看到，getList的出现在第7行，而它的值是由前面的</rich_text>
			<rich_text foreground="#ff0000">service.getAppActiveNotification</rich_text>
			<rich_text>返回并赋值，如果它返回的是null，那么</rich_text>
			<rich_text foreground="#ff0000">parceledLis</rich_text>
			<rich_text foreground="#333333">t的值就是</rich_text>
			<rich_text>null，</rich_text>
			<rich_text foreground="#333333">就会出现日志中的空指针异常</rich_text>
			<rich_text>。而且日志中没有出现RemoteException， 所以进程间通讯应该是正常的

 
1     public StatusBarNotification[] getActiveNotifications() {
2       final INotificationManager service = getService();
3        final String pkg = mContext.getPackageName();
4       try {
5            final ParceledListSlice&lt;StatusBarNotification&gt; parceledList
6                    =</rich_text>
			<rich_text foreground="#ff0000"> service.getAppActiveNotifications(</rich_text>
			<rich_text>pkg, UserHandle.myUserId());
7            final List&lt;StatusBarNotification&gt; list = </rich_text>
			<rich_text foreground="#ff0000">parceledList.getLis</rich_text>
			<rich_text>t();
8            return list.toArray(new StatusBarNotification[list.size()]);
9        } catch (RemoteException e) {
10            Log.e(TAG, &quot;Unable to talk to notification manager. Woe!&quot;, e);
11       }
12        return new StatusBarNotification[0];
13    }
 
 那么接下来查看</rich_text>
			<rich_text foreground="#ff0000">service.getAppActiveNotifications</rich_text>
			<rich_text foreground="#333333">是不是有可能返回空指针。它是定义在NotificationManagerService中，代码如下: 可以看到函数最后返回的是</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#ff0000">new ParceledListSlice&lt;StatusBarNotification&gt;(list</rich_text>
			<rich_text>), 所以在正常情况下，</rich_text>
			<rich_text foreground="#ff0000">service.getAppActiveNotifications</rich_text>
			<rich_text foreground="#000000">是不会返回null的，同时</rich_text>
			<rich_text foreground="#ff0000">ParceledListSlice</rich_text>
			<rich_text foreground="#000000">所包含的list也不会是null</rich_text>
			<rich_text>(在第6行初始化)， </rich_text>
			<rich_text foreground="#000000">除非ParceledListSlice初始化失败，但是查看ParceledListSlice的构造函数后，发现出现这样的情况也不太可能。</rich_text>
			<rich_text>
 
 
1  public ParceledListSlice&lt;StatusBarNotification&gt; getAppActiveNotifications(String pkg,
2                                                                                  int incomingUserId) {
3            ... ...

4
5            final int N = mNotificationList.size();
6            final </rich_text>
			<rich_text foreground="#ff0000">ArrayList&lt;StatusBarNotification&gt; list = new ArrayList&lt;StatusBarNotification&gt;(N)</rich_text>
			<rich_text>;
7            synchronized (mNotificationList) {
8                for (int i = 0; i &lt; N; i++) {
9                          .... ...
10                        list.add(sbnOut);
11                    }
12                }
13           }
14            return </rich_text>
			<rich_text foreground="#ff0000">new ParceledListSlice&lt;StatusBarNotification&gt;(list</rich_text>
			<rich_text>);
15       }

 
 总结：正常情况下不太可能出现这种空指针异常的情况，但是现在既然日志中出现，只能推测也许是下面的情况           1.  </rich_text>
			<rich_text foreground="#ff0000">service.getAppActiveNotifications</rich_text>
			<rich_text foreground="#000000">返回值所占用的空间可能被异常占用</rich_text>
			<rich_text>
           2.  </rich_text>
			<rich_text foreground="#000000">ParceledListSlice可能初始化失败导致</rich_text>
			<rich_text> </rich_text>
			<rich_text foreground="#ff0000">service.getAppActiveNotifications返回null</rich_text>
			<rich_text>
 
这个问题不容易复现，即使复现了可能也无法找到症结所在，因为最好的方法是在相应的代码中加上日志查看，而这显然不可能事后去做 。个人觉得这个问题不太可能再次出现 ，因为从代码中看</rich_text>
			<rich_text foreground="#ff0000">service.getAppActiveNotifications</rich_text>
			<rich_text foreground="#000000">不可能返回null</rich_text>
			<rich_text>。但是并不能保证其不出现的情况下，保险的做法是加上判空的条件，如添加下面黄色的部分。
 
 1     public StatusBarNotification[] getActiveNotifications() {
2       final INotificationManager service = getService();
3        final String pkg = mContext.getPackageName();
4       try {
5            final ParceledListSlice&lt;StatusBarNotification&gt; parceledList
6                    =</rich_text>
			<rich_text foreground="#ff0000"> service.getAppActiveNotifications(</rich_text>
			<rich_text>pkg, UserHandle.myUserId());
7            </rich_text>
			<rich_text background="#ffff00">  if(parceledList != null){</rich_text>
			<rich_text>
8                   final List&lt;StatusBarNotification&gt; list = </rich_text>
			<rich_text foreground="#ff0000">parceledList.getLis</rich_text>
			<rich_text>t();
9                   return list.toArray(new StatusBarNotification[list.size()]);
10           </rich_text>
			<rich_text background="#ffff00"> }</rich_text>
			<rich_text>
11        } catch (RemoteException e) {
12            Log.e(TAG, &quot;Unable to talk to notification manager. Woe!&quot;, e);
13       }
14        return new StatusBarNotification[0];
15    }



========================================================================================================



2-30 15:17:09.950  5561  6556 I am_proc_start: [0,12109,10130,com.google.android.gm,content provider,com.google.android.gm/com.android.email.provider.EmailProvider]
12-30 15:17:09.950  5561  6556 I ActivityManager: Start proc 12109:com.google.android.gm/u0a130 for content provider com.google.android.gm/com.android.email.provider.EmailProvider
12-30 15:17:09.981  5561  5573 I am_proc_bound: [0,12109,com.google.android.gm]

12-30 15:17:10.278 12109 12197 D ActivityThread: Loading provider com.google.android.gmail.provider;com.android.mail.notifier;com.google.android.gm.email.provider;com.google.android.gm.email.notifier: com.android.email.provider.EmailProvider




=================================
</rich_text>
			<rich_text scale="h2" weight="heavy">6. Defect-1856734  stability测试 systemui ANR wifi</rich_text>
			<rich_text>

2016-03-23 05:39:58,106 : --------- beginning of crash
2016-03-23 05:39:58,106 : 03-23 05:39:58.296  4995  4995 E AndroidRuntime: FATAL EXCEPTION: main
2016-03-23 05:39:58,106 : 03-23 05:39:58.296  4995  4995 E AndroidRuntime: Process: com.android.systemui, PID: 4995
2016-03-23 05:39:58,106 : 03-23 05:39:58.296  4995  4995 E AndroidRuntime: java.lang.IndexOutOfBoundsException: Invalid index 9, size is 0
2016-03-23 05:39:58,106 : 03-23 05:39:58.296  4995  4995 E AndroidRuntime: 	at java.util.ArrayList.throwIndexOutOfBoundsException(ArrayList.java:255)
2016-03-23 05:39:58,106 : 03-23 05:39:58.296  4995  4995 E AndroidRuntime: 	at java.util.ArrayList.get(ArrayList.java:308)
2016-03-23 05:39:58,106 : 03-23 05:39:58.296  4995  4995 E AndroidRuntime: 	at android.view.ViewGroup.onInitializeAccessibilityNodeInfoInternal(ViewGroup.java:3003)
2016-03-23 05:39:58,106 : 03-23 05:39:58.296  4995  4995 E AndroidRuntime: 	at android.view.View.onInitializeAccessibilityNodeInfo(View.java:6102)
2016-03-23 05:39:58,106 : 03-23 05:39:58.296  4995  4995 E AndroidRuntime: 	at android.view.View.createAccessibilityNodeInfoInternal(View.java:6061)
2016-03-23 05:39:58,106 : 03-23 05:39:58.296  4995  4995 E AndroidRuntime: 	at android.view.View.createAccessibilityNodeInfo(View.java:6046)
2016-03-23 05:39:58,106 : 03-23 05:39:58.296  4995  4995 E AndroidRuntime: 	at android.view.AccessibilityInteractionController$AccessibilityNodePrefetcher.prefetchAccessibilityNodeInfos(AccessibilityInteractionController.java:834)
2016-03-23 05:39:58,106 : 03-23 05:39:58.296  4995  4995 E AndroidRuntime: 	at android.view.AccessibilityInteractionController.findAccessibilityNodeInfoByAccessibilityIdUiThread(AccessibilityInteractionController.java:156)
2016-03-23 05:39:58,106 : 03-23 05:39:58.296  4995  4995 E AndroidRuntime: 	at android.view.AccessibilityInteractionController.access$400(AccessibilityInteractionController.java:54)
2016-03-23 05:39:58,106 : 03-23 05:39:58.296  4995  4995 E AndroidRuntime: 	at android.view.AccessibilityInteractionController$PrivateHandler.handleMessage(AccessibilityInteractionController.java:1191)
2016-03-23 05:39:58,106 : 03-23 05:39:58.296  4995  4995 E AndroidRuntime: 	at android.os.Handler.dispatchMessage(Handler.java:102)
2016-03-23 05:39:58,106 : 03-23 05:39:58.296  4995  4995 E AndroidRuntime: 	at android.os.Looper.loop(Looper.java:148)
2016-03-23 05:39:58,106 : 03-23 05:39:58.296  4995  4995 E AndroidRuntime: 	at android.app.ActivityThread.main(ActivityThread.java:5515)
2016-03-23 05:39:58,106 : 03-23 05:39:58.296  4995  4995 E AndroidRuntime: 	at java.lang.reflect.Method.invoke(Native Method)
2016-03-23 05:39:58,106 : 03-23 05:39:58.296  4995  4995 E AndroidRuntime: 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:764)
2016-03-23 05:39:58,106 : 03-23 05:39:58.296  4995  4995 E AndroidRuntime: 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:654)


这个问题是uiautomator通过AccessibilityService模拟wifi开关的时候出现的FC
 
之所以出现的是System UI 的FC，有下面的推测
uiautomator相当与控制木偶的线， 通知栏那边wifi相当与木偶，发生FC的时候uiautomator通过操作通知栏WIFI开关，但是问题是出现在线上，却通过木偶表现出来，所以出现了System ui的FC
 
关于出现数组越界的原因：


这个问题是uiautomator通过AccessibilityService模拟wifi开关的时候出现的FC
 
之所以出现的是System UI 的FC，有下面的推测
uiautomator相当与控制木偶的线， 通知栏那边wifi相当与木偶，发生FC的时候uiautomator通过操作通知栏WIFI开关，但是问题是出现在线上，却通过木偶表现出来，所以出现了System ui的FC, 如果此时木偶是system_server，出现的问题可能就是重启了
 
关于出现数组越界的原因： 

ViewGroup.java
2991    @Override
2992    public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info) {
2993        super.onInitializeAccessibilityNodeInfoInternal(info);
2994        if (getAccessibilityNodeProvider() != null) {
2995            return;
2996        }
2997        if (mAttachInfo != null) {
2998            final ArrayList&lt;View&gt; childrenForAccessibility = </rich_text>
			<rich_text weight="heavy">mAttachInfo.mTempArrayList;</rich_text>
			<rich_text>
2999            </rich_text>
			<rich_text foreground="#FF0000">childrenForAccessibility.clear();</rich_text>
			<rich_text>
3000            addChildrenForAccessibility(childrenForAccessibility);
3001            final int </rich_text>
			<rich_text foreground="#FF0000">childrenForAccessibilityCount = childrenForAccessibility.size();</rich_text>
			<rich_text>
3002            for (int i = 0; i &lt; childrenForAccessibilityCount; i++) {
3003                final View child = </rich_text>
			<rich_text foreground="#FF0000">childrenForAccessibility.get(i);</rich_text>
			<rich_text>
3004                info.addChildUnchecked(child);
3005            }
3006            </rich_text>
			<rich_text foreground="#FF0000">childrenForAccessibility.clear();</rich_text>
			<rich_text>
3007        }
3008    }

问题出现在</rich_text>
			<rich_text foreground="#FF0000">childrenForAccessibility</rich_text>
			<rich_text>这个变量上，他是</rich_text>
			<rich_text weight="heavy">mAttachInfo.mTempArrayList</rich_text>
			<rich_text>的一个引用，也就是说如果还有其他线程在同步操作</rich_text>
			<rich_text weight="heavy">mAttachInfo.mTempArrayList</rich_text>
			<rich_text>，可能出现数据不一致的情况，造成数组越界
查看代码发现在View.java中这个变量可能赋值给</rich_text>
			<rich_text weight="heavy">focusablesTempList</rich_text>
			<rich_text>，</rich_text>
			<rich_text weight="heavy">focusablesTempList</rich_text>
			<rich_text>存在clear的行为，这与出现的错误相符和，即上面代码的线程运行到for循环里面的时候，下面代码的线程刚好对数组进行了清空
         AndroidRuntime: java.lang.IndexOutOfBoundsException: </rich_text>
			<rich_text weight="heavy">Invalid index 9, size is 0</rich_text>
			<rich_text>


View.java 
public void onInitializeAccessibilityEventInternal(AccessibilityEvent event) {
5998        event.setSource(this);
5999        event.setClassName(getAccessibilityClassName());
6000        event.setPackageName(getContext().getPackageName());
6001        event.setEnabled(isEnabled());
6002        event.setContentDescription(mContentDescription);
6003
6004        switch (event.getEventType()) {
6005            case AccessibilityEvent.TYPE_VIEW_FOCUSED: {
6006                ArrayList&lt;View&gt; </rich_text>
			<rich_text weight="heavy">focusablesTempList</rich_text>
			<rich_text> = (mAttachInfo != null)
6007                        ? </rich_text>
			<rich_text weight="heavy">mAttachInfo.mTempArrayList </rich_text>
			<rich_text>: new ArrayList&lt;View&gt;();
6008                getRootView().addFocusables(focusablesTempList, View.FOCUS_FORWARD, FOCUSABLES_ALL);
6009                event.setItemCount(focusablesTempList.size());
6010                event.setCurrentItemIndex(focusablesTempList.indexOf(this));
6011                if (mAttachInfo != null) {
6012                    </rich_text>
			<rich_text weight="heavy">focusablesTempList</rich_text>
			<rich_text>.</rich_text>
			<rich_text weight="heavy">clear</rich_text>
			<rich_text>();
6013                }
6014            } break;
6015            case AccessibilityEvent.TYPE_VIEW_TEXT_SELECTION_CHANGED: {
6016                CharSequence text = getIterableTextForAccessibility();
6017                if (text != null &amp;&amp; text.length() &gt; 0) {
6018                    event.setFromIndex(getAccessibilitySelectionStart());
6019                    event.setToIndex(getAccessibilitySelectionEnd());
6020                    event.setItemCount(text.length());
6021                }
6022            } break;
6023        }
6024    }


总结：目前还是怀疑存在多线程同步的问题，但还是只是猜测，也不是很好去验证。由于涉及到ViewGroup和View的代码，还是需要谨慎对待，将继续进行研究，如果有必要，再加入同步代码

解决的方案其实比较的简单，只要在两段代码中都加入同步代码就可以了，只不过加上同步代码影响无法预测，如可能会使得uiautomator测试    的时候出现莫名的anr
    
 此Bug不会在用户正常使用的时候出现，相关API仅仅是一些测试工具、残疾人补助设备等会去调用他们来使用Accessibility服务。
 另外，我觉得在stability测试环境下，如果真的存在多线程问题，uiautomator会频繁的使用这些API进行操作，出现问题的几率    应该挺大的，事实上此bug也仅仅出现过一次，这是比较奇怪的
  所以我建议还是降级观察一下吧
    


huzhengyu@51187-26-1:~/WORK_DIRECTORY/idol4sm8996/out/target/product/idol4s_cn/system/priv-app/SystemUI$ sudo adb logcat | grep AndroidRuntime
08-01 10:00:58.801  5577  5577 D AndroidRuntime: Shutting down VM
08-01 10:00:58.802  5577  5577 E AndroidRuntime: FATAL EXCEPTION: main
08-01 10:00:58.802  5577  5577 E AndroidRuntime: Process: com.tct.supershot, PID: 5577
08-01 10:00:58.802  5577  5577 E AndroidRuntime: java.lang.IllegalArgumentException: View=android.widget.FrameLayout{9885779 VFE...... ......ID 0,0-1080,1920} not attached to window manager
08-01 10:00:58.802  5577  5577 E AndroidRuntime: 	at android.view.WindowManagerGlobal.findViewLocked(WindowManagerGlobal.java:424)
08-01 10:00:58.802  5577  5577 E AndroidRuntime: 	at android.view.WindowManagerGlobal.removeView(WindowManagerGlobal.java:350)
08-01 10:00:58.802  5577  5577 E AndroidRuntime: 	at android.view.WindowManagerImpl.removeView(WindowManagerImpl.java:113)
08-01 10:00:58.802  5577  5577 E AndroidRuntime: 	at com.tct.supershot.GlobalScreenshot$14.onAnimationEnd(GlobalScreenshot.java:1059)
08-01 10:00:58.802  5577  5577 E AndroidRuntime: 	at android.animation.ValueAnimator.endAnimation(ValueAnimator.java:1239)
08-01 10:00:58.802  5577  5577 E AndroidRuntime: 	at android.animation.ValueAnimator$AnimationHandler.doAnimationFrame(ValueAnimator.java:766)
08-01 10:00:58.802  5577  5577 E AndroidRuntime: 	at android.animation.ValueAnimator$AnimationHandler$1.run(ValueAnimator.java:801)
08-01 10:00:58.802  5577  5577 E AndroidRuntime: 	at android.view.Choreographer$CallbackRecord.run(Choreographer.java:858)
08-01 10:00:58.802  5577  5577 E AndroidRuntime: 	at android.view.Choreographer.doCallbacks(Choreographer.java:670)
08-01 10:00:58.802  5577  5577 E AndroidRuntime: 	at android.view.Choreographer.doFrame(Choreographer.java:603)
08-01 10:00:58.802  5577  5577 E AndroidRuntime: 	at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:844)
08-01 10:00:58.802  5577  5577 E AndroidRuntime: 	at android.os.Handler.handleCallback(Handler.java:739)
08-01 10:00:58.802  5577  5577 E AndroidRuntime: 	at android.os.Handler.dispatchMessage(Handler.java:95)
08-01 10:00:58.802  5577  5577 E AndroidRuntime: 	at android.os.Looper.loop(Looper.java:148)
08-01 10:00:58.802  5577  5577 E AndroidRuntime: 	at android.app.ActivityThread.main(ActivityThread.java:5473)
08-01 10:00:58.802  5577  5577 E AndroidRuntime: 	at java.lang.reflect.Method.invoke(Native Method)
08-01 10:00:58.802  5577  5577 E AndroidRuntime: 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)
08-01 10:00:58.802  5577  5577 E AndroidRuntime: 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616)



7.Defect-2266822 suggestion window FC

@@ -9829,7 +9837,11 @@ public class TextView extends View implements ViewTreeObserver.OnPreDrawListener
      * @hide
      */
     protected void setSpan_internal(Object span, int start, int end, int flags) {
-        ((Editable) mText).setSpan(span, start, end, flags);
+        /*[BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu, 2016/06/12, Defect-2266822*/
+        //((Editable) mText).setSpan(span, start, end, flags);
+        final int textLength = getText().length();
+        ((Editable) mText).setSpan(span, start, Math.min(end,textLength), flags);
+        /*[BUGFIX]-Add-END by TCTNB.zhengyu.hu */
     }
 
     /**
@@ -9837,7 +9849,11 @@ public class TextView extends View implements ViewTreeObserver.OnPreDrawListener
      * @hide
      */
     protected void setCursorPosition_internal(int start, int end) {
-        Selection.setSelection(((Editable) mText), start, end);
+        /*[BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu, 2016/06/12, Defect-2266822*/
+        //Selection.setSelection(((Editable) mText), start, end);
+        final int textLength = getText().length();
+        Selection.setSelection(((Editable) mText), Math.min(start,textLength), Math.min(end,textLength));
+        /*[BUGFIX]-Add-END by TCTNB.zhengyu.hu */
     }






</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="CTS-Bug" prog_lang="custom-colors" readonly="False" tags="" unique_id="12">
			<rich_text></rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="simba6x" prog_lang="custom-colors" readonly="False" tags="" unique_id="176">
				<rich_text weight="heavy">1.3387403 [Google CTS][GTS]10 cases failed under com.google.android.media.gts.WidevineYouTubePerformanceTests </rich_text>
				<rich_text>  Multi-Media
集成libWVStreamControlAPI_L3 libwvdrm_L3后测试还是failed.
与权限相关的异常打开权限后，测试还是Failed.
 
最终的错误信息看，主要是视频播放的performance问题:
24712 24728 I YouTube Clear 30fps 1080P:   Component Name:        Performance Test
24712 24728 I YouTube Clear 30fps 1080P:   Component Description: Test that the sampled weighted inter-frame time is relatively close to the group of known good weighted inter-frame times.
24712 24728 I YouTube Clear 30fps 1080P:   Component Result:      Fai
24712 24728 I YouTube Clear 30fps 1080P:     Check Tags:   postplay criteria
24712 24728 I YouTube Clear 30fps 1080P:     Check Result: Fail
24712 24728 I YouTube Clear 30fps 1080P:     Check Notes:  Device failed to meet expectations. The mean weighted interframe time was 44.463626 where the expected value was 33.333333. Some more useful information: mean=44.463626 variance=253.105469 samples=921
 针对播放视频performance问题不过的问题，需要multimedia team处理.


</rich_text>
				<rich_text weight="heavy">2.</rich_text>
				<rich_text foreground="#000000" weight="heavy">3443057</rich_text>
				<rich_text>  </rich_text>
				<rich_text weight="heavy">[Google CTS][GTS][process crash]process crash happens when test WidevineH264PlaybackTests or  WidevineHEVCPlaybackTests Multi-Media
</rich_text>
				<rich_text>
run gts -m </rich_text>
				<rich_text foreground="#3333ff">GtsMediaTestCases</rich_text>
				<rich_text> -t </rich_text>
				<rich_text foreground="#ff3366">com.google.android.media.gts.WidevineH264PlaybackTests#testClearWith1080P30</rich_text>
				<rich_text>
run gts -m GtsMediaTestCases -t com.google.android.media.gts.WidevineHEVCPlaybackTests#testClearWith1080P30

这两个CASE我更换了较好的网络环境测试,结果各有1次PASS.
 
经过分析,CASE在运行过程中,需要下载两个视频文件,其中1个约2MB大,另外一个约180MB大小,对网络环境要求比较苛刻,如果不能在300s内将文件下载完毕,会cashed.
 
请更换较好的网络环境再测试一下,谢谢~
 
明早我司网络环境好的时候,我也会尝试多跑几次.


</rich_text>
				<rich_text weight="heavy">3.</rich_text>
				<rich_text foreground="#000000" weight="heavy">3403161</rich_text>
				<rich_text weight="heavy"> [Google CTS][Verifier][Audio]case 'Audio Loopback Latency' is failed</rich_text>
				<rich_text> Multi-Media
</rich_text>
				<rich_text foreground="#000000">正在确认</rich_text>
				<rich_text link="webs http://172.16.12.204:8080/source/s?refs=LOW_LATENCY_CAPTURE_USE_CASE&amp;project=n8996">LOW_LATENCY_CAPTURE_USE_CASE</rich_text>
				<rich_text> 是否会有影响；
</rich_text>
				<rich_text link="webs http://172.16.11.162:8081/#/c/335804/">http://172.16.11.162:8081/#/c/335804/</rich_text>
				<rich_text>

</rich_text>
				<rich_text link="webs http://172.16.11.162:8081/#/c/335804/1/hal/msm8974/platform.h">hal/msm8974/platform.h</rich_text>
				<rich_text>
/* MODIFIED-BEGIN by bo.yu, 2016-11-14,Defect-3403161*/
/* MODIFIED-BEGIN by bo.yu, 2016-08-11,BUG-2633295*/
#define LOW_LATENCY_CAPTURE_USE_CASE 1
//#ifdef TCT_FEATURE_VOIP_CALL
//#define LOW_LATENCY_CAPTURE_USE_CASE 0
//#else
//#define LOW_LATENCY_CAPTURE_USE_CASE 1
//#endif
/* MODIFIED-END by bo.yu,BUG-2633295*/
/* MODIFIED-END by bo.yu, 2016-11-14,Defect-3403161*/

</rich_text>
				<rich_text weight="heavy">4.</rich_text>
				<rich_text foreground="#000000" weight="heavy">3466080</rich_text>
				<rich_text weight="heavy"> [Google CTS][Verifier][Device Owner Tests][Policy transparency test]case 'set password quality' is failed</rich_text>
				<rich_text> App
reproduced steps:
Enter to Device Owner Tests and enter to Policy transparency test3445910
then test case  'set password quality' 

when set the quality as 'numric' ,but input alpha as password.
expected result: can no input alpha as password.
test rusult:  can input alpha as password  —— </rich_text>
				<rich_text foreground="#ff0033">NOK</rich_text>
				<rich_text>


</rich_text>
				<rich_text weight="heavy">5. </rich_text>
				<rich_text foreground="#000000" weight="heavy">3445910</rich_text>
				<rich_text weight="heavy"> [Google CTS][Verifier][USB]case 'USB Accessory Test' is failed</rich_text>
				<rich_text>   Framework
DEFECT DESCRIPTION:

CTS Verifier version: CTS Verifier 7.0_r3

case 'USB Accessory Test' is failed

administrator@50854-1:~/android-cts-verifier-7.0_r3$ ./cts-usb-accessory
CTS USB Accessory Tester
Found possible Android device (8087:24) - attempting to switch to accessory mode...
Failed to read protocol version
Failed to start accessory mode
Found possible Android device (1d6b:2) - attempting to switch to accessory mode...
Failed to read protocol version
Failed to start accessory mode
Found possible Android device (1bbb:af3d) - attempting to switch to accessory mode...
Failed to read protocol version
Failed to start accessory mode
Found possible Android device (8087:24) - attempting to switch to accessory mode...
Failed to read protocol version
Failed to start accessory mode
Found possible Android device (1d6b:2) - attempting to switch to accessory mode...
Failed to read protocol version
Failed to start accessory mode

注： 测试该case时需要先将USB 连接设置为 charging状态，故没有抓adb log。

USB的perso上配置了一个diag的参数，用来保护USB的隐藏端口，把这个值关掉就可以测试通过。代码中可以直接去除，但是这样端口保护就失效了。故建议不修改代码。
在手机上通过命令关闭。命令如下：###2324#



测试步骤：
 
1、手机默认usb diag是关闭的，如果不能确认，使用###2324#，如果上面显示on就是打开的，如果要关闭同样使用###2324#，上面显示off就是已经关闭。
 
2、手机设置成charging only 模式
 
3、sudo ./cts-usb-accessory 执行脚本，注意用sudo 命令确保权限（此时可以看到手机不处于五种连接方式的任意一种，这个脚本就是让手机处于USB accessory模式）
 
4、 打开cts verifier进行测试。
 
注意用 cts verifier测试前确保USB 处于 accessory模式。
 
跟测试沟通过程中，测试人员提到其他手机只要脚本在跑随时插拔手机都能通过。本地测试也是ok，只要确认手机处于USB accessory模式。


</rich_text>
				<rich_text weight="heavy">6. </rich_text>
				<rich_text foreground="#000000" weight="heavy">3466066</rich_text>
				<rich_text weight="heavy"> [Google CTS][Verifier][Device Owner Tests]case 'Disallow configuring Bluetooth' is failed</rich_text>
				<rich_text> App
Enter to Device Owner Tests and test case 'Disallow configuring Bluetooth'   --failed due to no Support message triggered

</rich_text>
				<rich_text weight="heavy">7. 3420255 [Google CTS][Verifier][Camera ITS]most cases in scenario 1 and case in scenario 2 are failed</rich_text>
				<rich_text> Camera

</rich_text>
				<rich_text weight="heavy">8.</rich_text>
				<rich_text foreground="#000000" weight="heavy">3418442</rich_text>
				<rich_text weight="heavy"> [Google CTS][CTS][CtsThemeHostTestCases] case 'android.theme.cts.ThemeHostTest#testThemes' is failed</rich_text>
				<rich_text>
case 'android.theme.cts.ThemeHostTest#testThemes' is failedandroid.theme.cts.ThemeHostTest#testThemes </rich_text>
				<rich_text foreground="#ff0000">fail</rich_text>
				<rich_text> junit.framework.AssertionFailedError: 33 failures in theme testsuggested CTS run commands:run cts -m CtsThemeHostTestCases (该module下只有一个case
需要将语言设为english

【分析】
此case 在单跑时候可以pass ，在全局跑的时候会failed 
failed 的原因是测试的CTS android.theme.app apk 没有卸载成功，导致case failed ，

11-09 17:26:54.418  4547  4547 I jinshan : cursor count is :1
11-09 17:26:54.418  4547  4547 W System.err: android.content.pm.PackageManager$NameNotFoundException: android.theme.app
11-09 17:26:54.418  4547  4547 W System.err:     at android.app.ApplicationPackageManager.getApplicationInfoAsUser(ApplicationPackageManager.java:353)
11-09 17:26:54.418  4547  4547 W System.err:     at android.app.ApplicationPackageManager.getApplicationInfo(ApplicationPackageManager.java:335)
11-09 17:26:54.418  4547  4547 W System.err:     at com.tct.phoneguard.database.MyDAO.getAppInfosFromCursor(MyDAO.java:439)
11-09 17:26:54.418  4547  4547 W System.err:     at com.tct.phoneguard.database.MyDAO.getAppInfosFromDBByPackageName(MyDAO.java:532)
11-09 17:26:54.418  4547  4547 W System.err:     at com.tct.phoneguard.database.MyDAO.getAppInfosFromDBByPackageName(MyDAO.java:536)
11-09 17:26:54.418  4547  4547 W System.err:     at com.tct.phoneguard.database.MyDAO.getAppInfoFromDBByPackageName(MyDAO.java:541)
11-09 17:26:54.418  4547  4547 W System.err:     at com.tct.phoneguard.service.PhoneManagerService.unInstallApk(PhoneManagerService.java:184)
11-09 17:26:54.418  4547  4547 W System.err:     at com.tct.phoneguard.service.PhoneManagerService.onStartCommand(PhoneManagerService.java:94)
11-09 17:26:54.418  4547  4547 W System.err:     at android.app.ActivityThread.handleServiceArgs(ActivityThread.java:3382)
11-09 17:26:54.418  4547  4547 W System.err:     at android.app.ActivityThread.-wrap21(ActivityThread.java)
11-09 17:26:54.418  4547  4547 W System.err:     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1650)
11-09 17:26:54.418  4547  4547 W System.err:     at android.os.Handler.dispatchMessage(Handler.java:102)
11-09 17:26:54.418  4547  4547 W System.err:     at android.os.Looper.loop(Looper.java:154)
11-09 17:26:54.418  4547  4547 W System.err:     at android.app.ActivityThread.main(ActivityThread.java:6162)
11-09 17:26:54.418  4547  4547 W System.err:     at java.lang.reflect.Method.invoke(Native Method)
11-09 17:26:54.418  4547  4547 W System.err:     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:865)
11-09 17:26:54.418  4547  4547 W System.err:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:755)
11-09 17:26:54.437  4547  4547 I jinshan : remove app and package name is android.theme.app
 


 
【ACTION】
此case 本地测试多次测试也可以pass ，CTS 的case  是可以续跑的，如果续跑成功的话，不会影响最后的测试报告，因为跑一次CTS 需要几天，建议测试帮忙monitor 此问题，建议此bug 降级


</rich_text>
				<rich_text weight="heavy">9. </rich_text>
				<rich_text foreground="#000000" weight="heavy">3462796</rich_text>
				<rich_text weight="heavy"> [Google CTS][Verifier][BYOD Managed Provisioning]two location related cases are failed</rich_text>
				<rich_text> app
Enter to BYOD Managed Provisioning and test case 'Enable location' and 'Primdary receives updates while work location is disabled'

</rich_text>
				<rich_text weight="heavy">10. </rich_text>
				<rich_text foreground="#000000" weight="heavy">3462725</rich_text>
				<rich_text weight="heavy"> [Google CTS][Verifier][BYOD Managed Provisioning]'Camera support cross profile video capture  (with extra output path)' is failed</rich_text>
				<rich_text>
Enter to BYOD Managed Provisioning and test case 'Camera support cross profile video capture (with extra output path)'

</rich_text>
				<rich_text weight="heavy">11. </rich_text>
				<rich_text foreground="#000000" weight="heavy">3461731</rich_text>
				<rich_text weight="heavy"> [Google CTS][Verifier][BYOD Managed Provisioning]3 cases failed under 'Policy tranparency'</rich_text>
				<rich_text>
	
</rich_text>
				<rich_text weight="heavy">12. [3408134][[Google CTS][CTS][FC]Print Spooler stopped during CTS test]</rich_text>
				<rich_text>
CTS module name: CtsPrintTestCases.

根据log分析，应该是该路径res/drawable-xxxhdpi-v4下读取不到图片ic_check_circle.png导致的
 
--------- beginning of crash
11-09 13:53:41.333 E/AndroidRuntime( 6018): FATAL EXCEPTION: main
11-09 13:53:41.333 E/AndroidRuntime( 6018): Process: com.android.printspooler, PID: 6018
11-09 13:53:41.333 E/AndroidRuntime( 6018): java.lang.NumberFormatException: For input string: &quot;res/drawable-xxxhdpi-v4/ic_check_circle.png&quot;
11-09 13:53:41.333 E/AndroidRuntime( 6018):     at java.lang.Integer.parseInt(Integer.java:521)
11-09 13:53:41.333 E/AndroidRuntime( 6018):     at java.lang.Integer.parseInt(Integer.java:556)
11-09 13:53:41.333 E/AndroidRuntime( 6018):     at com.android.printspooler.util.MediaSizeUtils$MediaSizeComparator.&lt;init&gt;(MediaSizeUtils.java:104)
11-09 13:53:41.333 E/AndroidRuntime( 6018):     at com.android.printspooler.ui.PrintActivity.onPrinterRegistryReady(PrintActivity.java:335)
11-09 13:53:41.333 E/AndroidRuntime( 6018):     at com.android.printspooler.ui.PrintActivity.-com_android_printspooler_ui_PrintActivity_lambda$2(PrintActivity.java:293)
11-09 13:53:41.333 E/AndroidRuntime( 6018):     at com.android.printspooler.ui.PrintActivity$-void_-com_android_printspooler_ui_PrintActivity_lambda$1_android_os_IBinder_documentAdapter_LambdaImpl0.run(PrintActivity.java)
11-09 13:53:41.333 E/AndroidRuntime( 6018):     at android.os.Handler.handleCallback(Handler.java:751)
11-09 13:53:41.333 E/AndroidRuntime( 6018):     at android.os.Handler.dispatchMessage(Handler.java:95)
11-09 13:53:41.333 E/AndroidRuntime( 6018):     at android.os.Looper.loop(Looper.java:154)
11-09 13:53:41.333 E/AndroidRuntime( 6018):     at android.app.ActivityThread.main(ActivityThread.java:6162)
11-09 13:53:41.333 E/AndroidRuntime( 6018):     at java.lang.reflect.Method.invoke(Native Method)
11-09 13:53:41.333 E/AndroidRuntime( 6018):     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:865)
11-09 13:53:41.333 E/AndroidRuntime( 6018):     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:755)
11-09 13:53:41.334 I/ActivityManager( 1347): handleApplicationCrash


</rich_text>
				<rich_text weight="heavy">13. </rich_text>
				<rich_text foreground="#000000" weight="heavy">3460247</rich_text>
				<rich_text weight="heavy"> [Google CTS][Verifier][FC]CTS Verifier is FC when test case 'Organiztion Info''</rich_text>
				<rich_text>
reproduced steps:
Enter to BYOD Managed Provisioning and test case 'Organiztion Info'
After set color code, the click Go ——then CTS Verifier has stopped.

</rich_text>
				<rich_text weight="heavy">14. </rich_text>
				<rich_text foreground="#000000" weight="heavy">3389367</rich_text>
				<rich_text weight="heavy"> [Google CTS][GTS] com.google.android.os.gts.SysConfigTest#testAllowInDataUsageSaveApplied under GtsOsTestCases is failed</rich_text>
				<rich_text>
run gts -m GtsOsTestCases -t com.google.android.os.gts.SysConfigTest#testAllowInDataUsageSaveApplied 


Shaohua, XU(WMD PIC NB VAL-NB-TCT) (shaohua.xu), 2016-11-14 09:44:19:

@chao.hu,
 
测试时没有改变Data saver的默认配置，thx
---------------------------------------------------------------------------------------------------------------------------------------
Comments #3

chao.hu (chao.hu), 2016-11-12 14:17:42:

Hi shaohua
      测试确认：
Setting &gt; Data usage &gt;  Data saver, is on or off?
默认是关闭的，如果打开了，请确认是否限制Google Play服务，
在限制 Google Play服务 的情况下会导致 com.google.android.os.gts.SysConfigTest#testAllowInDataUsageSaveApplied fail


</rich_text>
				<rich_text weight="heavy">15. </rich_text>
				<rich_text foreground="#000000" weight="heavy">3391389</rich_text>
				<rich_text weight="heavy"> [Google CTS][GTS] 2 cases under Module 'GtsPermissionTestCases' are failed</rich_text>
				<rich_text>

run gts -m GtsPermissionTestCases -t com.google.android.permission.gts.DefaultPermissionGrantPolicyTest#testDefaultGrants

本地在4F1G+4F1U的perso，测试通过
此case测试soundrecord camera launcher的默认权限，建议恢复出场设置之后，
进入launcher界面不要点击弹出的任何允许权限的窗口


第一个进入launcher界面不要修改launcher界面com.google.android.permission.gts.DefaultPermissionGrantPolicyTest#testDefaultGrants pass
修改phototable代码，com.google.android.permission.gts.InitialRuntimePermissionStateTest#testAllSystemAppsUsingRuntimePermissionsTargetMncAndAboveSdk pass,本地验证通过

  &lt;uses-sdk android:minSdkVersion=&quot;17&quot; android:targetSdkVersion=&quot;17&quot;/&gt;
  
  &lt;!--Mod by chao.hu for Defect3391389 begain--&gt;
  &lt;uses-sdk android:minSdkVersion=&quot;17&quot; android:targetSdkVersion=&quot;24&quot;/&gt;
  &lt;!--Mod by chao.hu for Defect3391389 end--&gt;


</rich_text>
				<rich_text weight="heavy">16. </rich_text>
				<rich_text foreground="#000000" weight="heavy">3412005</rich_text>
				<rich_text weight="heavy"> [Google CTS][CTS][CtsDevicePolicyManagerTestCases]com.android.cts.devicepolicy.MixedManagedProfileOwnerTest#testPackageInstallUserRestrictions is faiedl</rich_text>
				<rich_text>
module : CtsDevicePolicyManagerTestCases

case: com.android.cts.devicepolicy.MixedManagedProfileOwnerTest#testPackageInstallUserRestrictions

suggested CTS run commands:

run cts -m CtsDevicePolicyManagerTestCases -t com.android.cts.devicepolicy.MixedManagedProfileOwnerTest#testPackageInstallUserRestrictions

</rich_text>
				<rich_text weight="heavy">17. </rich_text>
				<rich_text foreground="#000000" weight="heavy">3431747</rich_text>
				<rich_text weight="heavy"> [Google CTS][Verifier][fingerPrint]case 'Keyguard Disable Features Test' is failed</rich_text>
				<rich_text>

请在setting -&gt; Security界面添加finger print设置项，否则影响CTS verifier测试。
 
相关的case包括 Keyguard Disable Features Test 和Autentication-boud keys

</rich_text>
				<rich_text weight="heavy">18. </rich_text>
				<rich_text foreground="#000000" weight="heavy">3460247</rich_text>
				<rich_text weight="heavy"> [Google CTS][Verifier][FC]CTS Verifier is FC when test case 'Organiztion Info''</rich_text>
				<rich_text>
预先设置screen lock密码，测试该case时不会出现FC.

</rich_text>
				<rich_text weight="heavy">19. </rich_text>
				<rich_text foreground="#000000" weight="heavy">3396884</rich_text>
				<rich_text weight="heavy"> [Google CTS][AFW]testNonSuwPoProvisioning is failed, pls check whether it is caused by UE software</rich_text>
				<rich_text>
</rich_text>
				<rich_text foreground="#3333ff">testNonSuwPoProvisioning</rich_text>
				<rich_text> in class 'com.android.afwtest.nonsuwpoprovisioning.NonSuwPoProvisioningTest' is failed,

</rich_text>
				<rich_text weight="heavy">20.</rich_text>
				<rich_text foreground="#000000" weight="heavy">3412005</rich_text>
				<rich_text weight="heavy"> [Google CTS][CTS][CtsDevicePolicyManagerTestCases]com.android.cts.devicepolicy.MixedManagedProfileOwnerTest#testPackageInstallUserRestrictions is faiedl</rich_text>
				<rich_text>

</rich_text>
				<rich_text weight="heavy">21. 3420255][[Google CTS][Verifier][Camera ITS]most cases in scenario 1 and case in scenario 2 are failed</rich_text>
				<rich_text>


</rich_text>
				<rich_text weight="heavy">22.[3337916][[Google CTS][Verifier]case 'Cross profile intent filters are set' is failed]</rich_text>
				<rich_text>

Enter to BYOD Managed Provisioning and tap Cross profile intent filters are set --&gt;failed


</rich_text>
				<rich_text weight="heavy">23. </rich_text>
				<rich_text foreground="#000000" weight="heavy">3412295</rich_text>
				<rich_text weight="heavy"> [Google CTS][CTS][CtsAppSecurityHostTestCases]there are 7 (arm64-v8a)+ 17 (armeabi-v7a) cases failed under module CtsAppSecurityHostTestCases</rich_text>
				<rich_text>

与SD卡相关，最好用高速卡测试。


</rich_text>
				<rich_text weight="heavy">24.</rich_text>
				<rich_text foreground="#000000" weight="heavy">3508163</rich_text>
				<rich_text weight="heavy"> [Google CTS][Verifier][Audio]case 'Audio Frequency Speaker Test' is failed</rich_text>
				<rich_text>

</rich_text>
				<rich_text weight="heavy">25. </rich_text>
				<rich_text foreground="#000000" weight="heavy">3508145</rich_text>
				<rich_text weight="heavy"> [Google CTS][Verifier][sensors]5 cases under SENSORS block are failed</rich_text>
				<rich_text>

</rich_text>
				<rich_text weight="heavy">26. 3508186][[Google CTS][Verifier] case 'Organiztion Info''  is failed]</rich_text>
				<rich_text>

这一项测试，需要先测试BYOD Managed Provisioning 下的select work lock test以后才可以，测试通过。此问题可以关闭
测试完Select work lock test，继续测试下一条Confirm work lock test后，再测试Organization Info，则Organization Info无法PASS.

</rich_text>
				<rich_text weight="heavy">27.[3466080][[Google CTS][Verifier][Device Owner Tests][Policy transparency test]case 'set password quality</rich_text>
				<rich_text>
 在Nexus 6P (android 7.0) 上测试的结果跟simba 6X一样，可以关闭该PR






</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="idol4s" prog_lang="custom-colors" readonly="False" tags="" unique_id="177">
				<rich_text>android-cts/tools$./cts-tradefed


&lt;TestPackage name=&quot;dEQP-GLES3&quot; appPackageName=&quot;</rich_text>
				<rich_text foreground="#ffff00000000">com.drawelements.deqp.gles3</rich_text>
				<rich_text>&quot; abi=&quot;arm64-v8a&quot; digest=&quot;&quot;&gt;
    &lt;TestSuite name=&quot;dEQP-GLES3&quot;&gt;
      &lt;TestSuite name=&quot;functional&quot;&gt;
        &lt;TestSuite name=&quot;color_clear&quot;&gt;
        
 </rich_text>
				<rich_text foreground="#ffff00000000">cts-tf &gt; run cts --package com.drawelements.deqp.gles3</rich_text>
				<rich_text>
 cts-tf &gt; run cts --class dEQP-GLES3.functional.color_clear  
 
  &lt;TestPackage name=&quot;CtsContentTestCases&quot; appPackageName=&quot;android.content&quot; abi=&quot;arm64-v8a&quot; digest=&quot;463bf808a823d835d7c98c554b848722ab762771&quot;&gt;
    &lt;TestSuite name=&quot;android&quot;&gt;
      &lt;TestSuite name=&quot;content&quot;&gt;
        &lt;TestSuite name=&quot;cts&quot;&gt;
          &lt;TestCase name=&quot;AsyncQueryHandlerTest&quot; priority=&quot;&quot;&gt;
            &lt;Test name=&quot;testConstructor&quot; result=&quot;pass&quot; starttime=&quot;Mon Dec 21 15:24:49 CST 2015&quot; endtime=&quot;Mon Dec 21 15:24:50 CST 2015&quot; /&gt;

</rich_text>
				<rich_text foreground="#ffff00000000"> run cts -c android.content.cts.AsyncQueryHandlerTest -m testConstructor</rich_text>
				<rich_text>
 

 
</rich_text>
				<rich_text weight="heavy">1.  Defect 1106609 下面CTS无法PASS ， 关于存储卡</rich_text>
				<rich_text>
 com.android.cts.appsecurity.AdoptableHostTest
-- testApps
fail

java.lang.AssertionError:  Devices that claim to support adoptable storage must have adoptable  media inserted during CTS to verify correct behavior at  com.android.cts.appsecurity.AdoptableHostTest.getAdoptionDisk(AdoptableHostTest.java:288)
-- testEjected
fail

java.lang.AssertionError:  Devices that claim to support adoptable storage must have adoptable  media inserted during CTS to verify correct behavior at  com.android.cts.appsecurity.AdoptableHostTest.getAdoptionDisk(AdoptableHostTest.java:288)
-- testPackageInstaller
fail

java.lang.AssertionError:  Devices that claim to support adoptable storage must have adoptable  media inserted during CTS to verify correct behavior at  com.android.cts.appsecurity.AdoptableHostTest.getAdoptionDisk(AdoptableHostTest.java:288)
-- testPrimaryStorage
fail

java.lang.AssertionError:  Devices that claim to support adoptable storage must have adoptable  media inserted during CTS to verify correct behavior at  com.android.cts.appsecurity.AdoptableHostTest.getAdoptionDisk(AdoptableHostTest.java:288)
com.android.cts.appsecurity.ExternalStorageHostTest
-- testExternalStorageGifts
fail

java.lang.AssertionError: Failed to create user: Error: couldn't create User.
-- testExternalStorageNone
fail

java.lang.AssertionError: Failed to create user: Error: couldn't create User.
-- testExternalStorageRead
fail

java.lang.AssertionError: Failed to create user: Error: couldn't create User.
-- testExternalStorageWrite
fail

java.lang.AssertionError: Failed to create user: Error: couldn't create User.
-- testMultiUserStorageIsolated
fail
 
 </rich_text>
				<rich_text weight="heavy">解答：</rich_text>
				<rich_text>
 这个Defect可以分为两个部分
 
第一个部分：
 com.android.cts.appsecurity.AdoptableHostTest
----testApps
----testEjected
----testPackageInstaller
----testPrimaryStorage
</rich_text>
				<rich_text background="#ff0000">通过插入外部存储卡以后，CTS都PASS</rich_text>
				<rich_text>
 通过
</rich_text>
				<rich_text foreground="#00000000ffff"> run cts -c com.android.cts.appsecurity.AdoptableHostTest</rich_text>
				<rich_text>
 
 
第二个部分：
com.android.cts.appsecurity.ExternalStorageHostTest
---testExternalStorageGifts
---testExternalStorageNone
---testExternalStorageWrite
---testMuiltiUserStorageIsolated
出现couldn't create user的原因是</rich_text>
				<rich_text background="#ff0000">现存的用户数已经是最大的用户数</rich_text>
				<rich_text>，导致不能再通过创建新得的用户数来测试。通过恢复出厂设置，CTS都 PASS
其中 ---testExternalStorageNone 的测试需要</rich_text>
				<rich_text background="#ff0000">手机联网</rich_text>
				<rich_text>的状态，因为它其中有一项测试testDownloadManagerPackage会从一个网站下载一些东西，不然会出现下面的错误导致Fail .

通过
</rich_text>
				<rich_text foreground="#00000000ffff">run cts -c com.android.cts.appsecurity.ExternalStorageHostTest</rich_text>
				<rich_text>

 12-16 16:05:28 I/ace3c2e3: com.android.cts.appsecurity.ExternalStorageHostTest#testExternalStorageNone FAIL
java.lang.AssertionError: on-device tests failed:
com.android.cts.externalstorageapp.ExternalStorageTest#testDownloadManagerPackage:
java.util.concurrent.TimeoutException: Test timed out after 0 milliseconds
at android.support.test.internal.runner.junit3.AndroidTestResult.runProtected(AndroidTestResult.java:86)
at junit.framework.TestResult.run(TestResult.java:118)
at android.support.test.internal.runner.junit3.AndroidTestResult.run(AndroidTestResult.java:55)
at junit.framework.TestCase.run(TestCase.java:124)
at android.support.test.internal.runner.junit3.NonLeakyTestSuite$NonLeakyTest.run(NonLeakyTestSuite.java:63)
at junit.framework.TestSuite.runTest(TestSuite.java:243)
at junit.framework.TestSuite.run(


</rich_text>
				<rich_text weight="heavy">2.问题[CTS]com.drawelements.deqp.gles3 failed， 关于Open GL， 反转180</rich_text>
				<rich_text>
dEQP-GLES3.functional.color_clear 
-- long_masked_rgb Fail
=== with config {glformat=rgba8888d24s8ms4,rotation=unspecified,surfacetype=window} === Fail: 
-- long_masked_rgba
=== with config {glformat=rgba8888d24s8ms4,rotation=unspecified,surfacetype=window} === Fail: Fail

run cts -c dEQP-GLES3.functional.color_clear










 </rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Mercurry" prog_lang="custom-colors" readonly="False" tags="" unique_id="178">
				<rich_text>1. </rich_text>
				<rich_text foreground="#000000">3418875</rich_text>
				<rich_text> [Mercury][AAH536][Google CTS]Google CTS test appear multiple times UI interface can't awaken and lead to black screen interruption.


2. </rich_text>
				<rich_text foreground="#000000">3199128</rich_text>
				<rich_text>  [Mercury][AAH206][Google CTS]Google CTS test process happen many times interruption.

1.10-21 01:58:35 I/ConsoleReporter: [1999/35352 arm64-v8a CtsDeqpTestCases 1163674993] dEQP-GLES31.functional.shaders.builtin_functions.integer.findmsb#ivec3_mediump_compute pass
10-21 01:58:42 E/TestInvocation</rich_text>
				<rich_text foreground="#ffff00000000">: Caught AssertionError while running invocation: java.lang.AssertionError: search postcondition failed
10-21 01:58:42 E/TestInvocation: search postcondition failed
java.lang.AssertionError: search postcondition failed</rich_text>
				<rich_text>
    at com.drawelements.deqp.runner.DeqpTestRunner.selectRunBatch(DeqpTestRunner.java:1236)
    at com.drawelements.deqp.runner.DeqpTestRunner.runTests(DeqpTestRunner.java:1307)
    at com.drawelements.deqp.runner.DeqpTestRunner.run(DeqpTestRunner.java:2025)
    at com.android.compatibility.common.tradefed.testtype.ModuleDef.run(ModuleDef.java:258)
    at com.android.compatibility.common.tradefed.testtype.CompatibilityTest.run(CompatibilityTest.java:365)
    at com.android.tradefed.invoker.TestInvocation.runTests(TestInvocation.java:716)
    at com.android.tradefed.invoker.TestInvocation.prepareAndRun(TestInvocation.java:491)
    at com.android.tradefed.invoker.TestInvocation.performInvocation(TestInvocation.java:386)
    at com.android.tradefed.invoker.TestInvocation.invoke(TestInvocation.java:166)
    at com.android.tradefed.command.CommandScheduler$InvocationThread.run(CommandScheduler.java:471)
 
</rich_text>
				<rich_text foreground="#ffff00000000">10-21 01:58:42 W/ResultReporter: Invocation failed: java.lang.AssertionError: search postcondition failed</rich_text>
				<rich_text>
10-21 01:58:42 I/ResultReporter: Saved logs for device_logcat in /home/zgy/00_Total_TestSuite/7.0-android-cts-7.0_R1/android-cts/tools/./../../android-cts/logs/2016.10.20_14.10.11/device_logcat_7035820588547795240.zip
10-21 01:58:43 I/ResultReporter: Saved logs for host_log in /home/zgy/00_Total_TestSuite/7.0-android-cts-7.0_R1/android-cts/tools/./../../android-cts/logs/2016.10.20_14.10.11/host_log_7850689640387991346.zip
10-21 01:58:43 I/ResultReporter: Invocation finished in 11h 48m 32s. PASSED: 37351, FAILED: 0, MODULES: 1 of 277
10-21 01:58:43 I/ResultReporter: Test Result: /home/zgy/00_Total_TestSuite/7.0-android-cts-7.0_R1/android-cts/results/2016.10.20_14.10.11/test_result.xml
10-21 01:58:44 I/ResultReporter: Full Result: /home/zgy/00_Total_TestSuite/7.0-android-cts-7.0_R1/android-cts/results/2016.10.20_14.10.

提交的patch， 修改的是drivers/usb/gadget/function/f_fs.c的代码

</rich_text>
				<rich_text link="webs http://172.16.11.162:8081/#/c/335268/">http://172.16.11.162:8081/#/c/335268/</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Performance-Bug" prog_lang="custom-colors" readonly="False" tags="" unique_id="44">
			<rich_text scale="h2" weight="heavy">1. 在Launch界面左右摆动壁纸的parallaxUI特效有卡吨现象  Defect-1246250</rich_text>
			<rich_text scale="h2">  </rich_text>
			<rich_text>
  
    应用从相关陀螺仪传感器（Gyroscope）读取数据，然后根据数据作出对应的行为
    应用端代码是写在BeautifiedGyro.java 的部分，里面有两个概念一个eventTimeDiff指的是底层硬件发出event的时间间隔， 一个是timeDiff 指的是onSensorChanged两次执行的时间间隔，而卡顿在日志中具体表现为timeDiff &gt; 40, 出现jank
     应用采样率的设置为注册监听这个传感器的时候， mSensorManager.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=registerListener&amp;project=gapp_rel3">registerListener</rich_text>
			<rich_text>(mSensorEventListener, </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=sensor&amp;project=gapp_rel3">sensor</rich_text>
			<rich_text>,  </rich_text>
			<rich_text weight="heavy">采样率</rich_text>
			<rich_text>, mHandler);
     其中采样率可以为</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/frameworks/base/core/java/android/hardware/SensorManager.java#SENSOR_DELAY_FASTEST">SENSOR_DELAY_FASTEST</rich_text>
			<rich_text>，  </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/frameworks/base/core/java/android/hardware/SensorManager.java#SENSOR_DELAY_GAME">SENSOR_DELAY_GAME</rich_text>
			<rich_text>， </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/frameworks/base/core/java/android/hardware/SensorManager.java#SENSOR_DELAY_UI">SENSOR_DELAY_UI</rich_text>
			<rich_text>， </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/m8976/frameworks/base/core/java/android/hardware/SensorManager.java#SENSOR_DELAY_NORMAL">SENSOR_DELAY_NORMAL</rich_text>
			<rich_text>， 或者直接设置为具体数值 单位为纳秒
 
317        </rich_text>
			<rich_text weight="heavy">private</rich_text>
			<rich_text> SensorEventListener </rich_text>
			<rich_text foreground="#ff6666" weight="heavy">mSensorEventListener</rich_text>
			<rich_text> = </rich_text>
			<rich_text weight="heavy">new</rich_text>
			<rich_text> SensorEventListener(){
318        @Override
319        </rich_text>
			<rich_text weight="heavy">public</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> onSensorChanged(SensorEvent event){
320            </rich_text>
			<rich_text weight="heavy">long</rich_text>
			<rich_text> eventTimestamp = event.timestamp;
321            </rich_text>
			<rich_text weight="heavy">float</rich_text>
			<rich_text> eventTimeDiff = 0;
322            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (mPrevEventTimestamp &gt; 0){
323                </rich_text>
			<rich_text foreground="#ffff00000000" weight="heavy">eventTimeDiff</rich_text>
			<rich_text> = 1f / 1000 / 1000 * (eventTimestamp - mPrevEventTimestamp);
324            }
325            mPrevEventTimestamp = eventTimestamp;
326
327            // Use System timestamp instead of even timestamp
328            // because we want to detect and eliminate janks
329            // and it is not easy to detect janks from sensor events (which are always &quot;fine&quot;)
330            </rich_text>
			<rich_text weight="heavy">long</rich_text>
			<rich_text> now = System.currentTimeMillis();
331            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (mPrevTimestamp &gt; 0){
332                </rich_text>
			<rich_text weight="heavy">long</rich_text>
			<rich_text foreground="#ff6666"> t</rich_text>
			<rich_text foreground="#ff0000">imeDiff = now - mPrevTimestamp;</rich_text>
			<rich_text>
333                // Eliminate janks
334                </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (timeDiff &gt; 40){ // ms ~ &lt; 25 fps
335                    </rich_text>
			<rich_text foreground="#ff0000">Log.i(_.TAG, &quot;BeautifiedGyro.onSensorChanged(): jank detected, duration: &quot; + </rich_text>
			<rich_text foreground="#ff0000" weight="heavy">timeDiff</rich_text>
			<rich_text foreground="#ff0000"> + &quot; ms&quot;);</rich_text>
			<rich_text>
336                    eventTimeDiff = 0;
337                }
338            }
339            mPrevTimestamp = now;                                          
                   ......

   Framework中SensorService的threadloop中有个do-wihle循环会不断向底层传感器请求数据，然后输出到App
   
        在经过实验，根据日志发现在出现jank的地方，当SensorService的threadloop调用poll后，一直处于等待从Sensor传感器    读取数据状态，直到55ms左右以后才一次性得到11个event事件，然后向app端输出11个事件，而这55ms的时间正是读取11个事件所    需要的时间之和(5ms*11).  推测驱动那边的数据传到SensorService出现了堵塞
    
    01-11 21:15:41.484  1329  3194 E SensorService: hzy </rich_text>
			<rich_text foreground="#ff0000">begin Loop</rich_text>
			<rich_text> in SensorService
    01-11 21:15:41.</rich_text>
			<rich_text foreground="#ff0000">484</rich_text>
			<rich_text>  1329  3194 I    SensorService: SensorDevice-&gt;poll
    01-11 21:15:41.484  5889  5889 I mysensor: OK  : 3 ms     (这个是在app端打印的上一个循环的事件读取)
      
    01-11 21:15:38.</rich_text>
			<rich_text foreground="#ff0000">535</rich_text>
			<rich_text>  1329  3194 E    SensorService: hzy  loop  in SensorService 1
    01-11 21:15:38.535  1329  3194 E SensorService: hzy  loop  in    SensorService 2
    01-11 21:15:38.535  1329  3194 E SensorService: hzy loop in    SensorService 3
    01-11 21:15:38.535  1329  3194 E SensorService: hzy loop in    SensorService 4
    01-11 21:15:38.535  1329  3194 E SensorService: hzy loop in    SensorService 5
    01-11 21:15:38.535  1329  3194 E SensorService: hzy loop in    SensorService 6
    01-11 21:15:38.536  1329  3194 E SensorService: hzy </rich_text>
			<rich_text foreground="#ff0000"> end  Thread </rich_text>
			<rich_text>Loop in SensorService
    
    01-11 21:15:38.536  1329  3194 E SensorService: hzy </rich_text>
			<rich_text foreground="#ff0000">begin Loop</rich_text>
			<rich_text> in SensorService
    01-11 21:15:38.536  1329  3194 I SensorService:    SensorDevice-&gt;poll
    01-11 21:15:38.538  1329  3194 E SensorService: hzy  loop  in    SensorService 1
    01-11 21:15:38.538  1329  3194 E SensorService: hzy get Event from    SENSOR_TYPE_GYROSCOPE 
    01-11 21:15:38.538  1329  3194 E SensorService: hzy get Event from    SENSOR_TYPE_GYROSCOPE 
    01-11 21:15:38.538  1329  3194 E SensorService: hzy get Event from    SENSOR_TYPE_GYROSCOPE 
    01-11 21:15:38.538  1329  3194 E SensorService: hzy get Event from    SENSOR_TYPE_GYROSCOPE 
    01-11 21:15:38.538  1329  3194 E SensorService: hzy get Event from    SENSOR_TYPE_GYROSCOPE 
    01-11 21:15:38.538  1329  3194 E SensorService: hzy get Event from    SENSOR_TYPE_GYROSCOPE 
    01-11 21:15:38.538  1329  3194 E SensorService: hzy get Event from    SENSOR_TYPE_GYROSCOPE 
    01-11 21:15:38.538  1329  3194 E SensorService: hzy get Event from    SENSOR_TYPE_GYROSCOPE 
    01-11 21:15:38.538  1329  3194 E SensorService: hzy get Event from    SENSOR_TYPE_GYROSCOPE 
    01-11 21:15:38.538  1329  3194 E SensorService: hzy get Event from    SENSOR_TYPE_GYROSCOPE 
    01-11 21:15:38.538  1329  3194 E SensorService: hzy get Event from    SENSOR_TYPE_GYROSCOPE 
    ...
    01-11 21:15:38.540  5889  5889 E mysensor: Prev Timestamp:    1452518138485
    01-11 21:15:38.540  5889  5889 E mysensor: Now Timestamp:    1452518138539
    01-11 21:15:38.540  5889  5889 E </rich_text>
			<rich_text foreground="#ff0000">mysensor:       jank : 54 ms</rich_text>
			<rich_text>
    01-11 21:15:38.540  5889  5889 I mysensor: OK  : 1 ms
    01-11 21:15:38.540  5889  5889 I mysensor: OK  : 0 ms
    01-11 21:15:38.540  5889  5889 I mysensor: OK  : 0 ms
    01-11 21:15:38.540  5889  5889 I mysensor: OK  : 0 ms
    01-11 21:15:38.540  5889  5889 I mysensor: OK  : 0 ms
    01-11 21:15:38.540  5889  5889 I mysensor: OK  : 0 ms
    01-11 21:15:38.540  5889  5889 I mysensor: OK  : 0 ms
    01-11 21:15:38.540  5889  5889 I mysensor: OK  : 0 ms
    01-11 21:15:38.540  5889  5889 I mysensor: OK  : 0 ms
    01-11 21:15:38.540  5889  5889 I mysensor: OK  : 0 ms
    
    驱动在下面的代码中把相应的延迟去掉
    quicl/amss_8976/adsp_proc / adsp_proc/Sensors/dd/qcom/src/rpr0521_tct/</rich_text>
			<rich_text weight="heavy">sns_dd_rpr0521.c</rich_text>
			<rich_text>
    
    
    2.
    Music应用内部跳转过慢
    高提case：02490895
    

     Music windowAnimationStyle这个属性，自定义比 设为Null速度快
     查看Music的这个属性Style是在Music5.Dark 继承于Theme.AppCompat.Light.DarkActionBar
     Theme.AppCompat.Light.DarkActionBar是在V7兼容包上定义的， 继承于Base.Theme.AppCompat.Light.DarkActionBar
     Base.Theme.AppCompat.Light.DarkActionBar 定义在/frameworks/support/v7/appcompat/res/values/themes_base.xml中 
     继承于Base.Theme.AppCompat.Light 继承与Base.V7.Theme.AppCompat.Light
     继承于Platform.AppCompat.Light 
     继承于framework/base/core/res/res/values/themes.xml 中的 Theme.Light
     继承于Theme
     系统的windowAnimationStyle 属性就是在Theme中定义的
     &lt;</rich_text>
			<rich_text foreground="#000080">style</rich_text>
			<rich_text> </rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;AppTheme&quot;</rich_text>
			<rich_text> </rich_text>
			<rich_text foreground="#0000ff">parent=</rich_text>
			<rich_text foreground="#008000">&quot;Theme.AppCompat.Light.DarkActionBar&quot;</rich_text>
			<rich_text>&gt;
   &lt;</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text> </rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;android:windowIsTranslucent&quot;</rich_text>
			<rich_text>&gt;true&lt;/</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text>&gt;
&lt;/</rich_text>
			<rich_text foreground="#000080">style</rich_text>
			<rich_text>&gt;
     调查以后发现，如果style定义了android:windowIsTranslucent， Acitivty使用了这个属性的话，之间的跳转会调用  TRANSIT_WALLPAPER_CLOSE而不是TRANSIT_ACTIVITY_OPEN
    这个都在AppTransition中定义
    
    小米的动画去掉了一些延时：
    wallpaper_close_enter
    
     android:windowShowWallpaper为true
     
     AppTransition
     
     
     
</rich_text>
			<rich_text foreground="#333333">Music应用内部跳转过慢这个问题分析结果如下：
因为Activity定义的style中带有</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">windowIsTranslucent</rich_text>
			<rich_text>使得从上一个activity跳转到下一个activity的跳转动画是</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text>而不是预期的</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#000000">解决的方法： 去掉Wallpaper动画的延时，需要提供一个pr或者fr给我</rich_text>
			<rich_text>

</rich_text>
			<rich_text foreground="#000000">具体分析：</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#000000"> Music5.Dark 这个主题继承于Theme.AppCompat.Light.DarkActionBar最终使用到系统默认的windowAnimationStyle是定义于 /m8996/frameworks/base/core/res/res/values/styles.xml的&lt;style name=&quot;Animation.Activity&quot;&gt;</rich_text>
			<rich_text>
8</rich_text>
			<rich_text foreground="#333333">3    &lt;style </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=Animation.Activity&amp;project=m8976">Animation.Activity</rich_text>
			<rich_text foreground="#333333">&quot;&gt;
84        &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;activityOpenEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_open_enter&amp;project=m8976">activity_open_enter</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;
85        &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;activityOpenExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_open_exit&amp;project=m8976">activity_open_exit</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;

              ... ...
100        &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;wallpaperCloseEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/wallpaper_close_enter&amp;project=m8976">wallpaper_close_enter</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;
101        &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;wallpaperCloseExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/wallpaper_close_exit&amp;project=m8976">wallpaper_close_exit</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;
              ... ...
112    &lt;/style&gt;</rich_text>
			<rich_text>    </rich_text>
			<rich_text foreground="#333333">
         正常的情况下从一个Activity跳转到另一个Activity的跳转在AppTransition的体现是</rich_text>
			<rich_text foreground="#333333" weight="heavy">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text foreground="#333333">，对应到上面的动画是下面
       </rich_text>
			<rich_text>    </rich_text>
			<rich_text foreground="#333333">  &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;activityOpenEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_open_enter&amp;project=m8976">activity_open_enter</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;
             &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;activityOpenExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_open_exit&amp;project=m8976">activity_open_exit</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;</rich_text>
			<rich_text> 
  </rich_text>
			<rich_text foreground="#333333">         
         但是如果这个Activity包含 &lt;item name=&quot;android:</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">windowIsTranslucent</rich_text>
			<rich_text>&quot;&gt;true&lt;/item&gt;这个属性进行跳转的话使用的跳转动画</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text>是下面两个，因为此时的Activity是以wallpaper作为背景


            </rich_text>
			<rich_text foreground="#333333">&lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;wallpaperCloseEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/wallpaper_close_enter&amp;project=m8976">wallpaper_close_enter</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;
            &lt;item </rich_text>
			<rich_text foreground="#333333" weight="heavy">name=</rich_text>
			<rich_text foreground="#333333">&quot;wallpaperCloseExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8976">anim</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/wallpaper_close_exit&amp;project=m8976">wallpaper_close_exit</rich_text>
			<rich_text foreground="#333333">&lt;/item&gt;
</rich_text>
			<rich_text>    </rich_text>
			<rich_text foreground="#333333">         
         </rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#333333">         目前我所知道的会引起Activity跳转动画的属性有</rich_text>
			<rich_text foreground="#000000" weight="heavy">windowIsTranslucent,windowShowWallpaper</rich_text>
			<rich_text weight="heavy"> </rich_text>
			<rich_text>

         查看idol4_pro_cn这两个动画的定义发现 会有300ms的延时，所以才会出现卡顿的现象
           
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/wallpaper_close_enter&amp;project=m8976">wallpaper_close_enter.xml</rich_text>
			<rich_text>    </rich_text>
			<rich_text foreground="#333333">       </rich_text>
			<rich_text>   
</rich_text>
			<rich_text foreground="#333333">23    &lt;alpha android:</rich_text>
			<rich_text foreground="#333333" weight="heavy">fromAlpha=</rich_text>
			<rich_text foreground="#333333">&quot;0&quot; android:</rich_text>
			<rich_text foreground="#333333" weight="heavy">toAlpha=</rich_text>
			<rich_text foreground="#333333">&quot;1.0&quot;
24        android:</rich_text>
			<rich_text foreground="#333333" weight="heavy">fillEnabled=</rich_text>
			<rich_text foreground="#333333">&quot;true&quot; android:</rich_text>
			<rich_text foreground="#333333" weight="heavy">fillBefore=</rich_text>
			<rich_text foreground="#333333">&quot;true&quot; android:</rich_text>
			<rich_text foreground="#333333" weight="heavy">fillAfter=</rich_text>
			<rich_text foreground="#333333">&quot;true&quot;
25        android:</rich_text>
			<rich_text foreground="#333333" weight="heavy">interpolator=</rich_text>
			<rich_text foreground="#333333">&quot;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=interpolator/&amp;project=m8976">interpolator</rich_text>
			<rich_text foreground="#333333">/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=interpolator/decelerate_quart&amp;project=m8976">decelerate_quart</rich_text>
			<rich_text foreground="#333333">&quot;
26        </rich_text>
			<rich_text foreground="#ff0000" weight="heavy">android:startOffset=&quot;300&quot;</rich_text>
			<rich_text>
27        android:</rich_text>
			<rich_text weight="heavy">duration=</rich_text>
			<rich_text>&quot;167&quot;/&gt;
28
29    &lt;translate android:</rich_text>
			<rich_text weight="heavy">fromYDelta=</rich_text>
			<rich_text>&quot;110%&quot; android:</rich_text>
			<rich_text weight="heavy">toYDelta=</rich_text>
			<rich_text>&quot;0&quot;
30        android:</rich_text>
			<rich_text weight="heavy">fillEnabled=</rich_text>
			<rich_text>&quot;true&quot; android:</rich_text>
			<rich_text weight="heavy">fillBefore=</rich_text>
			<rich_text>&quot;true&quot; android:</rich_text>
			<rich_text weight="heavy">fillAfter=</rich_text>
			<rich_text>&quot;true&quot;
31        android:</rich_text>
			<rich_text weight="heavy">interpolator=</rich_text>
			<rich_text>&quot;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=interpolator/&amp;project=m8976">interpolator</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=interpolator/decelerate_quint&amp;project=m8976">decelerate_quint</rich_text>
			<rich_text>&quot;
32        </rich_text>
			<rich_text foreground="#ff0000" weight="heavy">android:startOffset=&quot;300&quot;</rich_text>
			<rich_text>
33        android:</rich_text>
			<rich_text weight="heavy">duration=</rich_text>
			<rich_text>&quot;417&quot; /&gt;


</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">Q1：为什么将同样的APK装到小米5上是流畅的？</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#000000">    要注意的是上面的动画是原生的定义，将同样的APK装到小米5上面不卡顿是因为小米将去掉了wallpaper动画的延时</rich_text>
			<rich_text>
         
         ##来自小米5的wallpaper_close_enter.xml
         &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
         &lt;set android:background=&quot;#ff000000&quot;         android:shareInterpolator=&quot;false&quot; android:zAdjustment=&quot;top&quot;
           xmlns:android=</rich_text>
			<rich_text link="webs http://moz-txt-link-rfc2396E">&quot;http://schemas.android.com/apk/res/android&quot;</rich_text>
			<rich_text foreground="#333333">&gt;
             &lt;alpha android:interpolator=&quot;@interpolator/linear&quot; 
                    android:duration=&quot;167&quot; 
                    android:fillBefore=&quot;true&quot; 
                    android:fillAfter=&quot;true&quot;
</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">                    android:startOffset=&quot;0&quot;</rich_text>
			<rich_text>
                    android:fromAlpha=&quot;0.0&quot;
                    android:toAlpha=&quot;1.0&quot; 
                    android:fillEnabled=&quot;true&quot; /&gt;
             &lt;translate         android:interpolator=&quot;@interpolator/decelerate_quint&quot;
                      android:duration=&quot;417&quot;
                     android:fillBefore=&quot;true&quot; 
                     android:fillAfter=&quot;true&quot;
</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">                     android:startOffset=&quot;0&quot; </rich_text>
			<rich_text>
                     android:fromYDelta=&quot;95.00001%&quot; 
                     android:toYDelta=&quot;0.0&quot; 
                     android:fillEnabled=&quot;true&quot; /&gt;
         &lt;/set&gt;


</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">Q2:为什么Music自定义动画以后速度变快了？</rich_text>
			<rich_text>
</rich_text>
			<rich_text foreground="#000000">下面 music_windowAnimationStyle是music自定义的动画，其实下面两个item并没有起什么作用，关键是其继承了 android:style</rich_text>
			<rich_text>/</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">Animation.Translucent </rich_text>
			<rich_text>
   
77    &lt;style </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">music_windowAnimationStyle</rich_text>
			<rich_text>&quot; </rich_text>
			<rich_text weight="heavy">parent=</rich_text>
			<rich_text>&quot;android:</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/&amp;project=m8996">style</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/Animation.Translucent&amp;project=m8996">Animation.Translucent</rich_text>
			<rich_text>&quot;&gt;
78        &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text>&quot;android:activityOpenEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8996">anim</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_anim_in&amp;project=m8996">activity_anim_in</rich_text>
			<rich_text>&lt;/item&gt;
79        &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text>&quot;android:activityOpenExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8996">anim</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_anim_out&amp;project=m8996">activity_anim_out</rich_text>
			<rich_text>&lt;/item&gt;</rich_text>
			<rich_text foreground="#333333">     </rich_text>
			<rich_text>

</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">Animation.Translucent </rich_text>
			<rich_text foreground="#000000">这个属性定义在/m8996/frameworks/base/core/res/res/values/styles.xml</rich_text>
			<rich_text weight="heavy">
</rich_text>
			<rich_text>126    &lt;style </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=Animation.Translucent&amp;project=m8996">Animation.Translucent</rich_text>
			<rich_text>&quot;&gt;
127        &lt;item </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;windowEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8996">anim</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/translucent_enter&amp;project=m8996">translucent_enter</rich_text>
			<rich_text>&lt;/item&gt;
128        &lt;item </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;windowExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8996">anim</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/translucent_exit&amp;project=m8996">translucent_exit</rich_text>
			<rich_text>&lt;/item&gt;
129    &lt;/style&gt;s

</rich_text>
			<rich_text foreground="#000000">实际上调用的是 windowEnterAnimation和windowExitAnimation这两个动画，而这两个动画没有定义延时，所以速度就快了。</rich_text>
			<rich_text>
  
  
  ActivityStack -&gt; startActivityLocked Activitystart过程中真正执行开始的方法
     -&gt; WindowManagerService-&gt; prepareAppTransition
  
  
  windowManagerService-&gt;applyAnimationLocked
  windowManagerService.loadAnimation
  
  ActivityStackSupervisor.startActivityLocked -&gt; ActivityStackSupervisor.startActivityUncheckedLocked -&gt; ActivityStack.startActivityLocked -&gt; WindowManagerService-&gt; prepareAppTransition
  
  ActivityStackSupervisor.resumeTopActivitiesLocked -&gt; ActivityStack.resumeTopActivityLocked -&gt; ActivityStack.resumeTopActivityInnerLocked -&gt; WindowManagerService-&gt; prepareAppTransition
  
  
  
  
</rich_text>
			<rich_text weight="heavy">  从Music点击一个菜单图标后走的流程</rich_text>
			<rich_text>（带有透明属性的系统跳转）
  windowManagerService -&gt; executeAppTransition
 08-01 09:10:07.560  1550  1613 W WindowManager: Execute app transition: mNextAppTransition=TRANSIT_UNSET 
 Callers=com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:1697 //调用堆栈
  com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
  com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840
  com.android.server.am.ActivityManagerService.setFocusedStack:2846 
  com.android.server.wm.WindowManagerService$H.handleMessage:8257 


</rich_text>
			<rich_text weight="heavy">  ActivityStackSupervisor.startActivityLocked -&gt; ActivityStackSupervisor.startActivityUncheckedLocked -&gt; ActivityStack.startActivityLocked -&gt; WindowManagerService.prepareAppTransition</rich_text>
			<rich_text>
 08-01 09:10:07.568  1550  2801 V WindowManager: Prepare app transition: transit=TRANSIT_ACTIVITY_OPEN mNextAppTransition=TRANSIT_UNSET alwaysKeepCurrent=false Callers=com.android.server.am.ActivityStack.startActivityLocked:2268
 com.android.server.am.ActivityStackSupervisor.startActivityUncheckedLocked:2563 
 com.android.server.am.ActivityStackSupervisor.startActivityLocked:1777 
  
</rich_text>
			<rich_text weight="heavy">    ActivityStackSupervisor.resumeTopActivitiesLocked -&gt; ActivityStack.resumeTopActivityLocked -&gt; ActivityStack.resumeTopActivityInnerLocked -&gt; WindowManagerService.prepareAppTransition</rich_text>
			<rich_text>
  08-01 09:10:07.591  1550  2244 V WindowManager: Prepare app transition: transit=TRANSIT_ACTIVITY_OPEN mNextAppTransition=TRANSIT_ACTIVITY_OPEN alwaysKeepCurrent=false Callers=com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:1914
   com.android.server.am.ActivityStack.resumeTopActivityLocked:1609
    com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840 

</rich_text>
			<rich_text weight="heavy">  ActivityStackSupervisor.resumeTopActivitiesLocked -&gt; ActivityStack.resumeTopActivityLocked -&gt; ActivityStack.resumeTopActivityInnerLocked 
          -&gt; ActivityStackSupervisor.startSpecificActivityLocked</rich_text>
			<rich_text> -&gt; </rich_text>
			<rich_text weight="heavy">ActivityStackSupervisor.realStartActivityLocked</rich_text>
			<rich_text>
 08-01 09:10:07.592  1550  2244 V WindowManager: setAppVisibility(Token{3001748 ActivityRecord{3e7edeb u0 com.alcatel.music5.china/com.alcatel.music5.activities.BaseJumpActivity t10}}, visible=true): mNextAppTransition=TRANSIT_ACTIVITY_OPEN hidden=true hiddenRequested=true 
 Callers=com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1244 
 com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 
 com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:2112 
 com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
 com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840 
 com.android.server.am.ActivityStack.completePauseLocked:1102 

  </rich_text>
			<rich_text weight="heavy">  ActivityStackSupervisor.resumeTopActivitiesLocked -&gt; ActivityStack.resumeTopActivityLocked -&gt; ActivityStack.resumeTopActivityInnerLocke 
          -&gt; ActivityStackSupervisor.startSpecificActivityLocked</rich_text>
			<rich_text> -&gt; </rich_text>
			<rich_text weight="heavy">ActivityStackSupervisor.realStartActivityLocked</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">-&gt; ActivityStack.minimalResumeActivityLocked</rich_text>
			<rich_text> 
</rich_text>
			<rich_text weight="heavy">          -&gt; ActivityStack.completeResumeLocked -&gt; ActivityStackSupervisor.reportResumedActivityLocked -&gt;  WindowManagerService.executeAppTransition</rich_text>
			<rich_text>
  
 08-01 09:10:07.596  1550  2244 W WindowManager: Execute app transition: mNextAppTransition=TRANSIT_ACTIVITY_OPEN 
 Callers=com.android.server.am.ActivityStackSupervisor.reportResumedActivityLocked:3379 
 com.android.server.am.ActivityStack.completeResumeLocked:1168 
 com.android.server.am.ActivityStack.minimalResumeActivityLocked:709 
 com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1400 
 com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 

08-01 09:10:07.903  1550  1613 I zhengyu : TRANSIT_WALLPAPER_CLOSE
08-01 09:10:07.904  1550  1613 V AppTransition: applyAnimation: </rich_text>
			<rich_text foreground="#ffff00000000">anim=android.view.animation.AnimationSet@a8dd8d5 </rich_text>
			<rich_text>animAttr=0x12 transit=TRANSIT_WALLPAPER_CLOSE isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3514
 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4578 
 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9484 


08-01 10:17:17.218  1550  1613 I zhengyu : TRANSIT_ACTIVITY_OPEN
08-01 10:17:17.220  1550  1613 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@7ff8d38 animAttr=0x4 transit=TRANSIT_ACTIVITY_OPEN isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3514 
com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4578 
com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:948


</rich_text>
			<rich_text weight="heavy">带有透明属性自定义的跳转</rich_text>
			<rich_text>
08-01 10:04:11.281  1550  1613 W WindowManager: Execute app transition: mNextAppTransition=TRANSIT_UNSET 
Callers=com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:1697 
com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840 
com.android.server.am.ActivityManagerService.setFocusedStack:2846 
com.android.server.wm.WindowManagerService$H.handleMessage:8257 

08-01 10:04:11.287  1550  2201 V WindowManager: Prepare app transition: transit=TRANSIT_ACTIVITY_OPEN mNextAppTransition=TRANSIT_UNSET alwaysKeepCurrent=false Callers=com.android.server.am.ActivityStack.startActivityLocked:2268 
com.android.server.am.ActivityStackSupervisor.startActivityUncheckedLocked:2563 
com.android.server.am.ActivityStackSupervisor.startActivityLocked:1777 

08-01 10:04:11.306  1550  2862 V WindowManager: Prepare app transition: transit=TRANSIT_ACTIVITY_OPEN mNextAppTransition=TRANSIT_ACTIVITY_OPEN alwaysKeepCurrent=false Callers=com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:1914 
com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840

08-01 10:04:11.306  1550  2862 V WindowManager: setAppVisibility(Token{c298ae9 ActivityRecord{bc05770 u0 test.example.com.myapplication/.SecondActivity t25}}, visible=true): mNextAppTransition=TRANSIT_ACTIVITY_OPEN hidden=true hiddenRequested=true 
Callers=com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1244 
com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 
com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:2112 
com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840 
com.android.server.am.ActivityStack.completePauseLocked:1102 

08-01 10:04:11.314  1550  2862 W WindowManager: Execute app transition: mNextAppTransition=TRANSIT_ACTIVITY_OPEN 
Callers=com.android.server.am.ActivityStackSupervisor.reportResumedActivityLocked:3379 
com.android.server.am.ActivityStack.completeResumeLocked:1168 
com.android.server.am.ActivityStack.minimalResumeActivityLocked:709 
com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1400 
com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 

08-01 10:04:11.378  1550  1613 I zhengyu : TRANSIT_WALLPAPER_CLOSE

08-01 10:04:11.378  1550  1613 V AppTransition: </rich_text>
			<rich_text foreground="#ffff00000000">applyAnimation: anim=null</rich_text>
			<rich_text> animAttr=0x12 transit=TRANSIT_WALLPAPER_CLOSE isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3514 
com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4578 
com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9484 





</rich_text>
			<rich_text weight="heavy">自定义没有透明属性的跳转</rich_text>
			<rich_text>
08-01 10:17:17.090  1550  2866 V WindowManager: Prepare app transition: transit=TRANSIT_ACTIVITY_OPEN mNextAppTransition=TRANSIT_UNSET alwaysKeepCurrent=false Callers=com.android.server.am.ActivityStack.startActivityLocked:2268 
com.android.server.am.ActivityStackSupervisor.startActivityUncheckedLocked:2563 
com.android.server.am.ActivityStackSupervisor.startActivityLocked:1777 

08-01 10:17:17.111  1550  2247 V WindowManager: Prepare app transition: transit=TRANSIT_ACTIVITY_OPEN mNextAppTransition=TRANSIT_ACTIVITY_OPEN alwaysKeepCurrent=false Callers=com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:1914 
com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840 

08-01 10:17:17.111  1550  2247 V WindowManager: setAppVisibility(Token{f9ca07f ActivityRecord{a5e8d9e u0 test.example.com.myapplication/.SecondActivity t28}}, visible=true): mNextAppTransition=TRANSIT_ACTIVITY_OPEN hidden=true hiddenRequested=true 
Callers=com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1244 
com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 
com.android.server.am.ActivityStack.resumeTopActivityInnerLocked:2112 
com.android.server.am.ActivityStack.resumeTopActivityLocked:1609 
com.android.server.am.ActivityStackSupervisor.resumeTopActivitiesLocked:2840 
com.android.server.am.ActivityStack.completePauseLocked:1102 

08-01 10:17:17.114  1550  2247 V WindowManager: setAppVisibility(Token{79c7b8d ActivityRecord{183d424 u0 test.example.com.myapplication/.MainActivity t28}}, visible=false): mNextAppTransition=TRANSIT_ACTIVITY_OPEN hidden=false hiddenRequested=false Callers=com.android.server.am.ActivityStack.setVisible:1192 com.android.server.am.ActivityStack.ensureActivitiesVisibleLocked:1453 com.android.server.am.ActivityStackSupervisor.ensureActivitiesVisibleLocked:3471 
com.android.server.am.ActivityManagerService.updateConfigurationLocked:18089 
com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1260 
com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 

08-01 10:17:17.122  1550  2247 W WindowManager: Execute app transition: mNextAppTransition=TRANSIT_ACTIVITY_OPEN 
Callers=com.android.server.am.ActivityStackSupervisor.reportResumedActivityLocked:3379 
com.android.server.am.ActivityStack.completeResumeLocked:1168 
com.android.server.am.ActivityStack.minimalResumeActivityLocked:709 
com.android.server.am.ActivityStackSupervisor.realStartActivityLocked:1400 
com.android.server.am.ActivityStackSupervisor.startSpecificActivityLocked:1446 

08-01 10:17:17.218  1550  1613 I zhengyu : TRANSIT_ACTIVITY_OPEN
08-01 10:17:17.220  1550  1613 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@7ff8d38 animAttr=0x4 transit=TRANSIT_ACTIVITY_OPEN isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3514 
com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4578 
com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9484 

08-01 10:17:17.226  1550  1613 I zhengyu : TRANSIT_ACTIVITY_OPEN
08-01 10:17:17.227  1550  1613 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@6cd8002 animAttr=0x5 transit=TRANSIT_ACTIVITY_OPEN isEntrance=false Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3514 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4578 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9524 
08-01 10:17:17.668  1550  1607 V WindowManager: setAppVisibility(Token{79c7b8d ActivityRecord{183d424 u0 test.example.com.myapplication/.MainActivity t28}}, visible=false): mNextAppTransition=TRANSIT_UNSET hidden=true hiddenRequested=true Callers=com.android.server.am.ActivityStack.stopActivityLocked:2821 com.android.server.am.ActivityStackSupervisor.activityIdleInternalLocked:2707 com.android.server.am.ActivityStackSupervisor$ActivityStackSupervisorHandler.activityIdleInternal:4183 com.android.server.am.ActivityStackSupervisor$ActivityStackSupervisorHandler.handleMessage:4206 android.os.Handler.dispatchMessage:102 android.os.Looper.loop:148 


非透明背景之间跳转
08-12 02:28:07.454 16141 16141 I zhengyu : MainActivity.onPause
08-12 02:28:07.471 16141 16141 I zhengyu : SecondActivity.onCreate
08-12 02:28:07.475 16141 16141 I zhengyu : SecondActivity.onStart
08-12 02:28:07.476 16141 16141 I zhengyu : SecondActivity.onResume
08-12 02:28:07.752 16141 16141 I zhengyu : </rich_text>
			<rich_text foreground="#ffff00000000">MainActivity.onStop</rich_text>
			<rich_text>

    
 透明背景之间跳转
08-12 02:26:28.818 14840 14840 I zhengyu : MainActivity.onPause
08-12 02:26:28.839 14840 14840 I zhengyu : SecondActivity.onCreate
08-12 02:26:28.843 14840 14840 I zhengyu : SecondActivity.onStart
08-12 02:26:28.844 14840 14840 I zhengyu : SecondActivity.onResume
    
 
</rich_text>
			<rich_text weight="heavy"> ActivityStack.</rich_text>
			<rich_text foreground="#ffff00000000" weight="heavy">startActivityLocked</rich_text>
			<rich_text weight="heavy">()</rich_text>
			<rich_text>
     
2225    </rich_text>
			<rich_text weight="heavy">final</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=startActivityLocked&amp;project=m8996">startActivityLocked</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ActivityRecord&amp;project=m8996">ActivityRecord</rich_text>
			<rich_text> r, </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=newTask&amp;project=m8996">newTask</rich_text>
			<rich_text>,
2226            </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> doResume, </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> keepCurTransition, </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Bundle&amp;project=m8996">Bundle</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=options&amp;project=m8996">options</rich_text>
			<rich_text>) {
 //参数r描述的是打算启动的Activity

....
2310            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> ((r.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=intent&amp;project=m8996">intent</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getFlags&amp;project=m8996">getFlags</rich_text>
			<rich_text>() &amp; </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Intent&amp;project=m8996">Intent</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=FLAG_ACTIVITY_NO_ANIMATION&amp;project=m8996">FLAG_ACTIVITY_NO_ANIMATION</rich_text>
			<rich_text>) != 0) {
2311                mWindowManager.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=prepareAppTransition&amp;project=m8996">prepareAppTransition</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_NONE&amp;project=m8996">TRANSIT_NONE</rich_text>
			<rich_text>, keepCurTransition);
2312                mNoAnimActivities.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=add&amp;project=m8996">add</rich_text>
			<rich_text>(r);
2313            } </rich_text>
			<rich_text weight="heavy">else</rich_text>
			<rich_text> {
2314                mWindowManager.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=prepareAppTransition&amp;project=m8996">prepareAppTransition</rich_text>
			<rich_text>(newTask
2315                        ? r.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mLaunchTaskBehind&amp;project=m8996">mLaunchTaskBehind</rich_text>
			<rich_text>
2316                                ? </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_TASK_OPEN_BEHIND&amp;project=m8996">TRANSIT_TASK_OPEN_BEHIND</rich_text>
			<rich_text>
2317                                : </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_TASK_OPEN&amp;project=m8996">TRANSIT_TASK_OPEN</rich_text>
			<rich_text>
2318                        : </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_ACTIVITY_OPEN&amp;project=m8996">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text>, keepCurTransition);
2319                mNoAnimActivities.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=remove&amp;project=m8996">remove</rich_text>
			<rich_text>(r);
2320            }
    
    
    如果定义了FLAG_ACTIVITY_NO_ANIMATION将会使用AppTransition.TRANSIT_NONE属性表示没有动画
    如果 newTask &amp;&amp; mLaunchTaskBehind -&gt; TANSIT_TASK_OPEN_BEHIND
           newTask &amp;&amp; !mLaunchTaskBehind -&gt; TRANSIT_TASK_OPEN
           !newTask -&gt; TRANSIT_ACTIVITY_OPEN
    
 
</rich_text>
			<rich_text weight="heavy">WindowManagerService.prepareAppTransition()</rich_text>
			<rich_text>    
4184    </rich_text>
			<rich_text weight="heavy">public</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=prepareAppTransition&amp;project=m8996">prepareAppTransition</rich_text>
			<rich_text>(</rich_text>
			<rich_text weight="heavy">int</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>, </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=alwaysKeepCurrent&amp;project=m8996">alwaysKeepCurrent</rich_text>
			<rich_text>) {
4185        </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (!checkCallingPermission(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=android&amp;project=m8996">android</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Manifest&amp;project=m8996">Manifest</rich_text>
			<rich_text>.permission.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=MANAGE_APP_TOKENS&amp;project=m8996">MANAGE_APP_TOKENS</rich_text>
			<rich_text>,    //权限检查
4186                &quot;prepareAppTransition()&quot;)) {
4187            </rich_text>
			<rich_text weight="heavy">throw</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">new</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SecurityException&amp;project=m8996">SecurityException</rich_text>
			<rich_text>(&quot;Requires MANAGE_APP_TOKENS permission&quot;);
4188        }
4189
4190        </rich_text>
			<rich_text weight="heavy">synchronized</rich_text>
			<rich_text>(mWindowMap) {
4191            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (DEBUG_APP_TRANSITIONS) </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Slog&amp;project=m8996">Slog</rich_text>
			<rich_text>.v(TAG, &quot;Prepare app transition:&quot;
4192                    + &quot; transit=&quot; + </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=appTransitionToString&amp;project=m8996">appTransitionToString</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>)
4193                    + &quot; &quot; + mAppTransition
4194                    + &quot; alwaysKeepCurrent=&quot; + alwaysKeepCurrent
4195                    + &quot; Callers=&quot; + </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Debug&amp;project=m8996">Debug</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getCallers&amp;project=m8996">getCallers</rich_text>
			<rich_text>(3));
4196            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (!mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionSet&amp;project=m8996">isTransitionSet</rich_text>
			<rich_text>() || mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionNone&amp;project=m8996">isTransitionNone</rich_text>
			<rich_text>()) { //表示windowmanagerservice接下来没有activity组件切换动画等待执行，这时候参数transit描述的activity组件qiehuan 
4197                mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setAppTransition&amp;project=m8996">setAppTransition</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>);
4198            } </rich_text>
			<rich_text weight="heavy">else</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (!alwaysKeepCurrent) {
4199                </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text> == </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_TASK_OPEN&amp;project=m8996">TRANSIT_TASK_OPEN</rich_text>
			<rich_text>  //接下来的动画， 如果发现接下来的动画是TASK_CLOSE 而当前的transit是TASK_OPEN则覆盖，将接下来要执行的动画改为Task_OPEN, 因为open优先级高于close
4200                        &amp;&amp; mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionEqual&amp;project=m8996">isTransitionEqual</rich_text>
			<rich_text>(
4201                                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_TASK_CLOSE&amp;project=m8996">TRANSIT_TASK_CLOSE</rich_text>
			<rich_text>)) {
4202                    // Opening a new task always supersedes a close for the anim.
4203                    mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setAppTransition&amp;project=m8996">setAppTransition</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>);
4204                } </rich_text>
			<rich_text weight="heavy">else</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text> == </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_ACTIVITY_OPEN&amp;project=m8996">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text>
4205                        &amp;&amp; mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionEqual&amp;project=m8996">isTransitionEqual</rich_text>
			<rich_text>(
4206                            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AppTransition&amp;project=m8996">AppTransition</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TRANSIT_ACTIVITY_CLOSE&amp;project=m8996">TRANSIT_ACTIVITY_CLOSE</rich_text>
			<rich_text>)) {
4207                    // Opening a new activity always supersedes a close for the anim.
4208                    mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setAppTransition&amp;project=m8996">setAppTransition</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>);
4209                }
4210            }

4211            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (okToDisplay() &amp;&amp; mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=prepare&amp;project=m8996">prepare</rich_text>
			<rich_text>()) {
4212                mSkipAppTransitionAnimation = </rich_text>
			<rich_text weight="heavy">false</rich_text>
			<rich_text>;   //表示windowmanagerservice是否需要不执行Activity组件的切换动画
4213            }
4214            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionSet&amp;project=m8996">isTransitionSet</rich_text>
			<rich_text>()) {
4215                mH.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=removeMessages&amp;project=m8996">removeMessages</rich_text>
			<rich_text>(H.APP_TRANSITION_TIMEOUT); 
4216                mH.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=sendEmptyMessageDelayed&amp;project=m8996">sendEmptyMessageDelayed</rich_text>
			<rich_text>(H.APP_TRANSITION_TIMEOUT, 5000); //5s后执行timeout， 强制设置动画要在5s内完成，不然认为执行该动画超时
4217            }
4218        }
4219    }
4220
    
    AppTransition.isTransitionSet(){return mNextAppTransition != TRANSIT_UNSET}
    AppTransition.isTransitionNone(){return mNextAppTransition == TRANSIT_NONE}
    所以 </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (!mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionSet&amp;project=m8996">isTransitionSet</rich_text>
			<rich_text>() || mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionNone&amp;project=m8996">isTransitionNone</rich_text>
			<rich_text>()) 表示的是接下来没有需要准备的动画了
    
       </rich_text>
			<rich_text weight="heavy">alwaysKeepCurrent</rich_text>
			<rich_text> 这个参数是在ActivityStackSupervisor被定义然后在startActivityUncheckedLocked中被赋值的赋值代码如下，表示将要启动的Activity是在已经存在的Task中，就设为true。要注意这里的</rich_text>
			<rich_text weight="heavy">alwaysKeepCurrent</rich_text>
			<rich_text>前面！
       
                </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (!</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=addingToTask&amp;project=m8996">addingToTask</rich_text>
			<rich_text> &amp;&amp; (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=launchFlags&amp;project=m8996">launchFlags</rich_text>
			<rich_text>&amp;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Intent&amp;project=m8996">Intent</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=FLAG_ACTIVITY_CLEAR_TOP&amp;project=m8996">FLAG_ACTIVITY_CLEAR_TOP</rich_text>
			<rich_text>) != 0) {
2456                // In this case, we are adding the activity to an existing
2457                // task, but the caller has asked to clear that task if the
2458                // activity is already running.
2459                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ActivityRecord&amp;project=m8996">ActivityRecord</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=top&amp;project=m8996">top</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=sourceTask&amp;project=m8996">sourceTask</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=performClearTaskLocked&amp;project=m8996">performClearTaskLocked</rich_text>
			<rich_text>(r, </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=launchFlags&amp;project=m8996">launchFlags</rich_text>
			<rich_text>);
2460                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=keepCurTransition&amp;project=m8996">keepCurTransition</rich_text>
			<rich_text> = </rich_text>
			<rich_text weight="heavy">true</rich_text>
			<rich_text>;
 ... ...
 }
       
       246    </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=isTransitionEqual&amp;project=m8996">isTransitionEqual</rich_text>
			<rich_text>(</rich_text>
			<rich_text weight="heavy">int</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>) {
247        </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text> mNextAppTransition == </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>;
248    }

254    </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=setAppTransition&amp;project=m8996">setAppTransition</rich_text>
			<rich_text>(</rich_text>
			<rich_text weight="heavy">int</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>) {
255        mNextAppTransition = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transit&amp;project=m8996">transit</rich_text>
			<rich_text>;
256    }
257

-----

//表示屏幕不是处于冻屏且允许显示且屏幕是亮起的
3630    </rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=okToDisplay&amp;project=m8996">okToDisplay</rich_text>
			<rich_text>() {
3631        </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text> !mDisplayFrozen &amp;&amp; mDisplayEnabled &amp;&amp; mPolicy.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isScreenOn&amp;project=m8996">isScreenOn</rich_text>
			<rich_text>();
3632    }


  这个时候切换动画准备完成，但是还不能执行， 需要等到前面的激活的activity组件进入到paused状态，并且接下来的activity进入到resume状态后执行
  
   
   
   
   
  接着前面的startActivityLocked在调用完WindowManagerService.prepareAppTransition以后继续调用resumeTopActivitiesLocked
 ActivityStackSupervisor.resumeTopActivitiesLocked  -&gt; </rich_text>
			<rich_text foreground="#ffff00000000" weight="heavy">ActivityStack.resumeTopActivityLocked</rich_text>
			<rich_text> -&gt; </rich_text>
			<rich_text foreground="#ffff00000000" weight="heavy">ActivityStack.resumeTopActivityInnerLocked</rich_text>
			<rich_text>
 resumeTopActivityInnerLocked 是ActivityStack中比较重要的一个方法，这里与AppTransition相关的主要有
  1) 通知当前处以激活状态的Activity所运行的进程，它所运行的Activity将由Resumed -&gt; Paused
  2) 再次调用PrepareAppTransition准备上一个Activity离开的动画
  3）调用ActivityStackSupervisor.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=startSpecificActivityLocked&amp;project=m8996">startSpecificActivityLocked</rich_text>
			<rich_text> 继续启动Activity
  
  
  -&gt; ActivityStackSupervisor.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=startSpecificActivityLocked&amp;project=m8996">startSpecificActivityLocked</rich_text>
			<rich_text>
             --&gt;  ActivityStackSuperviser.realstartactivitylock //检查用来运行当前正在启动的Activity组件的应用进程是否已经启动来了。如果已经启动起来，那么就会直接通知该应用程序进程将正在启动的Activity加载起来，否则的话，就会先将该应用程序进程启动起来，然后再通知它将正在启动的Activity组件加载
  
                    </rich_text>
			<rich_text weight="heavy">  ---&gt;windowManagerService.setAppVisibility</rich_text>
			<rich_text>
                            1.首先通过findWindowToken获取与这个Activity关联的AppWindowToken, 每个Activity在windowManagerService都会有对应的AppWindowToken对象，用来描述Activity在windowManagerService的状态
                             2.然后根据mNextAppTransition的值来确定当前的Activity是否需要动画的跳转， 如果其mNextAppTransition为TRANSIT_UNSET 说明参数token所描述的Activity就是正在等待执行切换操作的Activity组件
                      
                      </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=wtoken&amp;project=m8996">wtoken</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=hiddenRequested&amp;project=m8996">hiddenRequested</rich_text>
			<rich_text> = !</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=visible&amp;project=m8996">visible</rich_text>
			<rich_text>;   //设置为可见
                      </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (okToDisplay() &amp;&amp; mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionSet&amp;project=m8996">isTransitionSet</rich_text>
			<rich_text>()) {
                            //修改token的可见性
                      }
                      
                      
                              okToDisplay(){
                                  </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text> !mDisplayFrozen &amp;&amp; mDisplayEnabled &amp;&amp; mPolicy.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isScreenOn&amp;project=m8996">isScreenOn</rich_text>
			<rich_text>();
                              }
                              1）屏幕不是处于冻结状态 ！mDisplayFrozen
                              2）允许display
                              3）当前屏幕是点亮的 mPolicy.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isScreenOn&amp;project=m8996">isScreenOn</rich_text>
			<rich_text>();
                             
                             mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionSet&amp;project=m8996">isTransitionSet</rich_text>
			<rich_text>()
                             mNextAppTransition != TRANSIT_UNSET;
 
  -&gt; ActivityStack.</rich_text>
			<rich_text weight="heavy">completeResumeLocked</rich_text>
			<rich_text>
  1. mStackSupervisor.scheduleIdleTimeoutLocked(next)
  ActivityStackSupervisor
3870    </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=scheduleIdleTimeoutLocked&amp;project=m8996">scheduleIdleTimeoutLocked</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ActivityRecord&amp;project=m8996">ActivityRecord</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=next&amp;project=m8996">next</rich_text>
			<rich_text>) {
。。。
3873        </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Message&amp;project=m8996">Message</rich_text>
			<rich_text> msg = mHandler.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=obtainMessage&amp;project=m8996">obtainMessage</rich_text>
			<rich_text>(IDLE_TIMEOUT_MSG, next);
3874        mHandler.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=sendMessageDelayed&amp;project=m8996">sendMessageDelayed</rich_text>
			<rich_text>(msg, IDLE_TIMEOUT);
3875    }
   向ActivityManager发送IDLE_TIMEOUT_MSG消息， 这个消息将在IDOLE_TIMEOUT_MSG 毫秒后处理，用来监控WindowManagerService服务能否在IDLE_TIMEOUT毫秒内完成参数Next所描述的动画，并将窗口显示出来，如果能够做到的话，windowmanagerservice就会通知activitymanagerservice， 然后由activitymanagerservice做一些清理服务，如那些已经stopped状态的activity清理掉。即使做不到，ActivityManager还是要完成这个清理的过程
        
  2. mStackSupervisor.</rich_text>
			<rich_text weight="heavy">reportResumedActivityLocked</rich_text>
			<rich_text>
     a. ensureActivitiesComplete -&gt; ActivityStack.ensureActivitiesVisibleLocked
     b. mWindowManager.executeAppTransition
     
  
  
  
  
  
</rich_text>
			<rich_text weight="heavy">  ActivityStack.ensureActivitiesVisibleLocked(ActivityRecord starting, int configChanges)</rich_text>
			<rich_text>
  
  ActivityRecord 是Activity组件在ActivityManagerService的部分，用来表示Activity的状态, starting表示要启动的组件
  1.通过topRunningActivityLocked获取topActivity的ActivityRecord
  2.遍历TaskHistory, 以及每个Tast的activity， 设置正确的状态， 如果一个Activity正在finish， 跳过
  3. r.app == null ， r.app.thread == null 表示应用还没起来， 会先通过r.visible来确定这个activity是否可见， 如果不可见，则通过setVisible通知windowManagerservice将其设为可见， 查看该activity组件是否starting描述的组件，如果不是通过startSpecificActivityLocked启动该组件
  4.如果Activity已经跑起来了且Activity已经是可见，那就什么都不用做
  5.如果Activity已经跑起来了但是仍旧是不可见的，需要将r.visible设为true， 然后查看是否是resume状态， 与starting是否同一个组件， 如果检查图哦功能过， 将其设为可见。
  
  
  WindowManager.executeAppTransition
  
  4279    @</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Override&amp;project=m8996">Override</rich_text>
			<rich_text>
4280    </rich_text>
			<rich_text weight="heavy">public</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=executeAppTransition&amp;project=m8996">executeAppTransition</rich_text>
			<rich_text>() {
              </rich_text>
			<rich_text foreground="#8b8b69691414">//检查权限</rich_text>
			<rich_text>
4281        </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (!checkCallingPermission(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=android&amp;project=m8996">android</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Manifest&amp;project=m8996">Manifest</rich_text>
			<rich_text>.permission.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=MANAGE_APP_TOKENS&amp;project=m8996">MANAGE_APP_TOKENS</rich_text>
			<rich_text>,
4282                &quot;executeAppTransition()&quot;)) {     
4283            </rich_text>
			<rich_text weight="heavy">throw</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">new</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SecurityException&amp;project=m8996">SecurityException</rich_text>
			<rich_text>(&quot;Requires MANAGE_APP_TOKENS permission&quot;);
4284        }
4285
4286        </rich_text>
			<rich_text weight="heavy">synchronized</rich_text>
			<rich_text>(mWindowMap) {
4287            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (DEBUG_APP_TRANSITIONS) </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Slog&amp;project=m8996">Slog</rich_text>
			<rich_text>.w(TAG, &quot;Execute app transition: &quot; + mAppTransition
4288                    + &quot; Callers=&quot; + </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Debug&amp;project=m8996">Debug</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getCallers&amp;project=m8996">getCallers</rich_text>
			<rich_text>(5));
4289            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=isTransitionSet&amp;project=m8996">isTransitionSet</rich_text>
			<rich_text>()) { </rich_text>
			<rich_text foreground="#8b8b69691414">//当之前一个Activity准备好，即nextAppTransition ！= TRANSIT_UNSET 时候, 执行performLayoutAndPlaceSurfaceLocked</rich_text>
			<rich_text>
4290                mAppTransition.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setReady&amp;project=m8996">setReady</rich_text>
			<rich_text>();
4291                </rich_text>
			<rich_text weight="heavy">final</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">long</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=origId&amp;project=m8996">origId</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Binder&amp;project=m8996">Binder</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=clearCallingIdentity&amp;project=m8996">clearCallingIdentity</rich_text>
			<rich_text>();
4292                </rich_text>
			<rich_text weight="heavy">try</rich_text>
			<rich_text> {
4293                    </rich_text>
			<rich_text weight="heavy">performLayoutAndPlaceSurfacesLocked</rich_text>
			<rich_text>();
4294                } </rich_text>
			<rich_text weight="heavy">finally</rich_text>
			<rich_text> {
4295                    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Binder&amp;project=m8996">Binder</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=restoreCallingIdentity&amp;project=m8996">restoreCallingIdentity</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=origId&amp;project=m8996">origId</rich_text>
			<rich_text>);
4296                }
4297            }
4298        }
4299    }
  
  
  WindowManager.performLayoutAndPlaceSurfacesLocked
  1.检查是否有窗口回收，如果有的话，调用removeWindowInnerLocked将他们从系统中移除
  2.调用</rich_text>
			<rich_text weight="heavy">performLayoutAndPlaceSurcacesLockedInner</rich_text>
			<rich_text>来刷新系统UI， 包括执行在前面准备的Activity组件切换操作
  3.在执行上面的操作中，如果又有一些窗口要被移除，再调用removiWindowInnerLocked来清除， 并再次递归调用performLayoutAndPlaceSurfacesLockedInner
  
  
  WindowManagerService.performLayoutAndPlaceSurfacesLockedInner
   这个方法是整个WindowManagerService的核心
   1. 计算各个窗口大小，updateFocusdWindowLocked中的performLayoutLockedInner来实现
   2. 计算各个窗口接下来要执行的动画
   3. 执行各个窗口动画
   4. 检查当前是否需要执行Activity组件切换操作，也就是检查成员变量mAppTransitionReady是否为true， 如果等于的话，那么接下来就会执行这个Activity组件切换操作，就是给正在切换的Activity组件应用一个切换动作
        adjustWallpaperWindowsLocked   函数来实现保证壁纸窗口目前是位于那些需要显示壁纸的窗口下面的
    a)handleAppTransitionReadyLocked
         数组mOpenningApps表示正在打开的activity, allDrawn表示绘制完成

AppTransition.</rich_text>
			<rich_text background="#ffffff" foreground="#333333">TRANSIT_WALLPAPER_INTRA_OPEN</rich_text>
			<rich_text> 这种类型的切换动画与打开壁纸窗口相关的
AppTransition</rich_text>
			<rich_text background="#ffffff" foreground="#333333">.TRANSIT_WALLPAPER_INTRA_CLOSE</rich_text>
			<rich_text> 这种类型的切换动画是与关闭壁纸窗口相关的
 
AppTransition.TRANSIT_WALLPAPER_CLOSE 这种类型的切换动画是从一个需要显示壁纸的Activity组件切换到一个不需要显示壁纸的Activity组件上去
AppTransition.TRANSIT_WALLPAPER_OPEN 从一个不需要显示壁纸的Activity组件切换到需要显示壁纸的Activity组件上去

在调整壁纸窗口堆栈的位置的时候，如果刚好碰到系统在执行两个Activity组件的切换， 并且这两个Activity组件都需要显示壁纸，那么Z轴较低的窗口就会保存在mLowerWall


   5.
   
   
   
   
   adjustWallpaperWindowsLocked
   在调整壁纸窗口在窗口堆栈的位置之前， 会首先将壁纸窗口当前的目标窗口保存在变量oldWindow中，
   
   
    1.handleAppTransitionReadyLocked
    2.handleAnimatingStoppedAndTransitionLocked
    3.handleNotObscuredLocked
    4.
    
    
# Title And Author
AppTansition @ v1.0 @ 20160703 @ RainHu

# Object And Messages
ActivityStackSupervisor : startActivityLocked
ActivityStackSupervisor -&gt; ActivityStack : startActivityUncheckedLocked
ActivityStack -&gt; WindowManagerService : startActivityLocked
WindowManagerService :  prepareAppTransition
ActivityStackSupervisor -&gt; ActivityStack : resumeTopActivityLocked
ActivityStack  : resumeTopActivityLocked
ActivityStack -&gt;  WindowManagerService : resumeTopActivityInnerLocked
WindowManagerService : prepareAppTransition
ActivityStackSupervisor :  startSpecificActivityLocked
ActivityStackSupervisor -&gt; ActivityStack :  realStartActivityLocked
ActivityStack : minimalResumeActivityLocked 
ActivityStack -&gt; ActivityStackSupervisor : completeResumeLocked
ActivityStackSupervisor -&gt;  WindowManagerService : reportResumedActivityLocked 
WindowManagerService : executeAppTransition
WindowManagerService : performLayoutAndPlaceSurfacesLocked
WindowManagerService : performLayoutAndPlaceSurfacesLockedInner
WindowManagerService : handleAppTransitionReadyLocked

# Bottom Description
[This is a description for this diagram]
[ how an order request is passed between sub-systems ]
    
    
    
    
  --------------------------------------------------------  
 wallpaper_close_enter.xml
 Wallpaper_open_enter.xml  duration:225 -&gt; 150
 wallpaper_open_exit.xml duration
    
   
   小米的
    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;set android:shareInterpolator=&quot;false&quot; android:zAdjustment=&quot;top&quot;
  xmlns:android=&quot;</rich_text>
			<rich_text link="webs http://schemas.android.com/apk/res/android&quot;&gt;">http://schemas.android.com/apk/res/android&quot;&gt;</rich_text>
			<rich_text>
    &lt;alpha android:interpolator=&quot;@interpolator/linear&quot; 
    android:duration=&quot;75&quot; 
    android:fillBefore=&quot;true&quot; 
    android:fillAfter=&quot;true&quot; 
    android:startOffset=&quot;75&quot; 
    android:fromAlpha=&quot;1.0&quot; 
    android:toAlpha=&quot;0.0&quot; 
    android:fillEnabled=&quot;true&quot; /&gt;
    &lt;translate android:interpolator=&quot;@interpolator/linear&quot; 
    android:duration=&quot;150&quot; 
    android:fillBefore=&quot;true&quot; 
    android:fillAfter=&quot;true&quot; 
    android:fromYDelta=&quot;0.0&quot; 
    android:toYDelta=&quot;50.0%&quot; 
    android:fillEnabled=&quot;true&quot; /&gt;
&lt;/set&gt;

    我们的
    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;set android:shareInterpolator=&quot;false&quot; android:zAdjustment=&quot;top&quot;
  xmlns:android=&quot;</rich_text>
			<rich_text link="webs http://schemas.android.com/apk/res/android&quot;&gt;">http://schemas.android.com/apk/res/android&quot;&gt;</rich_text>
			<rich_text>
    &lt;alpha android:interpolator=&quot;@interpolator/linear&quot; 
    android:duration=&quot;75&quot; 
    android:fillBefore=&quot;true&quot; 
    android:fillAfter=&quot;true&quot; 
    android:startOffset=&quot;75&quot; 
    android:fromAlpha=&quot;1.0&quot; 
    android:toAlpha=&quot;0.0&quot; 
    android:fillEnabled=&quot;true&quot; /&gt;
    &lt;translate android:interpolator=&quot;@interpolator/linear&quot; 
    android:duration=&quot;150&quot; 
    android:fillBefore=&quot;true&quot; 
    android:fillAfter=&quot;true&quot; 
    android:fromYDelta=&quot;0.0&quot; 
    android:toYDelta=&quot;50.0%&quot; 
    android:fillEnabled=&quot;true&quot; /&gt;
&lt;/set&gt;
    
    
    
    
    
    新版本Music 切换
    为什么</rich_text>
			<rich_text weight="heavy">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text> 
    新版本的Music
    从 </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=.activities.BaseMusicPlayerActivity&amp;project=m8996">BaseMusicPlayerActivity</rich_text>
			<rich_text> 非透明 -&gt; </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=.activities.BaseJumpActivity&amp;project=m8996">BaseJumpActivity</rich_text>
			<rich_text>  透明
    Theme分别为 android:</rich_text>
			<rich_text weight="heavy">theme=</rich_text>
			<rich_text>&quot;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/&amp;project=m8996">style</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/Music5.Dark.BaseMusicPlayer&amp;project=m8996">Music5.Dark.BaseMusicPlayer</rich_text>
			<rich_text>&quot; 以及android:</rich_text>
			<rich_text weight="heavy">theme=</rich_text>
			<rich_text>&quot;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/&amp;project=m8996">style</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/Music5.Dark&amp;project=m8996">Music5.Dark</rich_text>
			<rich_text>&quot;
    9    &lt;style </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=Music5.Dark.BaseMusicPlayer&amp;project=m8996">Music5.Dark.BaseMusicPlayer</rich_text>
			<rich_text>&quot; </rich_text>
			<rich_text weight="heavy">parent=</rich_text>
			<rich_text>&quot;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=Music5.Dark&amp;project=m8996">Music5.Dark</rich_text>
			<rich_text>&quot;&gt;
</rich_text>
			<rich_text weight="heavy">20        &lt;item name=&quot;android:windowIsTranslucent&quot;&gt;false&lt;/item&gt;</rich_text>
			<rich_text>
21        &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text>&quot;android:windowAnimationStyle&quot;&gt;@null&lt;/item&gt;
22    &lt;/style&gt;

&quot;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=Music5.Dark&amp;project=m8996">Music5.Dark</rich_text>
			<rich_text>&quot;
        &lt;item </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;android:windowIsTranslucent&quot;&gt;true&lt;/item&gt;
        &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text>&quot;android:</rich_text>
			<rich_text weight="heavy">windowAnimationStyle</rich_text>
			<rich_text>&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/&amp;project=m8996">style</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/music_windowAnimationStyle&amp;project=m8996">music_windowAnimationStyle</rich_text>
			<rich_text>&lt;/item&gt;
           
           
79    &lt;style </rich_text>
			<rich_text weight="heavy">name=</rich_text>
			<rich_text>&quot;</rich_text>
			<rich_text weight="heavy">music_windowAnimationStyle</rich_text>
			<rich_text>&quot; </rich_text>
			<rich_text weight="heavy">parent=</rich_text>
			<rich_text>&quot;android:</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/&amp;project=m8996">style</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=style/Animation.Translucent&amp;project=m8996">Animation.Translucent</rich_text>
			<rich_text>&quot;&gt;
80    &lt;!-- add for  2401692 begin--&gt;
81    &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text> &quot;android:windowEnterAnimation&quot;&gt;@null&lt;/item&gt;
82    &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text> &quot;android:windowExitAnimation&quot; &gt;@null&lt;/item&gt;
83    &lt;!-- add for  2401692 end--&gt;
84    &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text>&quot;android:activityOpenEnterAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8996">anim</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_anim_in&amp;project=m8996">activity_anim_in</rich_text>
			<rich_text>&lt;/item&gt;
85    &lt;item </rich_text>
			<rich_text weight="heavy">name =</rich_text>
			<rich_text>&quot;android:activityOpenExitAnimation&quot;&gt;@</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/&amp;project=m8996">anim</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=anim/activity_anim_out&amp;project=m8996">activity_anim_out</rich_text>
			<rich_text>&lt;/item&gt;
86&lt;/style&gt; 。


            
  08-01 16:36:30.977  1434  1505 V WindowManagerService: applyAnimation: atoken=AppWindowToken{37cc0c7 token=Token{3756206 ActivityRecord{518d4e1 u0 com.alcatel.music5.china/com.alcatel.music5.activities.BaseJumpActivity t19}}}
08-01 16:36:30.978  1434  1505 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@cb7a7ea animAttr=0x4 enter:true transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text> isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-01 16:36:30.978  1434  1505 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-01 16:36:30.978  1434  1505 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-01 16:36:30.978  1434  1505 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-01 16:36:30.981  1434  1505 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{cf59892 com.alcatel.music5.china/com.alcatel.music5.activities.BaseJumpActivity} anim=0 attr=0x0 a=android.view.animation.AnimationSet@16fb851 transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393 

    
    老版本Music 切换
   08-01 16:43:58.506  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{7aa6378 token=Token{db80cdb ActivityRecord{e24c1ea u0 com.alcatel.music5.china/com.alcatel.music5.activities.BaseJumpActivity t27}}}
08-01 16:43:58.508  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@959e0a7 animAttr=0x12 enter:true transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> isEntrance=</rich_text>
			<rich_text weight="heavy">true</rich_text>
			<rich_text> Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-01 16:43:58.508  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-01 16:43:58.508  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-01 16:43:58.508  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-01 16:43:58.511  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{a05c289 com.alcatel.music5.china/com.alcatel.music5.activities.BaseJumpActivity} anim=0 attr=0x0 a=null transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393 
    
    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=WindowAnimation_wallpaperCloseEnterAnimation&amp;project=m8996">WindowAnimation_wallpaperCloseEnterAnimation</rich_text>
			<rich_text>
    
    
    
    启动安全管家应用
   08-01 16:46:45.328  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{d0d0f90 token=Token{ef7fa53 ActivityRecord{7129a42 u0 com.tcl.ota/.SystemUpdatesActivity t33}}}
08-01 16:46:45.328  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@d3c1f97 nextAppTransition=ANIM_SCALE_UP transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> isEntrance=</rich_text>
			<rich_text weight="heavy">true</rich_text>
			<rich_text> Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-01 16:46:45.328  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-01 16:46:45.329  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-01 16:46:45.329  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-01 16:46:45.331  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{68423d8 Starting com.tcl.ota} anim=0 attr=0x0 a=null transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393 
08-01 16:46:45.332  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{4b1de78 token=Token{29493db ActivityRecord{81304ea u0 com.tcl.mie.tlauncher/com.android.launcher3.Launcher t26}}}
08-01 16:46:45.332  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AlphaAnimation@a03a584 nextAppTransition=ANIM_SCALE_UP transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> isEntrance=</rich_text>
			<rich_text weight="heavy">false</rich_text>
			<rich_text> Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9532 
08-01 16:46:45.333  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-01 16:46:45.333  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-01 16:46:45.333  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-01 16:46:45.369  1441  2442 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{26ff505 com.tcl.mie.tlauncher/com.android.launcher3.Launcher} anim=0 attr=0x1 a=null transit=2 isEntrance=false Callers com.android.server.wm.WindowManagerService.relayoutWindow:3319 com.android.server.wm.Session.relayout:198 android.view.IWindowSession$Stub.onTransact:284 
08-01 16:46:45.487  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{8d795f0 com.tcl.ota/com.tcl.ota.SystemUpdatesActivity} anim=0 attr=0x0 a=null transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.WindowStateAnimator.commitFinishDrawingLocked:555 
08-01 16:46:45.512  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{68423d8 Starting com.tcl.ota} anim=17432593 attr=0xffffffff a=android.view.animation.AlphaAnimation@cb43308 transit=5 isEntrance=false Callers com.android.server.wm.WindowManagerService.removeWindowLocked:2762 com.android.server.wm.WindowManagerService.removeWindow:2716 com.android.server.wm.Session.remove:187 



A1、A2都带有</rich_text>
			<rich_text foreground="#008000">windowShowWallpaper</rich_text>
			<rich_text> 属性，从A1启动到A2 调用  TRANSIT_WALLPAPER_INTRA_OPEN  两次， 一次是enter， 一次是exit

08-02 08:44:00.497  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{e0bac1b token=Token{792562a ActivityRecord{ea63315 u0 test.example.com.myapplication/.SecondActivity t74}}}
08-02 08:44:00.499  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@c65ffd0 animAttr=0x14 enter:true transit=TRANSIT_WALLPAPER_INTRA_OPEN isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-02 08:44:00.500  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-02 08:44:00.502  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-02 08:44:00.502  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-02 08:44:00.505  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{d7aaf6 test.example.com.myapplication/test.example.com.myapplication.SecondActivity} anim=0 attr=0x0 a=null transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393 
08-02 08:44:00.506  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{641bb5e token=Token{653dc99 ActivityRecord{f9f21e0 u0 test.example.com.myapplication/.MainActivity t74}}}
08-02 08:44:00.507  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@73522ce animAttr=0x15 enter:false transit=TRANSIT_WALLPAPER_INTRA_OPEN isEntrance=false Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9532 
08-02 08:44:00.507  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-02 08:44:00.507  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-02 08:44:00.507  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-02 08:44:00.557  1441  2436 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{677b337 test.example.com.myapplication/test.example.com.myapplication.MainActivity} anim=0 attr=0x1 a=null transit=2 isEntrance=false Callers com.android.server.wm.WindowManagerService.relayoutWindow:3319 com.android.server.wm.Session.relayout:198 android.view.IWindowSession$Stub.onTransact:284 



A1、A2都带有</rich_text>
			<rich_text foreground="#008000">windowIsTranslucent</rich_text>
			<rich_text>属性，从A1启动到A2 调用TRANSIT_WALLPAPER_CLOSE 一次， 表示enter 
08-02 08:48:32.147  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{30f62e2 token=Token{2a11fad ActivityRecord{821f4c4 u0 test.example.com.myapplication/.SecondActivity t76}}}
08-02 08:48:32.148  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@9d39765 animAttr=0x12 enter:true transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-02 08:48:32.148  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-02 08:48:32.148  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-02 08:48:32.148  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-02 08:48:32.150  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{5dd09a9 test.example.com.myapplication/test.example.com.myapplication.SecondActivity} anim=0 attr=0x0 a=null transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393



 </rich_text>
			<rich_text weight="heavy">需要进一步研究</rich_text>
			<rich_text>
A1、 A2都带</rich_text>
			<rich_text foreground="#008000">windowIsTranslucent</rich_text>
			<rich_text> ,且带有下面自定义动画 
&lt;</rich_text>
			<rich_text foreground="#000080">style</rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;myanimation&quot;</rich_text>
			<rich_text foreground="#0000ff">parent=</rich_text>
			<rich_text foreground="#008000">&quot;android:style/Animation.Translucent&quot;</rich_text>
			<rich_text>&gt;
&lt;</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;android:activityOpenEnterAnimation&quot;</rich_text>
			<rich_text>&gt;@anim/activity_anim_in&lt;/</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text>&gt;
&lt;</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;android:activityOpenExitAnimation&quot;</rich_text>
			<rich_text>&gt;@anim/activity_anim_out&lt;/</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text>&gt;

&lt;</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;android:windowEnterAnimation&quot;</rich_text>
			<rich_text>&gt;@null&lt;/</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text>&gt;
&lt;</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text foreground="#0000ff">name=</rich_text>
			<rich_text foreground="#008000">&quot;android:windowExitAnimation&quot;</rich_text>
			<rich_text>&gt;@null&lt;/</rich_text>
			<rich_text foreground="#000080">item</rich_text>
			<rich_text>&gt;
&lt;/</rich_text>
			<rich_text foreground="#000080">style</rich_text>
			<rich_text>&gt;
从A1到A2启动调用TRANSIT_ACTIVITY_OPEN 一次， 表示enter

  08-02 09:05:31.429  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{5576aaa token=Token{7b8c995 ActivityRecord{c17f54c u0 test.example.com.myapplication/.SecondActivity t82}}}
08-02 09:05:31.430  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@e0ea502 animAttr=0x4 enter:true transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_ACTIVITY_OPEN</rich_text>
			<rich_text> isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-02 09:05:31.431  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-02 09:05:31.431  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-02 09:05:31.431  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-02 09:05:31.435  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{5296a11 test.example.com.myapplication/test.example.com.myapplication.SecondActivity} anim=0 attr=0x0 a=android.view.animation.AnimationSet@a864a49 transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393 

    
    
 新Music启动， 为什么明明是</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> 却没有调用相应的动画？ 因为其nextAppTransition 是 </rich_text>
			<rich_text weight="heavy">ANIM_SCALE_UP</rich_text>
			<rich_text>， 这个应该是引用启动的动画，优先级比</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text>， 这个时候会直接跳过</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> 执行</rich_text>
			<rich_text weight="heavy">ANIM_SCALE_UP</rich_text>
			<rich_text>动画， AppTranasition中 </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=createScaleUpAnimationLocked&amp;project=m8996">createScaleUpAnimationLocked</rich_text>
			<rich_text>
 
 08-02 09:12:08.715  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{2734149 token=Token{c9f6b50 ActivityRecord{baf6d13 u0 com.alcatel.music5.china/com.alcatel.music5.activities.BaseMusicPlayerActivity t84}}}
08-02 09:12:08.716  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AnimationSet@d7d3567 nextAppTransition=</rich_text>
			<rich_text weight="heavy">ANIM_SCALE_UP</rich_text>
			<rich_text> transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> isEntrance=true Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9492 
08-02 09:12:08.716  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-02 09:12:08.716  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-02 09:12:08.716  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-02 09:12:08.719  1441  1509 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{5256b8b com.alcatel.music5.china/com.alcatel.music5.activities.BaseMusicPlayerActivity} anim=0 attr=0x0 a=null transit=1 isEntrance=true Callers com.android.server.wm.WindowStateAnimator.applyEnterAnimationLocked:1820 com.android.server.wm.WindowStateAnimator.performShowLocked:1726 com.android.server.wm.AppWindowAnimator.showAllWindowsLocked:393 
08-02 09:12:08.721  1441  1509 V WindowManagerService: applyAnimation: atoken=AppWindowToken{4b1de78 token=Token{29493db ActivityRecord{81304ea u0 com.tcl.mie.tlauncher/com.android.launcher3.Launcher t26}}}
08-02 09:12:08.722  1441  1509 V AppTransition: applyAnimation: anim=android.view.animation.AlphaAnimation@93f4f14 nextAppTransition=</rich_text>
			<rich_text weight="heavy">ANIM_SCALE_UP</rich_text>
			<rich_text> transit=</rich_text>
			<rich_text weight="heavy">TRANSIT_WALLPAPER_CLOSE</rich_text>
			<rich_text> isEntrance=false Callers=com.android.server.wm.WindowManagerService.applyAnimationLocked:3515 com.android.server.wm.WindowManagerService.setTokenVisibilityLocked:4586 com.android.server.wm.WindowManagerService.handleAppTransitionReadyLocked:9532 
08-02 09:12:08.723  1441  1509 I zxc     : applyAnimationLocked : mPolicy instanceof PhoneWindowManager = true
08-02 09:12:08.723  1441  1509 I zxc     : applyAnimationLocked : isKeyguardShowingOrOccluded  = false
08-02 09:12:08.723  1441  1509 I zxc     : applyAnimationLocked &gt;&gt;&gt;&gt; 2
08-02 09:12:08.751  1441  2465 V WindowStateAnimator: applyAnimation: win=WindowStateAnimator{26ff505 com.tcl.mie.tlauncher/com.android.launcher3.Launcher} anim=0 attr=0x1 a=null transit=2 isEntrance=false Callers com.android.server.wm.WindowManagerService.relayoutWindow:3319 com.android.server.wm.Session.relayout:198 android.view.IWindowSession$Stub.onTransact:284 
   
    
    
    
    
    
    
    
    
    </rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Monkey-Bug" prog_lang="custom-colors" readonly="False" tags="" unique_id="45">
			<rich_text>
</rich_text>
			<rich_text scale="h2" weight="heavy">1     Defect-1399835 Mix crash</rich_text>
			<rich_text>


monkey -v -v --monitor-native-crashes  --throttle 300 -p com.alcatel.music5 20000

     根据下面的日志，在出现Crash之前由于内存不足 发生 了多次GC，而后出现了 “attempt to use stale global reference 0x100c3a (should  be 0x200c3a)” 导致进程挂掉. 可能是与Load_audio_hand线程相关的对象在经过GC以后对象地址被占用，造成了引用错位.  直接原因暂时不清楚，这个线程应该是在/</rich_text>
			<rich_text link="webs https://mailsh.tct.tcl.com/owa/redir.aspx?C=FG_Vx2L6YEGxV10ua2szLinuCLj1LdMIsd1PSNe_AqLHQyREz9xto-cb5Be1lpjMfuZH0kFF06Y.&amp;URL=http://172.16.12.204:8080/source/xref/gapp_rel3/">gapp_rel3</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs https://mailsh.tct.tcl.com/owa/redir.aspx?C=FG_Vx2L6YEGxV10ua2szLinuCLj1LdMIsd1PSNe_AqLHQyREz9xto-cb5Be1lpjMfuZH0kFF06Y.&amp;URL=http://172.16.12.204:8080/source/xref/gapp_rel3/JrdMusic/">JrdMusic</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs https://mailsh.tct.tcl.com/owa/redir.aspx?C=FG_Vx2L6YEGxV10ua2szLinuCLj1LdMIsd1PSNe_AqLHQyREz9xto-cb5Be1lpjMfuZH0kFF06Y.&amp;URL=http://172.16.12.204:8080/source/xref/gapp_rel3/JrdMusic/mvLib/">mvLib</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs https://mailsh.tct.tcl.com/owa/redir.aspx?C=FG_Vx2L6YEGxV10ua2szLinuCLj1LdMIsd1PSNe_AqLHQyREz9xto-cb5Be1lpjMfuZH0kFF06Y.&amp;URL=http://172.16.12.204:8080/source/xref/gapp_rel3/JrdMusic/mvLib/src/">src</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs https://mailsh.tct.tcl.com/owa/redir.aspx?C=FG_Vx2L6YEGxV10ua2szLinuCLj1LdMIsd1PSNe_AqLHQyREz9xto-cb5Be1lpjMfuZH0kFF06Y.&amp;URL=http://172.16.12.204:8080/source/xref/gapp_rel3/JrdMusic/mvLib/src/main/">main</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs https://mailsh.tct.tcl.com/owa/redir.aspx?C=FG_Vx2L6YEGxV10ua2szLinuCLj1LdMIsd1PSNe_AqLHQyREz9xto-cb5Be1lpjMfuZH0kFF06Y.&amp;URL=http://172.16.12.204:8080/source/xref/gapp_rel3/JrdMusic/mvLib/src/main/java/">java</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs https://mailsh.tct.tcl.com/owa/redir.aspx?C=FG_Vx2L6YEGxV10ua2szLinuCLj1LdMIsd1PSNe_AqLHQyREz9xto-cb5Be1lpjMfuZH0kFF06Y.&amp;URL=http://172.16.12.204:8080/source/xref/gapp_rel3/JrdMusic/mvLib/src/main/java/com/">com</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs https://mailsh.tct.tcl.com/owa/redir.aspx?C=FG_Vx2L6YEGxV10ua2szLinuCLj1LdMIsd1PSNe_AqLHQyREz9xto-cb5Be1lpjMfuZH0kFF06Y.&amp;URL=http://172.16.12.204:8080/source/xref/gapp_rel3/JrdMusic/mvLib/src/main/java/com/mixvibes/">mixvibes</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs https://mailsh.tct.tcl.com/owa/redir.aspx?C=FG_Vx2L6YEGxV10ua2szLinuCLj1LdMIsd1PSNe_AqLHQyREz9xto-cb5Be1lpjMfuZH0kFF06Y.&amp;URL=http://172.16.12.204:8080/source/xref/gapp_rel3/JrdMusic/mvLib/src/main/java/com/mixvibes/common/">common</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs https://mailsh.tct.tcl.com/owa/redir.aspx?C=FG_Vx2L6YEGxV10ua2szLinuCLj1LdMIsd1PSNe_AqLHQyREz9xto-cb5Be1lpjMfuZH0kFF06Y.&amp;URL=http://172.16.12.204:8080/source/xref/gapp_rel3/JrdMusic/mvLib/src/main/java/com/mixvibes/common/djmix/">djmix</rich_text>
			<rich_text>/</rich_text>
			<rich_text link="webs https://mailsh.tct.tcl.com/owa/redir.aspx?C=FG_Vx2L6YEGxV10ua2szLinuCLj1LdMIsd1PSNe_AqLHQyREz9xto-cb5Be1lpjMfuZH0kFF06Y.&amp;URL=http://172.16.12.204:8080/source/xref/gapp_rel3/JrdMusic/mvLib/src/main/java/com/mixvibes/common/djmix/DjMixMediaLoader.java">DjMixMediaLoader.java</rich_text>
			<rich_text>创建的，需要App check一下与Load_audio_hand线程相关的代码段.


01-26  11:49:13.882 I/art     (11292): Background partial concurrent mark  sweep GC freed 22894(1244KB) AllocSpace objects, 39(17MB) LOS objects,  11% free, 123MB/139MB, paused 7.797ms total 65.056ms

01-26 11:49:37.081 E/art     (11292): JNI ERROR (app bug): </rich_text>
			<rich_text weight="heavy">attempt to use stale global reference 0x100c3a </rich_text>
			<rich_text>(should be 0x200c3a)
01-26 11:49:37.082 F/art     (11292): art/runtime/indirect_reference_table.cc:65] JNI ERROR (app bug): see above.

01-26 11:49:39.547 F/art     (11292): art/runtime/barrier.cc:90] </rich_text>
			<rich_text weight="heavy">Check failed: count_ == 0 (count_=-1, 0=0) Attempted to destroy barrier with non zero count</rich_text>
			<rich_text>
01-26  11:49:39.547 F/art     (11292): art/runtime/runtime.cc:366] Runtime  aborting --- recursively, so no thread-specific detail!
01-26 11:49:39.547 F/art     (11292): art/runtime/runtime.cc:366]
01-26 11:49:39.547 F/libc    (11292): Fatal signal 6 (SIGABRT), code -6 in tid 11330 (Load_audio_hand)

01-26  11:49:39.651 F/DEBUG   ( 3650): pid: 11292, tid: 11330, name:  Load_audio_hand  &gt;&gt;&gt; com.alcatel.music5 &lt;&lt;&lt;


2. Defect-</rich_text>
			<rich_text foreground="#000000">2640818</rich_text>
			<rich_text>

RASH: com.tct.soundrecorder (pid 6627)
// Short Msg: java.lang.IllegalStateException
// Long Msg: java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState
// Build Label: TCL/6055A/idol4:6.0.1/MMB29M/v4D33-0:user/release-keys
// Build Changelist: v4D33-UC30
// Build Time: 1469149443000
// java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState
// at android.support.v4.app.FragmentManagerImpl.checkStateLoss(FragmentManager.java:1448)
// at android.support.v4.app.FragmentManagerImpl.popBackStackImmediate(FragmentManager.java:559)
// at android.support.v4.app.FragmentActivity.onBackPressed(FragmentActivity.java:166)
// at android.app.Activity.onKeyUp(Activity.java:2594)
// at android.view.KeyEvent.dispatch(KeyEvent.java:2674)
// at android.app.Activity.dispatchKeyEvent(Activity.java:2893)
// at android.support.v7.internal.view.WindowCallbackWrapper.dispatchKeyEvent(WindowCallbackWrapper.java:50)
// at android.support.v7.app.AppCompatDelegateImplBase$AppCompatWindowCallbackBase.dispatchKeyEvent(AppCompatDelegateImplBase.java:224)
// at com.android.internal.policy.PhoneWindow$DecorView.dispatchKeyEvent(PhoneWindow.java:2329)
// at android.view.ViewRootImpl$ViewPostImeInputStage.processKeyEvent(ViewRootImpl.java:4444)
// at android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:4284)
// at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3821)
// at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3874)
// at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3840)
// at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:3966)
// at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3848)
// at android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:4023)
// at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3821)
// at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3874)
// at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3840)
// at android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:3848)
// at android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:3821)
// at android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:3874)
// at android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:3840)
// at android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:3999)
// at android.view.ViewRootImpl$ImeInputStage.onFinishedInputEvent(ViewRootImpl.java:4160)
// at android.view.inputmethod.InputMethodManager$PendingEvent.run(InputMethodManager.java:2253)
// at android.view.inputmethod.InputMethodManager.invokeFinishedInputEventCallback(InputMethodManager.java:1874)
// at android.view.inputmethod.InputMethodManager.finishedInputEvent(InputMethodManager.java:1865)
// at android.view.inputmethod.InputMethodManager$ImeInputEventSender.onInputEventFinished(InputMethodManager.java:2230)
// at android.view.InputEventSender.dispatchInputEventFinished(InputEventSender.java:141)
// at android.os.MessageQueue.nativePollOnce(Native Method)
// at android.os.MessageQueue.next(MessageQueue.java:323)
// at android.os.Looper.loop(Looper.java:135)
// at android.app.ActivityThread.main(ActivityThread.java:5515)
// at java.lang.reflect.Method.invoke(Native Method)
// at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:764)
// at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:654)
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Native Crash" prog_lang="custom-colors" readonly="False" tags="" unique_id="49">
			<rich_text>addr2line -e  &lt;filename,so&gt; -f &lt;address&gt; 


</rich_text>
			<rich_text scale="h2" weight="heavy">addr2line -C -f -e out/target/product/idol4s/symbols/system/lib64/libandroidfw.so 000000000001439c</rich_text>
			<rich_text>



&quot;main&quot; prio=5 tid=1 Native
| group=&quot;main&quot; sCount=1 dsCount=0 obj=0x74e8a360 self=0xab562ef0
| sysTid=2238 nice=0 cgrp=default sched=0/0 handle=0xf7240b34
| state=S schedstat=( 440130585679 272753327515 880590 ) utm=33524 stm=10489 core=2 HZ=100
| stack=0xff02f000-0xff031000 stackSize=8MB
| held mutexes=
kernel: __switch_to+0x70/0x7c
kernel: SyS_epoll_wait+0x2a0/0x32c
kernel: compat_SyS_epoll_pwait+0xac/0x130
kernel: cpu_switch_to+0x48/0x4c
native: #00 pc 00044374 /system/lib/libc.so (__epoll_pwait+20)
native: #01 pc 000195bf /system/lib/libc.so (epoll_pwait+26)
native: #02 pc 000195cd /system/lib/libc.so (epoll_wait+6)
native: #03 pc 00012c07 /system/lib/libutils.so (android::Looper::pollInner(int)+102)
native: #04 pc 00012e83 /system/lib/libutils.so (android::Looper::pollOnce(int, int*, int*, void**)+130)
native: #05 pc 00082369 /system/lib/libandroid_runtime.so (android::NativeMessageQueue::pollOnce(_JNIEnv*, _jobject*, int)+22)
native: #06 pc 00000575 /system/framework/arm/boot.oat (Java_android_os_MessageQueue_nativePollOnce__JI+96)
at android.os.MessageQueue.nativePollOnce(Native method)
at android.os.MessageQueue.next(MessageQueue.java:323)
at android.os.Looper.loop(Looper.java:135)
at android.app.ActivityThread.main(ActivityThread.java:5509)
at java.lang.reflect.Method.invoke!(Native method)
at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:732)
at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:622)
 
 
</rich_text>
			<rich_text scale="h2" weight="heavy">1.Defect-1851079  GC引发的NATIVE CRASH</rich_text>
			<rich_text>

03-22 16:43:11.849 28060 28070 F art     :  art/runtime/gc/space/large_object_space.cc:432] Check failed: next_addr  == free_end_start (next_addr=2465742848, free_end_start=2046713856) 
03-22 16:43:22.288 28060 28070 E art     : Unexpected time out during dump checkpoint.
03-22  16:43:22.288 28060 28070 F art     : art/runtime/barrier.cc:90] Check  failed: count_ == 0 (count_=1, 0=0) Attempted to destroy barrier with  non zero count
03-22 16:43:22.288 28060 28070 F art     :  art/runtime/runtime.cc:366] Runtime aborting --- recursively, so no  thread-specific detail!
03-22 16:43:22.288 28060 28070 F art     : art/runtime/runtime.cc:366] 
03-22 16:43:22.288 28060 28070 F libc    : Fatal signal 6 (SIGABRT), code -6 in tid 28070 (HeapTaskDaemon)
03-22 16:43:22.371   549   549 F DEBUG   : 
03-22 16:43:22.371   549   549 F DEBUG   : backtrace:
03-22 16:43:22.371   549   549 F DEBUG   :     #00 pc 000000000006bb34  /system/lib64/libc.so (tgkill+8)
03-22 16:43:22.371   549   549 F DEBUG   :     #01 pc 00000000000692c4  /system/lib64/libc.so (pthread_kill+68)
03-22 16:43:22.371   549   549 F DEBUG   :     #02 pc 00000000000212b8  /system/lib64/libc.so (raise+28)
03-22 16:43:22.371   549   549 F DEBUG   :     #03 pc 000000000001ba58  /system/lib64/libc.so (abort+60)
03-22 16:43:22.371   549   549 F DEBUG   :     #04 pc 00000000004325b8  /system/lib64/libart.so (art::Runtime::Abort()+324)
03-22  16:43:22.371   549   549 F DEBUG   :     #05 pc 0000000000137224   /system/lib64/libart.so (art::LogMessage::~LogMessage()+3136)
03-22 16:43:22.371   549   549 F DEBUG   :     #06 pc 0000000000131cc8  /system/lib64/libart.so (art::Barrier::~Barrier()+296)
03-22  16:43:22.371   549   549 F DEBUG   :     #07 pc 00000000004671a4   /system/lib64/libart.so  (art::ThreadList::Dump(std::__1::basic_ostream&lt;char,  std::__1::char_traits&lt;char&gt; &gt;&amp;)+212)
03-22 16:43:22.372   549   549 F DEBUG   :     #08 pc 00000000004326a0  /system/lib64/libart.so (art::Runtime::Abort()+556)
03-22  16:43:22.372   549   549 F DEBUG   :     #09 pc 0000000000137224   /system/lib64/libart.so (art::LogMessage::~LogMessage()+3136)
03-22 16:43:22.372   549   549 F DEBUG   :     #10 pc 000000000025f960  /system/lib64/libart.so (art::gc::space::</rich_text>
			<rich_text weight="heavy">FreeListSpace</rich_text>
			<rich_text>::Free(art::Thread*, art::mirror::Object*)+612)
03-22  16:43:22.372   549   549 F DEBUG   :     #11 pc 000000000021af0c   /system/lib64/libart.so  (art::gc::collector::MarkSweep::SweepArray(art::gc::accounting::AtomicStack&lt;art::mirror::Object&gt;*,  bool)+888)
03-22 16:43:22.372   549   549 F DEBUG   :     #12 pc  000000000021a76c  /system/lib64/libart.so  (art::gc::collector::MarkSweep::ReclaimPhase()+344)
03-22  16:43:22.372   549   549 F DEBUG   :     #13 pc 0000000000220828   /system/lib64/libart.so  (art::gc::collector::MarkSweep::RunPhases()+300)
03-22 16:43:22.372   549   549 F DEBUG   :     #14 pc 0000000000212b48  /system/lib64/libart.so (art::gc::collector::</rich_text>
			<rich_text weight="heavy">GarbageCollector</rich_text>
			<rich_text>::Run(art::gc::GcCause, bool)+296)
03-22 16:43:22.372   549   549 F DEBUG   :     #15 pc 0000000000243e1c  /system/lib64/libart.so (art::gc::Heap::</rich_text>
			<rich_text weight="heavy">CollectGarbageInternal</rich_text>
			<rich_text>(art::gc::collector::GcType, art::gc::GcCause, bool)+2056)
03-22 16:43:22.372   549   549 F DEBUG   :     #16 pc 0000000000245688  /system/lib64/libart.so (art::gc::Heap::</rich_text>
			<rich_text weight="heavy">ConcurrentGCTask</rich_text>
			<rich_text>::Run(art::Thread*)+152)
03-22 16:43:22.372   549   549 F DEBUG   :     #17 pc 0000000000268f3c  /system/lib64/libart.so (art::gc::</rich_text>
			<rich_text weight="heavy">TaskProcessor</rich_text>
			<rich_text>::</rich_text>
			<rich_text weight="heavy">RunAllTasks</rich_text>
			<rich_text>(art::Thread*)+80)
03-22 16:43:22.372   549   549 F DEBUG   :     #18 pc 0000000001f6856c  /system/framework/arm64/boot.oat (offset 0x1f68000) 



52  </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text>* </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=Alloc&amp;project=m8976">Alloc</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=size_t&amp;project=m8976">size_t</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=size&amp;project=m8976">size</rich_text>
			<rich_text>) {
53    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=UNUSED&amp;project=m8976">UNUSED</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=size&amp;project=m8976">size</rich_text>
			<rich_text>);
54    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=LOG&amp;project=m8976">LOG</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=FATAL&amp;project=m8976">FATAL</rich_text>
			<rich_text>) &lt;&lt; &quot;NoopAllocator::Alloc should not be called&quot;;
55    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=UNREACHABLE&amp;project=m8976">UNREACHABLE</rich_text>
			<rich_text>();
56  }

163</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=ArenaPool&amp;project=m8976">ArenaPool</rich_text>
			<rich_text>::</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=ArenaPool&amp;project=m8976">ArenaPool</rich_text>
			<rich_text>(</rich_text>
			<rich_text weight="heavy">bool</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=use_malloc&amp;project=m8976">use_malloc</rich_text>
			<rich_text>, </rich_text>
			<rich_text weight="heavy">bool</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=low_4gb&amp;project=m8976">low_4gb</rich_text>
			<rich_text>)
164    : </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=use_malloc_&amp;project=m8976">use_malloc_</rich_text>
			<rich_text>(use_malloc), </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=lock_&amp;project=m8976">lock_</rich_text>
			<rich_text>(&quot;Arena pool lock&quot;, </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=kArenaPoolLock&amp;project=m8976">kArenaPoolLock</rich_text>
			<rich_text>), </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=free_arenas_&amp;project=m8976">free_arenas_</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=nullptr&amp;project=m8976">nullptr</rich_text>
			<rich_text>),
165      </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=low_4gb_&amp;project=m8976">low_4gb_</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=low_4gb&amp;project=m8976">low_4gb</rich_text>
			<rich_text>) {
166  </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=low_4gb&amp;project=m8976">low_4gb</rich_text>
			<rich_text>) {
167    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=CHECK&amp;project=m8976">CHECK</rich_text>
			<rich_text>(!use_malloc) &lt;&lt; &quot;low4gb must use map implementation&quot;;
168  }
169  </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (!use_malloc) {
170    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=MemMap&amp;project=m8976">MemMap</rich_text>
			<rich_text>::</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Init&amp;project=m8976">Init</rich_text>
			<rich_text>();
171  }
172}



造成这个问题的原因可能是art虚拟机里面分配空间的线程和GC释放空间的线程出现了race condition,   两个线程对同一个地址空间进行了操作，造成了一个线程在访问时候的地址越界
 
出错信息如下：

03-22 16:43:11.849 28060 28070 F art     : art/runtime/gc/space/</rich_text>
			<rich_text weight="heavy">large_object_space.cc:432</rich_text>
			<rich_text>] Check failed: next_addr == free_end_start (next_addr=2465742848, free_end_start=2046713856)
03-22 16:43:22.288 28060 28070 E art     : Unexpected time out during dump checkpoint.
03-22  16:43:22.288 28060 28070 F art     : art/runtime/barrier.cc:90] Check  failed: count_ == 0 (count_=1, 0=0) Attempted to destroy barrier with  non zero count
03-22 16:43:22.288 28060 28070 F art     :  art/runtime/runtime.cc:366] Runtime aborting --- recursively, so no  thread-specific detail!
03-22 16:43:22.288 28060 28070 F art     : art/runtime/runtime.cc:366]
03-22 16:43:22.288 28060 28070 F libc    : Fatal signal 6 (SIGABRT), code -6 in tid 28070 (HeapTaskDaemon)
 
出现问题的代码如下， 应该是对这个区块操作的时候出现的地址越界

404size_t FreeListSpace::Free(Thread* self, mirror::Object* obj) {
      .....
430  if (next_addr &gt;= free_end_start) {
431    // Easy case, the next chunk is the end free region.
432   </rich_text>
			<rich_text weight="heavy"> CHECK_EQ(next_addr, free_end_start);</rich_text>
			<rich_text>
433    free_end_ += new_free_size;
434  } else {
 
 
 查看tombstone，里面有一个线程，在出现问题的时候正在分配数组空间
pid: 28060, tid: 28657, name: SyncAdapterThre  &gt;&gt;&gt; com.tct.exchange &lt;&lt;&lt;
backtrace:
    #00 pc 0000000000514fd0  /system/lib64/libart.so (</rich_text>
			<rich_text weight="heavy">artAllocArrayFromCodeRosAlloc</rich_text>
			<rich_text>+732)
    #01 pc 0000000000121910  /system/lib64/libart.so (</rich_text>
			<rich_text weight="heavy">art_quick_alloc_array_rosalloc</rich_text>
			<rich_text>+64)
    #02 pc 00000000022abd24  /system/framework/arm64/boot.oat (offset 0x1f68000)


2.










</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="System-Bug" prog_lang="custom-colors" readonly="False" tags="" unique_id="60">
			<rich_text scale="h2" weight="heavy">1.Defect-1563093 baidu 导航crash </rich_text>
			<rich_text>
应该是内核有问题

Apps Crash - Non-secure watchdog timeout on CPU 2 at PC 0x86514878

Watchdog Context:
======================================================================
Non-secure watchdog timeout on CPU 2 at PC 0x86514878

CPU  |World             |Received WDT Int?   |Received SGI Int?   |In Warm Boot?      
2    |secure world      |yes                 |no                  |yes                

CPU 2 Call Stacks (dumped by TZ):
PC: 0x86514878

CPUMERRSR_EL1: 0x121807FF
L2MERRSR_EL1:  0x13280080

 
CPU core 0 is POWER COLLAPSED.
CPU core 1 is POWER COLLAPSED.
CPU core 2 is POWER COLLAPSED.
CPU core 3 is POWER COLLAPSED.
CPU core 4 is POWER COLLAPSED.
CPU core 5 is POWER COLLAPSED.
CPU core 6 is POWER COLLAPSED.
CPU core 7 is POWER COLLAPSED.

2. Defect-1876719  [Pre][SD卡]在浏览器下载时拔出SD卡再插入，提示SD卡已损坏

framework中接收到的vold  传递上来的sd卡状态是VolumeInfo.STATE_UNMOUNTABLE,  然后StorageNotifaction中接收到sd卡状态的改变，发现是VolumeInfo.STATE_UNMOUNTABLE  这个状态所以发出sd卡损坏，需要格式化的状态
 
问题处在/system/vold/PublicVolume.cpp 中dounmount的时候没有对正在执行的进程做处理

status_t PublicVolume::doUnmount() {
    if (mFusePid &gt; 0) {
        kill(mFusePid, SIGTERM);
        TEMP_FAILURE_RETRY(waitpid(mFusePid, nullptr, 0));
        mFusePid = 0;
    }

    ForceUnmount(kAsecPath);

    /*[BUGFIX]-Add-BEGIN by TCTNB.zhengyu.hu, 2016/04/01, Defect-1876719*/
</rich_text>
			<rich_text weight="heavy">    KillProcessesUsingPath(getPath());</rich_text>
			<rich_text>
    /*[BUGFIX]-Add-END by TCTNB.zhengyu.hu */

    ForceUnmount(mFuseDefault);
    ForceUnmount(mFuseRead);
    ForceUnmount(mFuseWrite);
    ForceUnmount(mRawPath);

    rmdir(mFuseDefault.c_str());
    rmdir(mFuseRead.c_str());
    rmdir(mFuseWrite.c_str());
    rmdir(mRawPath.c_str());
    
    --------------使用上述KillProcessesUsingPath能解决问题，但是会衍生出很多问题，如杀掉正在使用的MediaProvider等， 通过下面的方式去处理
    
    SD卡热插拔后挂在，会出现failed to create mount points的错误
mFuseDefault -&gt; /mnt/runtime/default
mFuseRead -&gt; /mnt/runtime/read
mFuseWrite -&gt; /mnt/runtime/write
mRawPath -&gt; /mnt/media_rw/

原因是上面四个路境没有在SD卡移除的时候做相应的处理，或者说由于设备处于忙碌的状态，而unmount的时候采用的下面的方式无效
    ForceUnmount(mFuseDefault);
    ForceUnmount(mFuseRead);
    ForceUnmount(mFuseWrite);
    ForceUnmount(mRawPath);

    rmdir(mFuseDefault.c_str());
    rmdir(mFuseRead.c_str());
    rmdir(mFuseWrite.c_str());
    rmdir(mRawPath.c_str());

    mFuseDefault.clear();
    mFuseRead.clear();
    mFuseWrite.clear();
    mRawPath.clear();

所以现在将SD卡 domount时候做强制移除处理
        umount2(mFuseDefault.c_str(),MNT_DETACH);
        umount2(mFuseRead.c_str(),MNT_DETACH);
        umount2(mFuseWrite.c_str(),MNT_DETACH);
        umount2(mRawPath.c_str(),MNT_DETACH);

        rmdir(mFuseDefault.c_str());
        rmdir(mFuseRead.c_str());
        rmdir(mFuseWrite.c_str());
        rmdir(mRawPath.c_str());


MNT_DETACH 这个变量会使得即使设备处于忙碌状态都可以恢复

  </rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="stability" prog_lang="custom-colors" readonly="False" tags="" unique_id="67">
			<rich_text>内存泄漏， 

2016-05-14 16:31:22,052 : 05-14 16:31:22.585 V/CAM_OptBurstModule( 8635): java.lang.Throwable
2016-05-14 16:31:22,052 : 05-14 16:31:22.585 V/CAM_OptBurstModule( 8635): 	at com.android.camera.OptimizeBurstPhotoModule.checkBurstSaveQueue(OptimizeBurstPhotoModule.java:117)
2016-05-14 16:31:22,052 : 05-14 16:31:22.585 V/CAM_OptBurstModule( 8635): 	at com.android.camera.OptimizeBurstPhotoModule.access$300(OptimizeBurstPhotoModule.java:19)
2016-05-14 16:31:22,052 : 05-14 16:31:22.585 V/CAM_OptBurstModule( 8635): 	at com.android.camera.OptimizeBurstPhotoModule$2.run(OptimizeBurstPhotoModule.java:81)
2016-05-14 16:31:22,052 : 05-14 16:31:22.585 V/CAM_OptBurstModule( 8635): 	at android.os.Handler.handleCallback(Handler.java:739)
2016-05-14 16:31:22,052 : 05-14 16:31:22.585 V/CAM_OptBurstModule( 8635): 	at android.os.Handler.dispatchMessage(Handler.java:95)
2016-05-14 16:31:22,052 : 05-14 16:31:22.585 V/CAM_OptBurstModule( 8635): 	at android.os.Looper.loop(Looper.java:148)
2016-05-14 16:31:22,052 : 05-14 16:31:22.585 V/CAM_OptBurstModule( 8635): 	at android.app.ActivityThread.main(ActivityThread.java:5515)
2016-05-14 16:31:22,052 : 05-14 16:31:22.585 V/CAM_OptBurstModule( 8635): 	at java.lang.reflect.Method.invoke(Native Method)
2016-05-14 16:31:22,052 : 05-14 16:31:22.585 V/CAM_OptBurstModule( 8635): 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:764)
2016-05-14 16:31:22,052 : 05-14 16:31:22.585 V/CAM_OptBurstModule( 8635): 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:654)




集成新的waves so之后 root@idol4s:/proc/1332/fd # ls -al|wc -l   commit in </rich_text>
			<rich_text link="webs http://172.16.11.162:8081/#/c/244049/">http://172.16.11.162:8081/#/c/244049/</rich_text>
			<rich_text>  system_server 的fd不会一直增加。此问题解决
1177049 too many fd
</rich_text>
			<rich_text scale="h2" weight="heavy">
1.Defect-1162021  &amp; Defect-1177049 Fd内存泄漏</rich_text>
			<rich_text>

Defect-1162021 Log
Process: com.tct.gallery3d, PID: 8458
</rich_text>
			<rich_text weight="heavy">java.lang.RuntimeException: Could not read input channel file descriptors from parcel.</rich_text>
			<rich_text>
at android.view.InputChannel.nativeReadFromParcel(Native Method)
at android.view.InputChannel.readFromParcel(InputChannel.java:148)
at android.view.IWindowSession$Stub$Proxy.addToDisplay(IWindowSession.java:759)
at android.view.ViewRootImpl.setView(ViewRootImpl.java:575)
at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:310)
at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:310)
at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:86)
at android.app.Dialog.show(Dialog.java:319)

Defect-1177049 Log
12-18 14:24:05.355  5999  6026 W  WindowManager: java.lang.IllegalArgumentException: Requested window  android.view.ViewRootImpl$W@2560880 does not exist
12-18  14:24:05.355  5999  6026 W WindowManager:     at  com.android.server.wm.WindowManagerService.windowForClientLocked(WindowManagerService.java:8780)
12-18  14:24:05.355  5999  6026 W WindowManager:     at  com.android.server.wm.WindowManagerService.windowForClientLocked(WindowManagerService.java:8771)
12-18  14:24:05.355  5999  6026 W WindowManager:     at  com.android.server.wm.WindowManagerService.removeWindow(WindowManagerService.java:2711)
12-18 14:24:05.355  5999  6026 W WindowManager:     at com.android.server.wm.Session.remove(Session.java:187)
12-18  14:24:05.355  5999  6026 W WindowManager:     at  android.view.ViewRootImpl.dispatchDetachedFromWindow(ViewRootImpl.java:3148)
12-18 14:24:05.355  5999  6026 W WindowManager:     at android.view.ViewRootImpl.doDie(ViewRootImpl.java:5958)
12-18 14:24:05.355  5999  6026 W WindowManager:     at android.view.ViewRootImpl.die(ViewRootImpl.java:5935)
12-18  14:24:05.355  5999  6026 W WindowManager:     at  android.view.WindowManagerGlobal.removeViewLocked(WindowManagerGlobal.java:397)
12-18 14:24:05.355  5999  6026 W WindowManager:     at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:316)
12-18 14:24:05.355  5999  6026 W WindowManager:     at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:86)
12-18 14:24:05.355  5999  6026 W WindowManager:     at android.app.Dialog.show(Dialog.java:319)
12-18  14:24:05.355  5999  6026 W WindowManager:     at  com.android.server.am.ActivityManagerService$UiHandler.handleMessage(ActivityManagerService.java:1501)
12-18 14:24:05.355  5999  6026 W WindowManager:     at android.os.Handler.dispatchMessage(Handler.java:102)
12-18 14:24:05.355  5999  6026 W WindowManager:     at android.os.Looper.loop(Looper.java:148)
12-18 14:24:05.355  5999  6026 W WindowManager:     at android.os.HandlerThread.run(HandlerThread.java:61)
12-18 14:24:05.355  5999  6026 W WindowManager:     at com.android.server.ServiceThread.run(ServiceThread.java:46)
12-18 14:24:05.356  5999  6026 E AndroidRuntime: *** FATAL EXCEPTION IN SYSTEM PROCESS: android.ui
</rich_text>
			<rich_text weight="heavy">12-18 14:24:05.356  5999  6026 E AndroidRuntime: java.lang.RuntimeException: Could not open input channel pair.  status=-24</rich_text>
			<rich_text>
12-18 14:24:05.356  5999  6026 E AndroidRuntime:     at android.view.InputChannel.nativeOpenInputChannelPair(Native Method)
12-18 14:24:05.356  5999  6026 E AndroidRuntime:     at android.view.InputChannel.openInputChannelPair(InputChannel.java:94)
12-18  14:24:05.356  5999  6026 E AndroidRuntime:     at  com.android.server.wm.WindowManagerService.addWindow(WindowManagerService.java:2540)
12-18 14:24:05.356  5999  6026 E AndroidRuntime:     at com.android.server.wm.Session.addToDisplay(Session.java:168)
12-18 14:24:05.356  5999  6026 E AndroidRuntime:     at android.view.ViewRootImpl.setView(ViewRootImpl.java:575)
12-18 14:24:05.356  5999  6026 E AndroidRuntime:     at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:310)
12-18 14:24:05.356  5999  6026 E AndroidRuntime:     at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:86)
12-18 14:24:05.356  5999  6026 E AndroidRuntime:     at android.app.Dialog.show(Dialog.java:319)
12-18  14:24:05.356  5999  6026 E AndroidRuntime:     at  com.android.server.am.ActivityManagerService$UiHandler.handleMessage(ActivityManagerService.java:1501)
12-18 14:24:05.356  5999  6026 E AndroidRuntime:     at android.os.Handler.dispatchMessage(Handler.java:102)
12-18 14:24:05.356  5999  6026 E AndroidRuntime:     at android.os.Looper.loop(Looper.java:148)
12-18 14:24:05.356  5999  6026 E AndroidRuntime:     at android.os.HandlerThread.run(HandlerThread.java:61)
12-18 14:24:05.356  5999  6026 E AndroidRuntime:     at com.android.server.ServiceThread.run(ServiceThread.java:46)
&lt;snip&gt;
12-18 14:24:06.384  5999  6026 I Process : Sending signal. PID: 5999 SIG: 9
&lt;snip&gt;
12-18 14:24:08.559  5368  5368 E Zygote  : Exit zygote because system server (5999) has terminated




</rich_text>
			<rich_text weight="heavy">Root cause: waves opened fd didn't released</rich_text>
			<rich_text>
idol4s
12-18  16:19:16.181  1317  3304 V SoundPool: play sampleID=1,  leftVolume=0.501187, rightVolume=0.501187, priority=0, loop=0,  rate=1.000000
12-18 16:19:16.181  1317  3304 V SoundPool: mState = 0 mChannelID=7, mNumChannels=2, mPos = 0, mPriority=-1, mLoop=0
12-18 16:19:16.181  1317  3304 V SoundPool: mState = 0 mChannelID=0, mNumChannels=1, mPos = 0, mPriority=-1, mLoop=0
12-18 16:19:16.181  1317  3304 V SoundPool: mState = 0 mChannelID=0, mNumChannels=1, mPos = 0, mPriority=-1, mLoop=0
12-18 16:19:16.181  1317  3304 V SoundPool: mState = 0 mChannelID=0, mNumChannels=1, mPos = 0, mPriority=-1, mLoop=0
12-18 16:19:16.181  1317  3304 V SoundPool: Allocated recycled channel for same sampleID
12-18 16:19:16.181  1317  3304 V SoundPool: play channel 0x559cd63b58 state = 0
12-18  16:19:16.181  1317  3304 V SoundPool: SoundChannel::play 0x559cd63b58:  sampleID=1, channelID=8, leftVolume=0.501187, rightVolume=0.501187,  priority=0, loop=0, rate=1.000000
12-18 16:19:16.183  1317  3304 V SoundPool: reusing track 0x559c8ff130 for sample 1
12-18 16:19:16.203  1317  3304 V SoundPool: delete oldTrack 0x0
12-18 16:19:16.436  1317  5864 V SoundPool: process 0x559cd63b58 channel 8 event BUFFER_END
12-18 16:19:16.440  1317  4001 V SoundPool: awake
12-18 16:19:16.440  1317  4001 V SoundPool: Getting channel from stop list
12-18 16:19:16.440  1317  4001 V SoundPool: stop
12-18 16:19:16.443  1317  4001 V SoundPool: done_l(8)
12-18 16:19:16.443  1317  4001 V SoundPool: move to front


idol3
V/SoundPool(  874): play sampleID=1, leftVolume=0.501187, rightVolume=0.501187, priority=0, loop=0, rate=1.000000
V/SoundPool(  874): mState = 0 mChannelID=2, mNumChannels=2, mPos = 0, mPriority=-1, mLoop=0
V/SoundPool(  874): mState = 0 mChannelID=4, mNumChannels=2, mPos = 0, mPriority=-1, mLoop=0
V/SoundPool(  874): mState = 0 mChannelID=0, mNumChannels=1, mPos = 0, mPriority=-1, mLoop=0
V/SoundPool(  874): mState = 0 mChannelID=0, mNumChannels=1, mPos = 0, mPriority=-1, mLoop=0
V/SoundPool(  874): Allocated active channel
V/SoundPool(  874): play channel 0x55996911f0 state = 0
V/SoundPool(   874): SoundChannel::play 0x55996911f0: sampleID=1, channelID=5,  leftVolume=0.501187, rightVolume=0.501187, priority=0, loop=0,  rate=1.000000
V/SoundPool(  874): setVolume 0x55997f87f0
V/SoundPool(  874): delete oldTrack 0x55997eb790
V/SoundPool(  874): process 0x55996911f0 channel 5 event BUFFER_END
V/SoundPool(  874): awake
V/SoundPool(  874): Getting channel from stop list
V/SoundPool(  874): stop
V/SoundPool(  874): done_l(5)
V/SoundPool(  874): move to front

</rich_text>
			<rich_text link="webs http://172.16.11.162:8081/#change,244054">http://172.16.11.162:8081/#change,244054</rich_text>
			<rich_text>
集成新的waves so之后
321
root@idol4s:/proc/1332/fd # ls -al|wc -l                                       
322
root@idol4s:/proc/1332/fd # ls -al|wc -l                                       
323
root@idol4s:/proc/1332/fd # ls -al|wc -l                                       
323
root@idol4s:/proc/1332/fd # ls -al|wc -l                                       
323
root@idol4s:/proc/1332/fd # ls -al|wc -l                                       
322
 
 
system_server 的fd不会一直增加。此问题解

E TaskPersister: File error accessing recents directory (too many files open?)


</rich_text>
			<rich_text scale="h2" weight="heavy">2.Defect-1162125</rich_text>
			<rich_text> </rich_text>
			<rich_text scale="h2" weight="heavy">   face beauty memory leak</rich_text>
			<rich_text>

015-12-30 02:13:16,802 : 151230 02:13:16.802: [DEBUG] [Camera] [preview] enter preview mode
</rich_text>
			<rich_text foreground="#ff0000">2015-12-30 02:13:18,269 : 151230 02:13:18.269: MDevice crashed</rich_text>
			<rich_text>
 
2015-12-30 02:13:18,269 : --------- beginning of crash
</rich_text>
			<rich_text foreground="#ff0000">2015-12-30 02:13:18,269 : 12-29 19:13:18.452 15061 15077 E AndroidRuntime: FATAL EXCEPTION: GLThread 3854</rich_text>
			<rich_text>
2015-12-30 02:13:18,284 : 12-29 19:13:18.452 15061 15077 E AndroidRuntime: Process: com.tct.gallery3d, PID: 15061
2015-12-30  02:13:18,284 : 12-29 19:13:18.452 15061 15077 E AndroidRuntime:  java.lang.RuntimeException: createContext failed: EGL_BAD_ALLOC
2015-12-30  02:13:18,284 : 12-29 19:13:18.452 15061 15077 E AndroidRuntime:     at  android.opengl.GLSurfaceView$EglHelper.throwEglException(GLSurfaceView.java:1193)
2015-12-30  02:13:18,284 : 12-29 19:13:18.452 15061 15077 E AndroidRuntime:     at  android.opengl.GLSurfaceView$EglHelper.throwEglException(GLSurfaceView.java:1184)
2015-12-30  02:13:18,284 : 12-29 19:13:18.452 15061 15077 E AndroidRuntime:     at  android.opengl.GLSurfaceView$EglHelper.start(GLSurfaceView.java:1034)
2015-12-30  02:13:18,284 : 12-29 19:13:18.452 15061 15077 E AndroidRuntime:     at  android.opengl.GLSurfaceView$GLThread.guardedRun(GLSurfaceView.java:1401)
2015-12-30  02:13:18,284 : 12-29 19:13:18.452 15061 15077 E AndroidRuntime:     at  android.opengl.GLSurfaceView$GLThread.run(GLSurfaceView.java:1240)
2015-12-30 02:13:18,378 : 12-29 19:13:18.561  3502  3527 I JRDRecordService: jrdCrashHandler invoke ytf...



在手机重启前，发生了这个crash，应该先让com.tct.gallery3d的接口人解决一下面的crash。
这个问题应该常出现在不断的切换gallery应用导致的，从国外一些网站发现一些解决这个问题的方案：
</rich_text>
			<rich_text foreground="#333366">在activity 的onPause方法中调用mGLView.onPause(),在onResume()必须调用mGLView.onResume.</rich_text>
			<rich_text>
请对应的模块的接口人确认一下自己的模块是否存在代码写的不够严谨的地方。


Dear SPM,
GAPP:
pid: 3502, tid: 19455, name: RenderThread  &gt;&gt;&gt; system_server &lt;&lt;&lt;
signal 6 (SIGABRT), code -6 (SI_TKILL), fault addr --------
Abort message: 'Failed to create context, error = EGL_BAD_ALLOC'
 
GLThread导致system_server crash，该问题是google原生问题，暂时官方未有解决方案，国外工程师提出两个修改的地方
1. 在activity的onPause()和onResume()中需要调用mGLView.onPause()和mGLView.onResume()
2.GLSurfaceiew.java的GLThread.guardedRun()方法中调用swap() 没有catch Runtimexception，需要添加
 
针对1,目前gallery代码已经调用，无需修改
针对2,请项目上添加并请val测试


2015-12-30 02:13:20,983 : 12-29 19:13:20.155 V/CAM_TexViewHelper( 6483): updateTransform
2015-12-30  02:13:20,983 : 12-29 19:13:20.155 V/CAM_CameraController( 6483):  getCurrentCameraId without an open camera... returning requested id
2015-12-30 02:13:20,983 : 12-29 19:13:20.155 V/CAM_CameraAppUI( 6483): SurfaceTexture is available
2015-12-30 02:13:20,983 : 12-29 19:13:20.155 I/CAM_PhotoModule( 6483): onPreviewUIReady
2015-12-30 02:13:20,983 : 12-29 19:13:20.155 I/CAM_PhotoModule( 6483): attempted to start preview before camera device
</rich_text>
			<rich_text foreground="#ff0000">2015-12-30  02:13:20,983 : 12-29 19:13:20.167 W/Adreno-GSL( 3502):  &lt;gsl_ldd_control:475&gt;: ioctl fd 272 code 0xc0080913  (IOCTL_KGSL_DRAWCTXT_CREATE) failed: errno 28 No space left on device </rich_text>
			<rich_text>
2015-12-30 02:13:20,983 : 12-29 19:13:20.171 F/OpenGLRenderer( 3502): Failed to create context, error = EGL_BAD_ALLOC
 

root@idol4s:/d/kgsl/kgsl-3d0/ctx # ls
1
10
2
3
6
7
8
9
root@idol4s:/d/kgsl/kgsl-3d0/ctx # cat 1
id: 1 type: GL priority: 8 process: surfaceflinger (480) tid: 480
flags: NO_GMEM_ALLOC|PREAMBLE|PER_CONTEXT_TS|USER_TS priv: None
timestamps: queued: 0 consumed: 0 retired: 0 global:0
cmdqueue:
events:
root@idol4s:/d/kgsl/kgsl-3d0/ctx # cat 10
id: 10 type: CL priority: 8 process: om.tct.launcher (5389) tid: 5860
flags: NO_GMEM_ALLOC|PREAMBLE|PER_CONTEXT_TS|USER_TS|NO_FT|PWR|0x4000000 priv: None
timestamps: queued: 0 consumed: 0 retired: 0 global:0
cmdqueue:
events:
root@idol4s:/d/kgsl/kgsl-3d0/ctx # cat 2
id: 2 type: GL priority: 8 process: surfaceflinger (480) tid: 480
flags: NO_GMEM_ALLOC|PREAMBLE|PER_CONTEXT_TS|USER_TS|PWR|0x4000000 priv: None
timestamps: queued: 4818 consumed: 4818 retired: 4818 global:5791
cmdqueue:
events:
root@idol4s:/d/kgsl/kgsl-3d0/ctx # cat 3                                       
id: 3 type: C2D priority: 8 process: surfaceflinger (480) tid: 556
flags: NO_GMEM_ALLOC|PREAMBLE|PER_CONTEXT_TS|USER_TS priv: None
timestamps: queued: 0 consumed: 0 retired: 0 global:0
cmdqueue:
events:
root@idol4s:/d/kgsl/kgsl-3d0/ctx # cat 6                                       
id: 6 type: GL priority: 8 process: ndroid.systemui (4690) tid: 5181
flags: NO_GMEM_ALLOC|PREAMBLE|PER_CONTEXT_TS|USER_TS priv: None
timestamps: queued: 0 consumed: 0 retired: 0 global:0
cmdqueue:
events:
root@idol4s:/d/kgsl/kgsl-3d0/ctx # cat 7                                       
id: 7 type: GL priority: 8 process: ndroid.systemui (4690) tid: 5181
flags: NO_GMEM_ALLOC|PREAMBLE|PER_CONTEXT_TS|USER_TS|PWR|0x4000000 priv: None
timestamps: queued: 4397 consumed: 4397 retired: 4397 global:5832
cmdqueue:
events:
root@idol4s:/d/kgsl/kgsl-3d0/ctx # cat 8                                       
id: 8 type: GL priority: 8 process: om.tct.launcher (5389) tid: 5648
flags: NO_GMEM_ALLOC|PREAMBLE|PER_CONTEXT_TS|USER_TS priv: None
timestamps: queued: 0 consumed: 0 retired: 0 global:0
cmdqueue:
events:
root@idol4s:/d/kgsl/kgsl-3d0/ctx # cat 9                                       
id: 9 type: GL priority: 8 process: om.tct.launcher (5389) tid: 5648
flags: NO_GMEM_ALLOC|PREAMBLE|PER_CONTEXT_TS|USER_TS|PWR|0x4000000 priv: None
timestamps: queued: 6107 consumed: 6107 retired: 6107 global:5829
cmdqueue:
events:


face beauty导致的mediaserver内存泄漏，下面的链接已经解决了该问题
http://172.16.11.162:8081/#/c/252115/


</rich_text>
			<rich_text scale="h2" weight="heavy">3. Defect-1168602 [Stability][ANR][Telephony]ANR in deezer.android.app 莫名ANR</rich_text>
			<rich_text>
正准备启动settings去设置2G网络，就发生了ANR。ANR in deezer.android.app
PID: 7776
Reason:  Broadcast of Intent { act=android.intent.action.USER_PRESENT  flg=0x24000010  cmp=deezer.android.app/com.deezer.push.BootParseBroadcastReceiver }
Load: 6.97 / 3.81 / 1.54
CPU usage from 7302ms to 0ms ago:
97% 8195/app_process: 10% user + 86% kernel
12% 1345/system_server: 4.9% user + 7.6% kernel / faults: 14 minor
3.1% 637/sensors.qcom: 1.9% user + 1.2% kernel / faults: 2 minor
2.5% 3874/com.tct.launcher: 2% user + 0.5% kernel
2.5% 6316/kworker/6:1: 0% user + 2.5% kernel
1.2% 206/kworker/u16:5: 0% user + 1.2% kernel
0.9% 1802/kworker/u16:9: 0% user + 0.9% kernel
0.6% 3384/com.android.systemui: 0.5% user + 0.1% kernel / faults: 39 minor
0.5% 501/adbd: 0.1% user + 0.4% kernel / faults: 1 minor
0.5% 1379/kworker/u16:8: 0% user + 0.5% kernel
0.2% 40/kworker/u17:0: 0% user + 0.2% kernel
0.2% 376/logd: 0% user + 0.2% kernel


从log中可以看到在anr发生前，com.facebook.katana在不断的重启，并不断的die，从而block住了system_server.
@yuan.li能否升级facebook到最新版本在复现一下这个问题。

 
2015-12-12  14:43:36,893 : 12-12 07:43:36.857  1345  3896 I am_proc_start:  [0,8254,10177,com.facebook.katana,restart,com.facebook.katana]
2015-12-12  14:43:36,893 : 12-12 07:43:36.857  1345  3896 I ActivityManager: Start  proc 8254:com.facebook.katana/u0a177 for restart com.facebook.katana
2015-12-12 14:43:36,924 : 12-12 07:43:36.889  1345  3378 I am_proc_bound: [0,8254,com.facebook.katana]
2015-12-12 14:43:37,673 : 12-12 07:43:37.644  1345  1356 I am_meminfo: [1139875840,361295872,4096,221552640,199824384]
2015-12-12 14:43:42,431 : 12-12 07:43:42.403  1345  3836 I am_meminfo: [1139630080,362004480,4096,220246016,183618560]
</rich_text>
			<rich_text foreground="#ff0000">2015-12-12 14:43:43,585 : 12-12 07:43:43.557  1345  3836 I ActivityManager: Process com.facebook.katana (pid 8254) has died</rich_text>
			<rich_text>
2015-12-12 14:43:43,585 : 12-12 07:43:43.557  1345  3836 I am_proc_died: [0,8254,com.facebook.katana]
</rich_text>
			<rich_text foreground="#ff0000">2015-12-12  14:43:43,616 : 12-12 07:43:43.584  1345  3836 I am_proc_start:  [0,8285,10177,com.facebook.katana,restart,com.facebook.katana]</rich_text>
			<rich_text>
2015-12-12  14:43:43,616 : 12-12 07:43:43.584  1345  3836 I ActivityManager: Start  proc 8285:com.facebook.katana/u0a177 for restart com.facebook.katana
2015-12-12 14:43:43,647 : 12-12 07:43:43.608  1345  3860 I am_proc_bound: [0,8285,com.facebook.katana]
2015-12-12 14:43:44,833 : 12-12 07:43:44.792  1345  7219 I am_meminfo: [1139789824,360050688,4096,222347264,199851008]
2015-12-12 14:43:50,309 : 12-12 07:43:50.277  1345  3896 I ActivityManager: Process com.facebook.katana (pid 8285) has died
2015-12-12 14:43:50,309 : 12-12 07:43:50.277  1345  3896 I am_proc_died: [0,8285,com.facebook.katana]
2015-12-12  14:43:50,324 : 12-12 07:43:50.291  1345  3896 I am_proc_start:  [0,8304,10177,com.facebook.katana,restart,com.facebook.katana]
</rich_text>
			<rich_text foreground="#ff0000">2015-12-12  14:43:50,324 : 12-12 07:43:50.291  1345  3896 I ActivityManager: Start  proc 8304:com.facebook.katana/u0a177 for restart com.facebook.katana</rich_text>
			<rich_text>
2015-12-12 14:43:50,355 : 12-12 07:43:50.320  1345  3378 I am_proc_bound: [0,8304,com.facebook.katana]
2015-12-12  14:43:50,605 : 12-12 07:43:50.573  1345  1345 V  DeviceStorageMonitorService: freeMemory=24602320896, mMemLowThreshold:  209715200
2015-12-12 14:43:50,605 : 12-12 07:43:50.573  1345  1345 I DeviceStorageMonitorService: Posting Message again
2015-12-12  14:43:51,775 : 12-12 07:43:51.742  1345  1358 W BroadcastQueue: Timeout  of broadcast BroadcastRecord{3a609a5 u0  android.intent.action.USER_PRESENT} -  receiver=android.os.BinderProxy@f40917a, started 60000ms ago


4.Defect-1190266  com.alcatel.music5:java.util.concurrent.TimeoutException 

FATAL EXCEPTION: FinalizerWatchdogDaemon
Process: com.alcatel.music5, PID: 3042
java.util.concurrent.TimeoutException: android.media.MediaPlayer.finalize() timed out after 10 seconds
at android.media.MediaPlayer.native_finalize(Native Method)
at android.media.MediaPlayer.finalize(MediaPlayer.java:2812)
at java.lang.Daemons$FinalizerDaemon.doFinalize(Daemons.java:202)
at java.lang.Daemons$FinalizerDaemon.run(Daemons.java:185)
at java.lang.Thread.run(Thread.java:818)

出现这个问题的时候，Media看了堆栈，希望Media先看一下

出现 2015-12-18 15:05:38,895 : 12-18  08:05:38.590 I/ActivityManager( 4172):  stackTrace:java.util.concurrent.TimeoutException:  android.media.MediaPlayer.finalize() timed out after 10 seconds
的原因是：
2015-12-18 15:05:22,838 : 12-18 08:05:22.539 W/MediaPlayer-JNI(11890): MediaPlayer finalized without being released

这个分析也是随便看看

然后Mix那边自己又改了

    private void stopPlayback() {
        if (mProgressRefresher != null) {
            mProgressRefresher.removeCallbacksAndMessages(null);
        }
</rich_text>
			<rich_text weight="heavy">        
        if (mPlayer != null) {
            //[BUGFIX]Add by wen.zhou for PR1193245 begin
            if(mPlayer.isPlaying())
            {
                TCTLogUtils.d(TAG,&quot;Stop the player&quot;);
                mPlayer.stop();
            }</rich_text>
			<rich_text>
            //[BUGFIX]Add by wen.zhou for PR1193245 end
            mPlayer.release();
            mPlayer = null;
            mAudioManager.abandonAudioFocus(mAudioFocusListener);
        }
    }


在release MediaPlayer时，可能在播放歌曲的时候，没有stop，而直接release导致
http://172.16.11.162:8081/#/c/247268/
  at android.media.MediaPlayer.release(MediaPlayer.java:1729)
  at com.alcatel.music5.activities.AudioPreview.stopPlayback(AudioPreview.java:198)
  at com.alcatel.music5.activities.AudioPreview.onKeyDown(AudioPreview.java:402)
  at android.view.KeyEvent.dispatch(KeyEvent.java:2646)
  at android.app.Activity.dispatchKeyEvent(Activity.java:2894)


</rich_text>
			<rich_text weight="heavy">5. Defect-1190675 [Stability][Frozen]2K Screen TP Invalid</rich_text>
			<rich_text>

IDOL4S（WQHD屏） 跑stability时出现2K屏TP失效的现象，按power，volume键有反应，屏幕无法操作，灭屏后恢复。

初步看是firmware的问题，FAE正在找原因

驱动问题


</rich_text>
			<rich_text weight="heavy">6. Defect-1199167  google doc anr</rich_text>
			<rich_text>
ANR in com.google.android.apps.docs
PID: 30478
Reason: ContentProvider not responding
Load: 8.73 / 8.57 / 8.59
CPU usage from 3804ms to -10256ms ago with 99% awake:
101% 1309/system_server: 42% user + 59% kernel / faults: 17445 minor 174 major
22% 30478/com.google.android.apps.docs: 10% user + 12% kernel / faults: 2991 minor 66 major
18% 8789/mediaserver: 18% user + 0.1% kernel / faults: 612 minor 14 major
16% 21603/com.android.browser: 8% user + 8.4% kernel / faults: 6504 minor 18 major
13% 479/surfaceflinger: 4.8% user + 8.3% kernel / faults: 59 minor 3 major
11% 9125/com.alcatel.music5: 8.8% user + 2.9% kernel / faults: 1541 minor 12 major
1.3% 3519/com.tct.camera: 0.3% user + 0.9% kernel / faults: 5560 minor 1769 major
0% 574/debuggerd: 0% user + 0% kernel / faults: 11169 minor 116 major
7.1% 2962/com.android.systemui: 3.3% user + 3.8% kernel / faults: 5330 minor 26 major
5.7% 423/logd: 3.5% user + 2.2% kernel / faults: 52 minor
5.2% 3549/com.android.phone: 1.4% user + 3.8% kernel / faults: 4956 minor 47 major
4.1% 28705/android.process.media: 1.9% user + 2.1% kernel / faults: 4647 minor 3 major
2.9% 315/cfinteractive: 0% user + 2.9% kernel
2.7% 28608/com.android.browser:sandboxed_process14: 1.4% user + 1.3% kernel / faults: 6038 minor 5 major
0% 575/debuggerd64: 0% user + 0% kernel / faults: 5202 minor 29 major
2.2% 14689/adbd: 0.4% user + 1.8% kernel / faults: 2 minor
1.9% 318/mmcqd/0: 0% user + 1.9% kernel



初步分析：com.google.android.apps.docs存在下面红色log的死锁问题，所以导致了anr
&quot;Binder_2&quot; prio=5 tid=8 Waiting
  | group=&quot;main&quot; sCount=1 dsCount=0 obj=0x32c082e0 self=0x55b1a3bd10
  | sysTid=30489 nice=10 cgrp=bg_non_interactive sched=0/0 handle=0x7f9acf3450
  | state=S schedstat=( 109752705 119174902 637 ) utm=3 stm=7 core=6 HZ=100
  | stack=0x7f9abf7000-0x7f9abf9000 stackSize=1013KB
  | held mutexes=
  at java.lang.Object.wait!(Native method)
  - waiting on &lt;0x07e4e8b1&gt; (a java.lang.Object)
  at java.lang.Thread.parkFor$(Thread.java:1220)
  - locked &lt;0x07e4e8b1&gt; (a java.lang.Object)
  at sun.misc.Unsafe.park(Unsafe.java:299)
  at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
  at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:810)
  at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:970)
  at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1278)
  at hmm.get(PG:1285)
  at com.google.android.apps.docs.storagebackend.StorageBackendContentProvider.a(PG:200)
  </rich_text>
			<rich_text foreground="#ff0000">- locked &lt;0x05433196&gt; (a com.google.android.apps.docs.storagebackend.StorageBackendContentProvider)</rich_text>
			<rich_text>
  at com.google.android.apps.docs.storagebackend.StorageBackendContentProvider.b(PG:214)
  - locked &lt;0x05433196&gt; (a com.google.android.apps.docs.storagebackend.StorageBackendContentProvider)
  at com.google.android.apps.docs.storagebackend.StorageBackendContentProvider.queryRoots(PG:275)
  at android.provider.DocumentsProvider.query(DocumentsProvider.java:481)
  at android.content.ContentProvider.query(ContentProvider.java:1017)
  at android.content.ContentProvider$Transport.query(ContentProvider.java:238)
  at android.content.ContentProviderNative.onTransact(ContentProviderNative.java:112)
  at android.os.Binder.execTransact(Binder.java:453)
 
 
&quot;Binder_4&quot; prio=5 tid=18 Blocked
  | group=&quot;main&quot; sCount=1 dsCount=0 obj=0x32c08ca0 self=0x55b1baeab0
  | sysTid=30976 nice=10 cgrp=bg_non_interactive sched=0/0 handle=0x7f86ae8450
  | state=S schedstat=( 94505153 123530374 499 ) utm=5 stm=4 core=2 HZ=100
  | stack=0x7f869ec000-0x7f869ee000 stackSize=1013KB
  | held mutexes=
  at com.google.android.apps.docs.storagebackend.StorageBackendContentProvider.b(PG:210)
 </rich_text>
			<rich_text foreground="#ff0000"> -  waiting to lock &lt;0x05433196&gt; (a  com.google.android.apps.docs.storagebackend.StorageBackendContentProvider)  held by thread 8</rich_text>
			<rich_text>
  at com.google.android.apps.docs.storagebackend.StorageBackendContentProvider.queryRoots(PG:275)
  at android.provider.DocumentsProvider.query(DocumentsProvider.java:481)
  at android.content.ContentProvider.query(ContentProvider.java:1017)
  at android.content.ContentProvider$Transport.query(ContentProvider.java:238)
  at android.content.ContentProviderNative.onTransact(ContentProviderNative.java:112)
  at android.os.Binder.execTransact(Binder.java:453)


当download应用中的文件被清空了之后会触发，会触发document ui中的</rich_text>
			<rich_text link="webs http://androidxref.com/6.0.0_r1/xref/frameworks/base/packages/DocumentsUI/src/com/android/documentsui/DocumentsApplication.java#mRoots">mRoots</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://androidxref.com/6.0.0_r1/s?defs=updateAsync&amp;project=frameworks">updateAsync</rich_text>
			<rich_text>();这样会通知到对应的所有实现documentprovider程序，更新UI。
如何对应 的程序没有响应超过20秒，系统会将timeout作为anr的形式报出来。而这个com.google.android.apps.docs就是应该这个导致的anr问题的，通过trace.txt
文件的分析导致timeout的原因主要有两个1.主线程的网络环境出现一些问题 2. 程序内部存在死锁问题。


</rich_text>
			<rich_text scale="h2" weight="heavy">7.Defect-1208266 重启</rich_text>
			<rich_text>
&quot;这个是执行queryintent的时候发生的，但是有问题原则上queryintent出来的applist至少有一个，但是现在返回的结果是null。
我们可以在这儿加个保护。
但是rootcause还得你们来定位&quot;

最终为什么会有AndroidReboot还得需要项目组帮忙分析下。正常来讲APP的crash是不会影响到系统reboot的。

FATAL EXCEPTION: Thread-2588
Process: com.tct.endusertest:bdservice_v1, PID: 22299
java.lang.NullPointerException: Attempt to invoke interface method 'int java.util.List.size()' on a null object reference
at com.baidu.android.pushservice.util.h.j(Unknown Source)
at com.baidu.android.pushservice.util.h.u(Unknown Source)
at com.baidu.android.pushservice.util.g.d(Unknown Source)
at com.baidu.android.pushservice.aa.run(Unknown Source)
at java.lang.Thread.run(Thread.java:818)


应用crash造成AccessibilityManagerService 挂掉，造成重启

User state[attributes:{id=0,  currentUser=true, accessibilityEnabled=true,  touchExplorationEnabled=false, displayMagnificationEnabled=false, 

Exception occurred while dumping:
</rich_text>
			<rich_text weight="heavy">java.lang.NullPointerException:  Attempt to invoke virtual method 'java.lang.CharSequence  android.content.pm.ResolveInfo.loadLabel(android.content.pm.PackageManager)'  on a null object reference</rich_text>
			<rich_text>
at com.android.server.accessibility.AccessibilityManagerService$Service.dump(AccessibilityManagerService.java:2592)
at com.android.server.accessibility.AccessibilityManagerService.dump(AccessibilityManagerService.java:1641)
at android.os.Binder.dump(Binder.java:319)
at android.os.Binder.onTransact(Binder.java:285)
at android.view.accessibility.IAccessibilityManager$Stub.onTransact(IAccessibilityManager.java:188)
at android.os.Binder.execTransact(Binder.java:446)

</rich_text>
			<rich_text scale="h2" weight="heavy">8.Defect: 1208290  重启</rich_text>
			<rich_text>
解决的方法是 ConnectivityServiceThread 加了try-catch
12-18 11:43:22.385 3334 4840 E AndroidRuntime: *** FATAL EXCEPTION IN SYSTEM PROCESS: ConnectivityServiceThread
12-18 11:43:22.385 3334 4840 E AndroidRuntime: java.lang.RuntimeException: failed to set system property
12-18 11:43:22.385 3334 4840 E AndroidRuntime: at android.os.SystemProperties.native_set(Native Method)
12-18 11:43:22.385 3334 4840 E AndroidRuntime: at android.os.SystemProperties.set(SystemProperties.java:130)
12-18  11:43:22.385 3334 4840 E AndroidRuntime: at  com.android.server.ConnectivityService.updateTcpBufferSizes(ConnectivityService.java:1708)
12-18  11:43:22.385 3334 4840 E AndroidRuntime: at  com.android.server.ConnectivityService.updateLinkProperties(ConnectivityService.java:3856)
12-18  11:43:22.385 3334 4840 E AndroidRuntime: at  com.android.server.ConnectivityService.access$1200(ConnectivityService.java:161)
12-18  11:43:22.385 3334 4840 E AndroidRuntime: at  com.android.server.ConnectivityService$NetworkStateTrackerHandler.handleMessage(ConnectivityService.java:1945)
12-18 11:43:22.385 3334 4840 E AndroidRuntime: at android.os.Handler.dispatchMessage(Handler.java:102)
12-18 11:43:22.385 3334 4840 E AndroidRuntime: at android.os.Looper.loop(Looper.java:148)
12-18 11:43:22.385 3334 4840 E AndroidRuntime: at android.os.HandlerThread.run(HandlerThread.java:61)
12-18  11:43:22.385 5014 5546 D SignalController: getCurrentIconId  mCurrentState.connected=true mCurrentState.enabled=true  mCurrentState.inetCondition=1
12-18 11:43:22.385 3334 4840 I ActivityManager: handleApplicationCrash
12-18 11:43:22.385 3334 4840 I JRDRecordService: jrdCrashHandler invoke ytf.

</rich_text>
			<rich_text scale="h2" weight="heavy">9.Defect-1604147 Audio 造成重启</rich_text>
			<rich_text>
02-15 17:03:25.170 4137 6897 W Watchdog: *** WATCHDOG KILLING SYSTEM PROCESS: Blocked in handler on main thread (main)
02-15 17:03:25.171 4137 6897 W Watchdog: main thread stack trace:
02-15  17:03:25.171 4137 6897 W Watchdog: at  com.android.server.audio.AudioService.setWiredDeviceConnectionState(AudioService.java:3751)
02-15 17:03:25.171 4137 6897 W Watchdog: at android.media.AudioManager.setWiredDeviceConnectionState(AudioManager.java:3231)
02-15  17:03:25.171 4137 6897 W Watchdog: at  com.android.server.WiredAccessoryManager.setDeviceStateLocked(WiredAccessoryManager.java:293)
02-15  17:03:25.171 4137 6897 W Watchdog: at  com.android.server.WiredAccessoryManager.setDevicesState(WiredAccessoryManager.java:249)
02-15 17:03:25.171 4137 6897 W Watchdog: at com.android.server.WiredAccessoryManager.access$000(WiredAccessoryManager.java:53)
02-15 17:03:25.165 0 0 I : x29: ffffffc08025be60 x28: ffffffc0b0a6aa40
02-15  17:03:25.171 4137 6897 W Watchdog: at  com.android.server.WiredAccessoryManager$1.handleMessage(WiredAccessoryManager.java:232)
02-15 17:03:25.171 4137 6897 W Watchdog: at android.os.Handler.dispatchMessage(Handler.java:102)
02-15 17:03:25.171 4137 6897 W Watchdog: at android.os.Looper.loop(Looper.java:148)
02-15 17:03:25.165 0 0 I : x27: ffffffc0b0a6aa18 x26: 0000000000000001
02-15 17:03:25.171 4137 6897 W Watchdog: at com.android.server.SystemServer.run(SystemServer.java:367)
02-15 17:03:25.171 4137 6897 W Watchdog: at com.android.server.SystemServer.main(SystemServer.java:201)
02-15 17:03:25.171 4137 6897 W Watchdog: at java.lang.reflect.Method.invoke(Native Method)
02-15 17:03:25.165 0 0 I : x25: 00000000000003e8 x24: ffffffc0b0a6aa40
02-15 17:03:25.172 4137 6897 W Watchdog: at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:764)
02-15 17:03:25.172 4137 6897 W Watchdog: at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:654)
02-15 17:03:25.172 4137 6897 W Watchdog: *** GOODBYE!


10. Defect-1238822 频繁申请selinux权限导致重启


这种crash问题是由于</rich_text>
			<rich_text foreground="#ff0000">短时间输出大量（比如这里1ms以内就有数条）</rich_text>
			<rich_text>的kernellog导致Watchdog bark，正常情况下10s中就要喂狗，但这种情况下CPU忙不过来。
[   840.784538] type=1400 audit(1451287762.877:170613): avc: denied { read }  for pid=9040 comm=&quot;BackgroundThrea&quot; name=&quot;status&quot; dev=&quot;proc&quot; ino=330382  scontext=u:r:untrusted_app:s0:c512,c768 tcontext=u:r:kernel:s0  tclass=file permissive=0
[  840.784602] type=1400  audit(1451287762.877:170614): avc: denied { read } for pid=9040  comm=&quot;BackgroundThrea&quot; name=&quot;cmdline&quot; dev=&quot;proc&quot; ino=330387  scontext=u:r:untrusted_app:s0:c512,c768 tcontext=u:r:kernel:s0  tclass=file permissive=0
[  840.784659] type=1400  audit(1451287762.877:170615): avc: denied { read } for pid=9040  comm=&quot;BackgroundThrea&quot; name=&quot;status&quot; dev=&quot;proc&quot; ino=330386  scontext=u:r:untrusted_app:s0:c512,c768 tcontext=u:r:kernel:s0  tclass=file permissive=0
[  840.784726] type=1400  audit(1451287762.877:170616): avc: denied { read } for pid=9040  comm=&quot;BackgroundThrea&quot; name=&quot;cmdline&quot; dev=&quot;proc&quot; ino=330391  scontext=u:r:untrusted_app:s0:c512,c768 tcontext=u:r:kernel:s0  tclass=file permissive=0
[  840.784814] type=1400  audit(1451287762.877:170617): avc: denied { read } for pid=9040  comm=&quot;BackgroundThrea&quot; name=&quot;status&quot; dev=&quot;proc&quot; ino=330390  scontext=u:r:untrusted_app:s0:c512,c768 tcontext=u:r:kernel:s0  tclass=file permissive=0
[  840.784880] type=1400  audit(1451287762.877:170618): avc: denied { read } for pid=9040  comm=&quot;BackgroundThrea&quot; name=&quot;cmdline&quot; dev=&quot;proc&quot; ino=330395  scontext=u:r:untrusted_app:s0:c512,c768 tcontext=u:r:kernel:s0  tclass=file permissive=0
</rich_text>
			<rich_text foreground="#ff0000">[  843.176109] Watchdog bark! Now = 843.176102
[  843.176112] Watchdog last pet at 832.175672</rich_text>
			<rich_text>
[  843.176115] cpu alive mask from last pet 0-2



9.1268292 -[Stability][ANR][Maps]com.facebook.appmanager:executing service com.facebook.appmanager/com.facebook.oxygen.appmanager.scheduler.SchedulerService 

莫名ANR，Log显示一堆service died 然后又重启，不知道为什么会die
MediaServer内存泄漏导致lowmemorykiller一直在杀程序，meminfo显示MediaServer内存占用了600MB

main_radio Log中 lowmemorykiller一直在运作


Total PSS by process:

</rich_text>
			<rich_text weight="heavy">   637555 kB: mediaserver (pid 3555)</rich_text>
			<rich_text>

   243112 kB: com.android.systemui (pid 7435 / activities)

    86923 kB: com.tct.camera (pid 7875)

    80494 kB: system (pid 4275)

    68071 kB: com.tct.launcher (pid 7731 / activities)

    34852 kB: com.android.phone (pid 7899)

    26330 kB: lowi-server (pid 3663)

    25979 kB: com.google.android.gms.persistent (pid 9002)

    19103 kB: com.google.android.gms (pid 9072)

    17415 kB: com.google.process.gapps (pid 8979)

    12466 kB: com.nibiru.vr.media.tcl:controller (pid 9100)

    11700 kB: com.google.android.packageinstaller (pid 8489 / activities)


10.Defect-1305254 power-down
 adb shell dumpsys power 
 adb shell top -m 10 查看前10进程的占比
 
 1.Log打印过多可能会影响功耗
 2.进程CPU占用比过高可能会影响
 
 
</rich_text>
			<rich_text weight="heavy"> 11.Defect-1399593 crash 【未解决问题】</rich_text>
			<rich_text>
 
 在systemui出现FC之前已经出现如下问题了

2016-01-11 21:01:20,407 : 01-11 14:01:21.086 W/Binder  ( 7270): Caught a RuntimeException from the binder stub implementation.
2016-01-11 21:01:20,407 : 01-11 14:01:21.086 W/Binder  ( 7270): java.lang.RuntimeException: Could not allocate dup blob fd.
2016-01-11  21:01:20,407 : 01-11 14:01:21.086 W/Binder  ( 7270):     at  android.graphics.Bitmap.nativeCreateFromParcel(Native Method)
2016-01-11 21:01:20,407 : 01-11 14:01:21.086 W/Binder  ( 7270):     at android.graphics.Bitmap.access$100(Bitmap.java:36)
2016-01-11  21:01:20,407 : 01-11 14:01:21.086 W/Binder  ( 7270):     at  android.graphics.Bitmap$1.createFromParcel(Bitmap.java:1516)
2016-01-11  21:01:20,422 : 01-11 14:01:21.086 W/Binder  ( 7270):     at  android.graphics.Bitmap$1.createFromParcel(Bitmap.java:1508)
2016-01-11  21:01:20,422 : 01-11 14:01:21.086 W/Binder  ( 7270):     at  android.graphics.drawable.Icon.&lt;init&gt;(Icon.java:661)
2016-01-11 21:01:20,422 : 01-11 14:01:21.086 W/Binder  ( 7270):     at android.graphics.drawable.Icon.&lt;init&gt;(Icon.java:58)
2016-01-11  21:01:20,422 : 01-11 14:01:21.086 W/Binder  ( 7270):     at  android.graphics.drawable.Icon$1.createFromParcel(Icon.java:726)
2016-01-11  21:01:20,422 : 01-11 14:01:21.086 W/Binder  ( 7270):     at  android.graphics.drawable.Icon$1.createFromParcel(Icon.java:724)
2016-01-11  21:01:20,422 : 01-11 14:01:21.086 W/Binder  ( 7270):     at  android.app.Notification.&lt;init&gt;(Notification.java:1445)
2016-01-11  21:01:20,422 : 01-11 14:01:21.086 W/Binder  ( 7270):     at  android.service.notification.StatusBarNotification.&lt;init&gt;(StatusBarNotification.java:87)
2016-01-11  21:01:20,422 : 01-11 14:01:21.086 W/Binder  ( 7270):     at  android.service.notification.StatusBarNotification$1.createFromParcel(StatusBarNotification.java:139)
2016-01-11  21:01:20,422 : 01-11 14:01:21.086 W/Binder  ( 7270):     at  android.service.notification.StatusBarNotification$1.createFromParcel(StatusBarNotification.java:136)
2016-01-11  21:01:20,422 : 01-11 14:01:21.086 W/Binder  ( 7270):     at  android.service.notification.IStatusBarNotificationHolder$Stub$Proxy.get(IStatusBarNotificationHolder.java:89)
2016-01-11  21:01:20,422 : 01-11 14:01:21.086 W/Binder  ( 7270):     at  android.service.notification.NotificationListenerService$INotificationListenerWrapper.onNotificationPosted(NotificationListenerService.java:685)
2016-01-11  21:01:20,422 : 01-11 14:01:21.086 W/Binder  ( 7270):     at  android.service.notification.INotificationListener$Stub.onTransact(INotificationListener.java:71)
2016-01-11 21:01:20,422 : 01-11 14:01:21.086 W/Binder  ( 7270):     at android.os.Binder.execTransact(Binder.java:453)
2016-01-11 21:01:20,485 : 01-11 14:01:21.159 D/AndroidRuntime( 7270): Shutting down VM

可能是数据太大

12. Defect-1353188 空指针异常
这里的空指针异常比较特别，所以记录下来

                if (mLastInfo != null &amp;&amp; mLastInfo.getBSSID() != null
代码中对于mLastInfo是有之前的判空操作的，所以一般情况下是不可能报出这样的错误。
但是目前Stability工具跑的时候应该是代码刚刚走完非空的判断，接下来走到去获取mLastInfo.getBSSID()使用mLastInfo变量的时候，收到了WIFI_STATE_CHANGED_ACTION
的广播。导致去更新这个状态的时候，发现当前的wifi的state并非是WifiManager.WIFI_STATE_ENABLED可用的状态，这样代码中又做了如下的            mLastInfo = null;
置空操作来释放内存，才出现了PR中描述的错误，这种错误发生的概率应该达到几万分之一的可能。
所以这边建议Monitor这个PR，不知可否接受？这种错误一般只会低概率发生在这种稳定性测试等工具下和Monkey的压力测试下。一般用户使用，不太可能发生

13. Defect-1427103 【未解决问题】 anr


ANR in com.tct.soundrecorder (com.tct.soundrecorder/.RecordingFileList)
PID: 2272
Reason:  Input dispatching timed out (Waiting to send key event because the  focused window has not finished processing all of the input events that  were previously delivered to it. Outbound queue length: 0. Wait queue  length: 1.)
Load: 5.57 / 6.0 / 6.19
CPU usage from 0ms to 5942ms later:
53% 1512/system_server: 15% user + 38% kernel / faults: 8353 minor 130 major
12% 4900/com.android.phone: 5.2% user + 7.5% kernel / faults: 4416 minor 34 major
0% 585/debuggerd: 0% user + 0% kernel / faults: 9121 minor 40 major
6.7% 4498/com.android.systemui: 3.8% user + 2.8% kernel / faults: 2771 minor 15 major
0.5% 2272/com.tct.soundrecorder: 0.2% user + 0.2% kernel / faults: 1529 minor 33 major
0% 586/debuggerd64: 0% user + 0% kernel / faults: 5205 minor 22 major
0.4% 589/mediaserver: 0.3% user + 0% kernel / faults: 17 minor
3.2% 453/surfaceflinger: 2.5% user + 0.6% kernel / faults: 32 minor 3 major
2.5% 4849/com.waves.maxxservice: 1.5% user + 1% kernel / faults: 1243 minor 14 major
2.5% 4864/com.android.nfc: 1.6% user + 0.8% kernel / faults: 1654 minor 28 major
0% 4874/com.tct.camera: 0% user + 0% kernel / faults: 1612 minor 39 major
1.3% 310/mmcqd/0: 0% user + 1.3% kernel
1.1% 399/logd: 0.1% user + 1% kernel
1% 486/adbd: 0% user + 1% kernel

14.Defect-1529481 【未解决问题】 anr
ANR in com.android.systemui
PID: 1855
Reason: Broadcast of Intent { act=android.intent.action.TIME_TICK flg=0x50000014 (has extras) }
Load: 10.56 / 7.11 / 6.42
CPU usage from 0ms to 9119ms later with 99% awake:
66% 1855/com.android.systemui: 53% user + 13% kernel / faults: 85323 minor 43 major
58% 1550/system_server: 21% user + 36% kernel / faults: 11859 minor 384 major
16% 611/mediaserver: 13% user + 2.6% kernel / faults: 22 minor
11% 12134/com.alcatel.music5: 9.4% user + 2.1% kernel / faults: 1262 minor 10 major
9% 4205/com.android.phone: 3% user + 5.9% kernel / faults: 5068 minor 229 major
0% 605/debuggerd: 0% user + 0% kernel / faults: 9190 minor 50 major
3.2% 11545/com.android.settings: 2.8% user + 0.4% kernel / faults: 49 minor
0% 606/debuggerd64: 0% user + 0% kernel / faults: 5202 minor 54 major
2.5% 396/logd: 1.4% user + 1% kernel / faults: 3 minor
2.3% 301/cfinteractive: 0% user + 2.3% kernel
1.8% 4138/com.waves.maxxservice: 0.8% user + 0.9% kernel / faults: 1080 minor 101 major
1.7% 490/adbd: 0.1% user + 1.6% kernel
1.6% 4145/com.android.nfc: 0.7% user + 0.8% kernel / faults: 2050 minor 219 major
1.4% 4127/com.quicinc.cne.CNEService: 0.9% user + 0.4% kernel / faults: 1668 minor 150 major
1.3% 27240/uiautomator: 0.8% user + 0.4% kernel / faults: 191 minor
1.2% 307/mmcqd/0: 0% user + 1.2% kernel
0.5% 4172/com.qualcomm.qti.tetherservice: 0% user + 0.5% kernel / faults: 1547 minor 130 major
1% 5294/VosMCThread: 0% user + 1% kernel


15. Defect-1536366 【未解决问题】 anr

ANR in com.alcatel.music5 (com.alcatel.music5/.activities.MusicPlayerActivity)
PID: 9483
Reason:  Input dispatching timed out (Waiting to send key event because the  focused window has not finished processing all of the input events that  were previously delivered to it. Outbound queue length: 0. Wait queue  length: 1.)
Load: 5.59 / 5.33 / 5.42
CPU usage from 389ms to -7767ms ago:
51% 1423/system_server: 16% user + 35% kernel / faults: 9775 minor 10 major
31% 9483/com.alcatel.music5: 24% user + 6.9% kernel / faults: 18153 minor 77 major
0% 546/debuggerd: 0% user + 0% kernel / faults: 8308 minor 2 major
7.2% 3358/com.android.phone: 2.9% user + 4.2% kernel / faults: 3773 minor 3 major
4.9% 2871/com.android.systemui: 2.8% user + 2% kernel / faults: 2215 minor 12 major
0% 547/debuggerd64: 0% user + 0% kernel / faults: 4928 minor
1.5% 303/cfinteractive: 0% user + 1.5% kernel
0% 2831/sdcard: 0% user + 0% kernel
1.3% 447/surfaceflinger: 1.1% user + 0.2% kernel
0% 3122/sdcard: 0% user + 0% kernel
1.1% 393/logd: 0.4% user + 0.6% kernel
1.1% 479/adbd: 0.3% user + 0.7% kernel / faults: 1 minor
0% 550/mediaserver: 0% user + 0% kernel / faults: 24 minor
1.1% 3249/com.quicinc.cne.CNEService: 0.6% user + 0.4% kernel / faults: 955 minor
0% 3259/com.waves.maxxservice: 0% user + 0% kernel / faults: 996 minor 1 major
0.9% 26833/uiautomator: 0.4% user + 0.4% kernel / faults: 166 minor 2 major
0.8% 310/mmcqd/0: 0% user + 0.8% kernel


16. Defect-1561364 reboot JNI泄漏引起

Abort message: 'art/runtime/indirect_reference_table.cc:115] JNI ERROR (app bug): global reference table overflow (max=51200)'
 
 pls enable these log test again
adb shell stop
adb shell setprop dalvik.vm.checkjni true
adb shell start
 
2016-02-04 04:27:41,180 : 02-03 21:27:42.523  1407  3470 F libc    : Fatal signal 6 (SIGABRT), code -6 in tid 3470 (Binder_C)
2016-02-04 04:27:41,289 : 02-03 21:27:42.657   550   550 I auditd  : SELinux: Loaded file_contexts contexts from /file_contexts.
2016-02-04  04:27:41,289 : 02-03 21:27:42.663   550   550 F DEBUG   : *** *** ***  *** *** *** *** *** *** *** *** *** *** *** *** ***
2016-02-04  04:27:41,289 : 02-03 21:27:42.663   550   550 F DEBUG   : Build  fingerprint: 'TCL/6070Y/idol4s:6.0.1/MMB29M/vA23-0:user/release-keys'
2016-02-04 04:27:41,289 : 02-03 21:27:42.663   550   550 F DEBUG   : Revision: '0'
2016-02-04 04:27:41,289 : 02-03 21:27:42.663   550   550 F DEBUG   : ABI: 'arm64'
2016-02-04  04:27:41,289 : 02-03 21:27:42.663   550   550 F DEBUG   : pid: 1407,  tid: 3470, name: Binder_C  &gt;&gt;&gt; system_server &lt;&lt;&lt;
2016-02-04 04:27:41,289 : 02-03 21:27:42.663   550   550 F DEBUG   : signal 6 (SIGABRT), code -6 (SI_TKILL), fault addr --------
2016-02-04  04:27:41,382 : 02-03 21:27:42.757   550   550 F DEBUG   : Abort  message: 'art/runtime/indirect_reference_table.cc:115] JNI ERROR (app  bug): global reference table overflow (max=51200)'
2016-02-04  04:27:41,382 : 02-03 21:27:42.758   550   550 F DEBUG   :     x0    0000000000000000  x1   0000000000000d8e  x2   0000000000000006  x3    0000000000000000
2016-02-04 04:27:41,382 : 02-03 21:27:42.758   550    550 F DEBUG   :     x4   0000000000000000  x5   0000000000000001  x6    0000000000000000  x7   0000000000000000
2016-02-04 04:27:41,382 :  02-03 21:27:42.758   550   550 F DEBUG   :     x8   0000000000000083   x9   0000007f8b558a70  x10  0000000000000003  x11  0000000000000140
2016-02-04  04:27:41,382 : 02-03 21:27:42.758   550   550 F DEBUG   :     x12   00000055ac52a450  x13  00000055ab44e000  x14  0000000000000000  x15   0000000000000000
2016-02-04 04:27:41,382 : 02-03 21:27:42.758   550    550 F DEBUG   :     x16  0000007f8b5516a8  x17  0000007f8b513b2c  x18   0000000000000000  x19  0000007f608c2510
2016-02-04 04:27:41,382 :  02-03 21:27:42.758   550   550 F DEBUG   :     x20  0000007f608c2450   x21  000000000000000b  x22  0000000000000006  x23  00000055abb7cfd0
2016-02-04  04:27:41,382 : 02-03 21:27:42.758   550   550 F DEBUG   :     x24   00000055acc39f50  x25  0000000000000000  x26  00000055ab4825f0  x27   0000000000000000
2016-02-04 04:27:41,382 : 02-03 21:27:42.758   550    550 F DEBUG   :     x28  00000055abb7cfd0  x29  0000007f608c15d0  x30   0000007f8b5112c8
2016-02-04 04:27:41,382 : 02-03 21:27:42.758   550    550 F DEBUG   :     sp   0000007f608c15d0  pc   0000007f8b513b34   pstate 0000000020000000
2016-02-04 04:27:41,398 : 02-03 21:27:42.764   550   550 F DEBUG   :
2016-02-04 04:27:41,398 : 02-03 21:27:42.764   550   550 F DEBUG   : backtrace:
2016-02-04  04:27:41,398 : 02-03 21:27:42.764   550   550 F DEBUG   :     #00 pc  000000000006bb34  /system/lib64/libc.so (tgkill+8)
2016-02-04  04:27:41,398 : 02-03 21:27:42.764   550   550 F DEBUG   :     #01 pc  00000000000692c4  /system/lib64/libc.so (pthread_kill+68)
2016-02-04  04:27:41,398 : 02-03 21:27:42.764   550   550 F DEBUG   :     #02 pc  00000000000212b8  /system/lib64/libc.so (raise+28)
2016-02-04  04:27:41,398 : 02-03 21:27:42.764   550   550 F DEBUG   :     #03 pc  000000000001ba58  /system/lib64/libc.so (abort+60)
2016-02-04  04:27:41,398 : 02-03 21:27:42.764   550   550 F DEBUG   :     #04 pc  00000000004325b8  /system/lib64/libart.so (art::Runtime::Abort()+324)
2016-02-04  04:27:41,398 : 02-03 21:27:42.764   550   550 F DEBUG   :     #05 pc  0000000000137224  /system/lib64/libart.so  (art::LogMessage::~LogMessage()+3136)
2016-02-04 04:27:41,398 : 02-03  21:27:42.764   550   550 F DEBUG   :     #06 pc 00000000002724c8   /system/lib64/libart.so (art::IndirectReferenceTable::Add(unsigned int,  art::mirror::Object*)+372)
2016-02-04 04:27:41,398 : 02-03  21:27:42.764   550   550 F DEBUG   :     #07 pc 000000000030946c   /system/lib64/libart.so (art::JavaVMExt::AddGlobalRef(art::Thread*,  art::mirror::Object*)+56)
2016-02-04 04:27:41,398 : 02-03  21:27:42.764   550   550 F DEBUG   :     #08 pc 000000000033f384   /system/lib64/libart.so (art::JNI::NewGlobalRef(_JNIEnv*,  _jobject*)+320)
2016-02-04 04:27:41,398 : 02-03 21:27:42.764   550    550 F DEBUG   :     #09 pc 00000000000dfe6c   /system/lib64/libandroid_runtime.so  (android::javaObjectForIBinder(_JNIEnv*,  android::sp&lt;android::IBinder&gt; const&amp;)+412)
2016-02-04  04:27:41,398 : 02-03 21:27:42.764   550   550 F DEBUG   :     #10 pc  00000000000d4b3c  /system/lib64/libandroid_runtime.so
2016-02-04  04:27:41,398 : 02-03 21:27:42.764   550   550 F DEBUG   :     #11 pc  0000000002312db0  /system/framework/arm64/boot.oat (offset 0x1f5b000)
2016-02-04 04:27:45,672 : 02-03 21:27:47.041   550   550 F DEBUG   :
2016-02-04 04:27:45,672 : 02-03 21:27:47.041   550   550 F DEBUG   : Tombstone written to: /data/tombstones/tombstone_03


Log显示有48830个 </rich_text>
			<rich_text foreground="#ff0000">android.os.RemoteCallbackList$Callback </rich_text>
			<rich_text foreground="#000000">的实例存在，内存泄漏很可能发生在RemoteCallbackList的回调函数上，可能register这个回调函数而并没有unregister，造成了泄漏</rich_text>
			<rich_text>

 
2016-02-26  04:23:48,010 : 02-26 04:23:47.952 F/art     (22381):  art/runtime/indirect_reference_table.cc:115] JNI ERROR (app bug): global  reference table overflow (max=51200)
2016-02-26 04:23:48,010 : 02-26  04:23:47.952 F/art     (22381):  art/runtime/indirect_reference_table.cc:115] global reference table  dump:
2016-02-26 04:23:48,010 : 02-26 04:23:47.952 F/art     (22381):  art/runtime/indirect_reference_table.cc:115]   Last 10 entries (of  51200):
2016-02-26 04:23:48,010 : 02-26 04:23:47.952 F/art      (22381): art/runtime/indirect_reference_table.cc:115]     51199:  0x149304c0 java.lang.ref.WeakReference
2016-02-26 04:23:48,010 :  02-26 04:23:47.952 F/art     (22381):  art/runtime/indirect_reference_table.cc:115]     51198: 0x137b83d0
...
2016-02-26 04:23:48,010 : 02-26 04:23:47.952 F/art     (22381): art/runtime/indirect_reference_table.cc:115]   Summary:
...
2016-02-26 04:23:48,010 : 02-26 04:23:47.953 F/art     (22381): art/runtime/indirect_reference_table.cc:115]     </rich_text>
			<rich_text foreground="#ff0000">48830 of android.os.RemoteCallbackList$Callback</rich_text>
			<rich_text> (48830 unique instances)


Bug是发生在与Dialer、Contatct、Telephony相关的操作，但是在OpenGrok 搜索RemoteCallback相关代码，并没有找到相关有用的代码.
 
高通建议在RemoteCallback的register和unregister中添加Log，这样可以找到相关的调用者，已经根据此制作了Black版本让liyuan继续测试， 同时我也继续在已有的Log基础上进行分析

刷了本地添加LOG的版本跑了一段Telephony， 一直出现下面的Log. 其中注册RemoteCallbackList为WallpaperManagerService ， 打开代码确实没有unregister代码，WallpaperManagerService.getWallpaper的反复调用，造成不断出现register的情况

03-07 18:13:35.143  1402  6214 E RemoteCallbackList: java.lang.Throwable
03-07 18:13:35.143  1402  6214 E RemoteCallbackList:     at android.os.RemoteCallbackList.register(RemoteCallbackList.java:112)
03-07 18:13:35.143  1402  6214 E RemoteCallbackList:     at android.os.RemoteCallbackList.register(RemoteCallbackList.java:79)
03-07  18:13:35.143  1402  6214 E RemoteCallbackList:      atcom.android.server.wallpaper.WallpaperManagerService.getWallpaper(WallpaperManagerService.java:854)
03-07  18:13:35.143  1402  6214 E RemoteCallbackList:      atandroid.app.IWallpaperManager$Stub.onTransact(IWallpaperManager.java:101)
03-07 18:13:35.143  1402  6214 E RemoteCallbackList:     at android.os.Binder.execTransact(Binder.java:453)
03-07 18:13:35.244  1402  6206 E RemoteCallbackList: java.lang.Throwable
03-07 18:13:35.244  1402  6206 E RemoteCallbackList:     at android.os.RemoteCallbackList.register(RemoteCallbackList.java:112)
03-07 18:13:35.244  1402  6206 E RemoteCallbackList:     at android.os.RemoteCallbackList.register(RemoteCallbackList.java:79)
03-07  18:13:35.244  1402  6206 E RemoteCallbackList:      atcom.android.server.wallpaper.WallpaperManagerService.getWallpaper(WallpaperManagerService.java:854)
03-07  18:13:35.244  1402  6206 E RemoteCallbackList:      atandroid.app.IWallpaperManager$Stub.onTransact(IWallpaperManager.java:101)
03-07 18:13:35.244  1402  6206 E RemoteCallbackList:     at android.os.Binder.execTransact(Binder.java:453)

对这个怀疑点进行了验证，确认是由于</rich_text>
			<rich_text weight="heavy">壁纸切换</rich_text>
			<rich_text>相关操作造成的RemoteCallbackList对象持续注册且没有把原来的注销所造成的内存泄漏, 最后造成重启

在Nexus 5上进行测试，编写App，每过800ms切换一次壁纸，约8小时左右后出现 global reference table overflow ，对应的进程为system_server, 发生了重启，确定为原生问题

http://172.16.11.162:8081/#/c/269007/

17. Defect-1992258 [anr]ANR in com.android.mms,

traces_com.android.mms_25_Apr_13_22_43.929.txt 这份trace显示是mms这边主线程被block住了


&quot;main&quot; prio=5 tid=1 Waiting
  | group=&quot;main&quot; sCount=1 dsCount=0 obj=0x74e85fa0 self=0x5587ba82b0
  | sysTid=24609 nice=-6 cgrp=default sched=0/0 handle=0x7fae1daff0
  | state=S schedstat=( 33957313115 4661959384 41582 ) utm=2855 stm=540 core=3 HZ=100
  | stack=0x7ffc03c000-0x7ffc03e000 stackSize=8MB
  | held mutexes=
  at java.lang.Object.wait!(Native method)
  - waiting on &lt;0x0084f8ed&gt; (a java.lang.Object)
  at com.android.camera.ui.</rich_text>
			<rich_text foreground="#ff0000" weight="heavy">CameraFragment</rich_text>
			<rich_text>$VideoModule.stopVideoRecording(CameraFragment.java:1396)
  - locked &lt;0x0084f8ed&gt; (a java.lang.Object)
  at com.android.camera.ui.CameraFragment$VideoModule.onClick(CameraFragment.java:1148)
  at android.view.View.performClick(View.java:5222)
  at android.view.View$PerformClick.run(View.java:21198)
  at android.os.Handler.handleCallback(Handler.java:739)
  at android.os.Handler.dispatchMessage(Handler.java:95)
  at android.os.Looper.loop(Looper.java:148)
  at android.app.ActivityThread.main(ActivityThread.java:5515)
  at java.lang.reflect.Method.invoke!(Native method)
  at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:764)
  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:654)

如果1392行的锁不释放， 1415行代码是否就被锁住了？
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1376">1376</rich_text>
			<rich_text>        </rich_text>
			<rich_text weight="heavy">public</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=stopVideoRecording&amp;project=gapp_rel3">stopVideoRecording</rich_text>
			<rich_text>(</rich_text>
			<rich_text weight="heavy">boolean</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=delete&amp;project=gapp_rel3">delete</rich_text>
			<rich_text>) {
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1377">1377</rich_text>
			<rich_text>            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TctMmsLog&amp;project=gapp_rel3">TctMmsLog</rich_text>
			<rich_text>.v(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#TAG">TAG</rich_text>
			<rich_text>, &quot;stopVideoRecording&quot;);
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1378">1378</rich_text>
			<rich_text>            // [BUGFIX]-Add-BEGIN by AMNJ.meng.peng,12/10/2015,1059817 ,
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1379">1379</rich_text>
			<rich_text>            // [Android6.0][FM Radio_v5.1.6.1.0314.0] FM not stop when take
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1380">1380</rich_text>
			<rich_text>            // vedio attachment in message
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1381">1381</rich_text>
			<rich_text>            /* MODIFIED-BEGIN by meng.peng, 2016-03-25,BUG-1863242 */
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1382">1382</rich_text>
			<rich_text>            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#mAudioManager">mAudioManager</rich_text>
			<rich_text> != </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=gapp_rel3">null</rich_text>
			<rich_text>) {
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1383">1383</rich_text>
			<rich_text>                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#mAudioManager">mAudioManager</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=abandonAudioFocus&amp;project=gapp_rel3">abandonAudioFocus</rich_text>
			<rich_text>(</rich_text>
			<rich_text weight="heavy">this</rich_text>
			<rich_text>);
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1384">1384</rich_text>
			<rich_text>            }
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1385">1385</rich_text>
			<rich_text>            /* MODIFIED-END by meng.peng,BUG-1863242 */
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1386">1386</rich_text>
			<rich_text>            // [BUGFIX]-Add-END by AMNJ.meng.peng
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1387">1387</rich_text>
			<rich_text>            </rich_text>
			<rich_text weight="heavy">final</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Object&amp;project=gapp_rel3">Object</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=obj&amp;project=gapp_rel3">obj</rich_text>
			<rich_text> = </rich_text>
			<rich_text weight="heavy">new</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Object&amp;project=gapp_rel3">Object</rich_text>
			<rich_text>();
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1388">1388</rich_text>
			<rich_text>            </rich_text>
			<rich_text weight="heavy">new</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Thread&amp;project=gapp_rel3">Thread</rich_text>
			<rich_text>(</rich_text>
			<rich_text weight="heavy">new</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Runnable&amp;project=gapp_rel3">Runnable</rich_text>
			<rich_text>() {
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1389">1389</rich_text>
			<rich_text>                @</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Override&amp;project=gapp_rel3">Override</rich_text>
			<rich_text>
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1390">1390</rich_text>
			<rich_text>                </rich_text>
			<rich_text weight="heavy">public</rich_text>
			<rich_text> </rich_text>
			<rich_text weight="heavy">void</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=run&amp;project=gapp_rel3">run</rich_text>
			<rich_text>() {
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1391">1391</rich_text>
			<rich_text>                    </rich_text>
			<rich_text weight="heavy">synchronized</rich_text>
			<rich_text> (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=obj&amp;project=gapp_rel3">obj</rich_text>
			<rich_text>) {
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1392">1392</rich_text>
			<rich_text>                        </rich_text>
			<rich_text weight="heavy">try</rich_text>
			<rich_text> {
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1393">1393</rich_text>
			<rich_text>                            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#mMediaRecorder">mMediaRecorder</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setOnErrorListener&amp;project=gapp_rel3">setOnErrorListener</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=gapp_rel3">null</rich_text>
			<rich_text>);
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1394">1394</rich_text>
			<rich_text>                            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#mMediaRecorder">mMediaRecorder</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setOnInfoListener&amp;project=gapp_rel3">setOnInfoListener</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=gapp_rel3">null</rich_text>
			<rich_text>);
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1395">1395</rich_text>
			<rich_text>                            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#mMediaRecorder">mMediaRecorder</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=stop&amp;project=gapp_rel3">stop</rich_text>
			<rich_text>();
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1396">1396</rich_text>
			<rich_text>                         // [BUGFIX]-ADD-BEGIN by AMNJ.jing.ji,17/12/2015,PR-1133108
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1397">1397</rich_text>
			<rich_text>                            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=StringBuffer&amp;project=gapp_rel3">StringBuffer</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=videoPath&amp;project=gapp_rel3">videoPath</rich_text>
			<rich_text> = </rich_text>
			<rich_text weight="heavy">new</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=StringBuffer&amp;project=gapp_rel3">StringBuffer</rich_text>
			<rich_text>();
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1398">1398</rich_text>
			<rich_text>                            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=videoPath&amp;project=gapp_rel3">videoPath</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=append&amp;project=gapp_rel3">append</rich_text>
			<rich_text>(&quot;file://&quot;).</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=append&amp;project=gapp_rel3">append</rich_text>
			<rich_text>(
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1399">1399</rich_text>
			<rich_text>                                    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#mVideoFile">mVideoFile</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getAbsolutePath&amp;project=gapp_rel3">getAbsolutePath</rich_text>
			<rich_text>());
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1400">1400</rich_text>
			<rich_text>                            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Uri&amp;project=gapp_rel3">Uri</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=uri&amp;project=gapp_rel3">uri</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Uri&amp;project=gapp_rel3">Uri</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=parse&amp;project=gapp_rel3">parse</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=videoPath&amp;project=gapp_rel3">videoPath</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=toString&amp;project=gapp_rel3">toString</rich_text>
			<rich_text>());
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1401">1401</rich_text>
			<rich_text>                            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mUI&amp;project=gapp_rel3">mUI</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#mUri">mUri</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=uri&amp;project=gapp_rel3">uri</rich_text>
			<rich_text>;
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1402">1402</rich_text>
			<rich_text>                            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#mStopFlag">mStopFlag</rich_text>
			<rich_text> = </rich_text>
			<rich_text weight="heavy">true</rich_text>
			<rich_text>;
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1403">1403</rich_text>
			<rich_text>                         // [BUGFIX]-ADD-END by AMNJ.jing.ji,17/12/2015,PR-1133108
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1404">1404</rich_text>
			<rich_text>                        } </rich_text>
			<rich_text weight="heavy">catch</rich_text>
			<rich_text> (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=Exception&amp;project=gapp_rel3">Exception</rich_text>
			<rich_text> e) {// MODIFIED by meng.peng, 2016-03-25,BUG-1863242
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1405">1405</rich_text>
			<rich_text>                            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TctMmsLog&amp;project=gapp_rel3">TctMmsLog</rich_text>
			<rich_text>.e(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#TAG">TAG</rich_text>
			<rich_text>, &quot;stop fail&quot;, e);
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1406">1406</rich_text>
			<rich_text>                            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#mVideoFile">mVideoFile</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=gapp_rel3">null</rich_text>
			<rich_text>;
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1407">1407</rich_text>
			<rich_text>                        } </rich_text>
			<rich_text weight="heavy">finally</rich_text>
			<rich_text> {
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1408">1408</rich_text>
			<rich_text>                            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=obj&amp;project=gapp_rel3">obj</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=notify&amp;project=gapp_rel3">notify</rich_text>
			<rich_text>();
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1409">1409</rich_text>
			<rich_text>                            </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#mMediaRecorderRecording">mMediaRecorderRecording</rich_text>
			<rich_text> = </rich_text>
			<rich_text weight="heavy">false</rich_text>
			<rich_text>;
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1410">1410</rich_text>
			<rich_text>                        }
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1411">1411</rich_text>
			<rich_text>                    }
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1412">1412</rich_text>
			<rich_text>                }
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1413">1413</rich_text>
			<rich_text>            }).</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=start&amp;project=gapp_rel3">start</rich_text>
			<rich_text>();
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1414">1414</rich_text>
			<rich_text>
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1415">1415</rich_text>
			<rich_text>            </rich_text>
			<rich_text weight="heavy">synchronized</rich_text>
			<rich_text> (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=obj&amp;project=gapp_rel3">obj</rich_text>
			<rich_text>) {
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1416">1416</rich_text>
			<rich_text>                </rich_text>
			<rich_text weight="heavy">try</rich_text>
			<rich_text> {
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1417">1417</rich_text>
			<rich_text>                    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=obj&amp;project=gapp_rel3">obj</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=wait&amp;project=gapp_rel3">wait</rich_text>
			<rich_text>();
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1418">1418</rich_text>
			<rich_text>                } </rich_text>
			<rich_text weight="heavy">catch</rich_text>
			<rich_text> (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=InterruptedException&amp;project=gapp_rel3">InterruptedException</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ex&amp;project=gapp_rel3">ex</rich_text>
			<rich_text>) {
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1419">1419</rich_text>
			<rich_text>                    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=TctMmsLog&amp;project=gapp_rel3">TctMmsLog</rich_text>
			<rich_text>.e(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#TAG">TAG</rich_text>
			<rich_text>, &quot;Failed to interrup&quot;, </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ex&amp;project=gapp_rel3">ex</rich_text>
			<rich_text>);
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1420">1420</rich_text>
			<rich_text>                }
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1421">1421</rich_text>
			<rich_text>                </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#mVideoFile">mVideoFile</rich_text>
			<rich_text> != </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=gapp_rel3">null</rich_text>
			<rich_text>) {
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1422">1422</rich_text>
			<rich_text>                    </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (!</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#delete">delete</rich_text>
			<rich_text>) {
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1423">1423</rich_text>
			<rich_text>                        </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mUI&amp;project=gapp_rel3">mUI</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=showCapturedImageForReview&amp;project=gapp_rel3">showCapturedImageForReview</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#mVideoFile">mVideoFile</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=getAbsolutePath&amp;project=gapp_rel3">getAbsolutePath</rich_text>
			<rich_text>(),
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1424">1424</rich_text>
			<rich_text>                                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#mSelectPanel">mSelectPanel</rich_text>
			<rich_text>, </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#mControlPanel">mControlPanel</rich_text>
			<rich_text>);
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1425">1425</rich_text>
			<rich_text>                    } </rich_text>
			<rich_text weight="heavy">else</rich_text>
			<rich_text> {
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1426">1426</rich_text>
			<rich_text>                        </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#mVideoFile">mVideoFile</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#delete">delete</rich_text>
			<rich_text>();
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1427">1427</rich_text>
			<rich_text>                        </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#mVideoFile">mVideoFile</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=gapp_rel3">null</rich_text>
			<rich_text>;
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1428">1428</rich_text>
			<rich_text>                    }
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1429">1429</rich_text>
			<rich_text>                }
</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/xref/gapp_rel3/Mms/tct-src/com/android/camera/ui/CameraFragment.java#1430">1430</rich_text>
			<rich_text>            }



18 Defect-1841733 GOOGLE DOC anr


 该问题应该是com.google.android.apps.docs 运行时
   线程运行过程中发生了得到锁后在等待另一个锁无法释放，导致另一个线程没有及时申请到锁而blocked，而不能及时响应导致了ANR。
   是GMS应用的问题

</rich_text>
			<rich_text foreground="#ff0000">&quot;Binder_1&quot; prio=5 tid=7 Waiting  </rich_text>
			<rich_text>
  | group=&quot;main&quot; sCount=1 dsCount=0 obj=0x32c07280 self=0x55907a9f60 
  | sysTid=21982 nice=10 cgrp=bg_non_interactive sched=0/0 handle=0x7f8a890450 
  | state=S schedstat=( 167745770 361636149 1092 ) utm=6 stm=10 core=1 HZ=100 
  | stack=0x7f8a794000-0x7f8a796000 stackSize=1013KB 
  | held mutexes= 
  at java.lang.Object.wait!(Native method) 
  -</rich_text>
			<rich_text foreground="#ff0000"> waiting on &lt;0x068e1ddc&gt; (a java.lang.Object)  </rich_text>
			<rich_text>
  at java.lang.Thread.parkFor$(Thread.java:1220) 
  - locked &lt;0x068e1ddc&gt; (a java.lang.Object) 
  at sun.misc.Unsafe.park(Unsafe.java:299) 
  at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158) 
  at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:810) 
  at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:970) 
  at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1278) 
  at hmm.get(PG:1285) 
  at com.google.android.apps.docs.storagebackend.StorageBackendContentProvider.a(PG:200) 
</rich_text>
			<rich_text foreground="#ff0000">  - locked &lt;0x0bc3eee5&gt; </rich_text>
			<rich_text>(a com.google.android.apps.docs.storagebackend.StorageBackendContentProvider) 
  at com.google.android.apps.docs.storagebackend.StorageBackendContentProvider.b(PG:214) 
 </rich_text>
			<rich_text foreground="#ff0000"> - locked &lt;0x0bc3eee5&gt;</rich_text>
			<rich_text> (a com.google.android.apps.docs.storagebackend.StorageBackendContentProvider) 
  at com.google.android.apps.docs.storagebackend.StorageBackendContentProvider.queryRoots(PG:275) 
  at android.provider.DocumentsProvider.query(DocumentsProvider.java:481) 
  at android.content.ContentProvider.query(ContentProvider.java:1017) 
  at android.content.ContentProvider$Transport.query(ContentProvider.java:238) 
  at android.content.ContentProviderNative.onTransact(ContentProviderNative.java:112) 
  at android.os.Binder.execTransact(Binder.java:453)


</rich_text>
			<rich_text foreground="#ff0000">&quot;Binder_2&quot; prio=5 tid=8 Blocked  </rich_text>
			<rich_text>
  | group=&quot;main&quot; sCount=1 dsCount=0 obj=0x32c072e0 self=0x55907aa7b0  
  | sysTid=21983 nice=10 cgrp=bg_non_interactive sched=0/0 handle=0x7f8a78a450  
  | state=S schedstat=( 411059194 416508698 1052 ) utm=33 stm=8 core=3 HZ=100  
  | stack=0x7f8a68e000-0x7f8a690000 stackSize=1013KB  
  | held mutexes=  
  at com.google.android.apps.docs.storagebackend.StorageBackendContentProvider.b(PG:210)  
  -</rich_text>
			<rich_text foreground="#ff0000"> waiting  to lock &lt;0x0bc3eee5&gt; (a  com.google.android.apps.docs.storagebackend.StorageBackendContentProvider)  held by thread 7  </rich_text>
			<rich_text>
  at com.google.android.apps.docs.storagebackend.StorageBackendContentProvider.queryRoots(PG:275)  
  at android.provider.DocumentsProvider.query(DocumentsProvider.java:481)  
  at android.content.ContentProvider.query(ContentProvider.java:1017)  
  at android.content.ContentProvider$Transport.query(ContentProvider.java:238)  
  at android.content.ContentProviderNative.onTransact(ContentProviderNative.java:112)  
  at android.os.Binder.execTransact(Binder.java:453) 



19. Defect-1962878 java.lang.OutOfMemoryError: Could not allocate JNI Env
016-04-18 14:10:47,969 : 04-18  14:10:47.984 E/art     ( 5367): ashmem_create_region failed for  'indirect ref table': Too many open files
2016-04-18 14:10:47,985 : 04-18 14:10:47.995 W/art     ( 5367): Throwing OutOfMemoryError &quot;Could not allocate JNI Env&quot;
 

2016-04-18 14:10:48,016 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime: FATAL EXCEPTION: main
2016-04-18 14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime: Process: com.google.android.gms, PID: 5367
2016-04-18  14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:  java.lang.OutOfMemoryError: Could not allocate JNI Env
2016-04-18 14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at java.lang.Thread.nativeCreate(Native Method)
2016-04-18 14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at java.lang.Thread.start(Thread.java:1063)
2016-04-18  14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at  com.google.android.gms.b.c.execute(:com.google.android.gms:351)
2016-04-18  14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at  android.os.AsyncTask.executeOnExecutor(AsyncTask.java:607)
2016-04-18  14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at  com.google.android.gms.b.d.a(:com.google.android.gms:27)
2016-04-18  14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at  com.google.android.gms.checkin.EventLogService.onStartCommand(:com.google.android.gms:221)
2016-04-18  14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at  android.app.ActivityThread.handleServiceArgs(ActivityThread.java:3052)
2016-04-18  14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at  android.app.ActivityThread.access$2200(ActivityThread.java:158)
2016-04-18  14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at  android.app.ActivityThread$H.handleMessage(ActivityThread.java:1473)
2016-04-18  14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at  android.os.Handler.dispatchMessage(Handler.java:102)
2016-04-18 14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at android.os.Looper.loop(Looper.java:148)
2016-04-18  14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at  android.app.ActivityThread.main(ActivityThread.java:5515)
2016-04-18 14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at java.lang.reflect.Method.invoke(Native Method)
2016-04-18  14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at  com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:764)
2016-04-18  14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at  com.android.internal.os.ZygoteInit.main(ZygoteInit.java:654)



2016-04-18 19:21:15,672 : --------- beginning of crash
2016-04-18 19:21:15,672 : 04-18 19:21:13.963  4226  4226 E AndroidRuntime: FATAL EXCEPTION: main
2016-04-18 19:21:15,672 : 04-18 19:21:13.963  4226  4226 E AndroidRuntime: Process: com.google.android.gms, PID: 4226
2016-04-18  19:21:15,672 : 04-18 19:21:13.963  4226  4226 E AndroidRuntime:  java.lang.OutOfMemoryError: Could not allocate JNI Env
2016-04-18 19:21:15,672 : 04-18 19:21:13.963  4226  4226 E AndroidRuntime:     at java.lang.Thread.nativeCreate(Native Method)
2016-04-18 19:21:15,672 : 04-18 19:21:13.963  4226  4226 E AndroidRuntime:     at java.lang.Thread.start(Thread.java:1063)
2016-04-18  19:21:15,672 : 04-18 19:21:13.963  4226  4226 E AndroidRuntime:     at  android.app.IntentService.onCreate(IntentService.java:109)
2016-04-18  19:21:15,672 : 04-18 19:21:13.963  4226  4226 E AndroidRuntime:     at  com.google.android.gms.tron.CollectionService.onCreate(:com.google.android.gms:147)
.....
2016-04-18  19:21:15,672 : 04-18 19:21:13.964  1390  4104 I am_crash:  [4226,0,com.google.android.gms,-1194836283,java.lang.OutOfMemoryError,Could  not allocate JNI Env,Thread.java,-2]

@jamine,
此为stability测试中出现的OutOfMemoryError异常，目前出现了2次,都是gms调用引起，第一次是gms在异步任务中调用引起(as comment1)，
第二次是gms中在服务中调用引起(如上)，2次调用都导致native层报了同样的错误，
故请协助check此为gms自身问题还是底层问题，谢谢！



   分析PR附件log所包含的两处时间点的crash，均是com.google.android.gms(GmsCore.apk)这个应用进程，内部线程使用过程中出现的OOM问题：
2016-04-18 14:10:48,016 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime: FATAL EXCEPTION: main
2016-04-18 14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime: Process: com.google.android.gms, PID: 5367
2016-04-18  14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:  java.lang.OutOfMemoryError: Could not allocate JNI Env
2016-04-18 14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at java.lang.Thread.nativeCreate(Native Method)
2016-04-18 14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at java.lang.Thread.start(Thread.java:1063)
2016-04-18  14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at  com.google.android.gms.b.c.execute(:com.google.android.gms:351)
2016-04-18  14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at  android.os.AsyncTask.executeOnExecutor(AsyncTask.java:607)
2016-04-18  14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at  com.google.android.gms.b.d.a(:com.google.android.gms:27)
......
2016-04-18  14:10:48,032 : 04-18 14:10:48.038  5367  5367 E AndroidRuntime:     at  com.android.internal.os.ZygoteInit.main(ZygoteInit.java:654)
2016-04-18  14:10:48,032 : 04-18 14:10:48.040  1403  4911 I am_crash:  [5367,0,com.google.android.gms,-1194836283,java.lang.OutOfMemoryError,Could  not allocate JNI Env,Thread.java,-2]

2016-04-18 19:21:15,672 : 04-18 19:21:13.963  4226  4226 E AndroidRuntime: FATAL EXCEPTION: main
2016-04-18 19:21:15,672 : 04-18 19:21:13.963  4226  4226 E AndroidRuntime: Process: com.google.android.gms, PID: 4226
2016-04-18  19:21:15,672 : 04-18 19:21:13.963  4226  4226 E AndroidRuntime:  java.lang.OutOfMemoryError: Could not allocate JNI Env
2016-04-18 19:21:15,672 : 04-18 19:21:13.963  4226  4226 E AndroidRuntime:     at java.lang.Thread.nativeCreate(Native Method)
2016-04-18 19:21:15,672 : 04-18 19:21:13.963  4226  4226 E AndroidRuntime:     at java.lang.Thread.start(Thread.java:1063)
2016-04-18  19:21:15,672 : 04-18 19:21:13.963  4226  4226 E AndroidRuntime:     at  android.app.IntentService.onCreate(IntentService.java:109)
2016-04-18  19:21:15,672 : 04-18 19:21:13.963  4226  4226 E AndroidRuntime:     at  com.google.android.gms.tron.CollectionService.onCreate(:com.google.android.gms:147)
......
2016-04-18  19:21:15,672 : 04-18 19:21:13.963  4226  4226 E AndroidRuntime:     at  com.android.internal.os.ZygoteInit.main(ZygoteInit.java:654)
2016-04-18  19:21:15,672 : 04-18 19:21:13.964  1390  4104 I am_crash:  [4226,0,com.google.android.gms,-1194836283,java.lang.OutOfMemoryError,Could  not allocate JNI Env,Thread.java,-2]

    表面原因是native层创建thread时，JNIEnv为空抛出异常导致：
388void Thread::CreateNativeThread(JNIEnv* env, jobject java_peer, size_t stack_size, bool is_daemon) {
......
458  child_thread = nullptr;
459  // TODO: remove from thread group?
460  env-&gt;SetLongField(java_peer, WellKnownClasses::java_lang_Thread_nativePeer, 0);
461  {
462    std::string msg(child_jni_env_ext.get() == nullptr ?
463        &quot;Could not allocate JNI Env&quot; :
464        StringPrintf(&quot;pthread_create (%s stack) failed: %s&quot;,
465                                 PrettySize(stack_size).c_str(), strerror(pthread_create_result)));
466    ScopedObjectAccess soa(env);
467    soa.Self()-&gt;ThrowOutOfMemoryError(msg.c_str());
468  }
}
      真正原因这边推测是com.google.android.gms这个进程所拥有的内存将要耗光，无法创建JNIEnv，应该与系统底层关系不大。至于 com.google.android.gms这个进程为何会耗光，分析与其自身的代码逻辑有关系，例如没有及时释放对象引用，一次处理的数据量过大， 等。

         另对于上述时间点的两个crash，在crash之前均有几十次启动SandboxedProcessService，但之后这个service会 die，无法看到chrome内部的实现，不能确定service die的原因，也不确定是否与PR问题有关：
./MDevice_20160414110920_system.txt:69515:2016-04-18  14:09:57,876 : 04-18 14:09:57.880  1403  4337 I am_proc_start:  [0,14908,99254,com.android.chrome:sandboxed_process4,service,com.android.chrome/org.chromium.content.app.SandboxedProcessService4]

    接下来会进一步分析确认PR的原因。
    
    
</rich_text>
			<rich_text scale="h2" weight="heavy">      2016-04-18 14:10:47,969 : 04-18  14:10:47.984 E/art     ( 5367): ashmem_create_region failed for  'indirect ref table': Too many open files</rich_text>
			<rich_text>
     这条log分析与问题可能有关系，需要kernel log来确认下file fd到底打开了多少。
     请帮忙提供下MDevice_20160414110920_kernel.txt这种名称类似的kernel log。
     Thanks。


   综合comment5，分析认为是GMS应用 GmsCore.apk这边应用内部出现了过量的file操作相关，导致fd数量超出系统限制，进而无法对匿名共享内存做操作，
从而导致GMS应用内部出现无法allocate的error。
    GMS应用本身的问题，考虑属于 stability测试，正常情况下应该不会出现这个问题，建议降级处理。
 
20. Defect-1528018
gms core问题



threadhandler
01-01 23:03:35.179  4634  4634 E art     : ashmem_create_region failed for 'indirect ref table': Too many open files
01-01 23:03:35.179  4634  5179 F Looper  : Could not create epoll instance: Too many open files
01-01 23:03:35.180  4634  5180 F Looper  : Could not make wake event fd: Too many open files

lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 44 -&gt; socket:[45508]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 440 -&gt; anon_inode:[eventfd]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 441 -&gt; anon_inode:[eventpoll]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 442 -&gt; anon_inode:[eventfd]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 443 -&gt; anon_inode:[eventpoll]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 444 -&gt; anon_inode:[eventpoll]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 445 -&gt; anon_inode:[eventfd]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 446 -&gt; anon_inode:[eventpoll]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 447 -&gt; anon_inode:[eventfd]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 448 -&gt; anon_inode:[eventfd]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 449 -&gt; anon_inode:[eventpoll]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 45 -&gt; anon_inode:[eventpoll]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 450 -&gt; anon_inode:[eventfd]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 451 -&gt; anon_inode:[eventpoll]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 452 -&gt; anon_inode:[eventpoll]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 453 -&gt; anon_inode:[eventfd]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 454 -&gt; anon_inode:[eventpoll]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 455 -&gt; anon_inode:[eventfd]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 456 -&gt; anon_inode:[eventfd]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 457 -&gt; anon_inode:[eventpoll]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 458 -&gt; anon_inode:[eventpoll]
lrwx------ 1 u0_a67 u0_a67 64 1970-01-01 23:06 459 -&gt; anon_inode:[eventfd]


</rich_text>
			<rich_text foreground="#000080">for</rich_text>
			<rich_text>(</rich_text>
			<rich_text foreground="#000080">int</rich_text>
			<rich_text>i=</rich_text>
			<rich_text foreground="#0000ff">0</rich_text>
			<rich_text>;i&lt;</rich_text>
			<rich_text foreground="#0000ff">100</rich_text>
			<rich_text>;i++){
Threadthread=</rich_text>
			<rich_text foreground="#000080">new</rich_text>
			<rich_text>Thread(</rich_text>
			<rich_text foreground="#000080">new</rich_text>
			<rich_text>Runnable(){
</rich_text>
			<rich_text foreground="#808000">@Override
</rich_text>
			<rich_text foreground="#000080">publicvoid</rich_text>
			<rich_text>run(){
Looper.prepare();
Looper.loop();
}
});
thread.start();


fd泄漏
2461517

2016-07-28 08:39:22,956 : 07-28 08:39:21.853 D/gk      ( 2490): NotificationPanelView mQsFullyExpanded=false mQsExpanded=false
2016-07-28 08:39:22,956 : 07-28 08:39:21.856 E/Parcel  ( 2490): dup() failed in Parcel::read, i is 1, fds[i] is -1, fd_count is 2, error: Too many open files
2016-07-28 08:39:22,956 : 07-28 08:39:21.856 E/Surface ( 2490): dequeueBuffer: IGraphicBufferProducer::requestBuffer failed: -22
2016-07-28 08:39:22,956 : 07-28 08:39:21.857 I/Adreno  ( 2490): DequeueBuffer: dequeueBuffer failed
2016-07-28 08:39:22,956 : 07-28 08:39:21.857 E/Parcel  ( 2490): dup() failed in Parcel::read, i is 0, fds[i] is -1, fd_count is 2, error: Too many open files
2016-07-28 08:39:22,956 : 07-28 08:39:21.857 E/Surface ( 2490): dequeueBuffer: IGraphicBufferProducer::requestBuffer failed: -22
2016-07-28 08:39:22,956 : 07-28 08:39:21.857 I/Adreno  ( 2490): DequeueBuffer: dequeueBuffer failed
2016-07-28 08:39:22,956 : 07-28 08:39:21.858 E/Parcel  ( 2490): dup() failed in Parcel::read, i is 0, fds[i] is -1, fd_count is 2, error: Too many open files
2016-07-28 08:39:22,956 : 07-28 08:39:21.858 E/Surface ( 2490): dequeueBuffer: IGraphicBufferProducer::requestBuffer failed: -22
2016-07-28 08:39:22,956 : 07-28 08:39:21.858 I/Adreno  ( 2490): DequeueBuffer: dequeueBuffer failed
2016-07-28 08:39:22,956 : 07-28 08:39:21.858 E/Parcel  ( 2490): dup() failed in Parcel::read, i is 0, fds[i] is -1, fd_count is 2, error: Too many open files
2016-07-28 08:39:22,956 : 07-28 08:39:21.858 E/Surface ( 2490): dequeueBuffer: IGraphicBufferProducer::requestBuffer failed: -22
2016-07-28 08:39:22,972 : 07-28 08:39:21.858 I/Adreno  ( 2490): DequeueBuffer: dequeueBuffer failed

===
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: FATAL EXCEPTION: main
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: Process: com.android.systemui, PID: 2490
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: java.lang.RuntimeException: Could not read input channel file descriptors from parcel.
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.view.InputChannel.nativeReadFromParcel(Native Method)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.view.InputChannel.readFromParcel(InputChannel.java:148)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.view.IWindowSession$Stub$Proxy.addToDisplay(IWindowSession.java:759)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.view.ViewRootImpl.setView(ViewRootImpl.java:550)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:310)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:86)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at com.android.systemui.assist.AssistManager.onConfigurationChanged(AssistManager.java:119)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at com.android.systemui.statusbar.phone.PhoneStatusBar$11.onVerticalChanged(PhoneStatusBar.java:957)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at com.android.systemui.statusbar.phone.NavigationBarView.notifyVerticalChangedListener(NavigationBarView.java:725)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at com.android.systemui.statusbar.phone.NavigationBarView.onSizeChanged(NavigationBarView.java:716)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.view.View.sizeChange(View.java:16892)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.view.View.setFrame(View.java:16854)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.view.View.layout(View.java:16770)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.view.ViewGroup.layout(ViewGroup.java:5488)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.view.ViewRootImpl.performLayout(ViewRootImpl.java:2190)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.view.ViewRootImpl.performTraversals(ViewRootImpl.java:1950)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.view.ViewRootImpl.doTraversal(ViewRootImpl.java:1126)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.view.ViewRootImpl$TraversalRunnable.run(ViewRootImpl.java:6333)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.view.Choreographer$CallbackRecord.run(Choreographer.java:858)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.view.Choreographer.doCallbacks(Choreographer.java:670)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.view.Choreographer.doFrame(Choreographer.java:606)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:844)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.os.Handler.handleCallback(Handler.java:739)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.os.Handler.dispatchMessage(Handler.java:95)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.os.Looper.loop(Looper.java:148)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at android.app.ActivityThread.main(ActivityThread.java:5473)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at java.lang.reflect.Method.invoke(Native Method)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)
2016-07-28 08:39:31,552 : 07-28 08:39:30.445  2490  2490 E AndroidRuntime: 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616)


==
2016-07-28 05:22:22,755 : 07-28 05:22:22.155     0     0 E binder  : 7764: binder_alloc_buf failed to map pages in userspace, no vma

2016-07-28 08:39:31,458 : 07-28 08:39:30.356 E/InputChannel-JNI( 2490): Error 24 dup channel fd 1015.

2016-07-28 07:51:47,536 : 07-28 07:51:46.292 W/SQLiteConnectionPool( 2490): A SQLiteConnection object for database '/data/user/0/com.android.systemui/databases/Recents.db' was leaked!  Please fix your application to end transactions in progress properly and to close the database when it is no longer needed.
2016-07-28 07:51:47,536 : 07-28 07:51:46.292 W/SQLiteConnectionPool( 2490): A SQLiteConnection object for database '/data/user/0/com.android.systemui/databases/Recents.db' was leaked!  Please fix your application to end transactions in progress properly and to close the database when it is no longer needed.


2016-07-28 08:03:02,625 : 07-28 08:03:01.387 I/Choreographer( 2490): Skipped 53 frames!  The application may be doing too much work on its main thread.

2016-07-07 18:11:54,171 : 07-07 18:11:53.277 W/InputEventReceiver( 9423): Attempted to finish an input event but the input event receiver has already been disposed.


==============
process:com.android.systemui
pid:2481
Classname:java.lang.RuntimeException
Filename:Bitmap.java
Methodname:nativeCreateFromParcel
LineNumber:-2
Cause:Could not allocate dup blob fd.
stackTrace:
java.lang.RuntimeException: Could not allocate dup blob fd.
    at android.graphics.Bitmap.nativeCreateFromParcel(Native Method)
    at android.graphics.Bitmap.access$100(Bitmap.java:36)
    at android.graphics.Bitmap$1.createFromParcel(Bitmap.java:1516)
    at android.graphics.Bitmap$1.createFromParcel(Bitmap.java:1508)
    at android.app.ActivityManager$TaskThumbnail.readFromParcel(ActivityManager.java:1390)
    at android.app.ActivityManager$TaskThumbnail.&lt;init&gt;(ActivityManager.java:1411)
    at android.app.ActivityManager$TaskThumbnail.&lt;init&gt;(ActivityManager.java:1359)
    at android.app.ActivityManager$TaskThumbnail$1.createFromParcel(ActivityManager.java:1403)
    at android.app.ActivityManager$TaskThumbnail$1.createFromParcel(ActivityManager.java:1401)
    at android.app.ActivityManagerProxy.getTaskThumbnail(ActivityManagerNative.java:3367)
    at android.app.ActivityManager.getTaskThumbnail(ActivityManager.java:1418)
    at com.android.systemui.recents.misc.SystemServicesProxy.getThumbnail(SystemServicesProxy.java:357)
    at com.android.systemui.recents.misc.SystemServicesProxy.getTaskThumbnail(SystemServicesProxy.java:336)
    at com.android.systemui.recents.model.RecentsTaskLoader.getAndUpdateThumbnail(RecentsTaskLoader.java:430)
    at com.android.systemui.recents.model.RecentsTaskLoadPlan.executePlan(RecentsTaskLoadPlan.java:250)
    at com.android.systemui.recents.model.RecentsTaskLoader.loadTasks(RecentsTaskLoader.java:477)
    at com.android.systemui.recents.Recents$TaskStackListenerImpl.run(Recents.java:143)
    at android.os.Handler.handleCallback(Handler.java:739)
    at android.os.Handler.dispatchMessage(Handler.java:95)
    at android.os.Looper.loop(Looper.java:148)
    at android.app.ActivityThread.main(ActivityThread.java:5473)
    at java.lang.reflect.Method.invoke(Native Method)
    at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)
    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616)
    
    
    2016-07-28 05:20:21,713 : 07-28 05:20:20.748  1555  1555 E AccessibilityManagerService: android.os.TransactionTooLargeException: data parcel size 544712 bytes
2016-07-28 05:20:21,713 : 07-28 05:20:20.748  1555  1555 E AccessibilityManagerService: 	at android.os.BinderProxy.transactNative(Native Method)
2016-07-28 05:20:21,713 : 07-28 05:20:20.748  1555  1555 E AccessibilityManagerService: 	at android.os.BinderProxy.transact(Binder.java:503)
2016-07-28 05:20:21,713 : 07-28 05:20:20.748  1555  1555 E AccessibilityManagerService: 	at android.accessibilityservice.IAccessibilityServiceClient$Stub$Proxy.onAccessibilityEvent(IAccessibilityServiceClient.java:154)
2016-07-28 05:20:21,713 : 07-28 05:20:20.748  1555  1555 E AccessibilityManagerService: 	at com.android.server.accessibility.AccessibilityManagerService$Service.notifyAccessibilityEventInternal(AccessibilityManagerService.java:2775)
2016-07-28 05:20:21,713 : 07-28 05:20:20.748  1555  1555 E AccessibilityManagerService: 	at com.android.server.accessibility.AccessibilityManagerService$Service.access$2700(AccessibilityManagerService.java:1934)
2016-07-28 05:20:21,713 : 07-28 05:20:20.748  1555  1555 E AccessibilityManagerService: 	at com.android.server.accessibility.AccessibilityManagerService$Service$1.handleMessage(AccessibilityManagerService.java:1991)
2016-07-28 05:20:21,713 : 07-28 05:20:20.748  1555  1555 E AccessibilityManagerService: 	at android.os.Handler.dispatchMessage(Handler.java:102)
2016-07-28 05:20:21,713 : 07-28 05:20:20.748  1555  1555 E AccessibilityManagerService: 	at android.os.Looper.loop(Looper.java:148)
2016-07-28 05:20:21,713 : 07-28 05:20:20.748  1555  1555 E AccessibilityManagerService: 	at com.android.server.SystemServer.run(SystemServer.java:366)
2016-07-28 05:20:21,713 : 07-28 05:20:20.748  1555  1555 E AccessibilityManagerService: 	at com.android.server.SystemServer.main(SystemServer.java:197)
2016-07-28 05:20:21,713 : 07-28 05:20:20.748  1555  1555 E AccessibilityManagerService: 	at java.lang.reflect.Method.invoke(Native Method)
2016-07-28 05:20:21,713 : 07-28 05:20:20.748  1555  1555 E AccessibilityManagerService: 	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)
2016-07-28 05:20:21,713 : 07-28 05:20:20.748  1555  1555 E AccessibilityManagerService: 	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616)




windowmanager 
windowmanagerImpl.addView
-&gt;WindowManagerGlobal.addView ==&gt;root.setView

ViewRootImpl.setView
 mInputChannel = new InputChannel();
res = nWindowSession.addToDisplay()

Seesion.addToDisplay-&gt; mService.addWindow

WindowManagerService.addWindow


2537            </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (outInputChannel != </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=null&amp;project=m8996">null</rich_text>
			<rich_text> &amp;&amp; (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=attrs&amp;project=m8996">attrs</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=inputFeatures&amp;project=m8996">inputFeatures</rich_text>
			<rich_text>
2538                    &amp; </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=WindowManager&amp;project=m8996">WindowManager</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=LayoutParams&amp;project=m8996">LayoutParams</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=INPUT_FEATURE_NO_INPUT_CHANNEL&amp;project=m8996">INPUT_FEATURE_NO_INPUT_CHANNEL</rich_text>
			<rich_text>) == 0) {
2539                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=String&amp;project=m8996">String</rich_text>
			<rich_text> name = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=win&amp;project=m8996">win</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=makeInputChannelName&amp;project=m8996">makeInputChannelName</rich_text>
			<rich_text>();
2540                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=InputChannel&amp;project=m8996">InputChannel</rich_text>
			<rich_text>[] </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=inputChannels&amp;project=m8996">inputChannels</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=InputChannel&amp;project=m8996">InputChannel</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=openInputChannelPair&amp;project=m8996">openInputChannelPair</rich_text>
			<rich_text>(name);
2541                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=win&amp;project=m8996">win</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setInputChannel&amp;project=m8996">setInputChannel</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=inputChannels&amp;project=m8996">inputChannels</rich_text>
			<rich_text>[0]);
2542                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=inputChannels&amp;project=m8996">inputChannels</rich_text>
			<rich_text>[1].</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=transferTo&amp;project=m8996">transferTo</rich_text>
			<rich_text>(outInputChannel);
2543
2544                mInputManager.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=registerInputChannel&amp;project=m8996">registerInputChannel</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=win&amp;project=m8996">win</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mInputChannel&amp;project=m8996">mInputChannel</rich_text>
			<rich_text>, </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=win&amp;project=m8996">win</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=mInputWindowHandle&amp;project=m8996">mInputWindowHandle</rich_text>
			<rich_text>);
2545            }

这里调用了InputChannel.openInputChannelPair  -&gt; nativeOpenInputChannelPair

android_view_InputChannel-&gt; android_view_InputChannel_nativeOpenInputChannelPair
InputChannel::openInputChannelPair(name, servierChannel, ClientChannel)

InputTransport.cpp -&gt; openInputChannelPair

创建了server端和client段的
124</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=status_t&amp;project=m8996">status_t</rich_text>
			<rich_text> InputChannel::</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=openInputChannelPair&amp;project=m8996">openInputChannelPair</rich_text>
			<rich_text>(</rich_text>
			<rich_text weight="heavy">const</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=String8&amp;project=m8996">String8</rich_text>
			<rich_text>&amp; </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=name&amp;project=m8996">name</rich_text>
			<rich_text>,
125        </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=sp&amp;project=m8996">sp</rich_text>
			<rich_text>&lt;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=InputChannel">InputChannel</rich_text>
			<rich_text>&gt;&amp; outServerChannel, </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=sp&amp;project=m8996">sp</rich_text>
			<rich_text>&lt;</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?path=InputChannel">InputChannel</rich_text>
			<rich_text>&gt;&amp; outClientChannel) {
126    </rich_text>
			<rich_text weight="heavy">int</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=sockets&amp;project=m8996">sockets</rich_text>
			<rich_text>[2];
127    </rich_text>
			<rich_text weight="heavy">if</rich_text>
			<rich_text> (</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=socketpair&amp;project=m8996">socketpair</rich_text>
			<rich_text>(</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=AF_UNIX&amp;project=m8996">AF_UNIX</rich_text>
			<rich_text>, </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SOCK_SEQPACKET&amp;project=m8996">SOCK_SEQPACKET</rich_text>
			<rich_text>, 0, sockets)) {
128        </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=status_t&amp;project=m8996">status_t</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=result&amp;project=m8996">result</rich_text>
			<rich_text> = -</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=errno&amp;project=m8996">errno</rich_text>
			<rich_text>;
129        </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=ALOGE&amp;project=m8996">ALOGE</rich_text>
			<rich_text>(&quot;channel '%s' ~ Could not create socket pair.  errno=%d&quot;,
130                </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=name&amp;project=m8996">name</rich_text>
			<rich_text>.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=string&amp;project=m8996">string</rich_text>
			<rich_text>(), </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=errno&amp;project=m8996">errno</rich_text>
			<rich_text>);
131        outServerChannel.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=clear&amp;project=m8996">clear</rich_text>
			<rich_text>();
132        outClientChannel.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=clear&amp;project=m8996">clear</rich_text>
			<rich_text>();
133        </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=result&amp;project=m8996">result</rich_text>
			<rich_text>;
134    }
135
136    </rich_text>
			<rich_text weight="heavy">int</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=bufferSize&amp;project=m8996">bufferSize</rich_text>
			<rich_text> = SOCKET_BUFFER_SIZE;
137    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setsockopt&amp;project=m8996">setsockopt</rich_text>
			<rich_text>(sockets[0], </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SOL_SOCKET&amp;project=m8996">SOL_SOCKET</rich_text>
			<rich_text>, </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SO_SNDBUF&amp;project=m8996">SO_SNDBUF</rich_text>
			<rich_text>, &amp;bufferSize, </rich_text>
			<rich_text weight="heavy">sizeof</rich_text>
			<rich_text>(bufferSize));
138    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setsockopt&amp;project=m8996">setsockopt</rich_text>
			<rich_text>(sockets[0], </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SOL_SOCKET&amp;project=m8996">SOL_SOCKET</rich_text>
			<rich_text>, </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SO_RCVBUF&amp;project=m8996">SO_RCVBUF</rich_text>
			<rich_text>, &amp;bufferSize, </rich_text>
			<rich_text weight="heavy">sizeof</rich_text>
			<rich_text>(bufferSize));
139    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setsockopt&amp;project=m8996">setsockopt</rich_text>
			<rich_text>(sockets[1], </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SOL_SOCKET&amp;project=m8996">SOL_SOCKET</rich_text>
			<rich_text>, </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SO_SNDBUF&amp;project=m8996">SO_SNDBUF</rich_text>
			<rich_text>, &amp;bufferSize, </rich_text>
			<rich_text weight="heavy">sizeof</rich_text>
			<rich_text>(bufferSize));
140    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=setsockopt&amp;project=m8996">setsockopt</rich_text>
			<rich_text>(sockets[1], </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SOL_SOCKET&amp;project=m8996">SOL_SOCKET</rich_text>
			<rich_text>, </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=SO_RCVBUF&amp;project=m8996">SO_RCVBUF</rich_text>
			<rich_text>, &amp;bufferSize, </rich_text>
			<rich_text weight="heavy">sizeof</rich_text>
			<rich_text>(bufferSize));
141
142    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=String8&amp;project=m8996">String8</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=serverChannelName&amp;project=m8996">serverChannelName</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=name&amp;project=m8996">name</rich_text>
			<rich_text>;
143    serverChannelName.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=append&amp;project=m8996">append</rich_text>
			<rich_text>(&quot; (server)&quot;);
144    outServerChannel = </rich_text>
			<rich_text weight="heavy">new</rich_text>
			<rich_text> InputChannel(serverChannelName, sockets[0]);
145
146    </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=String8&amp;project=m8996">String8</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?refs=clientChannelName&amp;project=m8996">clientChannelName</rich_text>
			<rich_text> = </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=name&amp;project=m8996">name</rich_text>
			<rich_text>;
147    clientChannelName.</rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=append&amp;project=m8996">append</rich_text>
			<rich_text>(&quot; (client)&quot;);
148    outClientChannel = </rich_text>
			<rich_text weight="heavy">new</rich_text>
			<rich_text> InputChannel(clientChannelName, sockets[1]);
149    </rich_text>
			<rich_text weight="heavy">return</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://172.16.12.204:8080/source/s?defs=OK&amp;project=m8996">OK</rich_text>
			<rich_text>;
150}




Defect- 2522292

2016-08-02 09:12:05,872 : --------- beginning of crash
2016-08-02 09:12:05,872 : 08-02 09:12:06.318  3335 30999 E AndroidRuntime: FATAL EXCEPTION: IntentService[ContactSaveService]
2016-08-02 09:12:05,872 : 08-02 09:12:06.318  3335 30999 E AndroidRuntime: Process: com.android.contacts, PID: 3335
2016-08-02 09:12:05,872 : 08-02 09:12:06.318  3335 30999 E AndroidRuntime: android.database.sqlite.SQLiteException: unable to open database file (code 14)
2016-08-02 09:12:05,872 : 08-02 09:12:06.318  3335 30999 E AndroidRuntime: 	at android.database.DatabaseUtils.readExceptionFromParcel(DatabaseUtils.java:179)
2016-08-02 09:12:05,872 : 08-02 09:12:06.318  3335 30999 E AndroidRuntime: 	at android.database.DatabaseUtils.readExceptionFromParcel(DatabaseUtils.java:135)
2016-08-02 09:12:05,872 : 08-02 09:12:06.318  3335 30999 E AndroidRuntime: 	at android.content.ContentProviderProxy.delete(ContentProviderNative.java:544)
2016-08-02 09:12:05,872 : 08-02 09:12:06.318  3335 30999 E AndroidRuntime: 	at android.content.ContentResolver.delete(ContentResolver.java:1330)
2016-08-02 09:12:05,872 : 08-02 09:12:06.318  3335 30999 E AndroidRuntime: 	at com.android.contacts.ContactSaveService.saveContact(ContactSaveService.java:478)
2016-08-02 09:12:05,872 : 08-02 09:12:06.318  3335 30999 E AndroidRuntime: 	at com.android.contacts.ContactSaveService.onHandleIntent(ContactSaveService.java:222)
2016-08-02 09:12:05,872 : 08-02 09:12:06.318  3335 30999 E AndroidRuntime: 	at android.app.IntentService$ServiceHandler.handleMessage(IntentService.java:66)
2016-08-02 09:12:05,872 : 08-02 09:12:06.318  3335 30999 E AndroidRuntime: 	at android.os.Handler.dispatchMessage(Handler.java:102)
2016-08-02 09:12:05,872 : 08-02 09:12:06.318  3335 30999 E AndroidRuntime: 	at android.os.Looper.loop(Looper.java:148)
2016-08-02 09:12:05,872 : 08-02 09:12:06.318  3335 30999 E AndroidRuntime: 	at android.os.HandlerThread.run(HandlerThread.java:61)


2016-08-02 08:35:20,253 : 08-02 08:35:20.715 D/AndroidRuntime(26706): &gt;&gt;&gt;&gt;&gt;&gt; START com.android.internal.os.RuntimeInit uid 2000 &lt;&lt;&lt;&lt;&lt;&lt;
2016-08-02 08:35:20,253 : 08-02 08:35:20.718 D/AndroidRuntime(26706): CheckJNI is OFF
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 70ef3000-71c52000 rw-p 00000000 fd:01 1835015                            /data/local/tmp/dalvik-cache/arm64/system@framework@boot.art
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 55885e4000-55885e8000 r-xp 00000000 fd:00 512                            /system/bin/app_process64
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 55885f8000-55885f9000 r--p 00004000 fd:00 512                            /system/bin/app_process64
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 55885f9000-55885fa000 rw-p 00005000 fd:00 512                            /system/bin/app_process64
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 7f99ca8000-7f9bc73000 r--p 00000000 fd:00 1638                           /system/framework/arm64/boot.oat
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 7f9bc73000-7f9de7f000 r-xp 01fcb000 fd:00 1638                           /system/framework/arm64/boot.oat
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 7f9de7f000-7f9de80000 rw-p 041d7000 fd:00 1638                           /system/framework/arm64/boot.oat
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 7f9de80000-7f9dec0000 rw-p 00000000 00:00 0                              [anon:libc_malloc]
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 7f9def6000-7f9e4d9000 r-xp 00000000 fd:00 2256                           /system/lib64/libart.so
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 7f9e4d9000-7f9e4e8000 ---p 00000000 00:00 0 
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 7f9e4e8000-7f9e4fb000 r--p 005ec000 fd:00 2256                           /system/lib64/libart.so
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 7f9e4fb000-7f9e4fd000 rw-p 005ff000 fd:00 2256                           /system/lib64/libart.so
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 7f9e4fd000-7f9e500000 rw-p 00000000 00:00 0 
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 7f9e500000-7f9e580000 rw-p 00000000 00:00 0                              [anon:libc_malloc]
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 7f9e586000-7f9e5ad000 r--p 00d5f000 fd:01 1835015                        /data/local/tmp/dalvik-cache/arm64/system@framework@boot.art
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 7f9e5ad000-7f9e5ae000 r-xp 00000000 fd:00 2431                           /system/lib64/libsigchain.so
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 7f9e5ae000-7f9e5bd000 ---p 00000000 00:00 0 
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 7f9e5bd000-7f9e5be000 r--p 00000000 fd:00 2431                           /system/lib64/libsigchain.so
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 7f9e5be000-7f9e5bf000 rw-p 00001000 fd:00 2431                           /system/lib64/libsigchain.so
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 7f9e5bf000-7f9e5ea000 r-xp 00000000 fd:00 2285                           /system/lib64/libdashplayer.so
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 7f9e5ea000-7f9e5f9000 ---p 00000000 00:00 0 
2016-08-02 08:35:20,253 : 08-02 08:35:20.722 W/art     (26706): 7f9e5f9000-7f9e5fb000 r--p 0002b000 fd:00 2285                           /system/lib64/libdashplayer.so
2016-08-02 08:35:20,253 : 08-02 08:35:20.723 W/art     (26706): 7f9e5fb000-7f9e5fc000 rw-p 0002d000 fd:00 2285                           /system/lib64/libdashplayer.so
2016-08-02 08:35:20,253 : 08-02 08:35:20.723 W/art     (26706): 7f9e5fc000-7f9e630000 r-xp 00000000 fd:00 2478                           /system/lib64/libstagefright_wfd.so
2016-08-02 08:35:20,253 : 08-02 08:35:20.723 W/art     (26706): 7f9e630000-7f9e640000 ---p 00000000 00:00 0 
2016-08-02 08:35:20,253 : 08-02 08:35:20.723 W/art     (26706): 7f9e640000-7f9e643000 r--p 00036000 fd:00 2478                           /system/lib64/libstagefright_wfd

2016-08-02 08:24:51,348 : 08-02 08:24:51.813     0     0 E binder  : 22509: binder_alloc_buf failed to map pages in userspace, no vma


2016-08-02 09:11:27,558 : 08-02 09:11:28.018 E/JavaBinder( 3319): java.lang.RuntimeException: Could not write CursorWindow to Parcel due to error -24.
2016-08-02 09:11:27,558 : 08-02 09:11:28.018 E/JavaBinder( 3319): 	at android.database.CursorWindow.nativeWriteToParcel(Native Method)
2016-08-02 09:11:27,558 : 08-02 09:11:28.018 E/JavaBinder( 3319): 	at android.database.CursorWindow.writeToParcel(CursorWindow.java:705)
2016-08-02 09:11:27,558 : 08-02 09:11:28.018 E/JavaBinder( 3319): 	at android.database.BulkCursorDescriptor.writeToParcel(BulkCursorDescriptor.java:63)
2016-08-02 09:11:27,558 : 08-02 09:11:28.018 E/JavaBinder( 3319): 	at android.content.ContentProviderNative.onTransact(ContentProviderNative.java:127)
2016-08-02 09:11:27,558 : 08-02 09:11:28.018 E/JavaBinder( 3319): 	at android.os.Binder.execTransact(Binder.java:453)

2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): A resource was acquired at attached stack trace but never released. See java.io.Closeable for information on avoiding resource leaks.
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): java.lang.Throwable: Explicit termination method 'close' not called
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at dalvik.system.CloseGuard.open(CloseGuard.java:180)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.content.ContentResolver$CursorWrapperInner.&lt;init&gt;(ContentResolver.java:2510)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.content.ContentResolver.query(ContentResolver.java:517)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.content.ContentResolver.query(ContentResolver.java:435)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.content.AsyncQueryHandler$WorkerHandler.handleMessage(AsyncQueryHandler.java:79)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.os.Handler.dispatchMessage(Handler.java:102)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.os.Looper.loop(Looper.java:148)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.os.HandlerThread.run(HandlerThread.java:61)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 W/CursorWrapperInner( 3335): Cursor finalized without prior close()
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): A resource was acquired at attached stack trace but never released. See java.io.Closeable for information on avoiding resource leaks.
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): java.lang.Throwable: Explicit termination method 'close' not called
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at dalvik.system.CloseGuard.open(CloseGuard.java:180)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.database.CursorWindow.&lt;init&gt;(CursorWindow.java:141)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.database.CursorWindow.&lt;init&gt;(CursorWindow.java:42)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.database.CursorWindow$1.createFromParcel(CursorWindow.java:685)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.database.CursorWindow$1.createFromParcel(CursorWindow.java:683)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.database.BulkCursorDescriptor.readFromParcel(BulkCursorDescriptor.java:75)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.database.BulkCursorDescriptor$1.createFromParcel(BulkCursorDescriptor.java:34)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.database.BulkCursorDescriptor$1.createFromParcel(BulkCursorDescriptor.java:30)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.content.ContentProviderProxy.query(ContentProviderNative.java:424)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.content.ContentResolver.query(ContentResolver.java:493)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.content.ContentResolver.query(ContentResolver.java:435)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.content.AsyncQueryHandler$WorkerHandler.handleMessage(AsyncQueryHandler.java:79)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.os.Handler.dispatchMessage(Handler.java:102)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.os.Looper.loop(Looper.java:148)
2016-08-02 08:43:48,863 : 08-02 08:43:49.322 E/StrictMode( 3335): 	at android.os.HandlerThread.run(HandlerThread.java:61)




Filefile=</rich_text>
			<rich_text foreground="#000080">new</rich_text>
			<rich_text>File(getFilesDir(),</rich_text>
			<rich_text foreground="#008000">&quot;a.txt&quot;</rich_text>
			<rich_text>);
file.createNewFile();
BufferedReaderin;
</rich_text>
			<rich_text foreground="#000080">for</rich_text>
			<rich_text>(</rich_text>
			<rich_text foreground="#000080">int</rich_text>
			<rich_text>i=</rich_text>
			<rich_text foreground="#0000ff">0</rich_text>
			<rich_text>;i&lt;</rich_text>
			<rich_text foreground="#0000ff">100</rich_text>
			<rich_text>;i++){
</rich_text>
			<rich_text foreground="#808080">//FileDescriptorfd=newFileDescriptor();
//FileOutputStreamfout=newFileOutputStream(FileDescriptor.out);
</rich_text>
			<rich_text foreground="#000080">try</rich_text>
			<rich_text>{
in=</rich_text>
			<rich_text foreground="#000080">new</rich_text>
			<rich_text>BufferedReader(</rich_text>
			<rich_text foreground="#000080">new</rich_text>
			<rich_text>FileReader(file));

</rich_text>
			<rich_text foreground="#808080">//fout.write('A');
</rich_text>
			<rich_text>}</rich_text>
			<rich_text foreground="#000080">catch</rich_text>
			<rich_text>(IOExceptione){
e.printStackTrace();
}</rich_text>
			<rich_text foreground="#000080">finally</rich_text>
			<rich_text>{

}

}


</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="有意思的Bug" prog_lang="custom-colors" readonly="False" tags="" unique_id="187">
			<rich_text></rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="开发项目" prog_lang="custom-colors" readonly="False" tags="" unique_id="26">
		<rich_text>528461
667583</rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="应用锁" prog_lang="custom-colors" readonly="False" tags="" unique_id="27">
			<rich_text>需求： 通过在Setting菜单中添加一个入口，让用户选择哪些应用需要加锁，当用户开启并选择需要加锁以后，会在启动应用的时候弹出加锁界面
启动的机制加在Activity.java 中, 目前会有一个问题就是一个应用启动的时候启动多个Activity这个机制就会失效

onCreate之前需要加入代码， 如在startActivityForresult ，这样可以确保出现的解锁界面不会有一个跳转的过程
onResume过程中也需要加入代码，因为如果应用已经解锁，在不关闭该应用情况下锁屏，然后在开屏幕， 解锁就会失效，但是再次进入该应用不会出现锁

1） 设需要加锁的状态
2） 获取需要加锁的状态
3） 解锁的时效


来控制应用锁的开闭
Settings.System.getInt(mService.mContext.getContentResolver(), &quot;tct_app_lock&quot;, 0) == 1


ActivityStackSupervisor#checkIsNeedLock {
 1. 锁屏已经存在的时候，不需要再显示Lock
 2. 灭屏状态下，不需要显示Lock
 
 调用PackageManagerService#getApplicationLockStatus获取应用的锁状态{
     该应用是否需要加锁的状态存储在PackageUserState的lockState中， 通过Settings.mPackages.get(packagename获取)
      0表示不需要加锁
      1表示需要加锁
      2表示需要加锁已经解锁
           
 
     @Override
    public int getApplicationLockStatus(String packageName){
        synchronized (mPackages) {
            android.util.Log.d(TAG, &quot;getApplicationLockStatus&quot; + packageName);
            //这个Settings对象为 m8996/frameworks/base/services/core/java/com/android/server/pm/Settings.java
            final PackageSetting pkg = </rich_text>
			<rich_text weight="heavy">mSettings.mPackages.get(packageName);</rich_text>
			<rich_text>
            if (pkg == null) {
                return 0; // MODIFIED by kai.wang1, 2016-07-21,BUG-2251516
            }
            return pkg.getLockState(0);
        }
    }
 
 
 
 }
 
 如果发现需要Lock 发送 intent =  &quot;com.tct.action.UNLOCK_APP&quot; ， intent同时传递包名
}

checkIsNeedLock  ActivityStackSupervisor#startActivityLocked 在onCreate中check
 在ActivityStackSupervisor#topRunningActivityLocked 在onResume中check

TaskViewThumbnail.java   RecentTask中lock的Task的隐藏
    /** Binds the thumbnail view to the task */
    void rebindToTask(Task t) {
        /* MODIFIED-BEGIN by chunhua.liu-nb, 2016-05-16,BUG-1531445*/
        String packageName = t.key.baseIntent.getComponent().getPackageName();
        PackageManager pm = mContext.getPackageManager();
        /* MODIFIED-BEGIN by kai.wang1, 2016-07-19,BUG-2340760*/
        int state;
        try {
           </rich_text>
			<rich_text weight="heavy"> state = pm.getApplicationLockStatus(packageName);</rich_text>
			<rich_text>
        } catch (IllegalArgumentException e) {
            state = 0;
            // TODO: handle exception
        }
        /* MODIFIED-END by kai.wang1,BUG-2340760*/
        Log.d(&quot;TaskViewThumbnail&quot;,&quot;packageName = &quot;+packageName+&quot;;state = &quot;+state);
        if (t.thumbnail != null) {
            if(state == 1){
                setThumbnail(BitmapFactory.decodeResource(mContext.getResources(),R.drawable.app_lock_bg));
            }else{
                setThumbnail(t.thumbnail);
            }
            /* MODIFIED-END by chunhua.liu-nb,BUG-1531445*/
        } else {
            setThumbnail(null);
        }
    }

PackageManagerService#setApplicationLockStatus 
在用户选中需要加锁的应用以后设置PackageUserState的lockState为1
{
    @Override
    public void setApplicationLockStatus(String packageName, int newState){
        synchronized (mPackages) {
            android.util.Log.d(TAG, &quot;setApplicationLockStatus&quot;);
            final PackageSetting pkgSetting = mSettings.mPackages.get(packageName);
            if (pkgSetting == null) {
                throw new IllegalArgumentException(
                        &quot;Unknown component: &quot; + packageName);
            }
            pkgSetting.setLockState(newState, 0);
            scheduleWritePackageRestrictionsLocked(0);
        }
    }

}

ApplicationLockActivity.java 为应用锁的设置菜单


解锁以后的时效，在screen_off的时候失效

else if(intent.getAction().equals(Intent.</rich_text>
			<rich_text weight="heavy">ACTION_SCREEN_OFF</rich_text>
			<rich_text>)){
                Log.d(TAG, &quot;intent.cation.screen off&quot;);
                Intent offIntent = new Intent();
                offIntent.setClass(mContext, BatteryTimerService.class);
                /* MODIFIED-BEGIN by feng.tang, 2016-09-06,BUG-2777361*/
                if (Settings.System.getInt(context.getContentResolver(), &quot;tct_app_lock&quot;, 0) == 1) {
                    </rich_text>
			<rich_text weight="heavy">reSetLockState</rich_text>
			<rich_text>();
                }
                /* MODIFIED-END by feng.tang,BUG-2777361*/
                startService(offIntent);
           }
            
            
    private void reSetLockState () {
        localPackageManager = mContext.getPackageManager();
        ActivityManager activityManager = (ActivityManager) mContext.getSystemService(ACTIVITY_SERVICE);
        Intent localIntent = new Intent(&quot;android.intent.action.MAIN&quot;, null);
        localIntent.addCategory(&quot;android.intent.category.LAUNCHER&quot;);
        List&lt;ResolveInfo&gt; mAllAppList = localPackageManager.queryIntentActivities(localIntent, 0);
        Collections.sort(mAllAppList, new ResolveInfo.DisplayNameComparator(localPackageManager));
        for (int i = 0; i &lt; mAllAppList.size(); ++i) {
            ResolveInfo appInfo = (ResolveInfo) mAllAppList.get(i);
            int locaState =
                    localPackageManager.getApplicationLockStatus(appInfo.activityInfo.packageName);
            String packgeName = &quot;&quot;;
            if (locaState == 2 || locaState == 1) {
                Log.d(TAG, &quot;xz-&quot; + appInfo.activityInfo.packageName);
                List&lt;ActivityManager.RunningAppProcessInfo&gt; tasks = activityManager
                        .getRunningAppProcesses();
                packgeName = tasks.get(0).processName;
   //             if (packgeName.equals(appInfo.activityInfo.packageName)){
   //                 Intent intent = new Intent(&quot;com.tct.action.UNLOCK_APP&quot;);
   //                 intent.putExtra(&quot;packageName&quot;, appInfo.activityInfo.packageName);
   //                 mContext.sendBroadcast(intent);
   //             }
               </rich_text>
			<rich_text weight="heavy"> localPackageManager.setApplicationLockStatus(appInfo.activityInfo.packageName, 1)</rich_text>
			<rich_text>;
            }
        }
    }




========

</rich_text>
			<rich_text foreground="#cc7832">final void</rich_text>
			<rich_text> performResume(){
</rich_text>
			<rich_text foreground="#cc7832">try</rich_text>
			<rich_text>{

        Log.i(</rich_text>
			<rich_text foreground="#6a8759">&quot;mysettings&quot;</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text foreground="#6a8759">&quot;TCT_APP_LOCK:&quot;</rich_text>
			<rich_text>+Settings.System.getInt(getContentResolver()</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>Settings.System.TCT_APP_LOCK))</rich_text>
			<rich_text foreground="#cc7832">;
        if</rich_text>
			<rich_text>(Settings.System.getInt(getContentResolver()</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>Settings.System.TCT_FINGERPRINTS_LOCK_FLAG)!=</rich_text>
			<rich_text foreground="#6897bb">1</rich_text>
			<rich_text>&amp;&amp;</rich_text>
			<rich_text foreground="#808080">//thisactivityisnotfingerprintslockactivity
</rich_text>
			<rich_text>        Settings.System.getInt(getContentResolver()</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>Settings.System.TCT_APP_LOCK)==</rich_text>
			<rich_text foreground="#6897bb">1</rich_text>
			<rich_text>)
        checkIsNeedLock()</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>        }</rich_text>
			<rich_text foreground="#cc7832">catch</rich_text>
			<rich_text>(Exceptione){

    }
  ... ...
}


</rich_text>
			<rich_text foreground="#cc7832">public void</rich_text>
			<rich_text> checkIsNeedLock(){
</rich_text>
			<rich_text foreground="#cc7832">try</rich_text>
			<rich_text>{
        </rich_text>
			<rich_text foreground="#cc7832">long</rich_text>
			<rich_text>begin=System.currentTimeMillis()</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>        Uriuri=Uri.parse(</rich_text>
			<rich_text foreground="#6a8759">&quot;content://com.android.settings/fingerprints&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>        StringcurPackageName=getPackageName()</rich_text>
			<rich_text foreground="#cc7832">;

</rich_text>
			<rich_text>        </rich_text>
			<rich_text foreground="#808080">//getthecursorwhichpackageName==curPackageName

</rich_text>
			<rich_text>        Cursorcursor=getContentResolver().query(uri</rich_text>
			<rich_text foreground="#cc7832">,
        new</rich_text>
			<rich_text>String[]{</rich_text>
			<rich_text foreground="#6a8759">&quot;packageName&quot;
</rich_text>
			<rich_text>        </rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text foreground="#6a8759">&quot;isNeedLock&quot;</rich_text>
			<rich_text foreground="#cc7832">,
</rich_text>
			<rich_text>        </rich_text>
			<rich_text foreground="#6a8759">&quot;hasLocked&quot;</rich_text>
			<rich_text>}
        </rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text foreground="#6a8759">&quot;packageName=?&quot;</rich_text>
			<rich_text foreground="#cc7832">,
        new</rich_text>
			<rich_text>String[]{curPackageName}</rich_text>
			<rich_text foreground="#cc7832">,null,null</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>        Log.i(</rich_text>
			<rich_text foreground="#6a8759">&quot;fingerprints&quot;</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text foreground="#6a8759">&quot;cursor:&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;

        if</rich_text>
			<rich_text>(cursor!=</rich_text>
			<rich_text foreground="#cc7832">null</rich_text>
			<rich_text>&amp;&amp;cursor.getCount()&gt;</rich_text>
			<rich_text foreground="#6897bb">0</rich_text>
			<rich_text>){
        Log.i(</rich_text>
			<rich_text foreground="#6a8759">&quot;fingerprints&quot;</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text foreground="#6a8759">&quot;cursor.getcount&gt;0&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>        cursor.moveToFirst()</rich_text>
			<rich_text foreground="#cc7832">;
        int</rich_text>
			<rich_text>isNeedLockIndex=cursor.getColumnIndex(</rich_text>
			<rich_text foreground="#6a8759">&quot;isNeedLock&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
        int</rich_text>
			<rich_text>hasLockedIndex=cursor.getColumnIndex(</rich_text>
			<rich_text foreground="#6a8759">&quot;hasLocked&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>        Log.i(</rich_text>
			<rich_text foreground="#6a8759">&quot;fingerprints&quot;</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text foreground="#6a8759">&quot;isNeedLock:&quot;</rich_text>
			<rich_text>+cursor.getString(isNeedLockIndex))</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>        Log.i(</rich_text>
			<rich_text foreground="#6a8759">&quot;fingerprints&quot;</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text foreground="#6a8759">&quot;hasLocked:&quot;</rich_text>
			<rich_text>+cursor.getString(hasLockedIndex))</rich_text>
			<rich_text foreground="#cc7832">;

        if</rich_text>
			<rich_text>(cursor.getString(isNeedLockIndex).equals(</rich_text>
			<rich_text foreground="#6a8759">&quot;1&quot;</rich_text>
			<rich_text>)
        &amp;&amp;cursor.getString(hasLockedIndex).equals(</rich_text>
			<rich_text foreground="#6a8759">&quot;0&quot;</rich_text>
			<rich_text>)){

        Log.i(</rich_text>
			<rich_text foreground="#6a8759">&quot;fingerprints&quot;</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text foreground="#6a8759">&quot;inif&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;


</rich_text>
			<rich_text>        Intentintent=</rich_text>
			<rich_text foreground="#cc7832">new</rich_text>
			<rich_text>Intent()</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>        intent.setAction(</rich_text>
			<rich_text foreground="#6a8759">&quot;com.android.settings.fingerprints.FINGERPRINTS_ACTIVITY&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>        intent.addCategory(Intent.CATEGORY_DEFAULT)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>        </rich_text>
			<rich_text foreground="#808080">//intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
</rich_text>
			<rich_text>        intent.putExtra(</rich_text>
			<rich_text foreground="#6a8759">&quot;packageName&quot;</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>getPackageName())</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>        startActivity(intent)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>        overridePendingTransition(</rich_text>
			<rich_text foreground="#6897bb">0</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text foreground="#6897bb">0</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;

</rich_text>
			<rich_text>        </rich_text>
			<rich_text foreground="#808080">//Viewview=getLayoutInflater().inflate(R.layout.fingerprints_lock,null);
        //WindowManagerwindowManager=(WindowManager)getApplicationContext().getSystemService(WINDOW_SERVICE);
        ///windowManager.addView(view,null);
        //setContentView(fingerprintsLockView);
        //getApplicationContext().gets
        //setContentView(R.layout.fingerprints_lock);
        //setContentView(R.layout.fingerprints_lock);
</rich_text>
			<rich_text>        }
        }
        cursor.close()</rich_text>
			<rich_text foreground="#cc7832">;

</rich_text>
			<rich_text>        Log.i(</rich_text>
			<rich_text foreground="#6a8759">&quot;fingerprints&quot;</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text foreground="#6a8759">&quot;takes:&quot;</rich_text>
			<rich_text>+(System.currentTimeMillis()-begin))</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>        }</rich_text>
			<rich_text foreground="#cc7832">catch</rich_text>
			<rich_text>(SQLExceptione){
        e.printStackTrace()</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>        }</rich_text>
			<rich_text foreground="#cc7832">catch</rich_text>
			<rich_text>(Exceptione){
        e.printStackTrace()</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>        }
}



































</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Cpu usage " prog_lang="custom-colors" readonly="False" tags="" unique_id="28">
			<rich_text>功能描述： 在开发者模式中的CPU Usage中加入内存占用显示

打开CPU Usage会启动一个Service叫做LoadAverageService

//首先获取的是整体内存的占用情况

ActivityManager.MemoryInfomem Info=</rich_text>
			<rich_text foreground="#cc7832">new</rich_text>
			<rich_text> ActivityManager.MemoryInfo()</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>mActivityManager.getMemoryInfo(memInfo)</rich_text>
			<rich_text foreground="#cc7832">;
long</rich_text>
			<rich_text> totalMem=memInfo.totalMem</rich_text>
			<rich_text foreground="#cc7832">;
long</rich_text>
			<rich_text> availMem=memInfo.availMem</rich_text>
			<rich_text foreground="#cc7832">;

</rich_text>
			<rich_text>DecimalFormatdecimalFormat=</rich_text>
			<rich_text foreground="#cc7832">new</rich_text>
			<rich_text>DecimalFormat(</rich_text>
			<rich_text foreground="#6a8759">&quot;0.00&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>StringmemInfoShow=decimalFormat.format(availMem/(</rich_text>
			<rich_text foreground="#cc7832">float</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#6897bb">1024</rich_text>
			<rich_text>/(</rich_text>
			<rich_text foreground="#cc7832">float</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#6897bb">1024</rich_text>
			<rich_text>/(</rich_text>
			<rich_text foreground="#cc7832">float</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#6897bb">1024</rich_text>
			<rich_text>)+</rich_text>
			<rich_text foreground="#6a8759">&quot;GB/&quot;
</rich_text>
			<rich_text>+decimalFormat.format(totalMem/(</rich_text>
			<rich_text foreground="#cc7832">float</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#6897bb">1024</rich_text>
			<rich_text>/(</rich_text>
			<rich_text foreground="#cc7832">float</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#6897bb">1024</rich_text>
			<rich_text>/(</rich_text>
			<rich_text foreground="#cc7832">float</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#6897bb">1024</rich_text>
			<rich_text>)+</rich_text>
			<rich_text foreground="#6a8759">&quot;GB&quot;</rich_text>
			<rich_text foreground="#cc7832">;

</rich_text>
			<rich_text>StringmemInfoShowSpace=getShowSpace(</rich_text>
			<rich_text foreground="#6897bb">4</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
int</rich_text>
			<rich_text>memInfoShowWidth=(</rich_text>
			<rich_text foreground="#cc7832">int</rich_text>
			<rich_text>)mLoadPaint.measureText(memInfoShow)+(</rich_text>
			<rich_text foreground="#cc7832">int</rich_text>
			<rich_text>)mLoadPaint.measureText(memInfoShowSpace)</rich_text>
			<rich_text foreground="#cc7832">;

</rich_text>
			<rich_text>canvas.drawText(stats.mLoadText+memInfoShowSpace+memInfoShow</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>RIGHT-paddingRight-stats.mLoadWidth-</rich_text>
			<rich_text foreground="#6897bb">1</rich_text>
			<rich_text>-memInfoShowWidth</rich_text>
			<rich_text foreground="#cc7832">,
</rich_text>
			<rich_text>y-</rich_text>
			<rich_text foreground="#6897bb">1</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>mShadowPaint)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>canvas.drawText(stats.mLoadText+memInfoShowSpace+memInfoShow</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>RIGHT-paddingRight-stats.mLoadWidth-</rich_text>
			<rich_text foreground="#6897bb">1</rich_text>
			<rich_text>-memInfoShowWidth</rich_text>
			<rich_text foreground="#cc7832">,
</rich_text>
			<rich_text>y+</rich_text>
			<rich_text foreground="#6897bb">1</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>mShadowPaint)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>canvas.drawText(stats.mLoadText+memInfoShowSpace+memInfoShow</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>RIGHT-paddingRight-stats.mLoadWidth+</rich_text>
			<rich_text foreground="#6897bb">1</rich_text>
			<rich_text>-memInfoShowWidth</rich_text>
			<rich_text foreground="#cc7832">,
</rich_text>
			<rich_text>y-</rich_text>
			<rich_text foreground="#6897bb">1</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>mShadow2Paint)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>canvas.drawText(stats.mLoadText+memInfoShowSpace+memInfoShow</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>RIGHT-paddingRight-stats.mLoadWidth+</rich_text>
			<rich_text foreground="#6897bb">1</rich_text>
			<rich_text>-memInfoShowWidth</rich_text>
			<rich_text foreground="#cc7832">,
</rich_text>
			<rich_text>y+</rich_text>
			<rich_text foreground="#6897bb">1</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>mShadow2Paint)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>canvas.drawText(stats.mLoadText+memInfoShowSpace+memInfoShow</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>RIGHT-paddingRight-stats.mLoadWidth-memInfoShowWidth</rich_text>
			<rich_text foreground="#cc7832">,
</rich_text>
			<rich_text>y</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>mLoadPaint)</rich_text>
			<rich_text foreground="#cc7832">;</rich_text>
			<rich_text>

=====================================================================

//获取每个内存的占用情况

Debug.MemoryInfo[]memoryInfo=</rich_text>
			<rich_text foreground="#cc7832">null;
int</rich_text>
			<rich_text>memSize</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>StringshowMemForProc=</rich_text>
			<rich_text foreground="#cc7832">null;
int</rich_text>
			<rich_text>[]workingPids=</rich_text>
			<rich_text foreground="#cc7832">newint</rich_text>
			<rich_text>[N]</rich_text>
			<rich_text foreground="#cc7832">;
for</rich_text>
			<rich_text>(</rich_text>
			<rich_text foreground="#cc7832">int</rich_text>
			<rich_text>i=</rich_text>
			<rich_text foreground="#6897bb">0</rich_text>
			<rich_text foreground="#cc7832">;</rich_text>
			<rich_text>i&lt;N</rich_text>
			<rich_text foreground="#cc7832">;</rich_text>
			<rich_text>i++){
workingPids[i]=stats.getWorkingStats(i).pid</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>}
memoryInfo=mActivityManager.getProcessMemoryInfo(workingPids)</rich_text>
			<rich_text foreground="#cc7832">;</rich_text>
			<rich_text>


</rich_text>
			<rich_text foreground="#cc7832">for</rich_text>
			<rich_text>(</rich_text>
			<rich_text foreground="#cc7832">int</rich_text>
			<rich_text>i=</rich_text>
			<rich_text foreground="#6897bb">0</rich_text>
			<rich_text foreground="#cc7832">;</rich_text>
			<rich_text>i&lt;N</rich_text>
			<rich_text foreground="#cc7832">;</rich_text>
			<rich_text>i++){
....

memSize=memoryInfo[i].getTotalPss()</rich_text>
			<rich_text foreground="#cc7832">;
if</rich_text>
			<rich_text>(memSize&gt;</rich_text>
			<rich_text foreground="#6897bb">1024</rich_text>
			<rich_text>){
</rich_text>
			<rich_text foreground="#cc7832">float</rich_text>
			<rich_text>tmp=memSize/(</rich_text>
			<rich_text foreground="#cc7832">float</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#6897bb">1024.00</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>showMemForProc=decimalFormat.format(tmp)+</rich_text>
			<rich_text foreground="#6a8759">&quot;MB&quot;</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>}</rich_text>
			<rich_text foreground="#cc7832">else</rich_text>
			<rich_text>{
showMemForProc=memSize+</rich_text>
			<rich_text foreground="#6a8759">&quot;KB&quot;</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>}

StringshowMemForProcSpace=getShowSpace(</rich_text>
			<rich_text foreground="#6897bb">2</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;

int</rich_text>
			<rich_text>showMemForProcWidth=(</rich_text>
			<rich_text foreground="#cc7832">int</rich_text>
			<rich_text>)mLoadPaint.measureText(showMemForProc)+(</rich_text>
			<rich_text foreground="#cc7832">int</rich_text>
			<rich_text>)mLoadPaint.measureText(showMemForProcSpace)</rich_text>
			<rich_text foreground="#cc7832">;

</rich_text>
			<rich_text>canvas.drawText(st.name+showMemForProcSpace+showMemForProc</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>RIGHT-paddingRight-st.nameWidth-</rich_text>
			<rich_text foreground="#6897bb">1</rich_text>
			<rich_text>-showMemForProcWidth</rich_text>
			<rich_text foreground="#cc7832">,
</rich_text>
			<rich_text>y-</rich_text>
			<rich_text foreground="#6897bb">1</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>mShadowPaint)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>canvas.drawText(st.name+showMemForProcSpace+showMemForProc</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>RIGHT-paddingRight-st.nameWidth-</rich_text>
			<rich_text foreground="#6897bb">1</rich_text>
			<rich_text>-showMemForProcWidth</rich_text>
			<rich_text foreground="#cc7832">,
</rich_text>
			<rich_text>y+</rich_text>
			<rich_text foreground="#6897bb">1</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>mShadowPaint)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>canvas.drawText(st.name+showMemForProcSpace+showMemForProc</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>RIGHT-paddingRight-st.nameWidth+</rich_text>
			<rich_text foreground="#6897bb">1</rich_text>
			<rich_text>-showMemForProcWidth</rich_text>
			<rich_text foreground="#cc7832">,
</rich_text>
			<rich_text>y-</rich_text>
			<rich_text foreground="#6897bb">1</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>mShadow2Paint)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>canvas.drawText(st.name+showMemForProcSpace+showMemForProc</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>RIGHT-paddingRight-st.nameWidth+</rich_text>
			<rich_text foreground="#6897bb">1</rich_text>
			<rich_text>-showMemForProcWidth</rich_text>
			<rich_text foreground="#cc7832">,
</rich_text>
			<rich_text>y+</rich_text>
			<rich_text foreground="#6897bb">1</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>mShadow2Paint)</rich_text>
			<rich_text foreground="#cc7832">;</rich_text>
			<rich_text>

...

canvas.drawText(st.name+showMemForProcSpace+showMemForProc</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>RIGHT-paddingRight-st.nameWidth-showMemForProcWidth</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>y</rich_text>
			<rich_text foreground="#cc7832">,</rich_text>
			<rich_text>p)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>

}

</rich_text>
			<rich_text foreground="#cc7832">private</rich_text>
			<rich_text>StringgetShowSpace(</rich_text>
			<rich_text foreground="#cc7832">int</rich_text>
			<rich_text>n){
StringBuilderresult=</rich_text>
			<rich_text foreground="#cc7832">new</rich_text>
			<rich_text>StringBuilder()</rich_text>
			<rich_text foreground="#cc7832">;
for</rich_text>
			<rich_text>(</rich_text>
			<rich_text foreground="#cc7832">int</rich_text>
			<rich_text>i=</rich_text>
			<rich_text foreground="#6897bb">0</rich_text>
			<rich_text foreground="#cc7832">;</rich_text>
			<rich_text>i&lt;n</rich_text>
			<rich_text foreground="#cc7832">;</rich_text>
			<rich_text>i++){
result.append(</rich_text>
			<rich_text foreground="#6a8759">&quot;&quot;</rich_text>
			<rich_text>)</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>}
</rich_text>
			<rich_text foreground="#cc7832">return</rich_text>
			<rich_text>result.toString()</rich_text>
			<rich_text foreground="#cc7832">;
</rich_text>
			<rich_text>}


</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Disable MultiUser" prog_lang="custom-colors" readonly="False" tags="" unique_id="35">
			<rich_text>FR:978930 | 528399

As Idol3 4.7 EMMC size is 8G, we must open SD card auto swap function, to set extenal SD card as primary storage.

Extenal SD card not support multi user security.

So we need disable multi user feature in Idol3 4.7 single sim version.

p</rich_text>
			<rich_text weight="heavy">lease add a SDM to control this fature,</rich_text>
			<rich_text> default disable this feature.

SDM value: def_settings_disable_multiuser

Default value: 1 disable it

Optional value: 0 enable 1 disable

Please remember not impact Idol3 5.5, idol3 5.5 need this feature.

So you need add a the SDM in default plf and enable this feature.

And add a the SDM in splf for idol3 4.7 and disable this feature.

=========================================

利用getMaxSupportedUsers函数加入判断实现

在/frameworks/base/core/res/isdm_framework-res.plf中添加字段

&lt;VAR&gt;
&lt;SIMPLE_VAR&gt;
&lt;SDMID&gt;def_settings_disable_multiuser&lt;/SDMID&gt;
&lt;C_NAME&gt;def_settings_disable_multiuser&lt;/C_NAME&gt;
&lt;C_TYPE&gt;eBOOLEAN&lt;/C_TYPE&gt;
&lt;ARRAY&gt;NOT_ARRAY&lt;/ARRAY&gt;
&lt;METATYPE&gt;Boolean&lt;/METATYPE&gt;
&lt;IS_CUSTO&gt;1&lt;/IS_CUSTO&gt;
&lt;FEATURE&gt;tct.framework-res&lt;/FEATURE&gt;
&lt;DESC&gt;whether disable multiuser value 0x00: no(default); value:0x01 yes&lt;/DESC&gt;
&lt;VALUE&gt;</rich_text>
			<rich_text weight="heavy">0x00</rich_text>
			<rich_text>&lt;/VALUE&gt;
&lt;/SIMPLE_VAR&gt;
&lt;/VAR&gt;
通过在VALUE中的值设置是0x01(disable)还是0x00


在UserManager.java中添加
private static boolean Disable_Multiuser;
并在构造函数UserManager中初始化
Disable_Multiuser = mContext.getResources().getBoolean(com.android.internal.R.bool.def_settings_disable_multiuser);


然后在getMaxSupportedUsers中
      if (Disable_Multiuser) {
            return SystemProperties.getInt(&quot;fw.max_users&quot;,1);
        } else {
            return SystemProperties.getInt(&quot;fw.max_users&quot;,
                Resources.getSystem().getInteger(R.integer.config_multiuserMaximumUsers));
        }




</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="双击状态栏实现锁屏" prog_lang="custom-colors" readonly="False" tags="" unique_id="62">
			<rich_text>  
  
 
 目前这部分代码主要几种在以下几个touch事件中：
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarView.java
这个是触发touch的最开始的地方。
然后调用到frameworks/base/packages/SystemUI/src/com/android/systemui 
/statusbar/phone/PanelBar.java
这个里面的ontouch.
frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PanelView.java
这个文件中的ontouch就是执行的最终的地方：
里面的case MotionEvent.ACTION_DOWN:是用来调用statusbar的。
如果这边屏蔽了之后，单次点击就不会出现statusbar的下拉界面了。
但是屏蔽了带来的问题就是普通的下拉操作也无法实现了。

如果不屏蔽这边的功能，单次点击会弹出statusbarheadview。下一次的点击就会 
出发statusbarheaderview的 touch，无法出发PanelView.java的touch。
所以实现双击的时间点就没法判断了。。。。</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="GAPP" prog_lang="custom-colors" readonly="False" tags="" unique_id="37">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Gallery" prog_lang="custom-colors" readonly="False" tags="" unique_id="58">
			<rich_text>AlbumSetPage.java 相册缩略图
AlbumPage 单个相册照片缩略图
PhotePage 单张照片

</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Mix" prog_lang="custom-colors" readonly="False" tags="" unique_id="65">
			<rich_text>1) adb root
    2) adb disable-verity
    3) adb reboot
    4) adb root
    5)adb remount
    6) adb shell
    7) rm -fr /system/priv-app/Music/
    8) reboot
    </rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="FileManager" prog_lang="custom-colors" readonly="False" tags="" unique_id="38">
			<rich_text>FileBrowserActivity为FileManager的显示界面


FileBrowserFragment处理share等操作</rich_text>
		</node>
	</node>
</cherrytree>
